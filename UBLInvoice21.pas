
{******************************************************************************}
{                                                                              }
{                               XML Data Binding                               }
{                                                                              }
{         Generated on: 18/4/2024 12:06:57 PM                                  }
{       Generated from: V:\prototype\UBL-2.1\xsd\maindoc\UBL-Invoice-2.1.xsd   }
{                                                                              }
{******************************************************************************}

unit UBLInvoice21;

interface

uses Xml.xmldom, Xml.XMLDoc, Xml.XMLIntf;

type

{ Forward Decls }

  IXMLInvoiceType = interface;
  IXMLUBLExtensionsType_ext = interface;
  IXMLUBLExtensionType_ext = interface;
  IXMLIDType_cbc = interface;
  IXMLNameType_cbc = interface;
  IXMLExtensionAgencyIDType_ext = interface;
  IXMLExtensionAgencyNameType_ext = interface;
  IXMLExtensionVersionIDType_ext = interface;
  IXMLExtensionAgencyURIType_ext = interface;
  IXMLExtensionURIType_ext = interface;
  IXMLExtensionReasonCodeType_ext = interface;
  IXMLExtensionReasonType_ext = interface;
  IXMLExtensionContentType = interface;
  IXMLUBLVersionIDType_cbc = interface;
  IXMLCustomizationIDType_cbc = interface;
  IXMLProfileIDType_cbc = interface;
  IXMLProfileExecutionIDType_cbc = interface;
  IXMLCopyIndicatorType_cbc = interface;
  IXMLUUIDType_cbc = interface;
  IXMLIssueDateType_cbc = interface;
  IXMLIssueTimeType_cbc = interface;
  IXMLDueDateType_cbc = interface;
  IXMLInvoiceTypeCodeType_cbc = interface;
  IXMLNoteType_cbc = interface;
  IXMLNoteType_cbcList = interface;
  IXMLTaxPointDateType_cbc = interface;
  IXMLDocumentCurrencyCodeType_cbc = interface;
  IXMLTaxCurrencyCodeType_cbc = interface;
  IXMLPricingCurrencyCodeType_cbc = interface;
  IXMLPaymentCurrencyCodeType_cbc = interface;
  IXMLPaymentAlternativeCurrencyCodeType_cbc = interface;
  IXMLAccountingCostCodeType_cbc = interface;
  IXMLAccountingCostType_cbc = interface;
  IXMLLineCountNumericType_cbc = interface;
  IXMLBuyerReferenceType_cbc = interface;
  IXMLPeriodType_cac = interface;
  IXMLPeriodType_cacList = interface;
  IXMLStartDateType_cbc = interface;
  IXMLStartTimeType_cbc = interface;
  IXMLEndDateType_cbc = interface;
  IXMLEndTimeType_cbc = interface;
  IXMLDurationMeasureType_cbc = interface;
  IXMLDescriptionCodeType_cbc = interface;
  IXMLDescriptionCodeType_cbcList = interface;
  IXMLDescriptionType_cbc = interface;
  IXMLDescriptionType_cbcList = interface;
  IXMLOrderReferenceType_cac = interface;
  IXMLSalesOrderIDType_cbc = interface;
  IXMLCustomerReferenceType_cbc = interface;
  IXMLOrderTypeCodeType_cbc = interface;
  IXMLDocumentReferenceType_cac = interface;
  IXMLDocumentReferenceType_cacList = interface;
  IXMLDocumentTypeCodeType_cbc = interface;
  IXMLDocumentTypeType_cbc = interface;
  IXMLXPathType_cbc = interface;
  IXMLXPathType_cbcList = interface;
  IXMLLanguageIDType_cbc = interface;
  IXMLLocaleCodeType_cbc = interface;
  IXMLVersionIDType_cbc = interface;
  IXMLDocumentStatusCodeType_cbc = interface;
  IXMLDocumentDescriptionType_cbc = interface;
  IXMLDocumentDescriptionType_cbcList = interface;
  IXMLAttachmentType_cac = interface;
  IXMLEmbeddedDocumentBinaryObjectType_cbc = interface;
  IXMLExternalReferenceType_cac = interface;
  IXMLURIType_cbc = interface;
  IXMLDocumentHashType_cbc = interface;
  IXMLHashAlgorithmMethodType_cbc = interface;
  IXMLExpiryDateType_cbc = interface;
  IXMLExpiryTimeType_cbc = interface;
  IXMLMimeCodeType_cbc = interface;
  IXMLFormatCodeType_cbc = interface;
  IXMLEncodingCodeType_cbc = interface;
  IXMLCharacterSetCodeType_cbc = interface;
  IXMLFileNameType_cbc = interface;
  IXMLPartyType_cac = interface;
  IXMLPartyType_cacList = interface;
  IXMLMarkCareIndicatorType_cbc = interface;
  IXMLMarkAttentionIndicatorType_cbc = interface;
  IXMLWebsiteURIType_cbc = interface;
  IXMLLogoReferenceIDType_cbc = interface;
  IXMLEndpointIDType_cbc = interface;
  IXMLIndustryClassificationCodeType_cbc = interface;
  IXMLPartyIdentificationType_cac = interface;
  IXMLPartyIdentificationType_cacList = interface;
  IXMLPartyNameType_cac = interface;
  IXMLPartyNameType_cacList = interface;
  IXMLLanguageType_cac = interface;
  IXMLAddressType_cac = interface;
  IXMLAddressType_cacList = interface;
  IXMLAddressTypeCodeType_cbc = interface;
  IXMLAddressFormatCodeType_cbc = interface;
  IXMLPostboxType_cbc = interface;
  IXMLFloorType_cbc = interface;
  IXMLRoomType_cbc = interface;
  IXMLStreetNameType_cbc = interface;
  IXMLAdditionalStreetNameType_cbc = interface;
  IXMLBlockNameType_cbc = interface;
  IXMLBuildingNameType_cbc = interface;
  IXMLBuildingNumberType_cbc = interface;
  IXMLInhouseMailType_cbc = interface;
  IXMLDepartmentType_cbc = interface;
  IXMLMarkAttentionType_cbc = interface;
  IXMLMarkCareType_cbc = interface;
  IXMLPlotIdentificationType_cbc = interface;
  IXMLCitySubdivisionNameType_cbc = interface;
  IXMLCityNameType_cbc = interface;
  IXMLPostalZoneType_cbc = interface;
  IXMLCountrySubentityType_cbc = interface;
  IXMLCountrySubentityCodeType_cbc = interface;
  IXMLRegionType_cbc = interface;
  IXMLDistrictType_cbc = interface;
  IXMLTimezoneOffsetType_cbc = interface;
  IXMLAddressLineType_cac = interface;
  IXMLAddressLineType_cacList = interface;
  IXMLLineType_cbc = interface;
  IXMLCountryType_cac = interface;
  IXMLCountryType_cacList = interface;
  IXMLIdentificationCodeType_cbc = interface;
  IXMLLocationCoordinateType_cac = interface;
  IXMLLocationCoordinateType_cacList = interface;
  IXMLCoordinateSystemCodeType_cbc = interface;
  IXMLLatitudeDegreesMeasureType_cbc = interface;
  IXMLLatitudeMinutesMeasureType_cbc = interface;
  IXMLLatitudeDirectionCodeType_cbc = interface;
  IXMLLongitudeDegreesMeasureType_cbc = interface;
  IXMLLongitudeMinutesMeasureType_cbc = interface;
  IXMLLongitudeDirectionCodeType_cbc = interface;
  IXMLAltitudeMeasureType_cbc = interface;
  IXMLLocationType_cac = interface;
  IXMLLocationType_cacList = interface;
  IXMLConditionsType_cbc = interface;
  IXMLConditionsType_cbcList = interface;
  IXMLLocationTypeCodeType_cbc = interface;
  IXMLInformationURIType_cbc = interface;
  IXMLPartyTaxSchemeType_cac = interface;
  IXMLPartyTaxSchemeType_cacList = interface;
  IXMLRegistrationNameType_cbc = interface;
  IXMLCompanyIDType_cbc = interface;
  IXMLTaxLevelCodeType_cbc = interface;
  IXMLExemptionReasonCodeType_cbc = interface;
  IXMLExemptionReasonType_cbc = interface;
  IXMLExemptionReasonType_cbcList = interface;
  IXMLTaxSchemeType_cac = interface;
  IXMLTaxTypeCodeType_cbc = interface;
  IXMLCurrencyCodeType_cbc = interface;
  IXMLPartyLegalEntityType_cac = interface;
  IXMLPartyLegalEntityType_cacList = interface;
  IXMLRegistrationDateType_cbc = interface;
  IXMLRegistrationExpirationDateType_cbc = interface;
  IXMLCompanyLegalFormCodeType_cbc = interface;
  IXMLCompanyLegalFormType_cbc = interface;
  IXMLSoleProprietorshipIndicatorType_cbc = interface;
  IXMLCompanyLiquidationStatusCodeType_cbc = interface;
  IXMLCorporateStockAmountType_cbc = interface;
  IXMLFullyPaidSharesIndicatorType_cbc = interface;
  IXMLCorporateRegistrationSchemeType_cac = interface;
  IXMLCorporateRegistrationTypeCodeType_cbc = interface;
  IXMLShareholderPartyType_cac = interface;
  IXMLShareholderPartyType_cacList = interface;
  IXMLPartecipationPercentType_cbc = interface;
  IXMLContactType_cac = interface;
  IXMLContactType_cacList = interface;
  IXMLTelephoneType_cbc = interface;
  IXMLTelefaxType_cbc = interface;
  IXMLElectronicMailType_cbc = interface;
  IXMLCommunicationType_cac = interface;
  IXMLCommunicationType_cacList = interface;
  IXMLChannelCodeType_cbc = interface;
  IXMLChannelType_cbc = interface;
  IXMLValueType_cbc = interface;
  IXMLPersonType_cac = interface;
  IXMLPersonType_cacList = interface;
  IXMLFirstNameType_cbc = interface;
  IXMLFamilyNameType_cbc = interface;
  IXMLTitleType_cbc = interface;
  IXMLMiddleNameType_cbc = interface;
  IXMLOtherNameType_cbc = interface;
  IXMLNameSuffixType_cbc = interface;
  IXMLJobTitleType_cbc = interface;
  IXMLNationalityIDType_cbc = interface;
  IXMLGenderCodeType_cbc = interface;
  IXMLBirthDateType_cbc = interface;
  IXMLBirthplaceNameType_cbc = interface;
  IXMLOrganizationDepartmentType_cbc = interface;
  IXMLFinancialAccountType_cac = interface;
  IXMLAliasNameType_cbc = interface;
  IXMLAccountTypeCodeType_cbc = interface;
  IXMLAccountFormatCodeType_cbc = interface;
  IXMLPaymentNoteType_cbc = interface;
  IXMLPaymentNoteType_cbcList = interface;
  IXMLBranchType_cac = interface;
  IXMLFinancialInstitutionType_cac = interface;
  IXMLServiceProviderPartyType_cac = interface;
  IXMLServiceProviderPartyType_cacList = interface;
  IXMLServiceTypeCodeType_cbc = interface;
  IXMLServiceTypeType_cbc = interface;
  IXMLServiceTypeType_cbcList = interface;
  IXMLPowerOfAttorneyType_cac = interface;
  IXMLPowerOfAttorneyType_cacList = interface;
  IXMLResultOfVerificationType_cac = interface;
  IXMLValidatorIDType_cbc = interface;
  IXMLValidationResultCodeType_cbc = interface;
  IXMLValidationDateType_cbc = interface;
  IXMLValidationTimeType_cbc = interface;
  IXMLValidateProcessType_cbc = interface;
  IXMLValidateToolType_cbc = interface;
  IXMLValidateToolVersionType_cbc = interface;
  IXMLBillingReferenceType_cac = interface;
  IXMLBillingReferenceType_cacList = interface;
  IXMLBillingReferenceLineType_cac = interface;
  IXMLBillingReferenceLineType_cacList = interface;
  IXMLAmountType_cbc = interface;
  IXMLAllowanceChargeType_cac = interface;
  IXMLAllowanceChargeType_cacList = interface;
  IXMLChargeIndicatorType_cbc = interface;
  IXMLAllowanceChargeReasonCodeType_cbc = interface;
  IXMLAllowanceChargeReasonType_cbc = interface;
  IXMLAllowanceChargeReasonType_cbcList = interface;
  IXMLMultiplierFactorNumericType_cbc = interface;
  IXMLPrepaidIndicatorType_cbc = interface;
  IXMLSequenceNumericType_cbc = interface;
  IXMLBaseAmountType_cbc = interface;
  IXMLPerUnitAmountType_cbc = interface;
  IXMLTaxCategoryType_cac = interface;
  IXMLTaxCategoryType_cacList = interface;
  IXMLPercentType_cbc = interface;
  IXMLBaseUnitMeasureType_cbc = interface;
  IXMLTaxExemptionReasonCodeType_cbc = interface;
  IXMLTaxExemptionReasonType_cbc = interface;
  IXMLTaxExemptionReasonType_cbcList = interface;
  IXMLTierRangeType_cbc = interface;
  IXMLTierRatePercentType_cbc = interface;
  IXMLTaxTotalType_cac = interface;
  IXMLTaxTotalType_cacList = interface;
  IXMLTaxAmountType_cbc = interface;
  IXMLRoundingAmountType_cbc = interface;
  IXMLTaxEvidenceIndicatorType_cbc = interface;
  IXMLTaxIncludedIndicatorType_cbc = interface;
  IXMLTaxSubtotalType_cac = interface;
  IXMLTaxSubtotalType_cacList = interface;
  IXMLTaxableAmountType_cbc = interface;
  IXMLCalculationSequenceNumericType_cbc = interface;
  IXMLTransactionCurrencyTaxAmountType_cbc = interface;
  IXMLPaymentMeansType_cac = interface;
  IXMLPaymentMeansType_cacList = interface;
  IXMLPaymentMeansCodeType_cbc = interface;
  IXMLPaymentDueDateType_cbc = interface;
  IXMLPaymentChannelCodeType_cbc = interface;
  IXMLInstructionIDType_cbc = interface;
  IXMLInstructionNoteType_cbc = interface;
  IXMLInstructionNoteType_cbcList = interface;
  IXMLPaymentIDType_cbc = interface;
  IXMLPaymentIDType_cbcList = interface;
  IXMLCardAccountType_cac = interface;
  IXMLPrimaryAccountNumberIDType_cbc = interface;
  IXMLNetworkIDType_cbc = interface;
  IXMLCardTypeCodeType_cbc = interface;
  IXMLValidityStartDateType_cbc = interface;
  IXMLIssuerIDType_cbc = interface;
  IXMLIssueNumberIDType_cbc = interface;
  IXMLCV2IDType_cbc = interface;
  IXMLCardChipCodeType_cbc = interface;
  IXMLChipApplicationIDType_cbc = interface;
  IXMLHolderNameType_cbc = interface;
  IXMLCreditAccountType_cac = interface;
  IXMLAccountIDType_cbc = interface;
  IXMLPaymentMandateType_cac = interface;
  IXMLMandateTypeCodeType_cbc = interface;
  IXMLMaximumPaymentInstructionsNumericType_cbc = interface;
  IXMLMaximumPaidAmountType_cbc = interface;
  IXMLSignatureIDType_cbc = interface;
  IXMLClauseType_cac = interface;
  IXMLClauseType_cacList = interface;
  IXMLContentType_cbc = interface;
  IXMLContentType_cbcList = interface;
  IXMLTradeFinancingType_cac = interface;
  IXMLFinancingInstrumentCodeType_cbc = interface;
  IXMLProjectReferenceType_cac = interface;
  IXMLProjectReferenceType_cacList = interface;
  IXMLWorkPhaseReferenceType_cac = interface;
  IXMLWorkPhaseReferenceType_cacList = interface;
  IXMLWorkPhaseCodeType_cbc = interface;
  IXMLWorkPhaseType_cbc = interface;
  IXMLWorkPhaseType_cbcList = interface;
  IXMLProgressPercentType_cbc = interface;
  IXMLSignatureType_cac = interface;
  IXMLSignatureType_cacList = interface;
  IXMLCanonicalizationMethodType_cbc = interface;
  IXMLSignatureMethodType_cbc = interface;
  IXMLSupplierPartyType_cac = interface;
  IXMLCustomerAssignedAccountIDType_cbc = interface;
  IXMLAdditionalAccountIDType_cbc = interface;
  IXMLAdditionalAccountIDType_cbcList = interface;
  IXMLDataSendingCapabilityType_cbc = interface;
  IXMLCustomerPartyType_cac = interface;
  IXMLSupplierAssignedAccountIDType_cbc = interface;
  IXMLDeliveryType_cac = interface;
  IXMLDeliveryType_cacList = interface;
  IXMLQuantityType_cbc = interface;
  IXMLMinimumQuantityType_cbc = interface;
  IXMLMaximumQuantityType_cbc = interface;
  IXMLActualDeliveryDateType_cbc = interface;
  IXMLActualDeliveryTimeType_cbc = interface;
  IXMLLatestDeliveryDateType_cbc = interface;
  IXMLLatestDeliveryTimeType_cbc = interface;
  IXMLReleaseIDType_cbc = interface;
  IXMLTrackingIDType_cbc = interface;
  IXMLDespatchType_cac = interface;
  IXMLRequestedDespatchDateType_cbc = interface;
  IXMLRequestedDespatchTimeType_cbc = interface;
  IXMLEstimatedDespatchDateType_cbc = interface;
  IXMLEstimatedDespatchTimeType_cbc = interface;
  IXMLActualDespatchDateType_cbc = interface;
  IXMLActualDespatchTimeType_cbc = interface;
  IXMLGuaranteedDespatchDateType_cbc = interface;
  IXMLGuaranteedDespatchTimeType_cbc = interface;
  IXMLInstructionsType_cbc = interface;
  IXMLInstructionsType_cbcList = interface;
  IXMLDeliveryTermsType_cac = interface;
  IXMLDeliveryTermsType_cacList = interface;
  IXMLSpecialTermsType_cbc = interface;
  IXMLSpecialTermsType_cbcList = interface;
  IXMLLossRiskResponsibilityCodeType_cbc = interface;
  IXMLLossRiskType_cbc = interface;
  IXMLLossRiskType_cbcList = interface;
  IXMLDeliveryUnitType_cac = interface;
  IXMLDeliveryUnitType_cacList = interface;
  IXMLBatchQuantityType_cbc = interface;
  IXMLConsumerUnitQuantityType_cbc = interface;
  IXMLHazardousRiskIndicatorType_cbc = interface;
  IXMLShipmentType_cac = interface;
  IXMLShipmentType_cacList = interface;
  IXMLShippingPriorityLevelCodeType_cbc = interface;
  IXMLHandlingCodeType_cbc = interface;
  IXMLHandlingInstructionsType_cbc = interface;
  IXMLHandlingInstructionsType_cbcList = interface;
  IXMLInformationType_cbc = interface;
  IXMLInformationType_cbcList = interface;
  IXMLGrossWeightMeasureType_cbc = interface;
  IXMLNetWeightMeasureType_cbc = interface;
  IXMLNetNetWeightMeasureType_cbc = interface;
  IXMLGrossVolumeMeasureType_cbc = interface;
  IXMLNetVolumeMeasureType_cbc = interface;
  IXMLTotalGoodsItemQuantityType_cbc = interface;
  IXMLTotalTransportHandlingUnitQuantityType_cbc = interface;
  IXMLInsuranceValueAmountType_cbc = interface;
  IXMLDeclaredCustomsValueAmountType_cbc = interface;
  IXMLDeclaredForCarriageValueAmountType_cbc = interface;
  IXMLDeclaredStatisticsValueAmountType_cbc = interface;
  IXMLFreeOnBoardValueAmountType_cbc = interface;
  IXMLSpecialInstructionsType_cbc = interface;
  IXMLSpecialInstructionsType_cbcList = interface;
  IXMLDeliveryInstructionsType_cbc = interface;
  IXMLDeliveryInstructionsType_cbcList = interface;
  IXMLSplitConsignmentIndicatorType_cbc = interface;
  IXMLConsignmentQuantityType_cbc = interface;
  IXMLConsignmentType_cac = interface;
  IXMLConsignmentType_cacList = interface;
  IXMLCarrierAssignedIDType_cbc = interface;
  IXMLConsigneeAssignedIDType_cbc = interface;
  IXMLConsignorAssignedIDType_cbc = interface;
  IXMLFreightForwarderAssignedIDType_cbc = interface;
  IXMLBrokerAssignedIDType_cbc = interface;
  IXMLContractedCarrierAssignedIDType_cbc = interface;
  IXMLPerformingCarrierAssignedIDType_cbc = interface;
  IXMLSummaryDescriptionType_cbc = interface;
  IXMLSummaryDescriptionType_cbcList = interface;
  IXMLTotalInvoiceAmountType_cbc = interface;
  IXMLTariffDescriptionType_cbc = interface;
  IXMLTariffDescriptionType_cbcList = interface;
  IXMLTariffCodeType_cbc = interface;
  IXMLInsurancePremiumAmountType_cbc = interface;
  IXMLChargeableWeightMeasureType_cbc = interface;
  IXMLLoadingLengthMeasureType_cbc = interface;
  IXMLRemarksType_cbc = interface;
  IXMLRemarksType_cbcList = interface;
  IXMLAnimalFoodIndicatorType_cbc = interface;
  IXMLHumanFoodIndicatorType_cbc = interface;
  IXMLLivestockIndicatorType_cbc = interface;
  IXMLBulkCargoIndicatorType_cbc = interface;
  IXMLContainerizedIndicatorType_cbc = interface;
  IXMLGeneralCargoIndicatorType_cbc = interface;
  IXMLSpecialSecurityIndicatorType_cbc = interface;
  IXMLThirdPartyPayerIndicatorType_cbc = interface;
  IXMLCarrierServiceInstructionsType_cbc = interface;
  IXMLCarrierServiceInstructionsType_cbcList = interface;
  IXMLCustomsClearanceServiceInstructionsType_cbc = interface;
  IXMLCustomsClearanceServiceInstructionsType_cbcList = interface;
  IXMLForwarderServiceInstructionsType_cbc = interface;
  IXMLForwarderServiceInstructionsType_cbcList = interface;
  IXMLSpecialServiceInstructionsType_cbc = interface;
  IXMLSpecialServiceInstructionsType_cbcList = interface;
  IXMLSequenceIDType_cbc = interface;
  IXMLConsolidatableIndicatorType_cbc = interface;
  IXMLHaulageInstructionsType_cbc = interface;
  IXMLHaulageInstructionsType_cbcList = interface;
  IXMLLoadingSequenceIDType_cbc = interface;
  IXMLChildConsignmentQuantityType_cbc = interface;
  IXMLTotalPackagesQuantityType_cbc = interface;
  IXMLCustomsDeclarationType_cac = interface;
  IXMLCustomsDeclarationType_cacList = interface;
  IXMLTransportEventType_cac = interface;
  IXMLTransportEventType_cacList = interface;
  IXMLIdentificationIDType_cbc = interface;
  IXMLOccurrenceDateType_cbc = interface;
  IXMLOccurrenceTimeType_cbc = interface;
  IXMLTransportEventTypeCodeType_cbc = interface;
  IXMLCompletionIndicatorType_cbc = interface;
  IXMLStatusType_cac = interface;
  IXMLStatusType_cacList = interface;
  IXMLConditionCodeType_cbc = interface;
  IXMLReferenceDateType_cbc = interface;
  IXMLReferenceTimeType_cbc = interface;
  IXMLStatusReasonCodeType_cbc = interface;
  IXMLStatusReasonType_cbc = interface;
  IXMLStatusReasonType_cbcList = interface;
  IXMLTextType_cbc = interface;
  IXMLTextType_cbcList = interface;
  IXMLIndicationIndicatorType_cbc = interface;
  IXMLReliabilityPercentType_cbc = interface;
  IXMLConditionType_cac = interface;
  IXMLConditionType_cacList = interface;
  IXMLAttributeIDType_cbc = interface;
  IXMLMeasureType_cbc = interface;
  IXMLMinimumMeasureType_cbc = interface;
  IXMLMaximumMeasureType_cbc = interface;
  IXMLContractType_cac = interface;
  IXMLNominationDateType_cbc = interface;
  IXMLNominationTimeType_cbc = interface;
  IXMLContractTypeCodeType_cbc = interface;
  IXMLContractTypeType_cbc = interface;
  IXMLTransportationServiceType_cac = interface;
  IXMLTransportServiceCodeType_cbc = interface;
  IXMLTariffClassCodeType_cbc = interface;
  IXMLPriorityType_cbc = interface;
  IXMLFreightRateClassCodeType_cbc = interface;
  IXMLTransportationServiceDescriptionType_cbc = interface;
  IXMLTransportationServiceDescriptionType_cbcList = interface;
  IXMLTransportationServiceDetailsURIType_cbc = interface;
  IXMLTransportEquipmentType_cac = interface;
  IXMLTransportEquipmentType_cacList = interface;
  IXMLReferencedConsignmentIDType_cbc = interface;
  IXMLReferencedConsignmentIDType_cbcList = interface;
  IXMLTransportEquipmentTypeCodeType_cbc = interface;
  IXMLProviderTypeCodeType_cbc = interface;
  IXMLOwnerTypeCodeType_cbc = interface;
  IXMLSizeTypeCodeType_cbc = interface;
  IXMLDispositionCodeType_cbc = interface;
  IXMLFullnessIndicationCodeType_cbc = interface;
  IXMLRefrigerationOnIndicatorType_cbc = interface;
  IXMLReturnabilityIndicatorType_cbc = interface;
  IXMLLegalStatusIndicatorType_cbc = interface;
  IXMLAirFlowPercentType_cbc = interface;
  IXMLHumidityPercentType_cbc = interface;
  IXMLAnimalFoodApprovedIndicatorType_cbc = interface;
  IXMLHumanFoodApprovedIndicatorType_cbc = interface;
  IXMLDangerousGoodsApprovedIndicatorType_cbc = interface;
  IXMLRefrigeratedIndicatorType_cbc = interface;
  IXMLCharacteristicsType_cbc = interface;
  IXMLDamageRemarksType_cbc = interface;
  IXMLDamageRemarksType_cbcList = interface;
  IXMLSpecialTransportRequirementsType_cbc = interface;
  IXMLSpecialTransportRequirementsType_cbcList = interface;
  IXMLTareWeightMeasureType_cbc = interface;
  IXMLTrackingDeviceCodeType_cbc = interface;
  IXMLPowerIndicatorType_cbc = interface;
  IXMLTraceIDType_cbc = interface;
  IXMLDimensionType_cac = interface;
  IXMLDimensionType_cacList = interface;
  IXMLTransportEquipmentSealType_cac = interface;
  IXMLTransportEquipmentSealType_cacList = interface;
  IXMLSealIssuerTypeCodeType_cbc = interface;
  IXMLConditionType_cbc = interface;
  IXMLSealStatusCodeType_cbc = interface;
  IXMLSealingPartyTypeType_cbc = interface;
  IXMLTemperatureType_cac = interface;
  IXMLTemperatureType_cacList = interface;
  IXMLTransportMeansType_cac = interface;
  IXMLTransportMeansType_cacList = interface;
  IXMLJourneyIDType_cbc = interface;
  IXMLRegistrationNationalityIDType_cbc = interface;
  IXMLRegistrationNationalityType_cbc = interface;
  IXMLRegistrationNationalityType_cbcList = interface;
  IXMLDirectionCodeType_cbc = interface;
  IXMLTransportMeansTypeCodeType_cbc = interface;
  IXMLTradeServiceCodeType_cbc = interface;
  IXMLStowageType_cac = interface;
  IXMLLocationIDType_cbc = interface;
  IXMLLocationType_cbc = interface;
  IXMLLocationType_cbcList = interface;
  IXMLAirTransportType_cac = interface;
  IXMLAircraftIDType_cbc = interface;
  IXMLRoadTransportType_cac = interface;
  IXMLLicensePlateIDType_cbc = interface;
  IXMLRailTransportType_cac = interface;
  IXMLTrainIDType_cbc = interface;
  IXMLRailCarIDType_cbc = interface;
  IXMLMaritimeTransportType_cac = interface;
  IXMLVesselIDType_cbc = interface;
  IXMLVesselNameType_cbc = interface;
  IXMLRadioCallSignIDType_cbc = interface;
  IXMLShipsRequirementsType_cbc = interface;
  IXMLShipsRequirementsType_cbcList = interface;
  IXMLGrossTonnageMeasureType_cbc = interface;
  IXMLNetTonnageMeasureType_cbc = interface;
  IXMLTradingTermsType_cac = interface;
  IXMLTradingTermsType_cacList = interface;
  IXMLReferenceType_cbc = interface;
  IXMLHazardousGoodsTransitType_cac = interface;
  IXMLHazardousGoodsTransitType_cacList = interface;
  IXMLTransportEmergencyCardCodeType_cbc = interface;
  IXMLPackingCriteriaCodeType_cbc = interface;
  IXMLHazardousRegulationCodeType_cbc = interface;
  IXMLInhalationToxicityZoneCodeType_cbc = interface;
  IXMLTransportAuthorizationCodeType_cbc = interface;
  IXMLTransportHandlingUnitType_cac = interface;
  IXMLTransportHandlingUnitType_cacList = interface;
  IXMLTransportHandlingUnitTypeCodeType_cbc = interface;
  IXMLTotalPackageQuantityType_cbc = interface;
  IXMLShippingMarksType_cbc = interface;
  IXMLShippingMarksType_cbcList = interface;
  IXMLDespatchLineType_cac = interface;
  IXMLDespatchLineType_cacList = interface;
  IXMLLineStatusCodeType_cbc = interface;
  IXMLDeliveredQuantityType_cbc = interface;
  IXMLBackorderQuantityType_cbc = interface;
  IXMLBackorderReasonType_cbc = interface;
  IXMLBackorderReasonType_cbcList = interface;
  IXMLOutstandingQuantityType_cbc = interface;
  IXMLOutstandingReasonType_cbc = interface;
  IXMLOutstandingReasonType_cbcList = interface;
  IXMLOversupplyQuantityType_cbc = interface;
  IXMLOrderLineReferenceType_cac = interface;
  IXMLOrderLineReferenceType_cacList = interface;
  IXMLLineIDType_cbc = interface;
  IXMLSalesOrderLineIDType_cbc = interface;
  IXMLItemType_cac = interface;
  IXMLItemType_cacList = interface;
  IXMLPackQuantityType_cbc = interface;
  IXMLPackSizeNumericType_cbc = interface;
  IXMLCatalogueIndicatorType_cbc = interface;
  IXMLAdditionalInformationType_cbc = interface;
  IXMLAdditionalInformationType_cbcList = interface;
  IXMLKeywordType_cbc = interface;
  IXMLKeywordType_cbcList = interface;
  IXMLBrandNameType_cbc = interface;
  IXMLBrandNameType_cbcList = interface;
  IXMLModelNameType_cbc = interface;
  IXMLModelNameType_cbcList = interface;
  IXMLItemIdentificationType_cac = interface;
  IXMLItemIdentificationType_cacList = interface;
  IXMLExtendedIDType_cbc = interface;
  IXMLBarcodeSymbologyIDType_cbc = interface;
  IXMLPhysicalAttributeType_cac = interface;
  IXMLPhysicalAttributeType_cacList = interface;
  IXMLPositionCodeType_cbc = interface;
  IXMLCommodityClassificationType_cac = interface;
  IXMLCommodityClassificationType_cacList = interface;
  IXMLNatureCodeType_cbc = interface;
  IXMLCargoTypeCodeType_cbc = interface;
  IXMLCommodityCodeType_cbc = interface;
  IXMLItemClassificationCodeType_cbc = interface;
  IXMLTransactionConditionsType_cac = interface;
  IXMLTransactionConditionsType_cacList = interface;
  IXMLActionCodeType_cbc = interface;
  IXMLHazardousItemType_cac = interface;
  IXMLHazardousItemType_cacList = interface;
  IXMLPlacardNotationType_cbc = interface;
  IXMLPlacardEndorsementType_cbc = interface;
  IXMLUNDGCodeType_cbc = interface;
  IXMLEmergencyProceduresCodeType_cbc = interface;
  IXMLMedicalFirstAidGuideCodeType_cbc = interface;
  IXMLTechnicalNameType_cbc = interface;
  IXMLCategoryNameType_cbc = interface;
  IXMLHazardousCategoryCodeType_cbc = interface;
  IXMLUpperOrangeHazardPlacardIDType_cbc = interface;
  IXMLLowerOrangeHazardPlacardIDType_cbc = interface;
  IXMLMarkingIDType_cbc = interface;
  IXMLHazardClassIDType_cbc = interface;
  IXMLSecondaryHazardType_cac = interface;
  IXMLSecondaryHazardType_cacList = interface;
  IXMLExtensionType_cbc = interface;
  IXMLExtensionType_cbcList = interface;
  IXMLItemPropertyType_cac = interface;
  IXMLItemPropertyType_cacList = interface;
  IXMLNameCodeType_cbc = interface;
  IXMLTestMethodType_cbc = interface;
  IXMLValueQuantityType_cbc = interface;
  IXMLValueQualifierType_cbc = interface;
  IXMLValueQualifierType_cbcList = interface;
  IXMLImportanceCodeType_cbc = interface;
  IXMLListValueType_cbc = interface;
  IXMLListValueType_cbcList = interface;
  IXMLItemPropertyGroupType_cac = interface;
  IXMLItemPropertyGroupType_cacList = interface;
  IXMLItemPropertyRangeType_cac = interface;
  IXMLMinimumValueType_cbc = interface;
  IXMLMaximumValueType_cbc = interface;
  IXMLItemInstanceType_cac = interface;
  IXMLItemInstanceType_cacList = interface;
  IXMLProductTraceIDType_cbc = interface;
  IXMLManufactureDateType_cbc = interface;
  IXMLManufactureTimeType_cbc = interface;
  IXMLBestBeforeDateType_cbc = interface;
  IXMLRegistrationIDType_cbc = interface;
  IXMLSerialIDType_cbc = interface;
  IXMLLotIdentificationType_cac = interface;
  IXMLLotNumberIDType_cbc = interface;
  IXMLCertificateType_cac = interface;
  IXMLCertificateType_cacList = interface;
  IXMLCertificateTypeCodeType_cbc = interface;
  IXMLCertificateTypeType_cbc = interface;
  IXMLPackageType_cac = interface;
  IXMLPackageType_cacList = interface;
  IXMLReturnableMaterialIndicatorType_cbc = interface;
  IXMLPackageLevelCodeType_cbc = interface;
  IXMLPackagingTypeCodeType_cbc = interface;
  IXMLPackingMaterialType_cbc = interface;
  IXMLPackingMaterialType_cbcList = interface;
  IXMLGoodsItemType_cac = interface;
  IXMLGoodsItemType_cacList = interface;
  IXMLSequenceNumberIDType_cbc = interface;
  IXMLValueAmountType_cbc = interface;
  IXMLPreferenceCriterionCodeType_cbc = interface;
  IXMLRequiredCustomsIDType_cbc = interface;
  IXMLCustomsStatusCodeType_cbc = interface;
  IXMLCustomsTariffQuantityType_cbc = interface;
  IXMLCustomsImportClassifiedIndicatorType_cbc = interface;
  IXMLChargeableQuantityType_cbc = interface;
  IXMLReturnableQuantityType_cbc = interface;
  IXMLGoodsItemContainerType_cac = interface;
  IXMLGoodsItemContainerType_cacList = interface;
  IXMLInvoiceLineType_cac = interface;
  IXMLInvoiceLineType_cacList = interface;
  IXMLInvoicedQuantityType_cbc = interface;
  IXMLLineExtensionAmountType_cbc = interface;
  IXMLPaymentPurposeCodeType_cbc = interface;
  IXMLFreeOfChargeIndicatorType_cbc = interface;
  IXMLLineReferenceType_cac = interface;
  IXMLLineReferenceType_cacList = interface;
  IXMLPricingReferenceType_cac = interface;
  IXMLItemLocationQuantityType_cac = interface;
  IXMLLeadTimeMeasureType_cbc = interface;
  IXMLTradingRestrictionsType_cbc = interface;
  IXMLTradingRestrictionsType_cbcList = interface;
  IXMLPriceType_cac = interface;
  IXMLPriceType_cacList = interface;
  IXMLPriceAmountType_cbc = interface;
  IXMLBaseQuantityType_cbc = interface;
  IXMLPriceChangeReasonType_cbc = interface;
  IXMLPriceChangeReasonType_cbcList = interface;
  IXMLPriceTypeCodeType_cbc = interface;
  IXMLPriceTypeType_cbc = interface;
  IXMLOrderableUnitFactorRateType_cbc = interface;
  IXMLPriceListType_cac = interface;
  IXMLStatusCodeType_cbc = interface;
  IXMLExchangeRateType_cac = interface;
  IXMLSourceCurrencyCodeType_cbc = interface;
  IXMLSourceCurrencyBaseRateType_cbc = interface;
  IXMLTargetCurrencyCodeType_cbc = interface;
  IXMLTargetCurrencyBaseRateType_cbc = interface;
  IXMLExchangeMarketIDType_cbc = interface;
  IXMLCalculationRateType_cbc = interface;
  IXMLMathematicOperatorCodeType_cbc = interface;
  IXMLDateType_cbc = interface;
  IXMLDependentPriceReferenceType_cac = interface;
  IXMLPaymentTermsType_cac = interface;
  IXMLPaymentTermsType_cacList = interface;
  IXMLPaymentMeansIDType_cbc = interface;
  IXMLPaymentMeansIDType_cbcList = interface;
  IXMLPrepaidPaymentReferenceIDType_cbc = interface;
  IXMLReferenceEventCodeType_cbc = interface;
  IXMLSettlementDiscountPercentType_cbc = interface;
  IXMLPenaltySurchargePercentType_cbc = interface;
  IXMLPaymentPercentType_cbc = interface;
  IXMLSettlementDiscountAmountType_cbc = interface;
  IXMLPenaltyAmountType_cbc = interface;
  IXMLPaymentTermsDetailsURIType_cbc = interface;
  IXMLInstallmentDueDateType_cbc = interface;
  IXMLInvoicingPartyReferenceType_cbc = interface;
  IXMLPriceExtensionType_cac = interface;
  IXMLPickupType_cac = interface;
  IXMLActualPickupDateType_cbc = interface;
  IXMLActualPickupTimeType_cbc = interface;
  IXMLEarliestPickupDateType_cbc = interface;
  IXMLEarliestPickupTimeType_cbc = interface;
  IXMLLatestPickupDateType_cbc = interface;
  IXMLLatestPickupTimeType_cbc = interface;
  IXMLReceiptLineType_cac = interface;
  IXMLReceiptLineType_cacList = interface;
  IXMLReceivedQuantityType_cbc = interface;
  IXMLShortQuantityType_cbc = interface;
  IXMLShortageActionCodeType_cbc = interface;
  IXMLRejectedQuantityType_cbc = interface;
  IXMLRejectReasonCodeType_cbc = interface;
  IXMLRejectReasonType_cbc = interface;
  IXMLRejectReasonType_cbcList = interface;
  IXMLRejectActionCodeType_cbc = interface;
  IXMLQuantityDiscrepancyCodeType_cbc = interface;
  IXMLReceivedDateType_cbc = interface;
  IXMLTimingComplaintCodeType_cbc = interface;
  IXMLTimingComplaintType_cbc = interface;
  IXMLShipmentStageType_cac = interface;
  IXMLShipmentStageType_cacList = interface;
  IXMLTransportModeCodeType_cbc = interface;
  IXMLTransitDirectionCodeType_cbc = interface;
  IXMLPreCarriageIndicatorType_cbc = interface;
  IXMLOnCarriageIndicatorType_cbc = interface;
  IXMLEstimatedDeliveryDateType_cbc = interface;
  IXMLEstimatedDeliveryTimeType_cbc = interface;
  IXMLRequiredDeliveryDateType_cbc = interface;
  IXMLRequiredDeliveryTimeType_cbc = interface;
  IXMLSuccessiveSequenceIDType_cbc = interface;
  IXMLDemurrageInstructionsType_cbc = interface;
  IXMLDemurrageInstructionsType_cbcList = interface;
  IXMLCrewQuantityType_cbc = interface;
  IXMLPassengerQuantityType_cbc = interface;
  IXMLEnvironmentalEmissionType_cac = interface;
  IXMLEnvironmentalEmissionType_cacList = interface;
  IXMLEnvironmentalEmissionTypeCodeType_cbc = interface;
  IXMLValueMeasureType_cbc = interface;
  IXMLEmissionCalculationMethodType_cac = interface;
  IXMLEmissionCalculationMethodType_cacList = interface;
  IXMLCalculationMethodCodeType_cbc = interface;
  IXMLServiceFrequencyType_cac = interface;
  IXMLServiceFrequencyType_cacList = interface;
  IXMLWeekDayCodeType_cbc = interface;
  IXMLPaymentType_cac = interface;
  IXMLPaymentType_cacList = interface;
  IXMLPaidAmountType_cbc = interface;
  IXMLPaidDateType_cbc = interface;
  IXMLPaidTimeType_cbc = interface;
  IXMLMonetaryTotalType_cac = interface;
  IXMLTaxExclusiveAmountType_cbc = interface;
  IXMLTaxInclusiveAmountType_cbc = interface;
  IXMLAllowanceTotalAmountType_cbc = interface;
  IXMLChargeTotalAmountType_cbc = interface;
  IXMLPrepaidAmountType_cbc = interface;
  IXMLPayableRoundingAmountType_cbc = interface;
  IXMLPayableAmountType_cbc = interface;
  IXMLPayableAlternativeAmountType_cbc = interface;

{ IXMLInvoiceType }

  IXMLInvoiceType = interface(IXMLNode)
    ['{AFA72144-F846-4BA6-84D6-5AFB4473FE06}']
    { Property Accessors }
    function Get_UBLExtensions: IXMLUBLExtensionsType_ext;
    function Get_UBLVersionID: IXMLUBLVersionIDType_cbc;
    function Get_CustomizationID: IXMLCustomizationIDType_cbc;
    function Get_ProfileID: IXMLProfileIDType_cbc;
    function Get_ProfileExecutionID: IXMLProfileExecutionIDType_cbc;
    function Get_ID: IXMLIDType_cbc;
    function Get_CopyIndicator: IXMLCopyIndicatorType_cbc;
    function Get_UUID: IXMLUUIDType_cbc;
    function Get_IssueDate: IXMLIssueDateType_cbc;
    function Get_IssueTime: IXMLIssueTimeType_cbc;
    function Get_DueDate: IXMLDueDateType_cbc;
    function Get_InvoiceTypeCode: IXMLInvoiceTypeCodeType_cbc;
    function Get_Note: IXMLNoteType_cbcList;
    function Get_TaxPointDate: IXMLTaxPointDateType_cbc;
    function Get_DocumentCurrencyCode: IXMLDocumentCurrencyCodeType_cbc;
    function Get_TaxCurrencyCode: IXMLTaxCurrencyCodeType_cbc;
    function Get_PricingCurrencyCode: IXMLPricingCurrencyCodeType_cbc;
    function Get_PaymentCurrencyCode: IXMLPaymentCurrencyCodeType_cbc;
    function Get_PaymentAlternativeCurrencyCode: IXMLPaymentAlternativeCurrencyCodeType_cbc;
    function Get_AccountingCostCode: IXMLAccountingCostCodeType_cbc;
    function Get_AccountingCost: IXMLAccountingCostType_cbc;
    function Get_LineCountNumeric: IXMLLineCountNumericType_cbc;
    function Get_BuyerReference: IXMLBuyerReferenceType_cbc;
    function Get_InvoicePeriod: IXMLPeriodType_cacList;
    function Get_OrderReference: IXMLOrderReferenceType_cac;
    function Get_BillingReference: IXMLBillingReferenceType_cacList;
    function Get_DespatchDocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_ReceiptDocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_StatementDocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_OriginatorDocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_ContractDocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_AdditionalDocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_ProjectReference: IXMLProjectReferenceType_cacList;
    function Get_Signature: IXMLSignatureType_cacList;
    function Get_AccountingSupplierParty: IXMLSupplierPartyType_cac;
    function Get_AccountingCustomerParty: IXMLCustomerPartyType_cac;
    function Get_PayeeParty: IXMLPartyType_cac;
    function Get_BuyerCustomerParty: IXMLCustomerPartyType_cac;
    function Get_SellerSupplierParty: IXMLSupplierPartyType_cac;
    function Get_TaxRepresentativeParty: IXMLPartyType_cac;
    function Get_Delivery: IXMLDeliveryType_cacList;
    function Get_DeliveryTerms: IXMLDeliveryTermsType_cac;
    function Get_PaymentMeans: IXMLPaymentMeansType_cacList;
    function Get_PaymentTerms: IXMLPaymentTermsType_cacList;
    function Get_PrepaidPayment: IXMLPaymentType_cacList;
    function Get_AllowanceCharge: IXMLAllowanceChargeType_cacList;
    function Get_TaxExchangeRate: IXMLExchangeRateType_cac;
    function Get_PricingExchangeRate: IXMLExchangeRateType_cac;
    function Get_PaymentExchangeRate: IXMLExchangeRateType_cac;
    function Get_PaymentAlternativeExchangeRate: IXMLExchangeRateType_cac;
    function Get_TaxTotal: IXMLTaxTotalType_cacList;
    function Get_WithholdingTaxTotal: IXMLTaxTotalType_cacList;
    function Get_LegalMonetaryTotal: IXMLMonetaryTotalType_cac;
    function Get_InvoiceLine: IXMLInvoiceLineType_cacList;
    { Methods & Properties }
    property UBLExtensions: IXMLUBLExtensionsType_ext read Get_UBLExtensions;
    property UBLVersionID: IXMLUBLVersionIDType_cbc read Get_UBLVersionID;
    property CustomizationID: IXMLCustomizationIDType_cbc read Get_CustomizationID;
    property ProfileID: IXMLProfileIDType_cbc read Get_ProfileID;
    property ProfileExecutionID: IXMLProfileExecutionIDType_cbc read Get_ProfileExecutionID;
    property ID: IXMLIDType_cbc read Get_ID;
    property CopyIndicator: IXMLCopyIndicatorType_cbc read Get_CopyIndicator;
    property UUID: IXMLUUIDType_cbc read Get_UUID;
    property IssueDate: IXMLIssueDateType_cbc read Get_IssueDate;
    property IssueTime: IXMLIssueTimeType_cbc read Get_IssueTime;
    property DueDate: IXMLDueDateType_cbc read Get_DueDate;
    property InvoiceTypeCode: IXMLInvoiceTypeCodeType_cbc read Get_InvoiceTypeCode;
    property Note: IXMLNoteType_cbcList read Get_Note;
    property TaxPointDate: IXMLTaxPointDateType_cbc read Get_TaxPointDate;
    property DocumentCurrencyCode: IXMLDocumentCurrencyCodeType_cbc read Get_DocumentCurrencyCode;
    property TaxCurrencyCode: IXMLTaxCurrencyCodeType_cbc read Get_TaxCurrencyCode;
    property PricingCurrencyCode: IXMLPricingCurrencyCodeType_cbc read Get_PricingCurrencyCode;
    property PaymentCurrencyCode: IXMLPaymentCurrencyCodeType_cbc read Get_PaymentCurrencyCode;
    property PaymentAlternativeCurrencyCode: IXMLPaymentAlternativeCurrencyCodeType_cbc read Get_PaymentAlternativeCurrencyCode;
    property AccountingCostCode: IXMLAccountingCostCodeType_cbc read Get_AccountingCostCode;
    property AccountingCost: IXMLAccountingCostType_cbc read Get_AccountingCost;
    property LineCountNumeric: IXMLLineCountNumericType_cbc read Get_LineCountNumeric;
    property BuyerReference: IXMLBuyerReferenceType_cbc read Get_BuyerReference;
    property InvoicePeriod: IXMLPeriodType_cacList read Get_InvoicePeriod;
    property OrderReference: IXMLOrderReferenceType_cac read Get_OrderReference;
    property BillingReference: IXMLBillingReferenceType_cacList read Get_BillingReference;
    property DespatchDocumentReference: IXMLDocumentReferenceType_cacList read Get_DespatchDocumentReference;
    property ReceiptDocumentReference: IXMLDocumentReferenceType_cacList read Get_ReceiptDocumentReference;
    property StatementDocumentReference: IXMLDocumentReferenceType_cacList read Get_StatementDocumentReference;
    property OriginatorDocumentReference: IXMLDocumentReferenceType_cacList read Get_OriginatorDocumentReference;
    property ContractDocumentReference: IXMLDocumentReferenceType_cacList read Get_ContractDocumentReference;
    property AdditionalDocumentReference: IXMLDocumentReferenceType_cacList read Get_AdditionalDocumentReference;
    property ProjectReference: IXMLProjectReferenceType_cacList read Get_ProjectReference;
    property Signature: IXMLSignatureType_cacList read Get_Signature;
    property AccountingSupplierParty: IXMLSupplierPartyType_cac read Get_AccountingSupplierParty;
    property AccountingCustomerParty: IXMLCustomerPartyType_cac read Get_AccountingCustomerParty;
    property PayeeParty: IXMLPartyType_cac read Get_PayeeParty;
    property BuyerCustomerParty: IXMLCustomerPartyType_cac read Get_BuyerCustomerParty;
    property SellerSupplierParty: IXMLSupplierPartyType_cac read Get_SellerSupplierParty;
    property TaxRepresentativeParty: IXMLPartyType_cac read Get_TaxRepresentativeParty;
    property Delivery: IXMLDeliveryType_cacList read Get_Delivery;
    property DeliveryTerms: IXMLDeliveryTermsType_cac read Get_DeliveryTerms;
    property PaymentMeans: IXMLPaymentMeansType_cacList read Get_PaymentMeans;
    property PaymentTerms: IXMLPaymentTermsType_cacList read Get_PaymentTerms;
    property PrepaidPayment: IXMLPaymentType_cacList read Get_PrepaidPayment;
    property AllowanceCharge: IXMLAllowanceChargeType_cacList read Get_AllowanceCharge;
    property TaxExchangeRate: IXMLExchangeRateType_cac read Get_TaxExchangeRate;
    property PricingExchangeRate: IXMLExchangeRateType_cac read Get_PricingExchangeRate;
    property PaymentExchangeRate: IXMLExchangeRateType_cac read Get_PaymentExchangeRate;
    property PaymentAlternativeExchangeRate: IXMLExchangeRateType_cac read Get_PaymentAlternativeExchangeRate;
    property TaxTotal: IXMLTaxTotalType_cacList read Get_TaxTotal;
    property WithholdingTaxTotal: IXMLTaxTotalType_cacList read Get_WithholdingTaxTotal;
    property LegalMonetaryTotal: IXMLMonetaryTotalType_cac read Get_LegalMonetaryTotal;
    property InvoiceLine: IXMLInvoiceLineType_cacList read Get_InvoiceLine;
  end;

{ IXMLUBLExtensionsType_ext }

  IXMLUBLExtensionsType_ext = interface(IXMLNodeCollection)
    ['{B0FE55BA-6DAA-48E3-A6A3-A6D9FDFC474A}']
    { Property Accessors }
    function Get_UBLExtension(const Index: Integer): IXMLUBLExtensionType_ext;
    { Methods & Properties }
    function Add: IXMLUBLExtensionType_ext;
    function Insert(const Index: Integer): IXMLUBLExtensionType_ext;
    property UBLExtension[const Index: Integer]: IXMLUBLExtensionType_ext read Get_UBLExtension; default;
  end;

{ IXMLUBLExtensionType_ext }

  IXMLUBLExtensionType_ext = interface(IXMLNode)
    ['{3F594875-375F-4C8A-B53D-22AA02E6366B}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_ExtensionAgencyID: IXMLExtensionAgencyIDType_ext;
    function Get_ExtensionAgencyName: IXMLExtensionAgencyNameType_ext;
    function Get_ExtensionVersionID: IXMLExtensionVersionIDType_ext;
    function Get_ExtensionAgencyURI: IXMLExtensionAgencyURIType_ext;
    function Get_ExtensionURI: IXMLExtensionURIType_ext;
    function Get_ExtensionReasonCode: IXMLExtensionReasonCodeType_ext;
    function Get_ExtensionReason: IXMLExtensionReasonType_ext;
    function Get_ExtensionContent: IXMLExtensionContentType;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property Name: IXMLNameType_cbc read Get_Name;
    property ExtensionAgencyID: IXMLExtensionAgencyIDType_ext read Get_ExtensionAgencyID;
    property ExtensionAgencyName: IXMLExtensionAgencyNameType_ext read Get_ExtensionAgencyName;
    property ExtensionVersionID: IXMLExtensionVersionIDType_ext read Get_ExtensionVersionID;
    property ExtensionAgencyURI: IXMLExtensionAgencyURIType_ext read Get_ExtensionAgencyURI;
    property ExtensionURI: IXMLExtensionURIType_ext read Get_ExtensionURI;
    property ExtensionReasonCode: IXMLExtensionReasonCodeType_ext read Get_ExtensionReasonCode;
    property ExtensionReason: IXMLExtensionReasonType_ext read Get_ExtensionReason;
    property ExtensionContent: IXMLExtensionContentType read Get_ExtensionContent;
  end;

{ IXMLIDType_cbc }

  IXMLIDType_cbc = interface(IXMLNode)
    ['{8B4460D7-E247-446B-ACFD-5D63D36005A3}']
  end;

{ IXMLNameType_cbc }

  IXMLNameType_cbc = interface(IXMLNode)
    ['{A261DD1B-1F38-4FD7-B475-A642C52F5C3C}']
  end;

{ IXMLExtensionAgencyIDType_ext }

  IXMLExtensionAgencyIDType_ext = interface(IXMLNode)
    ['{2A39F755-63B6-490B-8E5A-6ABFAB00C785}']
  end;

{ IXMLExtensionAgencyNameType_ext }

  IXMLExtensionAgencyNameType_ext = interface(IXMLNode)
    ['{C52A279A-14D9-4EA4-AAE5-D226D1BF054D}']
  end;

{ IXMLExtensionVersionIDType_ext }

  IXMLExtensionVersionIDType_ext = interface(IXMLNode)
    ['{F1257153-70DF-44A4-9712-F75F68A4F1F2}']
  end;

{ IXMLExtensionAgencyURIType_ext }

  IXMLExtensionAgencyURIType_ext = interface(IXMLNode)
    ['{AEBF64BB-6AB6-4BC5-AF72-63CB4077F5D8}']
  end;

{ IXMLExtensionURIType_ext }

  IXMLExtensionURIType_ext = interface(IXMLNode)
    ['{DD847404-2DAD-4C13-BE0D-9437D1F5FF77}']
  end;

{ IXMLExtensionReasonCodeType_ext }

  IXMLExtensionReasonCodeType_ext = interface(IXMLNode)
    ['{6C2CAB9F-E387-4D56-A483-49EEEE39F182}']
  end;

{ IXMLExtensionReasonType_ext }

  IXMLExtensionReasonType_ext = interface(IXMLNode)
    ['{E0CA071C-E7B0-4F35-BABD-B6C7A7B96728}']
  end;

{ IXMLExtensionContentType }

  IXMLExtensionContentType = interface(IXMLNode)
    ['{2BDD261E-9CED-46BE-907E-E1FCAE741BF5}']
  end;

{ IXMLUBLVersionIDType_cbc }

  IXMLUBLVersionIDType_cbc = interface(IXMLNode)
    ['{CDE4652A-CA39-4297-8F28-2EC22850FA70}']
  end;

{ IXMLCustomizationIDType_cbc }

  IXMLCustomizationIDType_cbc = interface(IXMLNode)
    ['{A497519F-665F-4D86-AA05-8A0A615159BD}']
  end;

{ IXMLProfileIDType_cbc }

  IXMLProfileIDType_cbc = interface(IXMLNode)
    ['{3D7FA874-D0CC-40EF-935F-8CCAA64AE170}']
  end;

{ IXMLProfileExecutionIDType_cbc }

  IXMLProfileExecutionIDType_cbc = interface(IXMLNode)
    ['{ADE7C620-972A-48C9-853D-37DA7E2F0B04}']
  end;

{ IXMLCopyIndicatorType_cbc }

  IXMLCopyIndicatorType_cbc = interface(IXMLNode)
    ['{AE7C6046-6303-4C35-B820-88132929B58A}']
  end;

{ IXMLUUIDType_cbc }

  IXMLUUIDType_cbc = interface(IXMLNode)
    ['{07CAF20D-A555-4F7A-98DB-8C6D14DA91E5}']
  end;

{ IXMLIssueDateType_cbc }

  IXMLIssueDateType_cbc = interface(IXMLNode)
    ['{F9A7C8A2-9BB4-4781-B08C-434F43B9335A}']
  end;

{ IXMLIssueTimeType_cbc }

  IXMLIssueTimeType_cbc = interface(IXMLNode)
    ['{61958D67-924A-4F03-BC50-3E12B8425DBD}']
  end;

{ IXMLDueDateType_cbc }

  IXMLDueDateType_cbc = interface(IXMLNode)
    ['{E1281059-414F-4779-BABD-7D279C925026}']
  end;

{ IXMLInvoiceTypeCodeType_cbc }

  IXMLInvoiceTypeCodeType_cbc = interface(IXMLNode)
    ['{F84A3FB4-08EF-4520-98F0-2B3CD3198410}']
  end;

{ IXMLNoteType_cbc }

  IXMLNoteType_cbc = interface(IXMLNode)
    ['{0CDAA2CD-094C-4B56-9921-7BB91F366446}']
  end;

{ IXMLNoteType_cbcList }

  IXMLNoteType_cbcList = interface(IXMLNodeCollection)
    ['{01E21D6E-9210-4C19-A165-2B375034E11B}']
    { Methods & Properties }
    function Add: IXMLNoteType_cbc;
    function Insert(const Index: Integer): IXMLNoteType_cbc;

    function Get_Item(const Index: Integer): IXMLNoteType_cbc;
    property Items[const Index: Integer]: IXMLNoteType_cbc read Get_Item; default;
  end;

{ IXMLTaxPointDateType_cbc }

  IXMLTaxPointDateType_cbc = interface(IXMLNode)
    ['{EF59B467-5091-4B1B-A696-B5A7637EFCAD}']
  end;

{ IXMLDocumentCurrencyCodeType_cbc }

  IXMLDocumentCurrencyCodeType_cbc = interface(IXMLNode)
    ['{831C4C6D-1777-499A-A809-12A456229B4F}']
  end;

{ IXMLTaxCurrencyCodeType_cbc }

  IXMLTaxCurrencyCodeType_cbc = interface(IXMLNode)
    ['{93C10ABE-584E-40DE-ADF0-3451F83D5B4E}']
  end;

{ IXMLPricingCurrencyCodeType_cbc }

  IXMLPricingCurrencyCodeType_cbc = interface(IXMLNode)
    ['{48EE23CE-80CA-41EA-817F-D9B6766B28A1}']
  end;

{ IXMLPaymentCurrencyCodeType_cbc }

  IXMLPaymentCurrencyCodeType_cbc = interface(IXMLNode)
    ['{66822BB6-356A-40CA-8AFC-887184FDBEE0}']
  end;

{ IXMLPaymentAlternativeCurrencyCodeType_cbc }

  IXMLPaymentAlternativeCurrencyCodeType_cbc = interface(IXMLNode)
    ['{31C2165E-3C34-4728-9783-7571FE54FC16}']
  end;

{ IXMLAccountingCostCodeType_cbc }

  IXMLAccountingCostCodeType_cbc = interface(IXMLNode)
    ['{DCAEE3F0-C902-4975-90D1-229B67DDF559}']
  end;

{ IXMLAccountingCostType_cbc }

  IXMLAccountingCostType_cbc = interface(IXMLNode)
    ['{9BB61A1F-EA29-4B5F-80D8-AA17BD3BB7E2}']
  end;

{ IXMLLineCountNumericType_cbc }

  IXMLLineCountNumericType_cbc = interface(IXMLNode)
    ['{8CA9C05E-6A4D-4E1C-8B3F-26F802032AE0}']
  end;

{ IXMLBuyerReferenceType_cbc }

  IXMLBuyerReferenceType_cbc = interface(IXMLNode)
    ['{2F48D36A-ABDE-4A5E-A38D-4AA866C01BB8}']
  end;

{ IXMLPeriodType_cac }

  IXMLPeriodType_cac = interface(IXMLNode)
    ['{97763400-050A-43C8-A6CE-14416C9EF3A2}']
    { Property Accessors }
    function Get_StartDate: IXMLStartDateType_cbc;
    function Get_StartTime: IXMLStartTimeType_cbc;
    function Get_EndDate: IXMLEndDateType_cbc;
    function Get_EndTime: IXMLEndTimeType_cbc;
    function Get_DurationMeasure: IXMLDurationMeasureType_cbc;
    function Get_DescriptionCode: IXMLDescriptionCodeType_cbcList;
    function Get_Description: IXMLDescriptionType_cbcList;
    { Methods & Properties }
    property StartDate: IXMLStartDateType_cbc read Get_StartDate;
    property StartTime: IXMLStartTimeType_cbc read Get_StartTime;
    property EndDate: IXMLEndDateType_cbc read Get_EndDate;
    property EndTime: IXMLEndTimeType_cbc read Get_EndTime;
    property DurationMeasure: IXMLDurationMeasureType_cbc read Get_DurationMeasure;
    property DescriptionCode: IXMLDescriptionCodeType_cbcList read Get_DescriptionCode;
    property Description: IXMLDescriptionType_cbcList read Get_Description;
  end;

{ IXMLPeriodType_cacList }

  IXMLPeriodType_cacList = interface(IXMLNodeCollection)
    ['{2CE89AAF-F576-4539-BE58-A7365EDD0E3A}']
    { Methods & Properties }
    function Add: IXMLPeriodType_cac;
    function Insert(const Index: Integer): IXMLPeriodType_cac;

    function Get_Item(const Index: Integer): IXMLPeriodType_cac;
    property Items[const Index: Integer]: IXMLPeriodType_cac read Get_Item; default;
  end;

{ IXMLStartDateType_cbc }

  IXMLStartDateType_cbc = interface(IXMLNode)
    ['{9EFDF940-B9B2-4FF5-A5BC-D7BDCE4795F4}']
  end;

{ IXMLStartTimeType_cbc }

  IXMLStartTimeType_cbc = interface(IXMLNode)
    ['{E1DF43A1-BE46-4CC0-8C56-0BB5D55AC205}']
  end;

{ IXMLEndDateType_cbc }

  IXMLEndDateType_cbc = interface(IXMLNode)
    ['{D0E06E7B-174C-43A0-A7F4-BFAF176F2397}']
  end;

{ IXMLEndTimeType_cbc }

  IXMLEndTimeType_cbc = interface(IXMLNode)
    ['{BD1D754E-8F3C-4743-BB72-B8C8E91B4ED5}']
  end;

{ IXMLDurationMeasureType_cbc }

  IXMLDurationMeasureType_cbc = interface(IXMLNode)
    ['{08D85766-6EEC-46E3-871A-E395308566BF}']
  end;

{ IXMLDescriptionCodeType_cbc }

  IXMLDescriptionCodeType_cbc = interface(IXMLNode)
    ['{AB42586E-BBC4-408C-B6D3-15065D6E3F0D}']
  end;

{ IXMLDescriptionCodeType_cbcList }

  IXMLDescriptionCodeType_cbcList = interface(IXMLNodeCollection)
    ['{E5440231-6362-478D-B7BD-D51523514367}']
    { Methods & Properties }
    function Add: IXMLDescriptionCodeType_cbc;
    function Insert(const Index: Integer): IXMLDescriptionCodeType_cbc;

    function Get_Item(const Index: Integer): IXMLDescriptionCodeType_cbc;
    property Items[const Index: Integer]: IXMLDescriptionCodeType_cbc read Get_Item; default;
  end;

{ IXMLDescriptionType_cbc }

  IXMLDescriptionType_cbc = interface(IXMLNode)
    ['{C11E9220-2176-438C-A3CC-35FB8345AB83}']
  end;

{ IXMLDescriptionType_cbcList }

  IXMLDescriptionType_cbcList = interface(IXMLNodeCollection)
    ['{56D2C761-0E89-4E3A-9469-4FA1C4421516}']
    { Methods & Properties }
    function Add: IXMLDescriptionType_cbc;
    function Insert(const Index: Integer): IXMLDescriptionType_cbc;

    function Get_Item(const Index: Integer): IXMLDescriptionType_cbc;
    property Items[const Index: Integer]: IXMLDescriptionType_cbc read Get_Item; default;
  end;

{ IXMLOrderReferenceType_cac }

  IXMLOrderReferenceType_cac = interface(IXMLNode)
    ['{417A3775-32DE-4E3E-9D66-1B5672EF5060}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_SalesOrderID: IXMLSalesOrderIDType_cbc;
    function Get_CopyIndicator: IXMLCopyIndicatorType_cbc;
    function Get_UUID: IXMLUUIDType_cbc;
    function Get_IssueDate: IXMLIssueDateType_cbc;
    function Get_IssueTime: IXMLIssueTimeType_cbc;
    function Get_CustomerReference: IXMLCustomerReferenceType_cbc;
    function Get_OrderTypeCode: IXMLOrderTypeCodeType_cbc;
    function Get_DocumentReference: IXMLDocumentReferenceType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property SalesOrderID: IXMLSalesOrderIDType_cbc read Get_SalesOrderID;
    property CopyIndicator: IXMLCopyIndicatorType_cbc read Get_CopyIndicator;
    property UUID: IXMLUUIDType_cbc read Get_UUID;
    property IssueDate: IXMLIssueDateType_cbc read Get_IssueDate;
    property IssueTime: IXMLIssueTimeType_cbc read Get_IssueTime;
    property CustomerReference: IXMLCustomerReferenceType_cbc read Get_CustomerReference;
    property OrderTypeCode: IXMLOrderTypeCodeType_cbc read Get_OrderTypeCode;
    property DocumentReference: IXMLDocumentReferenceType_cac read Get_DocumentReference;
  end;

{ IXMLSalesOrderIDType_cbc }

  IXMLSalesOrderIDType_cbc = interface(IXMLNode)
    ['{118493B8-B881-4AFD-9F0B-45CC952E7516}']
  end;

{ IXMLCustomerReferenceType_cbc }

  IXMLCustomerReferenceType_cbc = interface(IXMLNode)
    ['{A9CD7519-C8B0-4852-80C5-F975E2F5BFE4}']
  end;

{ IXMLOrderTypeCodeType_cbc }

  IXMLOrderTypeCodeType_cbc = interface(IXMLNode)
    ['{47580BF2-7269-4CD0-BE93-7DC9A6F52261}']
  end;

{ IXMLDocumentReferenceType_cac }

  IXMLDocumentReferenceType_cac = interface(IXMLNode)
    ['{8A98F826-E4C1-4E49-B096-79ECA1EFDBA8}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_CopyIndicator: IXMLCopyIndicatorType_cbc;
    function Get_UUID: IXMLUUIDType_cbc;
    function Get_IssueDate: IXMLIssueDateType_cbc;
    function Get_IssueTime: IXMLIssueTimeType_cbc;
    function Get_DocumentTypeCode: IXMLDocumentTypeCodeType_cbc;
    function Get_DocumentType: IXMLDocumentTypeType_cbc;
    function Get_XPath: IXMLXPathType_cbcList;
    function Get_LanguageID: IXMLLanguageIDType_cbc;
    function Get_LocaleCode: IXMLLocaleCodeType_cbc;
    function Get_VersionID: IXMLVersionIDType_cbc;
    function Get_DocumentStatusCode: IXMLDocumentStatusCodeType_cbc;
    function Get_DocumentDescription: IXMLDocumentDescriptionType_cbcList;
    function Get_Attachment: IXMLAttachmentType_cac;
    function Get_ValidityPeriod: IXMLPeriodType_cac;
    function Get_IssuerParty: IXMLPartyType_cac;
    function Get_ResultOfVerification: IXMLResultOfVerificationType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property CopyIndicator: IXMLCopyIndicatorType_cbc read Get_CopyIndicator;
    property UUID: IXMLUUIDType_cbc read Get_UUID;
    property IssueDate: IXMLIssueDateType_cbc read Get_IssueDate;
    property IssueTime: IXMLIssueTimeType_cbc read Get_IssueTime;
    property DocumentTypeCode: IXMLDocumentTypeCodeType_cbc read Get_DocumentTypeCode;
    property DocumentType: IXMLDocumentTypeType_cbc read Get_DocumentType;
    property XPath: IXMLXPathType_cbcList read Get_XPath;
    property LanguageID: IXMLLanguageIDType_cbc read Get_LanguageID;
    property LocaleCode: IXMLLocaleCodeType_cbc read Get_LocaleCode;
    property VersionID: IXMLVersionIDType_cbc read Get_VersionID;
    property DocumentStatusCode: IXMLDocumentStatusCodeType_cbc read Get_DocumentStatusCode;
    property DocumentDescription: IXMLDocumentDescriptionType_cbcList read Get_DocumentDescription;
    property Attachment: IXMLAttachmentType_cac read Get_Attachment;
    property ValidityPeriod: IXMLPeriodType_cac read Get_ValidityPeriod;
    property IssuerParty: IXMLPartyType_cac read Get_IssuerParty;
    property ResultOfVerification: IXMLResultOfVerificationType_cac read Get_ResultOfVerification;
  end;

{ IXMLDocumentReferenceType_cacList }

  IXMLDocumentReferenceType_cacList = interface(IXMLNodeCollection)
    ['{97240E7E-EA81-4F27-A2A0-8EFA63AED5E6}']
    { Methods & Properties }
    function Add: IXMLDocumentReferenceType_cac;
    function Insert(const Index: Integer): IXMLDocumentReferenceType_cac;

    function Get_Item(const Index: Integer): IXMLDocumentReferenceType_cac;
    property Items[const Index: Integer]: IXMLDocumentReferenceType_cac read Get_Item; default;
  end;

{ IXMLDocumentTypeCodeType_cbc }

  IXMLDocumentTypeCodeType_cbc = interface(IXMLNode)
    ['{B5C3F7EF-C498-4EB5-811C-169E101074E1}']
  end;

{ IXMLDocumentTypeType_cbc }

  IXMLDocumentTypeType_cbc = interface(IXMLNode)
    ['{475B105F-C2D8-4524-8F41-53DB797A342D}']
  end;

{ IXMLXPathType_cbc }

  IXMLXPathType_cbc = interface(IXMLNode)
    ['{8EF625C6-ACB6-42EC-B463-56C38A142DB4}']
  end;

{ IXMLXPathType_cbcList }

  IXMLXPathType_cbcList = interface(IXMLNodeCollection)
    ['{156F929E-E197-446D-B37D-EE726451A4C5}']
    { Methods & Properties }
    function Add: IXMLXPathType_cbc;
    function Insert(const Index: Integer): IXMLXPathType_cbc;

    function Get_Item(const Index: Integer): IXMLXPathType_cbc;
    property Items[const Index: Integer]: IXMLXPathType_cbc read Get_Item; default;
  end;

{ IXMLLanguageIDType_cbc }

  IXMLLanguageIDType_cbc = interface(IXMLNode)
    ['{084BCC38-4B9D-4705-8E67-10A2629345D1}']
  end;

{ IXMLLocaleCodeType_cbc }

  IXMLLocaleCodeType_cbc = interface(IXMLNode)
    ['{423CAA4C-672E-4762-95B6-BDA22B51C3BF}']
  end;

{ IXMLVersionIDType_cbc }

  IXMLVersionIDType_cbc = interface(IXMLNode)
    ['{C1099F2F-8E5C-4993-9ED0-DA8C3FBC033A}']
  end;

{ IXMLDocumentStatusCodeType_cbc }

  IXMLDocumentStatusCodeType_cbc = interface(IXMLNode)
    ['{5E067E87-7E3C-49AB-AAB1-5D8346EEE3A5}']
  end;

{ IXMLDocumentDescriptionType_cbc }

  IXMLDocumentDescriptionType_cbc = interface(IXMLNode)
    ['{D761FDF6-3DDA-427B-86E3-5FDE73DE2A2F}']
  end;

{ IXMLDocumentDescriptionType_cbcList }

  IXMLDocumentDescriptionType_cbcList = interface(IXMLNodeCollection)
    ['{2E83B8BF-6345-4B3D-B97E-1B4AFAB306E9}']
    { Methods & Properties }
    function Add: IXMLDocumentDescriptionType_cbc;
    function Insert(const Index: Integer): IXMLDocumentDescriptionType_cbc;

    function Get_Item(const Index: Integer): IXMLDocumentDescriptionType_cbc;
    property Items[const Index: Integer]: IXMLDocumentDescriptionType_cbc read Get_Item; default;
  end;

{ IXMLAttachmentType_cac }

  IXMLAttachmentType_cac = interface(IXMLNode)
    ['{220AEE2A-4BB5-473C-8DD7-8EDA52EEC0C2}']
    { Property Accessors }
    function Get_EmbeddedDocumentBinaryObject: IXMLEmbeddedDocumentBinaryObjectType_cbc;
    function Get_ExternalReference: IXMLExternalReferenceType_cac;
    { Methods & Properties }
    property EmbeddedDocumentBinaryObject: IXMLEmbeddedDocumentBinaryObjectType_cbc read Get_EmbeddedDocumentBinaryObject;
    property ExternalReference: IXMLExternalReferenceType_cac read Get_ExternalReference;
  end;

{ IXMLEmbeddedDocumentBinaryObjectType_cbc }

  IXMLEmbeddedDocumentBinaryObjectType_cbc = interface(IXMLNode)
    ['{C8AB1744-7C1A-407E-89B2-6FDE4669601E}']
  end;

{ IXMLExternalReferenceType_cac }

  IXMLExternalReferenceType_cac = interface(IXMLNode)
    ['{2E6CDD92-359A-40D8-869E-8C9B34012823}']
    { Property Accessors }
    function Get_URI: IXMLURIType_cbc;
    function Get_DocumentHash: IXMLDocumentHashType_cbc;
    function Get_HashAlgorithmMethod: IXMLHashAlgorithmMethodType_cbc;
    function Get_ExpiryDate: IXMLExpiryDateType_cbc;
    function Get_ExpiryTime: IXMLExpiryTimeType_cbc;
    function Get_MimeCode: IXMLMimeCodeType_cbc;
    function Get_FormatCode: IXMLFormatCodeType_cbc;
    function Get_EncodingCode: IXMLEncodingCodeType_cbc;
    function Get_CharacterSetCode: IXMLCharacterSetCodeType_cbc;
    function Get_FileName: IXMLFileNameType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
    { Methods & Properties }
    property URI: IXMLURIType_cbc read Get_URI;
    property DocumentHash: IXMLDocumentHashType_cbc read Get_DocumentHash;
    property HashAlgorithmMethod: IXMLHashAlgorithmMethodType_cbc read Get_HashAlgorithmMethod;
    property ExpiryDate: IXMLExpiryDateType_cbc read Get_ExpiryDate;
    property ExpiryTime: IXMLExpiryTimeType_cbc read Get_ExpiryTime;
    property MimeCode: IXMLMimeCodeType_cbc read Get_MimeCode;
    property FormatCode: IXMLFormatCodeType_cbc read Get_FormatCode;
    property EncodingCode: IXMLEncodingCodeType_cbc read Get_EncodingCode;
    property CharacterSetCode: IXMLCharacterSetCodeType_cbc read Get_CharacterSetCode;
    property FileName: IXMLFileNameType_cbc read Get_FileName;
    property Description: IXMLDescriptionType_cbcList read Get_Description;
  end;

{ IXMLURIType_cbc }

  IXMLURIType_cbc = interface(IXMLNode)
    ['{019141D9-3AB6-47BE-85A2-EBADBEB50DF6}']
  end;

{ IXMLDocumentHashType_cbc }

  IXMLDocumentHashType_cbc = interface(IXMLNode)
    ['{63A1C923-8C06-41B2-8215-5C700A9BD82A}']
  end;

{ IXMLHashAlgorithmMethodType_cbc }

  IXMLHashAlgorithmMethodType_cbc = interface(IXMLNode)
    ['{0B9C74AC-48E1-4F54-8206-BF95593DF244}']
  end;

{ IXMLExpiryDateType_cbc }

  IXMLExpiryDateType_cbc = interface(IXMLNode)
    ['{FF429BA1-30E0-447D-9D08-D2ADBF99A3C7}']
  end;

{ IXMLExpiryTimeType_cbc }

  IXMLExpiryTimeType_cbc = interface(IXMLNode)
    ['{3C953B5B-4003-44E6-B8C9-474E39C78E7E}']
  end;

{ IXMLMimeCodeType_cbc }

  IXMLMimeCodeType_cbc = interface(IXMLNode)
    ['{37841615-3695-4AB5-991F-18B3F93022F6}']
  end;

{ IXMLFormatCodeType_cbc }

  IXMLFormatCodeType_cbc = interface(IXMLNode)
    ['{4D6C5ABE-1C93-42C7-B965-94C382083EE6}']
  end;

{ IXMLEncodingCodeType_cbc }

  IXMLEncodingCodeType_cbc = interface(IXMLNode)
    ['{91A6C962-8C86-4C18-940C-95BDAE691E23}']
  end;

{ IXMLCharacterSetCodeType_cbc }

  IXMLCharacterSetCodeType_cbc = interface(IXMLNode)
    ['{AEC87347-3CE6-4B40-8ABF-1822AD5DEA51}']
  end;

{ IXMLFileNameType_cbc }

  IXMLFileNameType_cbc = interface(IXMLNode)
    ['{2F6A9C7F-5CBC-44BF-B1C3-B4E725C870B3}']
  end;

{ IXMLPartyType_cac }

  IXMLPartyType_cac = interface(IXMLNode)
    ['{3B23047A-5E4F-4B9D-A38F-332C0C18B047}']
    { Property Accessors }
    function Get_MarkCareIndicator: IXMLMarkCareIndicatorType_cbc;
    function Get_MarkAttentionIndicator: IXMLMarkAttentionIndicatorType_cbc;
    function Get_WebsiteURI: IXMLWebsiteURIType_cbc;
    function Get_LogoReferenceID: IXMLLogoReferenceIDType_cbc;
    function Get_EndpointID: IXMLEndpointIDType_cbc;
    function Get_IndustryClassificationCode: IXMLIndustryClassificationCodeType_cbc;
    function Get_PartyIdentification: IXMLPartyIdentificationType_cacList;
    function Get_PartyName: IXMLPartyNameType_cacList;
    function Get_Language: IXMLLanguageType_cac;
    function Get_PostalAddress: IXMLAddressType_cac;
    function Get_PhysicalLocation: IXMLLocationType_cac;
    function Get_PartyTaxScheme: IXMLPartyTaxSchemeType_cacList;
    function Get_PartyLegalEntity: IXMLPartyLegalEntityType_cacList;
    function Get_Contact: IXMLContactType_cac;
    function Get_Person: IXMLPersonType_cacList;
    function Get_AgentParty: IXMLPartyType_cac;
    function Get_ServiceProviderParty: IXMLServiceProviderPartyType_cacList;
    function Get_PowerOfAttorney: IXMLPowerOfAttorneyType_cacList;
    function Get_FinancialAccount: IXMLFinancialAccountType_cac;
    { Methods & Properties }
    property MarkCareIndicator: IXMLMarkCareIndicatorType_cbc read Get_MarkCareIndicator;
    property MarkAttentionIndicator: IXMLMarkAttentionIndicatorType_cbc read Get_MarkAttentionIndicator;
    property WebsiteURI: IXMLWebsiteURIType_cbc read Get_WebsiteURI;
    property LogoReferenceID: IXMLLogoReferenceIDType_cbc read Get_LogoReferenceID;
    property EndpointID: IXMLEndpointIDType_cbc read Get_EndpointID;
    property IndustryClassificationCode: IXMLIndustryClassificationCodeType_cbc read Get_IndustryClassificationCode;
    property PartyIdentification: IXMLPartyIdentificationType_cacList read Get_PartyIdentification;
    property PartyName: IXMLPartyNameType_cacList read Get_PartyName;
    property Language: IXMLLanguageType_cac read Get_Language;
    property PostalAddress: IXMLAddressType_cac read Get_PostalAddress;
    property PhysicalLocation: IXMLLocationType_cac read Get_PhysicalLocation;
    property PartyTaxScheme: IXMLPartyTaxSchemeType_cacList read Get_PartyTaxScheme;
    property PartyLegalEntity: IXMLPartyLegalEntityType_cacList read Get_PartyLegalEntity;
    property Contact: IXMLContactType_cac read Get_Contact;
    property Person: IXMLPersonType_cacList read Get_Person;
    property AgentParty: IXMLPartyType_cac read Get_AgentParty;
    property ServiceProviderParty: IXMLServiceProviderPartyType_cacList read Get_ServiceProviderParty;
    property PowerOfAttorney: IXMLPowerOfAttorneyType_cacList read Get_PowerOfAttorney;
    property FinancialAccount: IXMLFinancialAccountType_cac read Get_FinancialAccount;
  end;

{ IXMLPartyType_cacList }

  IXMLPartyType_cacList = interface(IXMLNodeCollection)
    ['{94DA37D5-11DC-4B96-A62B-98EEAF5320BA}']
    { Methods & Properties }
    function Add: IXMLPartyType_cac;
    function Insert(const Index: Integer): IXMLPartyType_cac;

    function Get_Item(const Index: Integer): IXMLPartyType_cac;
    property Items[const Index: Integer]: IXMLPartyType_cac read Get_Item; default;
  end;

{ IXMLMarkCareIndicatorType_cbc }

  IXMLMarkCareIndicatorType_cbc = interface(IXMLNode)
    ['{5A6D7AA6-BDEE-48BC-A172-1EF1E95B9985}']
  end;

{ IXMLMarkAttentionIndicatorType_cbc }

  IXMLMarkAttentionIndicatorType_cbc = interface(IXMLNode)
    ['{9C455626-31C3-4CC7-948D-15FD511E742B}']
  end;

{ IXMLWebsiteURIType_cbc }

  IXMLWebsiteURIType_cbc = interface(IXMLNode)
    ['{E73635C0-D417-4E54-8A78-81EC7982C215}']
  end;

{ IXMLLogoReferenceIDType_cbc }

  IXMLLogoReferenceIDType_cbc = interface(IXMLNode)
    ['{B0DABA9D-B423-4555-8CA9-36B1FCAD3718}']
  end;

{ IXMLEndpointIDType_cbc }

  IXMLEndpointIDType_cbc = interface(IXMLNode)
    ['{A52992F1-1F7C-4306-8C75-89C6661266FD}']
  end;

{ IXMLIndustryClassificationCodeType_cbc }

  IXMLIndustryClassificationCodeType_cbc = interface(IXMLNode)
    ['{E2A5F642-F84F-4B60-AD24-4992D83C3C22}']
  end;

{ IXMLPartyIdentificationType_cac }

  IXMLPartyIdentificationType_cac = interface(IXMLNode)
    ['{C644B00D-AA02-4E19-BFCE-5F349167156B}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
  end;

{ IXMLPartyIdentificationType_cacList }

  IXMLPartyIdentificationType_cacList = interface(IXMLNodeCollection)
    ['{66342D1B-D1C9-42D0-85D8-1EFBD0C7C7F2}']
    { Methods & Properties }
    function Add: IXMLPartyIdentificationType_cac;
    function Insert(const Index: Integer): IXMLPartyIdentificationType_cac;

    function Get_Item(const Index: Integer): IXMLPartyIdentificationType_cac;
    property Items[const Index: Integer]: IXMLPartyIdentificationType_cac read Get_Item; default;
  end;

{ IXMLPartyNameType_cac }

  IXMLPartyNameType_cac = interface(IXMLNode)
    ['{96E01476-7DFC-42C9-BF96-BEB56F9576AA}']
    { Property Accessors }
    function Get_Name: IXMLNameType_cbc;
    { Methods & Properties }
    property Name: IXMLNameType_cbc read Get_Name;
  end;

{ IXMLPartyNameType_cacList }

  IXMLPartyNameType_cacList = interface(IXMLNodeCollection)
    ['{4EEA7AB2-2A69-48FF-9120-186D046F0D50}']
    { Methods & Properties }
    function Add: IXMLPartyNameType_cac;
    function Insert(const Index: Integer): IXMLPartyNameType_cac;

    function Get_Item(const Index: Integer): IXMLPartyNameType_cac;
    property Items[const Index: Integer]: IXMLPartyNameType_cac read Get_Item; default;
  end;

{ IXMLLanguageType_cac }

  IXMLLanguageType_cac = interface(IXMLNode)
    ['{8F557485-6F67-4A08-A1BB-90479B6379D2}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_LocaleCode: IXMLLocaleCodeType_cbc;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property Name: IXMLNameType_cbc read Get_Name;
    property LocaleCode: IXMLLocaleCodeType_cbc read Get_LocaleCode;
  end;

{ IXMLAddressType_cac }

  IXMLAddressType_cac = interface(IXMLNode)
    ['{1F9D4D93-66E4-48FB-8413-EA1408E9155B}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_AddressTypeCode: IXMLAddressTypeCodeType_cbc;
    function Get_AddressFormatCode: IXMLAddressFormatCodeType_cbc;
    function Get_Postbox: IXMLPostboxType_cbc;
    function Get_Floor: IXMLFloorType_cbc;
    function Get_Room: IXMLRoomType_cbc;
    function Get_StreetName: IXMLStreetNameType_cbc;
    function Get_AdditionalStreetName: IXMLAdditionalStreetNameType_cbc;
    function Get_BlockName: IXMLBlockNameType_cbc;
    function Get_BuildingName: IXMLBuildingNameType_cbc;
    function Get_BuildingNumber: IXMLBuildingNumberType_cbc;
    function Get_InhouseMail: IXMLInhouseMailType_cbc;
    function Get_Department: IXMLDepartmentType_cbc;
    function Get_MarkAttention: IXMLMarkAttentionType_cbc;
    function Get_MarkCare: IXMLMarkCareType_cbc;
    function Get_PlotIdentification: IXMLPlotIdentificationType_cbc;
    function Get_CitySubdivisionName: IXMLCitySubdivisionNameType_cbc;
    function Get_CityName: IXMLCityNameType_cbc;
    function Get_PostalZone: IXMLPostalZoneType_cbc;
    function Get_CountrySubentity: IXMLCountrySubentityType_cbc;
    function Get_CountrySubentityCode: IXMLCountrySubentityCodeType_cbc;
    function Get_Region: IXMLRegionType_cbc;
    function Get_District: IXMLDistrictType_cbc;
    function Get_TimezoneOffset: IXMLTimezoneOffsetType_cbc;
    function Get_AddressLine: IXMLAddressLineType_cacList;
    function Get_Country: IXMLCountryType_cac;
    function Get_LocationCoordinate: IXMLLocationCoordinateType_cacList;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property AddressTypeCode: IXMLAddressTypeCodeType_cbc read Get_AddressTypeCode;
    property AddressFormatCode: IXMLAddressFormatCodeType_cbc read Get_AddressFormatCode;
    property Postbox: IXMLPostboxType_cbc read Get_Postbox;
    property Floor: IXMLFloorType_cbc read Get_Floor;
    property Room: IXMLRoomType_cbc read Get_Room;
    property StreetName: IXMLStreetNameType_cbc read Get_StreetName;
    property AdditionalStreetName: IXMLAdditionalStreetNameType_cbc read Get_AdditionalStreetName;
    property BlockName: IXMLBlockNameType_cbc read Get_BlockName;
    property BuildingName: IXMLBuildingNameType_cbc read Get_BuildingName;
    property BuildingNumber: IXMLBuildingNumberType_cbc read Get_BuildingNumber;
    property InhouseMail: IXMLInhouseMailType_cbc read Get_InhouseMail;
    property Department: IXMLDepartmentType_cbc read Get_Department;
    property MarkAttention: IXMLMarkAttentionType_cbc read Get_MarkAttention;
    property MarkCare: IXMLMarkCareType_cbc read Get_MarkCare;
    property PlotIdentification: IXMLPlotIdentificationType_cbc read Get_PlotIdentification;
    property CitySubdivisionName: IXMLCitySubdivisionNameType_cbc read Get_CitySubdivisionName;
    property CityName: IXMLCityNameType_cbc read Get_CityName;
    property PostalZone: IXMLPostalZoneType_cbc read Get_PostalZone;
    property CountrySubentity: IXMLCountrySubentityType_cbc read Get_CountrySubentity;
    property CountrySubentityCode: IXMLCountrySubentityCodeType_cbc read Get_CountrySubentityCode;
    property Region: IXMLRegionType_cbc read Get_Region;
    property District: IXMLDistrictType_cbc read Get_District;
    property TimezoneOffset: IXMLTimezoneOffsetType_cbc read Get_TimezoneOffset;
    property AddressLine: IXMLAddressLineType_cacList read Get_AddressLine;
    property Country: IXMLCountryType_cac read Get_Country;
    property LocationCoordinate: IXMLLocationCoordinateType_cacList read Get_LocationCoordinate;
  end;

{ IXMLAddressType_cacList }

  IXMLAddressType_cacList = interface(IXMLNodeCollection)
    ['{DDD6AEDA-8371-4208-A6E8-70BF57705B1F}']
    { Methods & Properties }
    function Add: IXMLAddressType_cac;
    function Insert(const Index: Integer): IXMLAddressType_cac;

    function Get_Item(const Index: Integer): IXMLAddressType_cac;
    property Items[const Index: Integer]: IXMLAddressType_cac read Get_Item; default;
  end;

{ IXMLAddressTypeCodeType_cbc }

  IXMLAddressTypeCodeType_cbc = interface(IXMLNode)
    ['{7ACCFCB1-68AE-4F0A-A159-9BDFCA0082E6}']
  end;

{ IXMLAddressFormatCodeType_cbc }

  IXMLAddressFormatCodeType_cbc = interface(IXMLNode)
    ['{D8B35A5D-AB01-4B37-ACD0-BC71C9987F75}']
  end;

{ IXMLPostboxType_cbc }

  IXMLPostboxType_cbc = interface(IXMLNode)
    ['{BD44827C-51E8-4AF4-B5A6-48034C6083B7}']
  end;

{ IXMLFloorType_cbc }

  IXMLFloorType_cbc = interface(IXMLNode)
    ['{A18F8AF7-4090-4DF5-A719-2C24D38B6014}']
  end;

{ IXMLRoomType_cbc }

  IXMLRoomType_cbc = interface(IXMLNode)
    ['{8901397B-0E39-4ACA-8367-C48C528F9258}']
  end;

{ IXMLStreetNameType_cbc }

  IXMLStreetNameType_cbc = interface(IXMLNode)
    ['{475B1C17-2F28-45EA-A198-467109ACBE5A}']
  end;

{ IXMLAdditionalStreetNameType_cbc }

  IXMLAdditionalStreetNameType_cbc = interface(IXMLNode)
    ['{BC587F4C-D6D0-48B1-94AE-86DA151021AF}']
  end;

{ IXMLBlockNameType_cbc }

  IXMLBlockNameType_cbc = interface(IXMLNode)
    ['{2A3E765F-9A95-44AF-93EC-5664F3521A01}']
  end;

{ IXMLBuildingNameType_cbc }

  IXMLBuildingNameType_cbc = interface(IXMLNode)
    ['{464E0C27-184C-4A61-81F3-C8B39F340342}']
  end;

{ IXMLBuildingNumberType_cbc }

  IXMLBuildingNumberType_cbc = interface(IXMLNode)
    ['{4AB94B7F-19A4-4E16-B1B4-724AA05FD639}']
  end;

{ IXMLInhouseMailType_cbc }

  IXMLInhouseMailType_cbc = interface(IXMLNode)
    ['{7CDC5CC7-E9DB-4D5F-B321-45310F78382A}']
  end;

{ IXMLDepartmentType_cbc }

  IXMLDepartmentType_cbc = interface(IXMLNode)
    ['{1FF5C194-3DD0-4358-9525-529614347B0B}']
  end;

{ IXMLMarkAttentionType_cbc }

  IXMLMarkAttentionType_cbc = interface(IXMLNode)
    ['{3971E1C8-04E2-4B27-83F6-0517A152C330}']
  end;

{ IXMLMarkCareType_cbc }

  IXMLMarkCareType_cbc = interface(IXMLNode)
    ['{EB88089E-E5FA-4096-84E2-21E21BF85E0C}']
  end;

{ IXMLPlotIdentificationType_cbc }

  IXMLPlotIdentificationType_cbc = interface(IXMLNode)
    ['{909269B5-B241-42B0-A995-783BE7D8F017}']
  end;

{ IXMLCitySubdivisionNameType_cbc }

  IXMLCitySubdivisionNameType_cbc = interface(IXMLNode)
    ['{05789732-F517-414C-ABF6-5222289BDD62}']
  end;

{ IXMLCityNameType_cbc }

  IXMLCityNameType_cbc = interface(IXMLNode)
    ['{4C64CD8C-A4C5-41FA-B4B4-515DF7553D3E}']
  end;

{ IXMLPostalZoneType_cbc }

  IXMLPostalZoneType_cbc = interface(IXMLNode)
    ['{F2167B31-3A8F-4965-AA38-16F1986922CD}']
  end;

{ IXMLCountrySubentityType_cbc }

  IXMLCountrySubentityType_cbc = interface(IXMLNode)
    ['{5030F32D-4F96-4993-B87D-FBC59B4CD890}']
  end;

{ IXMLCountrySubentityCodeType_cbc }

  IXMLCountrySubentityCodeType_cbc = interface(IXMLNode)
    ['{CA955FB2-7E7D-4540-9FBD-771C0D6CFF14}']
  end;

{ IXMLRegionType_cbc }

  IXMLRegionType_cbc = interface(IXMLNode)
    ['{27E35102-76DF-428C-89B8-EABCDBFDCA30}']
  end;

{ IXMLDistrictType_cbc }

  IXMLDistrictType_cbc = interface(IXMLNode)
    ['{311BAA21-6735-431E-8350-C6064216DF45}']
  end;

{ IXMLTimezoneOffsetType_cbc }

  IXMLTimezoneOffsetType_cbc = interface(IXMLNode)
    ['{0E5628B1-7212-4EC2-B363-BF6F5CBDFD8B}']
  end;

{ IXMLAddressLineType_cac }

  IXMLAddressLineType_cac = interface(IXMLNode)
    ['{A6D0994E-573C-4620-916A-0186693B6887}']
    { Property Accessors }
    function Get_Line: IXMLLineType_cbc;
    { Methods & Properties }
    property Line: IXMLLineType_cbc read Get_Line;
  end;

{ IXMLAddressLineType_cacList }

  IXMLAddressLineType_cacList = interface(IXMLNodeCollection)
    ['{9469B237-AEC9-4CAA-91BF-5E433ED3A544}']
    { Methods & Properties }
    function Add: IXMLAddressLineType_cac;
    function Insert(const Index: Integer): IXMLAddressLineType_cac;

    function Get_Item(const Index: Integer): IXMLAddressLineType_cac;
    property Items[const Index: Integer]: IXMLAddressLineType_cac read Get_Item; default;
  end;

{ IXMLLineType_cbc }

  IXMLLineType_cbc = interface(IXMLNode)
    ['{527E1D42-3387-42D4-B24C-A4F65AB55A71}']
  end;

{ IXMLCountryType_cac }

  IXMLCountryType_cac = interface(IXMLNode)
    ['{11C6F732-46CF-428F-B3EB-F34D7BFBBEA9}']
    { Property Accessors }
    function Get_IdentificationCode: IXMLIdentificationCodeType_cbc;
    function Get_Name: IXMLNameType_cbc;
    { Methods & Properties }
    property IdentificationCode: IXMLIdentificationCodeType_cbc read Get_IdentificationCode;
    property Name: IXMLNameType_cbc read Get_Name;
  end;

{ IXMLCountryType_cacList }

  IXMLCountryType_cacList = interface(IXMLNodeCollection)
    ['{A26E651F-DB06-4B96-9408-106809DA95DB}']
    { Methods & Properties }
    function Add: IXMLCountryType_cac;
    function Insert(const Index: Integer): IXMLCountryType_cac;

    function Get_Item(const Index: Integer): IXMLCountryType_cac;
    property Items[const Index: Integer]: IXMLCountryType_cac read Get_Item; default;
  end;

{ IXMLIdentificationCodeType_cbc }

  IXMLIdentificationCodeType_cbc = interface(IXMLNode)
    ['{EFD05A65-F940-4E9C-843A-982229A9A08C}']
  end;

{ IXMLLocationCoordinateType_cac }

  IXMLLocationCoordinateType_cac = interface(IXMLNode)
    ['{0C013B0C-D5B2-44AC-97D3-6E9375F5A443}']
    { Property Accessors }
    function Get_CoordinateSystemCode: IXMLCoordinateSystemCodeType_cbc;
    function Get_LatitudeDegreesMeasure: IXMLLatitudeDegreesMeasureType_cbc;
    function Get_LatitudeMinutesMeasure: IXMLLatitudeMinutesMeasureType_cbc;
    function Get_LatitudeDirectionCode: IXMLLatitudeDirectionCodeType_cbc;
    function Get_LongitudeDegreesMeasure: IXMLLongitudeDegreesMeasureType_cbc;
    function Get_LongitudeMinutesMeasure: IXMLLongitudeMinutesMeasureType_cbc;
    function Get_LongitudeDirectionCode: IXMLLongitudeDirectionCodeType_cbc;
    function Get_AltitudeMeasure: IXMLAltitudeMeasureType_cbc;
    { Methods & Properties }
    property CoordinateSystemCode: IXMLCoordinateSystemCodeType_cbc read Get_CoordinateSystemCode;
    property LatitudeDegreesMeasure: IXMLLatitudeDegreesMeasureType_cbc read Get_LatitudeDegreesMeasure;
    property LatitudeMinutesMeasure: IXMLLatitudeMinutesMeasureType_cbc read Get_LatitudeMinutesMeasure;
    property LatitudeDirectionCode: IXMLLatitudeDirectionCodeType_cbc read Get_LatitudeDirectionCode;
    property LongitudeDegreesMeasure: IXMLLongitudeDegreesMeasureType_cbc read Get_LongitudeDegreesMeasure;
    property LongitudeMinutesMeasure: IXMLLongitudeMinutesMeasureType_cbc read Get_LongitudeMinutesMeasure;
    property LongitudeDirectionCode: IXMLLongitudeDirectionCodeType_cbc read Get_LongitudeDirectionCode;
    property AltitudeMeasure: IXMLAltitudeMeasureType_cbc read Get_AltitudeMeasure;
  end;

{ IXMLLocationCoordinateType_cacList }

  IXMLLocationCoordinateType_cacList = interface(IXMLNodeCollection)
    ['{93DDDE17-659D-4FCE-8F2A-5F9384E69474}']
    { Methods & Properties }
    function Add: IXMLLocationCoordinateType_cac;
    function Insert(const Index: Integer): IXMLLocationCoordinateType_cac;

    function Get_Item(const Index: Integer): IXMLLocationCoordinateType_cac;
    property Items[const Index: Integer]: IXMLLocationCoordinateType_cac read Get_Item; default;
  end;

{ IXMLCoordinateSystemCodeType_cbc }

  IXMLCoordinateSystemCodeType_cbc = interface(IXMLNode)
    ['{337A0700-1A6B-4991-9012-5A5950E9DD6C}']
  end;

{ IXMLLatitudeDegreesMeasureType_cbc }

  IXMLLatitudeDegreesMeasureType_cbc = interface(IXMLNode)
    ['{61C4DAFB-043D-446D-8BF7-2A7CE191C180}']
  end;

{ IXMLLatitudeMinutesMeasureType_cbc }

  IXMLLatitudeMinutesMeasureType_cbc = interface(IXMLNode)
    ['{6315DC4F-95BE-4219-8F26-9F8437FCD067}']
  end;

{ IXMLLatitudeDirectionCodeType_cbc }

  IXMLLatitudeDirectionCodeType_cbc = interface(IXMLNode)
    ['{06B5783C-FD63-4BD6-A150-F0D00AA368B3}']
  end;

{ IXMLLongitudeDegreesMeasureType_cbc }

  IXMLLongitudeDegreesMeasureType_cbc = interface(IXMLNode)
    ['{9211E5EB-81DA-4873-8B9E-3B13737A0332}']
  end;

{ IXMLLongitudeMinutesMeasureType_cbc }

  IXMLLongitudeMinutesMeasureType_cbc = interface(IXMLNode)
    ['{90513A09-DC75-4EA2-A258-D64AB61DE8A6}']
  end;

{ IXMLLongitudeDirectionCodeType_cbc }

  IXMLLongitudeDirectionCodeType_cbc = interface(IXMLNode)
    ['{AF9382B8-3B9E-4D77-9017-864F6F3F2FBA}']
  end;

{ IXMLAltitudeMeasureType_cbc }

  IXMLAltitudeMeasureType_cbc = interface(IXMLNode)
    ['{F73F6477-E02D-4D6C-A7EB-05D016EDF6B4}']
  end;

{ IXMLLocationType_cac }

  IXMLLocationType_cac = interface(IXMLNode)
    ['{3CF37D4C-7586-46A5-9563-FD6F768964E1}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_Conditions: IXMLConditionsType_cbcList;
    function Get_CountrySubentity: IXMLCountrySubentityType_cbc;
    function Get_CountrySubentityCode: IXMLCountrySubentityCodeType_cbc;
    function Get_LocationTypeCode: IXMLLocationTypeCodeType_cbc;
    function Get_InformationURI: IXMLInformationURIType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_ValidityPeriod: IXMLPeriodType_cacList;
    function Get_Address: IXMLAddressType_cac;
    function Get_SubsidiaryLocation: IXMLLocationType_cacList;
    function Get_LocationCoordinate: IXMLLocationCoordinateType_cacList;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property Description: IXMLDescriptionType_cbcList read Get_Description;
    property Conditions: IXMLConditionsType_cbcList read Get_Conditions;
    property CountrySubentity: IXMLCountrySubentityType_cbc read Get_CountrySubentity;
    property CountrySubentityCode: IXMLCountrySubentityCodeType_cbc read Get_CountrySubentityCode;
    property LocationTypeCode: IXMLLocationTypeCodeType_cbc read Get_LocationTypeCode;
    property InformationURI: IXMLInformationURIType_cbc read Get_InformationURI;
    property Name: IXMLNameType_cbc read Get_Name;
    property ValidityPeriod: IXMLPeriodType_cacList read Get_ValidityPeriod;
    property Address: IXMLAddressType_cac read Get_Address;
    property SubsidiaryLocation: IXMLLocationType_cacList read Get_SubsidiaryLocation;
    property LocationCoordinate: IXMLLocationCoordinateType_cacList read Get_LocationCoordinate;
  end;

{ IXMLLocationType_cacList }

  IXMLLocationType_cacList = interface(IXMLNodeCollection)
    ['{C75F0C02-0ED2-423D-A0EE-527C4A6AA327}']
    { Methods & Properties }
    function Add: IXMLLocationType_cac;
    function Insert(const Index: Integer): IXMLLocationType_cac;

    function Get_Item(const Index: Integer): IXMLLocationType_cac;
    property Items[const Index: Integer]: IXMLLocationType_cac read Get_Item; default;
  end;

{ IXMLConditionsType_cbc }

  IXMLConditionsType_cbc = interface(IXMLNode)
    ['{5E733FEB-AFEE-4C6B-A07D-94C74BA10A75}']
  end;

{ IXMLConditionsType_cbcList }

  IXMLConditionsType_cbcList = interface(IXMLNodeCollection)
    ['{3A895CD0-50B6-40D6-B129-EA9336BC5A58}']
    { Methods & Properties }
    function Add: IXMLConditionsType_cbc;
    function Insert(const Index: Integer): IXMLConditionsType_cbc;

    function Get_Item(const Index: Integer): IXMLConditionsType_cbc;
    property Items[const Index: Integer]: IXMLConditionsType_cbc read Get_Item; default;
  end;

{ IXMLLocationTypeCodeType_cbc }

  IXMLLocationTypeCodeType_cbc = interface(IXMLNode)
    ['{AE4B55B4-1920-4C09-927E-95DF188CE9AC}']
  end;

{ IXMLInformationURIType_cbc }

  IXMLInformationURIType_cbc = interface(IXMLNode)
    ['{172486A8-0556-42A7-BE5E-487117B97BB0}']
  end;

{ IXMLPartyTaxSchemeType_cac }

  IXMLPartyTaxSchemeType_cac = interface(IXMLNode)
    ['{48064C02-E14A-4750-B397-FD6FCA25CE77}']
    { Property Accessors }
    function Get_RegistrationName: IXMLRegistrationNameType_cbc;
    function Get_CompanyID: IXMLCompanyIDType_cbc;
    function Get_TaxLevelCode: IXMLTaxLevelCodeType_cbc;
    function Get_ExemptionReasonCode: IXMLExemptionReasonCodeType_cbc;
    function Get_ExemptionReason: IXMLExemptionReasonType_cbcList;
    function Get_RegistrationAddress: IXMLAddressType_cac;
    function Get_TaxScheme: IXMLTaxSchemeType_cac;
    { Methods & Properties }
    property RegistrationName: IXMLRegistrationNameType_cbc read Get_RegistrationName;
    property CompanyID: IXMLCompanyIDType_cbc read Get_CompanyID;
    property TaxLevelCode: IXMLTaxLevelCodeType_cbc read Get_TaxLevelCode;
    property ExemptionReasonCode: IXMLExemptionReasonCodeType_cbc read Get_ExemptionReasonCode;
    property ExemptionReason: IXMLExemptionReasonType_cbcList read Get_ExemptionReason;
    property RegistrationAddress: IXMLAddressType_cac read Get_RegistrationAddress;
    property TaxScheme: IXMLTaxSchemeType_cac read Get_TaxScheme;
  end;

{ IXMLPartyTaxSchemeType_cacList }

  IXMLPartyTaxSchemeType_cacList = interface(IXMLNodeCollection)
    ['{BF0AEC22-F868-4DEA-8A7C-04A809B2829C}']
    { Methods & Properties }
    function Add: IXMLPartyTaxSchemeType_cac;
    function Insert(const Index: Integer): IXMLPartyTaxSchemeType_cac;

    function Get_Item(const Index: Integer): IXMLPartyTaxSchemeType_cac;
    property Items[const Index: Integer]: IXMLPartyTaxSchemeType_cac read Get_Item; default;
  end;

{ IXMLRegistrationNameType_cbc }

  IXMLRegistrationNameType_cbc = interface(IXMLNode)
    ['{09809744-41B4-4883-B8DE-5C8F88F9204A}']
  end;

{ IXMLCompanyIDType_cbc }

  IXMLCompanyIDType_cbc = interface(IXMLNode)
    ['{D2C80DBC-5F3E-45EF-8438-2715C0AD1024}']
  end;

{ IXMLTaxLevelCodeType_cbc }

  IXMLTaxLevelCodeType_cbc = interface(IXMLNode)
    ['{27687014-74C3-432C-A22B-578ED8FFC690}']
  end;

{ IXMLExemptionReasonCodeType_cbc }

  IXMLExemptionReasonCodeType_cbc = interface(IXMLNode)
    ['{A36DEC16-4A6D-48E1-A73A-FCE020A0DD29}']
  end;

{ IXMLExemptionReasonType_cbc }

  IXMLExemptionReasonType_cbc = interface(IXMLNode)
    ['{0AEC1ED9-3E1F-47FB-AACA-486AA99AF65F}']
  end;

{ IXMLExemptionReasonType_cbcList }

  IXMLExemptionReasonType_cbcList = interface(IXMLNodeCollection)
    ['{26B2111A-B877-4EAF-87BB-1A6818B17BA4}']
    { Methods & Properties }
    function Add: IXMLExemptionReasonType_cbc;
    function Insert(const Index: Integer): IXMLExemptionReasonType_cbc;

    function Get_Item(const Index: Integer): IXMLExemptionReasonType_cbc;
    property Items[const Index: Integer]: IXMLExemptionReasonType_cbc read Get_Item; default;
  end;

{ IXMLTaxSchemeType_cac }

  IXMLTaxSchemeType_cac = interface(IXMLNode)
    ['{8822CDC5-8758-4F9D-9FE0-DE72F4BC8ED9}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_TaxTypeCode: IXMLTaxTypeCodeType_cbc;
    function Get_CurrencyCode: IXMLCurrencyCodeType_cbc;
    function Get_JurisdictionRegionAddress: IXMLAddressType_cacList;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property Name: IXMLNameType_cbc read Get_Name;
    property TaxTypeCode: IXMLTaxTypeCodeType_cbc read Get_TaxTypeCode;
    property CurrencyCode: IXMLCurrencyCodeType_cbc read Get_CurrencyCode;
    property JurisdictionRegionAddress: IXMLAddressType_cacList read Get_JurisdictionRegionAddress;
  end;

{ IXMLTaxTypeCodeType_cbc }

  IXMLTaxTypeCodeType_cbc = interface(IXMLNode)
    ['{CC021941-F37D-4E50-BD79-0A2AB7C2B053}']
  end;

{ IXMLCurrencyCodeType_cbc }

  IXMLCurrencyCodeType_cbc = interface(IXMLNode)
    ['{03BB165D-3405-4068-AC0F-7B47A44FBE9A}']
  end;

{ IXMLPartyLegalEntityType_cac }

  IXMLPartyLegalEntityType_cac = interface(IXMLNode)
    ['{B016BC71-427C-458F-A597-6F58D7733EC9}']
    { Property Accessors }
    function Get_RegistrationName: IXMLRegistrationNameType_cbc;
    function Get_CompanyID: IXMLCompanyIDType_cbc;
    function Get_RegistrationDate: IXMLRegistrationDateType_cbc;
    function Get_RegistrationExpirationDate: IXMLRegistrationExpirationDateType_cbc;
    function Get_CompanyLegalFormCode: IXMLCompanyLegalFormCodeType_cbc;
    function Get_CompanyLegalForm: IXMLCompanyLegalFormType_cbc;
    function Get_SoleProprietorshipIndicator: IXMLSoleProprietorshipIndicatorType_cbc;
    function Get_CompanyLiquidationStatusCode: IXMLCompanyLiquidationStatusCodeType_cbc;
    function Get_CorporateStockAmount: IXMLCorporateStockAmountType_cbc;
    function Get_FullyPaidSharesIndicator: IXMLFullyPaidSharesIndicatorType_cbc;
    function Get_RegistrationAddress: IXMLAddressType_cac;
    function Get_CorporateRegistrationScheme: IXMLCorporateRegistrationSchemeType_cac;
    function Get_HeadOfficeParty: IXMLPartyType_cac;
    function Get_ShareholderParty: IXMLShareholderPartyType_cacList;
    { Methods & Properties }
    property RegistrationName: IXMLRegistrationNameType_cbc read Get_RegistrationName;
    property CompanyID: IXMLCompanyIDType_cbc read Get_CompanyID;
    property RegistrationDate: IXMLRegistrationDateType_cbc read Get_RegistrationDate;
    property RegistrationExpirationDate: IXMLRegistrationExpirationDateType_cbc read Get_RegistrationExpirationDate;
    property CompanyLegalFormCode: IXMLCompanyLegalFormCodeType_cbc read Get_CompanyLegalFormCode;
    property CompanyLegalForm: IXMLCompanyLegalFormType_cbc read Get_CompanyLegalForm;
    property SoleProprietorshipIndicator: IXMLSoleProprietorshipIndicatorType_cbc read Get_SoleProprietorshipIndicator;
    property CompanyLiquidationStatusCode: IXMLCompanyLiquidationStatusCodeType_cbc read Get_CompanyLiquidationStatusCode;
    property CorporateStockAmount: IXMLCorporateStockAmountType_cbc read Get_CorporateStockAmount;
    property FullyPaidSharesIndicator: IXMLFullyPaidSharesIndicatorType_cbc read Get_FullyPaidSharesIndicator;
    property RegistrationAddress: IXMLAddressType_cac read Get_RegistrationAddress;
    property CorporateRegistrationScheme: IXMLCorporateRegistrationSchemeType_cac read Get_CorporateRegistrationScheme;
    property HeadOfficeParty: IXMLPartyType_cac read Get_HeadOfficeParty;
    property ShareholderParty: IXMLShareholderPartyType_cacList read Get_ShareholderParty;
  end;

{ IXMLPartyLegalEntityType_cacList }

  IXMLPartyLegalEntityType_cacList = interface(IXMLNodeCollection)
    ['{9FDD755A-4E0C-4D8A-8333-C319FB25AEEF}']
    { Methods & Properties }
    function Add: IXMLPartyLegalEntityType_cac;
    function Insert(const Index: Integer): IXMLPartyLegalEntityType_cac;

    function Get_Item(const Index: Integer): IXMLPartyLegalEntityType_cac;
    property Items[const Index: Integer]: IXMLPartyLegalEntityType_cac read Get_Item; default;
  end;

{ IXMLRegistrationDateType_cbc }

  IXMLRegistrationDateType_cbc = interface(IXMLNode)
    ['{0051F51A-6B00-42C4-9DCC-50CE44F82CBE}']
  end;

{ IXMLRegistrationExpirationDateType_cbc }

  IXMLRegistrationExpirationDateType_cbc = interface(IXMLNode)
    ['{52D1C593-557D-4478-83F9-C8FA23E011E3}']
  end;

{ IXMLCompanyLegalFormCodeType_cbc }

  IXMLCompanyLegalFormCodeType_cbc = interface(IXMLNode)
    ['{9CC4A693-D0DC-4B3F-8079-A3F57F1C4FAA}']
  end;

{ IXMLCompanyLegalFormType_cbc }

  IXMLCompanyLegalFormType_cbc = interface(IXMLNode)
    ['{DD3BE5F3-3299-4AE6-A963-3059C3FF0DE9}']
  end;

{ IXMLSoleProprietorshipIndicatorType_cbc }

  IXMLSoleProprietorshipIndicatorType_cbc = interface(IXMLNode)
    ['{B35512E3-2A32-4ED4-A45A-D3B8FAA479F2}']
  end;

{ IXMLCompanyLiquidationStatusCodeType_cbc }

  IXMLCompanyLiquidationStatusCodeType_cbc = interface(IXMLNode)
    ['{556D0DD2-CF02-4256-9D4E-C6FD577B3457}']
  end;

{ IXMLCorporateStockAmountType_cbc }

  IXMLCorporateStockAmountType_cbc = interface(IXMLNode)
    ['{FB5D4FFD-5A1C-4B97-90BE-7A08B34BF053}']
  end;

{ IXMLFullyPaidSharesIndicatorType_cbc }

  IXMLFullyPaidSharesIndicatorType_cbc = interface(IXMLNode)
    ['{CE73C5AF-3CD3-464C-9B73-9D7BA8BA2366}']
  end;

{ IXMLCorporateRegistrationSchemeType_cac }

  IXMLCorporateRegistrationSchemeType_cac = interface(IXMLNode)
    ['{9D378A4B-705D-436C-BB09-FFE1FAC201A8}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_CorporateRegistrationTypeCode: IXMLCorporateRegistrationTypeCodeType_cbc;
    function Get_JurisdictionRegionAddress: IXMLAddressType_cacList;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property Name: IXMLNameType_cbc read Get_Name;
    property CorporateRegistrationTypeCode: IXMLCorporateRegistrationTypeCodeType_cbc read Get_CorporateRegistrationTypeCode;
    property JurisdictionRegionAddress: IXMLAddressType_cacList read Get_JurisdictionRegionAddress;
  end;

{ IXMLCorporateRegistrationTypeCodeType_cbc }

  IXMLCorporateRegistrationTypeCodeType_cbc = interface(IXMLNode)
    ['{FCDD0D47-8F95-4423-911E-47155EDEB2B0}']
  end;

{ IXMLShareholderPartyType_cac }

  IXMLShareholderPartyType_cac = interface(IXMLNode)
    ['{94D66D80-92BF-475B-93D6-D2101ED86AE0}']
    { Property Accessors }
    function Get_PartecipationPercent: IXMLPartecipationPercentType_cbc;
    function Get_Party: IXMLPartyType_cac;
    { Methods & Properties }
    property PartecipationPercent: IXMLPartecipationPercentType_cbc read Get_PartecipationPercent;
    property Party: IXMLPartyType_cac read Get_Party;
  end;

{ IXMLShareholderPartyType_cacList }

  IXMLShareholderPartyType_cacList = interface(IXMLNodeCollection)
    ['{2F4F5F44-06F3-4080-B0F2-9625A0558374}']
    { Methods & Properties }
    function Add: IXMLShareholderPartyType_cac;
    function Insert(const Index: Integer): IXMLShareholderPartyType_cac;

    function Get_Item(const Index: Integer): IXMLShareholderPartyType_cac;
    property Items[const Index: Integer]: IXMLShareholderPartyType_cac read Get_Item; default;
  end;

{ IXMLPartecipationPercentType_cbc }

  IXMLPartecipationPercentType_cbc = interface(IXMLNode)
    ['{EE6966C1-3856-4F8C-B607-7749FF3F68D8}']
  end;

{ IXMLContactType_cac }

  IXMLContactType_cac = interface(IXMLNode)
    ['{E64FC987-062D-48BB-B852-837FC97ABD49}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_Telephone: IXMLTelephoneType_cbc;
    function Get_Telefax: IXMLTelefaxType_cbc;
    function Get_ElectronicMail: IXMLElectronicMailType_cbc;
    function Get_Note: IXMLNoteType_cbcList;
    function Get_OtherCommunication: IXMLCommunicationType_cacList;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property Name: IXMLNameType_cbc read Get_Name;
    property Telephone: IXMLTelephoneType_cbc read Get_Telephone;
    property Telefax: IXMLTelefaxType_cbc read Get_Telefax;
    property ElectronicMail: IXMLElectronicMailType_cbc read Get_ElectronicMail;
    property Note: IXMLNoteType_cbcList read Get_Note;
    property OtherCommunication: IXMLCommunicationType_cacList read Get_OtherCommunication;
  end;

{ IXMLContactType_cacList }

  IXMLContactType_cacList = interface(IXMLNodeCollection)
    ['{40E360CC-8818-4E57-9DE5-22538C60DF12}']
    { Methods & Properties }
    function Add: IXMLContactType_cac;
    function Insert(const Index: Integer): IXMLContactType_cac;

    function Get_Item(const Index: Integer): IXMLContactType_cac;
    property Items[const Index: Integer]: IXMLContactType_cac read Get_Item; default;
  end;

{ IXMLTelephoneType_cbc }

  IXMLTelephoneType_cbc = interface(IXMLNode)
    ['{00B77B07-C312-4F76-BCAC-0C73E5E03063}']
  end;

{ IXMLTelefaxType_cbc }

  IXMLTelefaxType_cbc = interface(IXMLNode)
    ['{6F9A5907-F3EA-425D-ABC3-11CFF5B044C8}']
  end;

{ IXMLElectronicMailType_cbc }

  IXMLElectronicMailType_cbc = interface(IXMLNode)
    ['{E40E933E-F83C-40EC-AD4B-DF46B69BC622}']
  end;

{ IXMLCommunicationType_cac }

  IXMLCommunicationType_cac = interface(IXMLNode)
    ['{9DA83596-3E04-4F28-9E9B-789526E5652F}']
    { Property Accessors }
    function Get_ChannelCode: IXMLChannelCodeType_cbc;
    function Get_Channel: IXMLChannelType_cbc;
    function Get_Value: IXMLValueType_cbc;
    { Methods & Properties }
    property ChannelCode: IXMLChannelCodeType_cbc read Get_ChannelCode;
    property Channel: IXMLChannelType_cbc read Get_Channel;
    property Value: IXMLValueType_cbc read Get_Value;
  end;

{ IXMLCommunicationType_cacList }

  IXMLCommunicationType_cacList = interface(IXMLNodeCollection)
    ['{B65C925E-74A4-4591-BE50-A7794D8FDB51}']
    { Methods & Properties }
    function Add: IXMLCommunicationType_cac;
    function Insert(const Index: Integer): IXMLCommunicationType_cac;

    function Get_Item(const Index: Integer): IXMLCommunicationType_cac;
    property Items[const Index: Integer]: IXMLCommunicationType_cac read Get_Item; default;
  end;

{ IXMLChannelCodeType_cbc }

  IXMLChannelCodeType_cbc = interface(IXMLNode)
    ['{3EE66FC9-F6B3-43AC-83B7-9A8F0C60D00E}']
  end;

{ IXMLChannelType_cbc }

  IXMLChannelType_cbc = interface(IXMLNode)
    ['{7AE32E59-2F24-4FB3-B818-C3475FA14E99}']
  end;

{ IXMLValueType_cbc }

  IXMLValueType_cbc = interface(IXMLNode)
    ['{DDBE48F1-9AC0-42FE-A738-2DCDCFEA36C2}']
  end;

{ IXMLPersonType_cac }

  IXMLPersonType_cac = interface(IXMLNode)
    ['{22041E4F-935C-4345-B570-9C3C6533128F}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_FirstName: IXMLFirstNameType_cbc;
    function Get_FamilyName: IXMLFamilyNameType_cbc;
    function Get_Title: IXMLTitleType_cbc;
    function Get_MiddleName: IXMLMiddleNameType_cbc;
    function Get_OtherName: IXMLOtherNameType_cbc;
    function Get_NameSuffix: IXMLNameSuffixType_cbc;
    function Get_JobTitle: IXMLJobTitleType_cbc;
    function Get_NationalityID: IXMLNationalityIDType_cbc;
    function Get_GenderCode: IXMLGenderCodeType_cbc;
    function Get_BirthDate: IXMLBirthDateType_cbc;
    function Get_BirthplaceName: IXMLBirthplaceNameType_cbc;
    function Get_OrganizationDepartment: IXMLOrganizationDepartmentType_cbc;
    function Get_Contact: IXMLContactType_cac;
    function Get_FinancialAccount: IXMLFinancialAccountType_cac;
    function Get_IdentityDocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_ResidenceAddress: IXMLAddressType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property FirstName: IXMLFirstNameType_cbc read Get_FirstName;
    property FamilyName: IXMLFamilyNameType_cbc read Get_FamilyName;
    property Title: IXMLTitleType_cbc read Get_Title;
    property MiddleName: IXMLMiddleNameType_cbc read Get_MiddleName;
    property OtherName: IXMLOtherNameType_cbc read Get_OtherName;
    property NameSuffix: IXMLNameSuffixType_cbc read Get_NameSuffix;
    property JobTitle: IXMLJobTitleType_cbc read Get_JobTitle;
    property NationalityID: IXMLNationalityIDType_cbc read Get_NationalityID;
    property GenderCode: IXMLGenderCodeType_cbc read Get_GenderCode;
    property BirthDate: IXMLBirthDateType_cbc read Get_BirthDate;
    property BirthplaceName: IXMLBirthplaceNameType_cbc read Get_BirthplaceName;
    property OrganizationDepartment: IXMLOrganizationDepartmentType_cbc read Get_OrganizationDepartment;
    property Contact: IXMLContactType_cac read Get_Contact;
    property FinancialAccount: IXMLFinancialAccountType_cac read Get_FinancialAccount;
    property IdentityDocumentReference: IXMLDocumentReferenceType_cacList read Get_IdentityDocumentReference;
    property ResidenceAddress: IXMLAddressType_cac read Get_ResidenceAddress;
  end;

{ IXMLPersonType_cacList }

  IXMLPersonType_cacList = interface(IXMLNodeCollection)
    ['{AD348BC3-CB4B-4B3D-9D65-52EB2FE908DD}']
    { Methods & Properties }
    function Add: IXMLPersonType_cac;
    function Insert(const Index: Integer): IXMLPersonType_cac;

    function Get_Item(const Index: Integer): IXMLPersonType_cac;
    property Items[const Index: Integer]: IXMLPersonType_cac read Get_Item; default;
  end;

{ IXMLFirstNameType_cbc }

  IXMLFirstNameType_cbc = interface(IXMLNode)
    ['{872E5F25-F261-47F6-B885-DA9446F36B8A}']
  end;

{ IXMLFamilyNameType_cbc }

  IXMLFamilyNameType_cbc = interface(IXMLNode)
    ['{6EB85222-2C65-40FC-8985-73FCC105F4C6}']
  end;

{ IXMLTitleType_cbc }

  IXMLTitleType_cbc = interface(IXMLNode)
    ['{B947EDC0-2D45-48EC-8022-17A71D9E02F0}']
  end;

{ IXMLMiddleNameType_cbc }

  IXMLMiddleNameType_cbc = interface(IXMLNode)
    ['{939795B3-0848-48AF-B2D7-F2621790E25D}']
  end;

{ IXMLOtherNameType_cbc }

  IXMLOtherNameType_cbc = interface(IXMLNode)
    ['{A4AAF642-6A59-4CD1-A03E-4D32BC4E0CE6}']
  end;

{ IXMLNameSuffixType_cbc }

  IXMLNameSuffixType_cbc = interface(IXMLNode)
    ['{80D2765E-5886-43AD-974C-BE827178B236}']
  end;

{ IXMLJobTitleType_cbc }

  IXMLJobTitleType_cbc = interface(IXMLNode)
    ['{8AD240E7-118C-48D8-B6B3-620578A2AD7F}']
  end;

{ IXMLNationalityIDType_cbc }

  IXMLNationalityIDType_cbc = interface(IXMLNode)
    ['{024CC982-2BB5-48E4-8195-EA86EDB68EC4}']
  end;

{ IXMLGenderCodeType_cbc }

  IXMLGenderCodeType_cbc = interface(IXMLNode)
    ['{E06B57FB-945F-45F8-99DE-C8C18C089F88}']
  end;

{ IXMLBirthDateType_cbc }

  IXMLBirthDateType_cbc = interface(IXMLNode)
    ['{9EB376C7-EC11-4A09-8372-FA94B30326E8}']
  end;

{ IXMLBirthplaceNameType_cbc }

  IXMLBirthplaceNameType_cbc = interface(IXMLNode)
    ['{9F21EC63-90A6-42BA-9529-A95BE4BCC613}']
  end;

{ IXMLOrganizationDepartmentType_cbc }

  IXMLOrganizationDepartmentType_cbc = interface(IXMLNode)
    ['{F3E098C5-DDF2-40EA-A40A-E7CC87EC08AB}']
  end;

{ IXMLFinancialAccountType_cac }

  IXMLFinancialAccountType_cac = interface(IXMLNode)
    ['{4F360B2B-B3BC-4035-9378-D8DD754057E1}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_AliasName: IXMLAliasNameType_cbc;
    function Get_AccountTypeCode: IXMLAccountTypeCodeType_cbc;
    function Get_AccountFormatCode: IXMLAccountFormatCodeType_cbc;
    function Get_CurrencyCode: IXMLCurrencyCodeType_cbc;
    function Get_PaymentNote: IXMLPaymentNoteType_cbcList;
    function Get_FinancialInstitutionBranch: IXMLBranchType_cac;
    function Get_Country: IXMLCountryType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property Name: IXMLNameType_cbc read Get_Name;
    property AliasName: IXMLAliasNameType_cbc read Get_AliasName;
    property AccountTypeCode: IXMLAccountTypeCodeType_cbc read Get_AccountTypeCode;
    property AccountFormatCode: IXMLAccountFormatCodeType_cbc read Get_AccountFormatCode;
    property CurrencyCode: IXMLCurrencyCodeType_cbc read Get_CurrencyCode;
    property PaymentNote: IXMLPaymentNoteType_cbcList read Get_PaymentNote;
    property FinancialInstitutionBranch: IXMLBranchType_cac read Get_FinancialInstitutionBranch;
    property Country: IXMLCountryType_cac read Get_Country;
  end;

{ IXMLAliasNameType_cbc }

  IXMLAliasNameType_cbc = interface(IXMLNode)
    ['{56B813F6-1999-4A6E-99CA-686BD9776BA9}']
  end;

{ IXMLAccountTypeCodeType_cbc }

  IXMLAccountTypeCodeType_cbc = interface(IXMLNode)
    ['{6B7C2BC9-132B-4D2C-98EA-A418B808C551}']
  end;

{ IXMLAccountFormatCodeType_cbc }

  IXMLAccountFormatCodeType_cbc = interface(IXMLNode)
    ['{6BE5A2F1-1CB5-488F-BDD2-1A969801A122}']
  end;

{ IXMLPaymentNoteType_cbc }

  IXMLPaymentNoteType_cbc = interface(IXMLNode)
    ['{07E8C486-3890-4C2B-9994-0E5E88FA4024}']
  end;

{ IXMLPaymentNoteType_cbcList }

  IXMLPaymentNoteType_cbcList = interface(IXMLNodeCollection)
    ['{D5F78FC4-1B64-49A0-A8EB-64A84D302FF9}']
    { Methods & Properties }
    function Add: IXMLPaymentNoteType_cbc;
    function Insert(const Index: Integer): IXMLPaymentNoteType_cbc;

    function Get_Item(const Index: Integer): IXMLPaymentNoteType_cbc;
    property Items[const Index: Integer]: IXMLPaymentNoteType_cbc read Get_Item; default;
  end;

{ IXMLBranchType_cac }

  IXMLBranchType_cac = interface(IXMLNode)
    ['{CBF57861-6B66-4AF5-8A89-E5C15CE7CEF9}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_FinancialInstitution: IXMLFinancialInstitutionType_cac;
    function Get_Address: IXMLAddressType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property Name: IXMLNameType_cbc read Get_Name;
    property FinancialInstitution: IXMLFinancialInstitutionType_cac read Get_FinancialInstitution;
    property Address: IXMLAddressType_cac read Get_Address;
  end;

{ IXMLFinancialInstitutionType_cac }

  IXMLFinancialInstitutionType_cac = interface(IXMLNode)
    ['{B2063F02-8212-44F9-A083-42EB74E49821}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_Address: IXMLAddressType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property Name: IXMLNameType_cbc read Get_Name;
    property Address: IXMLAddressType_cac read Get_Address;
  end;

{ IXMLServiceProviderPartyType_cac }

  IXMLServiceProviderPartyType_cac = interface(IXMLNode)
    ['{A1BBB0BF-E41D-4BA4-84D8-3DA3DF59B793}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_ServiceTypeCode: IXMLServiceTypeCodeType_cbc;
    function Get_ServiceType: IXMLServiceTypeType_cbcList;
    function Get_Party: IXMLPartyType_cac;
    function Get_SellerContact: IXMLContactType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property ServiceTypeCode: IXMLServiceTypeCodeType_cbc read Get_ServiceTypeCode;
    property ServiceType: IXMLServiceTypeType_cbcList read Get_ServiceType;
    property Party: IXMLPartyType_cac read Get_Party;
    property SellerContact: IXMLContactType_cac read Get_SellerContact;
  end;

{ IXMLServiceProviderPartyType_cacList }

  IXMLServiceProviderPartyType_cacList = interface(IXMLNodeCollection)
    ['{E1D1C209-2E74-412D-B80C-A81384D07D9C}']
    { Methods & Properties }
    function Add: IXMLServiceProviderPartyType_cac;
    function Insert(const Index: Integer): IXMLServiceProviderPartyType_cac;

    function Get_Item(const Index: Integer): IXMLServiceProviderPartyType_cac;
    property Items[const Index: Integer]: IXMLServiceProviderPartyType_cac read Get_Item; default;
  end;

{ IXMLServiceTypeCodeType_cbc }

  IXMLServiceTypeCodeType_cbc = interface(IXMLNode)
    ['{4B583064-7F07-45A3-8916-E6B62256793C}']
  end;

{ IXMLServiceTypeType_cbc }

  IXMLServiceTypeType_cbc = interface(IXMLNode)
    ['{75535B3E-5507-40A0-BC93-C4754F5B8E1E}']
  end;

{ IXMLServiceTypeType_cbcList }

  IXMLServiceTypeType_cbcList = interface(IXMLNodeCollection)
    ['{8DEC442E-E225-4AB9-A99F-607E61C4C5D3}']
    { Methods & Properties }
    function Add: IXMLServiceTypeType_cbc;
    function Insert(const Index: Integer): IXMLServiceTypeType_cbc;

    function Get_Item(const Index: Integer): IXMLServiceTypeType_cbc;
    property Items[const Index: Integer]: IXMLServiceTypeType_cbc read Get_Item; default;
  end;

{ IXMLPowerOfAttorneyType_cac }

  IXMLPowerOfAttorneyType_cac = interface(IXMLNode)
    ['{2C72DB45-0523-4B0B-9FA1-C7D8BD2F0E6C}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_IssueDate: IXMLIssueDateType_cbc;
    function Get_IssueTime: IXMLIssueTimeType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_NotaryParty: IXMLPartyType_cac;
    function Get_AgentParty: IXMLPartyType_cac;
    function Get_WitnessParty: IXMLPartyType_cacList;
    function Get_MandateDocumentReference: IXMLDocumentReferenceType_cacList;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property IssueDate: IXMLIssueDateType_cbc read Get_IssueDate;
    property IssueTime: IXMLIssueTimeType_cbc read Get_IssueTime;
    property Description: IXMLDescriptionType_cbcList read Get_Description;
    property NotaryParty: IXMLPartyType_cac read Get_NotaryParty;
    property AgentParty: IXMLPartyType_cac read Get_AgentParty;
    property WitnessParty: IXMLPartyType_cacList read Get_WitnessParty;
    property MandateDocumentReference: IXMLDocumentReferenceType_cacList read Get_MandateDocumentReference;
  end;

{ IXMLPowerOfAttorneyType_cacList }

  IXMLPowerOfAttorneyType_cacList = interface(IXMLNodeCollection)
    ['{F133EAF4-9DC3-437D-AAB6-9F2073271AD9}']
    { Methods & Properties }
    function Add: IXMLPowerOfAttorneyType_cac;
    function Insert(const Index: Integer): IXMLPowerOfAttorneyType_cac;

    function Get_Item(const Index: Integer): IXMLPowerOfAttorneyType_cac;
    property Items[const Index: Integer]: IXMLPowerOfAttorneyType_cac read Get_Item; default;
  end;

{ IXMLResultOfVerificationType_cac }

  IXMLResultOfVerificationType_cac = interface(IXMLNode)
    ['{A720B9E6-9160-41B9-87C4-4530DFC2D5F2}']
    { Property Accessors }
    function Get_ValidatorID: IXMLValidatorIDType_cbc;
    function Get_ValidationResultCode: IXMLValidationResultCodeType_cbc;
    function Get_ValidationDate: IXMLValidationDateType_cbc;
    function Get_ValidationTime: IXMLValidationTimeType_cbc;
    function Get_ValidateProcess: IXMLValidateProcessType_cbc;
    function Get_ValidateTool: IXMLValidateToolType_cbc;
    function Get_ValidateToolVersion: IXMLValidateToolVersionType_cbc;
    function Get_SignatoryParty: IXMLPartyType_cac;
    { Methods & Properties }
    property ValidatorID: IXMLValidatorIDType_cbc read Get_ValidatorID;
    property ValidationResultCode: IXMLValidationResultCodeType_cbc read Get_ValidationResultCode;
    property ValidationDate: IXMLValidationDateType_cbc read Get_ValidationDate;
    property ValidationTime: IXMLValidationTimeType_cbc read Get_ValidationTime;
    property ValidateProcess: IXMLValidateProcessType_cbc read Get_ValidateProcess;
    property ValidateTool: IXMLValidateToolType_cbc read Get_ValidateTool;
    property ValidateToolVersion: IXMLValidateToolVersionType_cbc read Get_ValidateToolVersion;
    property SignatoryParty: IXMLPartyType_cac read Get_SignatoryParty;
  end;

{ IXMLValidatorIDType_cbc }

  IXMLValidatorIDType_cbc = interface(IXMLNode)
    ['{0F2A8699-EDE1-44E4-BBF7-A1A4CC3514D6}']
  end;

{ IXMLValidationResultCodeType_cbc }

  IXMLValidationResultCodeType_cbc = interface(IXMLNode)
    ['{18B34669-006B-4236-A29F-22105ABB1A52}']
  end;

{ IXMLValidationDateType_cbc }

  IXMLValidationDateType_cbc = interface(IXMLNode)
    ['{7765C56E-39EF-49C2-BE37-7CE33EC93C7E}']
  end;

{ IXMLValidationTimeType_cbc }

  IXMLValidationTimeType_cbc = interface(IXMLNode)
    ['{F6ABAD7F-00AC-42EC-BD77-EB1ED40E717A}']
  end;

{ IXMLValidateProcessType_cbc }

  IXMLValidateProcessType_cbc = interface(IXMLNode)
    ['{C9278ED0-1297-4D75-88F4-CD03659B6106}']
  end;

{ IXMLValidateToolType_cbc }

  IXMLValidateToolType_cbc = interface(IXMLNode)
    ['{D2806B14-0CD4-481D-A492-E6965076ECC5}']
  end;

{ IXMLValidateToolVersionType_cbc }

  IXMLValidateToolVersionType_cbc = interface(IXMLNode)
    ['{363A4793-B6B3-4FF8-8735-B4AFE5D6E136}']
  end;

{ IXMLBillingReferenceType_cac }

  IXMLBillingReferenceType_cac = interface(IXMLNode)
    ['{228EDC00-D5BD-4ED7-8CCC-B61A83793027}']
    { Property Accessors }
    function Get_InvoiceDocumentReference: IXMLDocumentReferenceType_cac;
    function Get_SelfBilledInvoiceDocumentReference: IXMLDocumentReferenceType_cac;
    function Get_CreditNoteDocumentReference: IXMLDocumentReferenceType_cac;
    function Get_SelfBilledCreditNoteDocumentReference: IXMLDocumentReferenceType_cac;
    function Get_DebitNoteDocumentReference: IXMLDocumentReferenceType_cac;
    function Get_ReminderDocumentReference: IXMLDocumentReferenceType_cac;
    function Get_AdditionalDocumentReference: IXMLDocumentReferenceType_cac;
    function Get_BillingReferenceLine: IXMLBillingReferenceLineType_cacList;
    { Methods & Properties }
    property InvoiceDocumentReference: IXMLDocumentReferenceType_cac read Get_InvoiceDocumentReference;
    property SelfBilledInvoiceDocumentReference: IXMLDocumentReferenceType_cac read Get_SelfBilledInvoiceDocumentReference;
    property CreditNoteDocumentReference: IXMLDocumentReferenceType_cac read Get_CreditNoteDocumentReference;
    property SelfBilledCreditNoteDocumentReference: IXMLDocumentReferenceType_cac read Get_SelfBilledCreditNoteDocumentReference;
    property DebitNoteDocumentReference: IXMLDocumentReferenceType_cac read Get_DebitNoteDocumentReference;
    property ReminderDocumentReference: IXMLDocumentReferenceType_cac read Get_ReminderDocumentReference;
    property AdditionalDocumentReference: IXMLDocumentReferenceType_cac read Get_AdditionalDocumentReference;
    property BillingReferenceLine: IXMLBillingReferenceLineType_cacList read Get_BillingReferenceLine;
  end;

{ IXMLBillingReferenceType_cacList }

  IXMLBillingReferenceType_cacList = interface(IXMLNodeCollection)
    ['{C2A8A15D-C241-4F4B-8629-C6F9A7F268F6}']
    { Methods & Properties }
    function Add: IXMLBillingReferenceType_cac;
    function Insert(const Index: Integer): IXMLBillingReferenceType_cac;

    function Get_Item(const Index: Integer): IXMLBillingReferenceType_cac;
    property Items[const Index: Integer]: IXMLBillingReferenceType_cac read Get_Item; default;
  end;

{ IXMLBillingReferenceLineType_cac }

  IXMLBillingReferenceLineType_cac = interface(IXMLNode)
    ['{4E4ECE26-B634-47A3-81B7-044723EEA7D7}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_Amount: IXMLAmountType_cbc;
    function Get_AllowanceCharge: IXMLAllowanceChargeType_cacList;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property Amount: IXMLAmountType_cbc read Get_Amount;
    property AllowanceCharge: IXMLAllowanceChargeType_cacList read Get_AllowanceCharge;
  end;

{ IXMLBillingReferenceLineType_cacList }

  IXMLBillingReferenceLineType_cacList = interface(IXMLNodeCollection)
    ['{0A6C4C52-4F52-4A72-AE24-77E0F06EF3CD}']
    { Methods & Properties }
    function Add: IXMLBillingReferenceLineType_cac;
    function Insert(const Index: Integer): IXMLBillingReferenceLineType_cac;

    function Get_Item(const Index: Integer): IXMLBillingReferenceLineType_cac;
    property Items[const Index: Integer]: IXMLBillingReferenceLineType_cac read Get_Item; default;
  end;

{ IXMLAmountType_cbc }

  IXMLAmountType_cbc = interface(IXMLNode)
    ['{35EF2BBB-DABC-456B-A84D-A3F04EF65700}']
  end;

{ IXMLAllowanceChargeType_cac }

  IXMLAllowanceChargeType_cac = interface(IXMLNode)
    ['{DE52DA0C-B746-45DC-A1CD-CC910BA9582A}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_ChargeIndicator: IXMLChargeIndicatorType_cbc;
    function Get_AllowanceChargeReasonCode: IXMLAllowanceChargeReasonCodeType_cbc;
    function Get_AllowanceChargeReason: IXMLAllowanceChargeReasonType_cbcList;
    function Get_MultiplierFactorNumeric: IXMLMultiplierFactorNumericType_cbc;
    function Get_PrepaidIndicator: IXMLPrepaidIndicatorType_cbc;
    function Get_SequenceNumeric: IXMLSequenceNumericType_cbc;
    function Get_Amount: IXMLAmountType_cbc;
    function Get_BaseAmount: IXMLBaseAmountType_cbc;
    function Get_AccountingCostCode: IXMLAccountingCostCodeType_cbc;
    function Get_AccountingCost: IXMLAccountingCostType_cbc;
    function Get_PerUnitAmount: IXMLPerUnitAmountType_cbc;
    function Get_TaxCategory: IXMLTaxCategoryType_cacList;
    function Get_TaxTotal: IXMLTaxTotalType_cac;
    function Get_PaymentMeans: IXMLPaymentMeansType_cacList;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property ChargeIndicator: IXMLChargeIndicatorType_cbc read Get_ChargeIndicator;
    property AllowanceChargeReasonCode: IXMLAllowanceChargeReasonCodeType_cbc read Get_AllowanceChargeReasonCode;
    property AllowanceChargeReason: IXMLAllowanceChargeReasonType_cbcList read Get_AllowanceChargeReason;
    property MultiplierFactorNumeric: IXMLMultiplierFactorNumericType_cbc read Get_MultiplierFactorNumeric;
    property PrepaidIndicator: IXMLPrepaidIndicatorType_cbc read Get_PrepaidIndicator;
    property SequenceNumeric: IXMLSequenceNumericType_cbc read Get_SequenceNumeric;
    property Amount: IXMLAmountType_cbc read Get_Amount;
    property BaseAmount: IXMLBaseAmountType_cbc read Get_BaseAmount;
    property AccountingCostCode: IXMLAccountingCostCodeType_cbc read Get_AccountingCostCode;
    property AccountingCost: IXMLAccountingCostType_cbc read Get_AccountingCost;
    property PerUnitAmount: IXMLPerUnitAmountType_cbc read Get_PerUnitAmount;
    property TaxCategory: IXMLTaxCategoryType_cacList read Get_TaxCategory;
    property TaxTotal: IXMLTaxTotalType_cac read Get_TaxTotal;
    property PaymentMeans: IXMLPaymentMeansType_cacList read Get_PaymentMeans;
  end;

{ IXMLAllowanceChargeType_cacList }

  IXMLAllowanceChargeType_cacList = interface(IXMLNodeCollection)
    ['{B8E35D26-092B-4CCA-8836-D7877941971D}']
    { Methods & Properties }
    function Add: IXMLAllowanceChargeType_cac;
    function Insert(const Index: Integer): IXMLAllowanceChargeType_cac;

    function Get_Item(const Index: Integer): IXMLAllowanceChargeType_cac;
    property Items[const Index: Integer]: IXMLAllowanceChargeType_cac read Get_Item; default;
  end;

{ IXMLChargeIndicatorType_cbc }

  IXMLChargeIndicatorType_cbc = interface(IXMLNode)
    ['{C052FBC4-53A4-42DD-85CB-B9CCBD17F6A0}']
  end;

{ IXMLAllowanceChargeReasonCodeType_cbc }

  IXMLAllowanceChargeReasonCodeType_cbc = interface(IXMLNode)
    ['{00EA17F0-FF0C-4AFC-A5D5-42D1BFAD320E}']
  end;

{ IXMLAllowanceChargeReasonType_cbc }

  IXMLAllowanceChargeReasonType_cbc = interface(IXMLNode)
    ['{5E3BD1BA-096A-4B38-BA86-9365A5A5EBCB}']
  end;

{ IXMLAllowanceChargeReasonType_cbcList }

  IXMLAllowanceChargeReasonType_cbcList = interface(IXMLNodeCollection)
    ['{9B096538-0106-4E3B-9F75-9070AEF9C820}']
    { Methods & Properties }
    function Add: IXMLAllowanceChargeReasonType_cbc;
    function Insert(const Index: Integer): IXMLAllowanceChargeReasonType_cbc;

    function Get_Item(const Index: Integer): IXMLAllowanceChargeReasonType_cbc;
    property Items[const Index: Integer]: IXMLAllowanceChargeReasonType_cbc read Get_Item; default;
  end;

{ IXMLMultiplierFactorNumericType_cbc }

  IXMLMultiplierFactorNumericType_cbc = interface(IXMLNode)
    ['{D8C2BA44-F446-490A-8CEF-C2BB47323426}']
  end;

{ IXMLPrepaidIndicatorType_cbc }

  IXMLPrepaidIndicatorType_cbc = interface(IXMLNode)
    ['{4AA0883D-5BCE-4AA0-B30B-1D95A31FD90F}']
  end;

{ IXMLSequenceNumericType_cbc }

  IXMLSequenceNumericType_cbc = interface(IXMLNode)
    ['{DF2C832D-2AC3-44DA-A789-18AC8B550861}']
  end;

{ IXMLBaseAmountType_cbc }

  IXMLBaseAmountType_cbc = interface(IXMLNode)
    ['{144B43C0-47F5-4E33-9858-D72B954926EB}']
  end;

{ IXMLPerUnitAmountType_cbc }

  IXMLPerUnitAmountType_cbc = interface(IXMLNode)
    ['{20C59362-0375-413C-94BE-CE2F980B9573}']
  end;

{ IXMLTaxCategoryType_cac }

  IXMLTaxCategoryType_cac = interface(IXMLNode)
    ['{DBEE146C-1104-4AE3-873E-C1AE3853FD3B}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_Percent: IXMLPercentType_cbc;
    function Get_BaseUnitMeasure: IXMLBaseUnitMeasureType_cbc;
    function Get_PerUnitAmount: IXMLPerUnitAmountType_cbc;
    function Get_TaxExemptionReasonCode: IXMLTaxExemptionReasonCodeType_cbc;
    function Get_TaxExemptionReason: IXMLTaxExemptionReasonType_cbcList;
    function Get_TierRange: IXMLTierRangeType_cbc;
    function Get_TierRatePercent: IXMLTierRatePercentType_cbc;
    function Get_TaxScheme: IXMLTaxSchemeType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property Name: IXMLNameType_cbc read Get_Name;
    property Percent: IXMLPercentType_cbc read Get_Percent;
    property BaseUnitMeasure: IXMLBaseUnitMeasureType_cbc read Get_BaseUnitMeasure;
    property PerUnitAmount: IXMLPerUnitAmountType_cbc read Get_PerUnitAmount;
    property TaxExemptionReasonCode: IXMLTaxExemptionReasonCodeType_cbc read Get_TaxExemptionReasonCode;
    property TaxExemptionReason: IXMLTaxExemptionReasonType_cbcList read Get_TaxExemptionReason;
    property TierRange: IXMLTierRangeType_cbc read Get_TierRange;
    property TierRatePercent: IXMLTierRatePercentType_cbc read Get_TierRatePercent;
    property TaxScheme: IXMLTaxSchemeType_cac read Get_TaxScheme;
  end;

{ IXMLTaxCategoryType_cacList }

  IXMLTaxCategoryType_cacList = interface(IXMLNodeCollection)
    ['{D39B5AB3-970E-4AFB-B832-B024FF709843}']
    { Methods & Properties }
    function Add: IXMLTaxCategoryType_cac;
    function Insert(const Index: Integer): IXMLTaxCategoryType_cac;

    function Get_Item(const Index: Integer): IXMLTaxCategoryType_cac;
    property Items[const Index: Integer]: IXMLTaxCategoryType_cac read Get_Item; default;
  end;

{ IXMLPercentType_cbc }

  IXMLPercentType_cbc = interface(IXMLNode)
    ['{451DFAF5-7989-409C-B095-71353EC94BB3}']
  end;

{ IXMLBaseUnitMeasureType_cbc }

  IXMLBaseUnitMeasureType_cbc = interface(IXMLNode)
    ['{78959982-0DA8-474A-A65B-09F370B56BDD}']
  end;

{ IXMLTaxExemptionReasonCodeType_cbc }

  IXMLTaxExemptionReasonCodeType_cbc = interface(IXMLNode)
    ['{8BB8A430-05A5-42BB-A10C-565BE441E34A}']
  end;

{ IXMLTaxExemptionReasonType_cbc }

  IXMLTaxExemptionReasonType_cbc = interface(IXMLNode)
    ['{F109B368-8B42-4C02-A507-795D78288927}']
  end;

{ IXMLTaxExemptionReasonType_cbcList }

  IXMLTaxExemptionReasonType_cbcList = interface(IXMLNodeCollection)
    ['{C98E74B2-755A-42DC-9A9C-17C11BA3F5D6}']
    { Methods & Properties }
    function Add: IXMLTaxExemptionReasonType_cbc;
    function Insert(const Index: Integer): IXMLTaxExemptionReasonType_cbc;

    function Get_Item(const Index: Integer): IXMLTaxExemptionReasonType_cbc;
    property Items[const Index: Integer]: IXMLTaxExemptionReasonType_cbc read Get_Item; default;
  end;

{ IXMLTierRangeType_cbc }

  IXMLTierRangeType_cbc = interface(IXMLNode)
    ['{D117E8D1-7123-4AA4-8D86-DABDAEE92698}']
  end;

{ IXMLTierRatePercentType_cbc }

  IXMLTierRatePercentType_cbc = interface(IXMLNode)
    ['{D35EC6BE-F5D6-4130-B6E6-B043EBE7582B}']
  end;

{ IXMLTaxTotalType_cac }

  IXMLTaxTotalType_cac = interface(IXMLNode)
    ['{5F304940-FF75-493E-88E1-5D8F30421B69}']
    { Property Accessors }
    function Get_TaxAmount: IXMLTaxAmountType_cbc;
    function Get_RoundingAmount: IXMLRoundingAmountType_cbc;
    function Get_TaxEvidenceIndicator: IXMLTaxEvidenceIndicatorType_cbc;
    function Get_TaxIncludedIndicator: IXMLTaxIncludedIndicatorType_cbc;
    function Get_TaxSubtotal: IXMLTaxSubtotalType_cacList;
    { Methods & Properties }
    property TaxAmount: IXMLTaxAmountType_cbc read Get_TaxAmount;
    property RoundingAmount: IXMLRoundingAmountType_cbc read Get_RoundingAmount;
    property TaxEvidenceIndicator: IXMLTaxEvidenceIndicatorType_cbc read Get_TaxEvidenceIndicator;
    property TaxIncludedIndicator: IXMLTaxIncludedIndicatorType_cbc read Get_TaxIncludedIndicator;
    property TaxSubtotal: IXMLTaxSubtotalType_cacList read Get_TaxSubtotal;
  end;

{ IXMLTaxTotalType_cacList }

  IXMLTaxTotalType_cacList = interface(IXMLNodeCollection)
    ['{6940FA0C-0A2C-48A4-9B9A-E1EF25D7E0D7}']
    { Methods & Properties }
    function Add: IXMLTaxTotalType_cac;
    function Insert(const Index: Integer): IXMLTaxTotalType_cac;

    function Get_Item(const Index: Integer): IXMLTaxTotalType_cac;
    property Items[const Index: Integer]: IXMLTaxTotalType_cac read Get_Item; default;
  end;

{ IXMLTaxAmountType_cbc }

  IXMLTaxAmountType_cbc = interface(IXMLNode)
    ['{875E0893-A7E7-4EBF-85E2-3C1F3F9F233E}']
  end;

{ IXMLRoundingAmountType_cbc }

  IXMLRoundingAmountType_cbc = interface(IXMLNode)
    ['{7F33D590-95E5-474D-B784-AAC0792C62F6}']
  end;

{ IXMLTaxEvidenceIndicatorType_cbc }

  IXMLTaxEvidenceIndicatorType_cbc = interface(IXMLNode)
    ['{EE3A321A-4FAC-437F-8DAF-7195EFCCCDB1}']
  end;

{ IXMLTaxIncludedIndicatorType_cbc }

  IXMLTaxIncludedIndicatorType_cbc = interface(IXMLNode)
    ['{06207A01-85B2-48E9-9C7C-A8AA943087EB}']
  end;

{ IXMLTaxSubtotalType_cac }

  IXMLTaxSubtotalType_cac = interface(IXMLNode)
    ['{30FF06B1-329A-40C7-9F4C-4786636A0ABD}']
    { Property Accessors }
    function Get_TaxableAmount: IXMLTaxableAmountType_cbc;
    function Get_TaxAmount: IXMLTaxAmountType_cbc;
    function Get_CalculationSequenceNumeric: IXMLCalculationSequenceNumericType_cbc;
    function Get_TransactionCurrencyTaxAmount: IXMLTransactionCurrencyTaxAmountType_cbc;
    function Get_Percent: IXMLPercentType_cbc;
    function Get_BaseUnitMeasure: IXMLBaseUnitMeasureType_cbc;
    function Get_PerUnitAmount: IXMLPerUnitAmountType_cbc;
    function Get_TierRange: IXMLTierRangeType_cbc;
    function Get_TierRatePercent: IXMLTierRatePercentType_cbc;
    function Get_TaxCategory: IXMLTaxCategoryType_cac;
    { Methods & Properties }
    property TaxableAmount: IXMLTaxableAmountType_cbc read Get_TaxableAmount;
    property TaxAmount: IXMLTaxAmountType_cbc read Get_TaxAmount;
    property CalculationSequenceNumeric: IXMLCalculationSequenceNumericType_cbc read Get_CalculationSequenceNumeric;
    property TransactionCurrencyTaxAmount: IXMLTransactionCurrencyTaxAmountType_cbc read Get_TransactionCurrencyTaxAmount;
    property Percent: IXMLPercentType_cbc read Get_Percent;
    property BaseUnitMeasure: IXMLBaseUnitMeasureType_cbc read Get_BaseUnitMeasure;
    property PerUnitAmount: IXMLPerUnitAmountType_cbc read Get_PerUnitAmount;
    property TierRange: IXMLTierRangeType_cbc read Get_TierRange;
    property TierRatePercent: IXMLTierRatePercentType_cbc read Get_TierRatePercent;
    property TaxCategory: IXMLTaxCategoryType_cac read Get_TaxCategory;
  end;

{ IXMLTaxSubtotalType_cacList }

  IXMLTaxSubtotalType_cacList = interface(IXMLNodeCollection)
    ['{B34C2E3A-C32E-4D7F-9CB6-3524D340D70C}']
    { Methods & Properties }
    function Add: IXMLTaxSubtotalType_cac;
    function Insert(const Index: Integer): IXMLTaxSubtotalType_cac;

    function Get_Item(const Index: Integer): IXMLTaxSubtotalType_cac;
    property Items[const Index: Integer]: IXMLTaxSubtotalType_cac read Get_Item; default;
  end;

{ IXMLTaxableAmountType_cbc }

  IXMLTaxableAmountType_cbc = interface(IXMLNode)
    ['{40391199-6EBB-4734-B662-8AD79C2ADD28}']
  end;

{ IXMLCalculationSequenceNumericType_cbc }

  IXMLCalculationSequenceNumericType_cbc = interface(IXMLNode)
    ['{FBED5354-ECC0-4795-B22E-4936F7A3367E}']
  end;

{ IXMLTransactionCurrencyTaxAmountType_cbc }

  IXMLTransactionCurrencyTaxAmountType_cbc = interface(IXMLNode)
    ['{20B67466-838D-414C-878A-97D2D0F36C78}']
  end;

{ IXMLPaymentMeansType_cac }

  IXMLPaymentMeansType_cac = interface(IXMLNode)
    ['{E1761C46-2FB2-4A92-A41C-98FF63DA9096}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_PaymentMeansCode: IXMLPaymentMeansCodeType_cbc;
    function Get_PaymentDueDate: IXMLPaymentDueDateType_cbc;
    function Get_PaymentChannelCode: IXMLPaymentChannelCodeType_cbc;
    function Get_InstructionID: IXMLInstructionIDType_cbc;
    function Get_InstructionNote: IXMLInstructionNoteType_cbcList;
    function Get_PaymentID: IXMLPaymentIDType_cbcList;
    function Get_CardAccount: IXMLCardAccountType_cac;
    function Get_PayerFinancialAccount: IXMLFinancialAccountType_cac;
    function Get_PayeeFinancialAccount: IXMLFinancialAccountType_cac;
    function Get_CreditAccount: IXMLCreditAccountType_cac;
    function Get_PaymentMandate: IXMLPaymentMandateType_cac;
    function Get_TradeFinancing: IXMLTradeFinancingType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property PaymentMeansCode: IXMLPaymentMeansCodeType_cbc read Get_PaymentMeansCode;
    property PaymentDueDate: IXMLPaymentDueDateType_cbc read Get_PaymentDueDate;
    property PaymentChannelCode: IXMLPaymentChannelCodeType_cbc read Get_PaymentChannelCode;
    property InstructionID: IXMLInstructionIDType_cbc read Get_InstructionID;
    property InstructionNote: IXMLInstructionNoteType_cbcList read Get_InstructionNote;
    property PaymentID: IXMLPaymentIDType_cbcList read Get_PaymentID;
    property CardAccount: IXMLCardAccountType_cac read Get_CardAccount;
    property PayerFinancialAccount: IXMLFinancialAccountType_cac read Get_PayerFinancialAccount;
    property PayeeFinancialAccount: IXMLFinancialAccountType_cac read Get_PayeeFinancialAccount;
    property CreditAccount: IXMLCreditAccountType_cac read Get_CreditAccount;
    property PaymentMandate: IXMLPaymentMandateType_cac read Get_PaymentMandate;
    property TradeFinancing: IXMLTradeFinancingType_cac read Get_TradeFinancing;
  end;

{ IXMLPaymentMeansType_cacList }

  IXMLPaymentMeansType_cacList = interface(IXMLNodeCollection)
    ['{3703127D-C76A-45FF-BD06-CF0260D47DB7}']
    { Methods & Properties }
    function Add: IXMLPaymentMeansType_cac;
    function Insert(const Index: Integer): IXMLPaymentMeansType_cac;

    function Get_Item(const Index: Integer): IXMLPaymentMeansType_cac;
    property Items[const Index: Integer]: IXMLPaymentMeansType_cac read Get_Item; default;
  end;

{ IXMLPaymentMeansCodeType_cbc }

  IXMLPaymentMeansCodeType_cbc = interface(IXMLNode)
    ['{7BC108DE-99EB-46E9-B56B-9110C9F52F15}']
  end;

{ IXMLPaymentDueDateType_cbc }

  IXMLPaymentDueDateType_cbc = interface(IXMLNode)
    ['{92843795-2EA6-4841-913D-2559271193F2}']
  end;

{ IXMLPaymentChannelCodeType_cbc }

  IXMLPaymentChannelCodeType_cbc = interface(IXMLNode)
    ['{57FCEABD-27FC-4A8F-B591-29FC89155716}']
  end;

{ IXMLInstructionIDType_cbc }

  IXMLInstructionIDType_cbc = interface(IXMLNode)
    ['{26A3C7F9-6F42-4DB9-84C9-ED112A499E36}']
  end;

{ IXMLInstructionNoteType_cbc }

  IXMLInstructionNoteType_cbc = interface(IXMLNode)
    ['{46760122-6677-443E-BD50-998784D1CB3E}']
  end;

{ IXMLInstructionNoteType_cbcList }

  IXMLInstructionNoteType_cbcList = interface(IXMLNodeCollection)
    ['{43956B47-926C-4C2E-A16D-897F62D99E98}']
    { Methods & Properties }
    function Add: IXMLInstructionNoteType_cbc;
    function Insert(const Index: Integer): IXMLInstructionNoteType_cbc;

    function Get_Item(const Index: Integer): IXMLInstructionNoteType_cbc;
    property Items[const Index: Integer]: IXMLInstructionNoteType_cbc read Get_Item; default;
  end;

{ IXMLPaymentIDType_cbc }

  IXMLPaymentIDType_cbc = interface(IXMLNode)
    ['{0485DCBE-1F6C-4E08-B0D7-EC52AF691408}']
  end;

{ IXMLPaymentIDType_cbcList }

  IXMLPaymentIDType_cbcList = interface(IXMLNodeCollection)
    ['{B8EFD08D-6C3D-4F4F-B929-015F489AF94E}']
    { Methods & Properties }
    function Add: IXMLPaymentIDType_cbc;
    function Insert(const Index: Integer): IXMLPaymentIDType_cbc;

    function Get_Item(const Index: Integer): IXMLPaymentIDType_cbc;
    property Items[const Index: Integer]: IXMLPaymentIDType_cbc read Get_Item; default;
  end;

{ IXMLCardAccountType_cac }

  IXMLCardAccountType_cac = interface(IXMLNode)
    ['{25ADCABD-592D-4E3F-9B15-97410C2FAC7D}']
    { Property Accessors }
    function Get_PrimaryAccountNumberID: IXMLPrimaryAccountNumberIDType_cbc;
    function Get_NetworkID: IXMLNetworkIDType_cbc;
    function Get_CardTypeCode: IXMLCardTypeCodeType_cbc;
    function Get_ValidityStartDate: IXMLValidityStartDateType_cbc;
    function Get_ExpiryDate: IXMLExpiryDateType_cbc;
    function Get_IssuerID: IXMLIssuerIDType_cbc;
    function Get_IssueNumberID: IXMLIssueNumberIDType_cbc;
    function Get_CV2ID: IXMLCV2IDType_cbc;
    function Get_CardChipCode: IXMLCardChipCodeType_cbc;
    function Get_ChipApplicationID: IXMLChipApplicationIDType_cbc;
    function Get_HolderName: IXMLHolderNameType_cbc;
    { Methods & Properties }
    property PrimaryAccountNumberID: IXMLPrimaryAccountNumberIDType_cbc read Get_PrimaryAccountNumberID;
    property NetworkID: IXMLNetworkIDType_cbc read Get_NetworkID;
    property CardTypeCode: IXMLCardTypeCodeType_cbc read Get_CardTypeCode;
    property ValidityStartDate: IXMLValidityStartDateType_cbc read Get_ValidityStartDate;
    property ExpiryDate: IXMLExpiryDateType_cbc read Get_ExpiryDate;
    property IssuerID: IXMLIssuerIDType_cbc read Get_IssuerID;
    property IssueNumberID: IXMLIssueNumberIDType_cbc read Get_IssueNumberID;
    property CV2ID: IXMLCV2IDType_cbc read Get_CV2ID;
    property CardChipCode: IXMLCardChipCodeType_cbc read Get_CardChipCode;
    property ChipApplicationID: IXMLChipApplicationIDType_cbc read Get_ChipApplicationID;
    property HolderName: IXMLHolderNameType_cbc read Get_HolderName;
  end;

{ IXMLPrimaryAccountNumberIDType_cbc }

  IXMLPrimaryAccountNumberIDType_cbc = interface(IXMLNode)
    ['{53FCDE0A-FAEA-4AD3-975E-E110D72DA994}']
  end;

{ IXMLNetworkIDType_cbc }

  IXMLNetworkIDType_cbc = interface(IXMLNode)
    ['{8299F477-4A55-4CA1-AEA3-21039C478900}']
  end;

{ IXMLCardTypeCodeType_cbc }

  IXMLCardTypeCodeType_cbc = interface(IXMLNode)
    ['{5643C042-A79B-4A6E-9510-D1FC27152B64}']
  end;

{ IXMLValidityStartDateType_cbc }

  IXMLValidityStartDateType_cbc = interface(IXMLNode)
    ['{82183F78-F7C0-4168-BF23-48521703BB1C}']
  end;

{ IXMLIssuerIDType_cbc }

  IXMLIssuerIDType_cbc = interface(IXMLNode)
    ['{D8E57D73-EBAD-45C8-823C-C4D697B26D3B}']
  end;

{ IXMLIssueNumberIDType_cbc }

  IXMLIssueNumberIDType_cbc = interface(IXMLNode)
    ['{F461EC3D-ECDB-4282-8C6C-575B8DFFD4FD}']
  end;

{ IXMLCV2IDType_cbc }

  IXMLCV2IDType_cbc = interface(IXMLNode)
    ['{C8D85B70-748C-4253-A2E3-E1EFD4BF4FC3}']
  end;

{ IXMLCardChipCodeType_cbc }

  IXMLCardChipCodeType_cbc = interface(IXMLNode)
    ['{207D454A-5939-41F7-9B69-358B1326C469}']
  end;

{ IXMLChipApplicationIDType_cbc }

  IXMLChipApplicationIDType_cbc = interface(IXMLNode)
    ['{D92BA463-7AE8-4475-B150-8D5FB8F96FC9}']
  end;

{ IXMLHolderNameType_cbc }

  IXMLHolderNameType_cbc = interface(IXMLNode)
    ['{40F276E4-B70C-4568-BC5B-ED2BAAA3DE43}']
  end;

{ IXMLCreditAccountType_cac }

  IXMLCreditAccountType_cac = interface(IXMLNode)
    ['{464F9EFC-81A8-4A6E-AACE-9A6D11D86646}']
    { Property Accessors }
    function Get_AccountID: IXMLAccountIDType_cbc;
    { Methods & Properties }
    property AccountID: IXMLAccountIDType_cbc read Get_AccountID;
  end;

{ IXMLAccountIDType_cbc }

  IXMLAccountIDType_cbc = interface(IXMLNode)
    ['{02071B2E-D386-4F36-B172-A2DAE80E5493}']
  end;

{ IXMLPaymentMandateType_cac }

  IXMLPaymentMandateType_cac = interface(IXMLNode)
    ['{AAE8395B-62D3-4041-A37D-B9FE77A0CFCF}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_MandateTypeCode: IXMLMandateTypeCodeType_cbc;
    function Get_MaximumPaymentInstructionsNumeric: IXMLMaximumPaymentInstructionsNumericType_cbc;
    function Get_MaximumPaidAmount: IXMLMaximumPaidAmountType_cbc;
    function Get_SignatureID: IXMLSignatureIDType_cbc;
    function Get_PayerParty: IXMLPartyType_cac;
    function Get_PayerFinancialAccount: IXMLFinancialAccountType_cac;
    function Get_ValidityPeriod: IXMLPeriodType_cac;
    function Get_PaymentReversalPeriod: IXMLPeriodType_cac;
    function Get_Clause: IXMLClauseType_cacList;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property MandateTypeCode: IXMLMandateTypeCodeType_cbc read Get_MandateTypeCode;
    property MaximumPaymentInstructionsNumeric: IXMLMaximumPaymentInstructionsNumericType_cbc read Get_MaximumPaymentInstructionsNumeric;
    property MaximumPaidAmount: IXMLMaximumPaidAmountType_cbc read Get_MaximumPaidAmount;
    property SignatureID: IXMLSignatureIDType_cbc read Get_SignatureID;
    property PayerParty: IXMLPartyType_cac read Get_PayerParty;
    property PayerFinancialAccount: IXMLFinancialAccountType_cac read Get_PayerFinancialAccount;
    property ValidityPeriod: IXMLPeriodType_cac read Get_ValidityPeriod;
    property PaymentReversalPeriod: IXMLPeriodType_cac read Get_PaymentReversalPeriod;
    property Clause: IXMLClauseType_cacList read Get_Clause;
  end;

{ IXMLMandateTypeCodeType_cbc }

  IXMLMandateTypeCodeType_cbc = interface(IXMLNode)
    ['{B881B968-45A1-4181-A0BA-0823E0DEEBAC}']
  end;

{ IXMLMaximumPaymentInstructionsNumericType_cbc }

  IXMLMaximumPaymentInstructionsNumericType_cbc = interface(IXMLNode)
    ['{0E747F49-EC4F-4023-B715-3B9D94982621}']
  end;

{ IXMLMaximumPaidAmountType_cbc }

  IXMLMaximumPaidAmountType_cbc = interface(IXMLNode)
    ['{A8903FC9-08E4-4663-8E9A-A100442CE89D}']
  end;

{ IXMLSignatureIDType_cbc }

  IXMLSignatureIDType_cbc = interface(IXMLNode)
    ['{65C63045-A438-4EAD-A83E-9141CE6AD5AC}']
  end;

{ IXMLClauseType_cac }

  IXMLClauseType_cac = interface(IXMLNode)
    ['{E68B0ED2-50A7-473A-BD4E-40A572E2E003}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_Content: IXMLContentType_cbcList;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property Content: IXMLContentType_cbcList read Get_Content;
  end;

{ IXMLClauseType_cacList }

  IXMLClauseType_cacList = interface(IXMLNodeCollection)
    ['{B20FE102-5A88-487E-9BBC-AC7005AC8042}']
    { Methods & Properties }
    function Add: IXMLClauseType_cac;
    function Insert(const Index: Integer): IXMLClauseType_cac;

    function Get_Item(const Index: Integer): IXMLClauseType_cac;
    property Items[const Index: Integer]: IXMLClauseType_cac read Get_Item; default;
  end;

{ IXMLContentType_cbc }

  IXMLContentType_cbc = interface(IXMLNode)
    ['{D25696A7-4DE5-4A6C-9ADE-1F36D3C7FB96}']
  end;

{ IXMLContentType_cbcList }

  IXMLContentType_cbcList = interface(IXMLNodeCollection)
    ['{1F2C8BD4-C5FB-4745-9A18-E5260BAA53AA}']
    { Methods & Properties }
    function Add: IXMLContentType_cbc;
    function Insert(const Index: Integer): IXMLContentType_cbc;

    function Get_Item(const Index: Integer): IXMLContentType_cbc;
    property Items[const Index: Integer]: IXMLContentType_cbc read Get_Item; default;
  end;

{ IXMLTradeFinancingType_cac }

  IXMLTradeFinancingType_cac = interface(IXMLNode)
    ['{DB8334C8-7949-4ACC-B82F-CA8814424FA5}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_FinancingInstrumentCode: IXMLFinancingInstrumentCodeType_cbc;
    function Get_ContractDocumentReference: IXMLDocumentReferenceType_cac;
    function Get_DocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_FinancingParty: IXMLPartyType_cac;
    function Get_FinancingFinancialAccount: IXMLFinancialAccountType_cac;
    function Get_Clause: IXMLClauseType_cacList;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property FinancingInstrumentCode: IXMLFinancingInstrumentCodeType_cbc read Get_FinancingInstrumentCode;
    property ContractDocumentReference: IXMLDocumentReferenceType_cac read Get_ContractDocumentReference;
    property DocumentReference: IXMLDocumentReferenceType_cacList read Get_DocumentReference;
    property FinancingParty: IXMLPartyType_cac read Get_FinancingParty;
    property FinancingFinancialAccount: IXMLFinancialAccountType_cac read Get_FinancingFinancialAccount;
    property Clause: IXMLClauseType_cacList read Get_Clause;
  end;

{ IXMLFinancingInstrumentCodeType_cbc }

  IXMLFinancingInstrumentCodeType_cbc = interface(IXMLNode)
    ['{8120D3BB-2F3C-4E1E-8105-64010F6E6947}']
  end;

{ IXMLProjectReferenceType_cac }

  IXMLProjectReferenceType_cac = interface(IXMLNode)
    ['{033304F5-264B-4935-964C-723B87D06B53}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_UUID: IXMLUUIDType_cbc;
    function Get_IssueDate: IXMLIssueDateType_cbc;
    function Get_WorkPhaseReference: IXMLWorkPhaseReferenceType_cacList;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property UUID: IXMLUUIDType_cbc read Get_UUID;
    property IssueDate: IXMLIssueDateType_cbc read Get_IssueDate;
    property WorkPhaseReference: IXMLWorkPhaseReferenceType_cacList read Get_WorkPhaseReference;
  end;

{ IXMLProjectReferenceType_cacList }

  IXMLProjectReferenceType_cacList = interface(IXMLNodeCollection)
    ['{3BB535BF-A858-4AF6-9A20-E99A6F828EBF}']
    { Methods & Properties }
    function Add: IXMLProjectReferenceType_cac;
    function Insert(const Index: Integer): IXMLProjectReferenceType_cac;

    function Get_Item(const Index: Integer): IXMLProjectReferenceType_cac;
    property Items[const Index: Integer]: IXMLProjectReferenceType_cac read Get_Item; default;
  end;

{ IXMLWorkPhaseReferenceType_cac }

  IXMLWorkPhaseReferenceType_cac = interface(IXMLNode)
    ['{D241867C-1E96-49AC-A24D-6D0876C87F1C}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_WorkPhaseCode: IXMLWorkPhaseCodeType_cbc;
    function Get_WorkPhase: IXMLWorkPhaseType_cbcList;
    function Get_ProgressPercent: IXMLProgressPercentType_cbc;
    function Get_StartDate: IXMLStartDateType_cbc;
    function Get_EndDate: IXMLEndDateType_cbc;
    function Get_WorkOrderDocumentReference: IXMLDocumentReferenceType_cacList;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property WorkPhaseCode: IXMLWorkPhaseCodeType_cbc read Get_WorkPhaseCode;
    property WorkPhase: IXMLWorkPhaseType_cbcList read Get_WorkPhase;
    property ProgressPercent: IXMLProgressPercentType_cbc read Get_ProgressPercent;
    property StartDate: IXMLStartDateType_cbc read Get_StartDate;
    property EndDate: IXMLEndDateType_cbc read Get_EndDate;
    property WorkOrderDocumentReference: IXMLDocumentReferenceType_cacList read Get_WorkOrderDocumentReference;
  end;

{ IXMLWorkPhaseReferenceType_cacList }

  IXMLWorkPhaseReferenceType_cacList = interface(IXMLNodeCollection)
    ['{15C23A4B-3B65-4021-B46A-B1192349B307}']
    { Methods & Properties }
    function Add: IXMLWorkPhaseReferenceType_cac;
    function Insert(const Index: Integer): IXMLWorkPhaseReferenceType_cac;

    function Get_Item(const Index: Integer): IXMLWorkPhaseReferenceType_cac;
    property Items[const Index: Integer]: IXMLWorkPhaseReferenceType_cac read Get_Item; default;
  end;

{ IXMLWorkPhaseCodeType_cbc }

  IXMLWorkPhaseCodeType_cbc = interface(IXMLNode)
    ['{EF3B086F-1467-4A0C-9B03-5B60AB6081C3}']
  end;

{ IXMLWorkPhaseType_cbc }

  IXMLWorkPhaseType_cbc = interface(IXMLNode)
    ['{116AF541-5403-466B-A5FD-3DCCDCB5717F}']
  end;

{ IXMLWorkPhaseType_cbcList }

  IXMLWorkPhaseType_cbcList = interface(IXMLNodeCollection)
    ['{68EEFA7B-041A-470A-AC7D-D885C372BD3D}']
    { Methods & Properties }
    function Add: IXMLWorkPhaseType_cbc;
    function Insert(const Index: Integer): IXMLWorkPhaseType_cbc;

    function Get_Item(const Index: Integer): IXMLWorkPhaseType_cbc;
    property Items[const Index: Integer]: IXMLWorkPhaseType_cbc read Get_Item; default;
  end;

{ IXMLProgressPercentType_cbc }

  IXMLProgressPercentType_cbc = interface(IXMLNode)
    ['{F55267F7-27E2-4EDC-BCA3-1A22A66A54C1}']
  end;

{ IXMLSignatureType_cac }

  IXMLSignatureType_cac = interface(IXMLNode)
    ['{06EFB1D8-4077-4987-A385-339155393289}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_Note: IXMLNoteType_cbcList;
    function Get_ValidationDate: IXMLValidationDateType_cbc;
    function Get_ValidationTime: IXMLValidationTimeType_cbc;
    function Get_ValidatorID: IXMLValidatorIDType_cbc;
    function Get_CanonicalizationMethod: IXMLCanonicalizationMethodType_cbc;
    function Get_SignatureMethod: IXMLSignatureMethodType_cbc;
    function Get_SignatoryParty: IXMLPartyType_cac;
    function Get_DigitalSignatureAttachment: IXMLAttachmentType_cac;
    function Get_OriginalDocumentReference: IXMLDocumentReferenceType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property Note: IXMLNoteType_cbcList read Get_Note;
    property ValidationDate: IXMLValidationDateType_cbc read Get_ValidationDate;
    property ValidationTime: IXMLValidationTimeType_cbc read Get_ValidationTime;
    property ValidatorID: IXMLValidatorIDType_cbc read Get_ValidatorID;
    property CanonicalizationMethod: IXMLCanonicalizationMethodType_cbc read Get_CanonicalizationMethod;
    property SignatureMethod: IXMLSignatureMethodType_cbc read Get_SignatureMethod;
    property SignatoryParty: IXMLPartyType_cac read Get_SignatoryParty;
    property DigitalSignatureAttachment: IXMLAttachmentType_cac read Get_DigitalSignatureAttachment;
    property OriginalDocumentReference: IXMLDocumentReferenceType_cac read Get_OriginalDocumentReference;
  end;

{ IXMLSignatureType_cacList }

  IXMLSignatureType_cacList = interface(IXMLNodeCollection)
    ['{DE36FA68-6DB1-477C-B05C-3AB8E0D4AC99}']
    { Methods & Properties }
    function Add: IXMLSignatureType_cac;
    function Insert(const Index: Integer): IXMLSignatureType_cac;

    function Get_Item(const Index: Integer): IXMLSignatureType_cac;
    property Items[const Index: Integer]: IXMLSignatureType_cac read Get_Item; default;
  end;

{ IXMLCanonicalizationMethodType_cbc }

  IXMLCanonicalizationMethodType_cbc = interface(IXMLNode)
    ['{48E1DCD3-8C84-4CD4-AC02-78FD516C8327}']
  end;

{ IXMLSignatureMethodType_cbc }

  IXMLSignatureMethodType_cbc = interface(IXMLNode)
    ['{F661F3A1-AF2F-49F5-883A-32BC81239040}']
  end;

{ IXMLSupplierPartyType_cac }

  IXMLSupplierPartyType_cac = interface(IXMLNode)
    ['{124845C6-4208-4AAD-8EAA-F991E683AF54}']
    { Property Accessors }
    function Get_CustomerAssignedAccountID: IXMLCustomerAssignedAccountIDType_cbc;
    function Get_AdditionalAccountID: IXMLAdditionalAccountIDType_cbcList;
    function Get_DataSendingCapability: IXMLDataSendingCapabilityType_cbc;
    function Get_Party: IXMLPartyType_cac;
    function Get_DespatchContact: IXMLContactType_cac;
    function Get_AccountingContact: IXMLContactType_cac;
    function Get_SellerContact: IXMLContactType_cac;
    { Methods & Properties }
    property CustomerAssignedAccountID: IXMLCustomerAssignedAccountIDType_cbc read Get_CustomerAssignedAccountID;
    property AdditionalAccountID: IXMLAdditionalAccountIDType_cbcList read Get_AdditionalAccountID;
    property DataSendingCapability: IXMLDataSendingCapabilityType_cbc read Get_DataSendingCapability;
    property Party: IXMLPartyType_cac read Get_Party;
    property DespatchContact: IXMLContactType_cac read Get_DespatchContact;
    property AccountingContact: IXMLContactType_cac read Get_AccountingContact;
    property SellerContact: IXMLContactType_cac read Get_SellerContact;
  end;

{ IXMLCustomerAssignedAccountIDType_cbc }

  IXMLCustomerAssignedAccountIDType_cbc = interface(IXMLNode)
    ['{1012DDD6-25F8-47D9-8994-915883AD6CC8}']
  end;

{ IXMLAdditionalAccountIDType_cbc }

  IXMLAdditionalAccountIDType_cbc = interface(IXMLNode)
    ['{E3580920-7EB0-4EFB-A665-1CE91A6253B8}']
  end;

{ IXMLAdditionalAccountIDType_cbcList }

  IXMLAdditionalAccountIDType_cbcList = interface(IXMLNodeCollection)
    ['{C91D3F3B-C0C8-483D-83FD-F18D13FEB4F1}']
    { Methods & Properties }
    function Add: IXMLAdditionalAccountIDType_cbc;
    function Insert(const Index: Integer): IXMLAdditionalAccountIDType_cbc;

    function Get_Item(const Index: Integer): IXMLAdditionalAccountIDType_cbc;
    property Items[const Index: Integer]: IXMLAdditionalAccountIDType_cbc read Get_Item; default;
  end;

{ IXMLDataSendingCapabilityType_cbc }

  IXMLDataSendingCapabilityType_cbc = interface(IXMLNode)
    ['{6EC941F4-4588-4035-8672-C6A97D841E9E}']
  end;

{ IXMLCustomerPartyType_cac }

  IXMLCustomerPartyType_cac = interface(IXMLNode)
    ['{7C96711C-D510-442A-9607-AEC8AFBA4293}']
    { Property Accessors }
    function Get_CustomerAssignedAccountID: IXMLCustomerAssignedAccountIDType_cbc;
    function Get_SupplierAssignedAccountID: IXMLSupplierAssignedAccountIDType_cbc;
    function Get_AdditionalAccountID: IXMLAdditionalAccountIDType_cbcList;
    function Get_Party: IXMLPartyType_cac;
    function Get_DeliveryContact: IXMLContactType_cac;
    function Get_AccountingContact: IXMLContactType_cac;
    function Get_BuyerContact: IXMLContactType_cac;
    { Methods & Properties }
    property CustomerAssignedAccountID: IXMLCustomerAssignedAccountIDType_cbc read Get_CustomerAssignedAccountID;
    property SupplierAssignedAccountID: IXMLSupplierAssignedAccountIDType_cbc read Get_SupplierAssignedAccountID;
    property AdditionalAccountID: IXMLAdditionalAccountIDType_cbcList read Get_AdditionalAccountID;
    property Party: IXMLPartyType_cac read Get_Party;
    property DeliveryContact: IXMLContactType_cac read Get_DeliveryContact;
    property AccountingContact: IXMLContactType_cac read Get_AccountingContact;
    property BuyerContact: IXMLContactType_cac read Get_BuyerContact;
  end;

{ IXMLSupplierAssignedAccountIDType_cbc }

  IXMLSupplierAssignedAccountIDType_cbc = interface(IXMLNode)
    ['{A92EFB31-F55B-4FD0-9392-FE04028FF779}']
  end;

{ IXMLDeliveryType_cac }

  IXMLDeliveryType_cac = interface(IXMLNode)
    ['{62ADAF31-45D4-4DFD-A495-B0CEBDBF6410}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_Quantity: IXMLQuantityType_cbc;
    function Get_MinimumQuantity: IXMLMinimumQuantityType_cbc;
    function Get_MaximumQuantity: IXMLMaximumQuantityType_cbc;
    function Get_ActualDeliveryDate: IXMLActualDeliveryDateType_cbc;
    function Get_ActualDeliveryTime: IXMLActualDeliveryTimeType_cbc;
    function Get_LatestDeliveryDate: IXMLLatestDeliveryDateType_cbc;
    function Get_LatestDeliveryTime: IXMLLatestDeliveryTimeType_cbc;
    function Get_ReleaseID: IXMLReleaseIDType_cbc;
    function Get_TrackingID: IXMLTrackingIDType_cbc;
    function Get_DeliveryAddress: IXMLAddressType_cac;
    function Get_DeliveryLocation: IXMLLocationType_cac;
    function Get_AlternativeDeliveryLocation: IXMLLocationType_cac;
    function Get_RequestedDeliveryPeriod: IXMLPeriodType_cac;
    function Get_PromisedDeliveryPeriod: IXMLPeriodType_cac;
    function Get_EstimatedDeliveryPeriod: IXMLPeriodType_cac;
    function Get_CarrierParty: IXMLPartyType_cac;
    function Get_DeliveryParty: IXMLPartyType_cac;
    function Get_NotifyParty: IXMLPartyType_cacList;
    function Get_Despatch: IXMLDespatchType_cac;
    function Get_DeliveryTerms: IXMLDeliveryTermsType_cacList;
    function Get_MinimumDeliveryUnit: IXMLDeliveryUnitType_cac;
    function Get_MaximumDeliveryUnit: IXMLDeliveryUnitType_cac;
    function Get_Shipment: IXMLShipmentType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property Quantity: IXMLQuantityType_cbc read Get_Quantity;
    property MinimumQuantity: IXMLMinimumQuantityType_cbc read Get_MinimumQuantity;
    property MaximumQuantity: IXMLMaximumQuantityType_cbc read Get_MaximumQuantity;
    property ActualDeliveryDate: IXMLActualDeliveryDateType_cbc read Get_ActualDeliveryDate;
    property ActualDeliveryTime: IXMLActualDeliveryTimeType_cbc read Get_ActualDeliveryTime;
    property LatestDeliveryDate: IXMLLatestDeliveryDateType_cbc read Get_LatestDeliveryDate;
    property LatestDeliveryTime: IXMLLatestDeliveryTimeType_cbc read Get_LatestDeliveryTime;
    property ReleaseID: IXMLReleaseIDType_cbc read Get_ReleaseID;
    property TrackingID: IXMLTrackingIDType_cbc read Get_TrackingID;
    property DeliveryAddress: IXMLAddressType_cac read Get_DeliveryAddress;
    property DeliveryLocation: IXMLLocationType_cac read Get_DeliveryLocation;
    property AlternativeDeliveryLocation: IXMLLocationType_cac read Get_AlternativeDeliveryLocation;
    property RequestedDeliveryPeriod: IXMLPeriodType_cac read Get_RequestedDeliveryPeriod;
    property PromisedDeliveryPeriod: IXMLPeriodType_cac read Get_PromisedDeliveryPeriod;
    property EstimatedDeliveryPeriod: IXMLPeriodType_cac read Get_EstimatedDeliveryPeriod;
    property CarrierParty: IXMLPartyType_cac read Get_CarrierParty;
    property DeliveryParty: IXMLPartyType_cac read Get_DeliveryParty;
    property NotifyParty: IXMLPartyType_cacList read Get_NotifyParty;
    property Despatch: IXMLDespatchType_cac read Get_Despatch;
    property DeliveryTerms: IXMLDeliveryTermsType_cacList read Get_DeliveryTerms;
    property MinimumDeliveryUnit: IXMLDeliveryUnitType_cac read Get_MinimumDeliveryUnit;
    property MaximumDeliveryUnit: IXMLDeliveryUnitType_cac read Get_MaximumDeliveryUnit;
    property Shipment: IXMLShipmentType_cac read Get_Shipment;
  end;

{ IXMLDeliveryType_cacList }

  IXMLDeliveryType_cacList = interface(IXMLNodeCollection)
    ['{6F479095-857E-4EFA-817E-EAB1F5A65ED9}']
    { Methods & Properties }
    function Add: IXMLDeliveryType_cac;
    function Insert(const Index: Integer): IXMLDeliveryType_cac;

    function Get_Item(const Index: Integer): IXMLDeliveryType_cac;
    property Items[const Index: Integer]: IXMLDeliveryType_cac read Get_Item; default;
  end;

{ IXMLQuantityType_cbc }

  IXMLQuantityType_cbc = interface(IXMLNode)
    ['{EE709A34-5B21-49A1-B669-1640F09AF488}']
  end;

{ IXMLMinimumQuantityType_cbc }

  IXMLMinimumQuantityType_cbc = interface(IXMLNode)
    ['{73B5B709-55A5-4B57-93D2-1B863AFE8CC5}']
  end;

{ IXMLMaximumQuantityType_cbc }

  IXMLMaximumQuantityType_cbc = interface(IXMLNode)
    ['{49C88BD3-7719-42A0-8F8B-0BBB6C324BE0}']
  end;

{ IXMLActualDeliveryDateType_cbc }

  IXMLActualDeliveryDateType_cbc = interface(IXMLNode)
    ['{DADEA619-A9F9-4F9A-9442-CABA02DECFF1}']
  end;

{ IXMLActualDeliveryTimeType_cbc }

  IXMLActualDeliveryTimeType_cbc = interface(IXMLNode)
    ['{79406805-2756-49DF-9ADA-ABD7DB46E410}']
  end;

{ IXMLLatestDeliveryDateType_cbc }

  IXMLLatestDeliveryDateType_cbc = interface(IXMLNode)
    ['{537B1D06-BCF0-49D6-BD74-80F21C656808}']
  end;

{ IXMLLatestDeliveryTimeType_cbc }

  IXMLLatestDeliveryTimeType_cbc = interface(IXMLNode)
    ['{80697246-1816-48D6-81DF-5B08A792A8B7}']
  end;

{ IXMLReleaseIDType_cbc }

  IXMLReleaseIDType_cbc = interface(IXMLNode)
    ['{4070AC23-73D3-4D13-ADE9-85A980E824D5}']
  end;

{ IXMLTrackingIDType_cbc }

  IXMLTrackingIDType_cbc = interface(IXMLNode)
    ['{87EE3FA1-65E0-4B4C-A935-81120370A952}']
  end;

{ IXMLDespatchType_cac }

  IXMLDespatchType_cac = interface(IXMLNode)
    ['{5DE26C24-E79E-424C-BA9C-9C3ADD65618C}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_RequestedDespatchDate: IXMLRequestedDespatchDateType_cbc;
    function Get_RequestedDespatchTime: IXMLRequestedDespatchTimeType_cbc;
    function Get_EstimatedDespatchDate: IXMLEstimatedDespatchDateType_cbc;
    function Get_EstimatedDespatchTime: IXMLEstimatedDespatchTimeType_cbc;
    function Get_ActualDespatchDate: IXMLActualDespatchDateType_cbc;
    function Get_ActualDespatchTime: IXMLActualDespatchTimeType_cbc;
    function Get_GuaranteedDespatchDate: IXMLGuaranteedDespatchDateType_cbc;
    function Get_GuaranteedDespatchTime: IXMLGuaranteedDespatchTimeType_cbc;
    function Get_ReleaseID: IXMLReleaseIDType_cbc;
    function Get_Instructions: IXMLInstructionsType_cbcList;
    function Get_DespatchAddress: IXMLAddressType_cac;
    function Get_DespatchLocation: IXMLLocationType_cac;
    function Get_DespatchParty: IXMLPartyType_cac;
    function Get_CarrierParty: IXMLPartyType_cac;
    function Get_NotifyParty: IXMLPartyType_cacList;
    function Get_Contact: IXMLContactType_cac;
    function Get_EstimatedDespatchPeriod: IXMLPeriodType_cac;
    function Get_RequestedDespatchPeriod: IXMLPeriodType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property RequestedDespatchDate: IXMLRequestedDespatchDateType_cbc read Get_RequestedDespatchDate;
    property RequestedDespatchTime: IXMLRequestedDespatchTimeType_cbc read Get_RequestedDespatchTime;
    property EstimatedDespatchDate: IXMLEstimatedDespatchDateType_cbc read Get_EstimatedDespatchDate;
    property EstimatedDespatchTime: IXMLEstimatedDespatchTimeType_cbc read Get_EstimatedDespatchTime;
    property ActualDespatchDate: IXMLActualDespatchDateType_cbc read Get_ActualDespatchDate;
    property ActualDespatchTime: IXMLActualDespatchTimeType_cbc read Get_ActualDespatchTime;
    property GuaranteedDespatchDate: IXMLGuaranteedDespatchDateType_cbc read Get_GuaranteedDespatchDate;
    property GuaranteedDespatchTime: IXMLGuaranteedDespatchTimeType_cbc read Get_GuaranteedDespatchTime;
    property ReleaseID: IXMLReleaseIDType_cbc read Get_ReleaseID;
    property Instructions: IXMLInstructionsType_cbcList read Get_Instructions;
    property DespatchAddress: IXMLAddressType_cac read Get_DespatchAddress;
    property DespatchLocation: IXMLLocationType_cac read Get_DespatchLocation;
    property DespatchParty: IXMLPartyType_cac read Get_DespatchParty;
    property CarrierParty: IXMLPartyType_cac read Get_CarrierParty;
    property NotifyParty: IXMLPartyType_cacList read Get_NotifyParty;
    property Contact: IXMLContactType_cac read Get_Contact;
    property EstimatedDespatchPeriod: IXMLPeriodType_cac read Get_EstimatedDespatchPeriod;
    property RequestedDespatchPeriod: IXMLPeriodType_cac read Get_RequestedDespatchPeriod;
  end;

{ IXMLRequestedDespatchDateType_cbc }

  IXMLRequestedDespatchDateType_cbc = interface(IXMLNode)
    ['{DA0977BE-D783-4D50-97BA-58E50740F9C5}']
  end;

{ IXMLRequestedDespatchTimeType_cbc }

  IXMLRequestedDespatchTimeType_cbc = interface(IXMLNode)
    ['{68A423C1-AEE0-4BB5-B0C3-B3D4F15BF21A}']
  end;

{ IXMLEstimatedDespatchDateType_cbc }

  IXMLEstimatedDespatchDateType_cbc = interface(IXMLNode)
    ['{59686026-B47B-4C00-9748-F4ABB167B111}']
  end;

{ IXMLEstimatedDespatchTimeType_cbc }

  IXMLEstimatedDespatchTimeType_cbc = interface(IXMLNode)
    ['{95835C0F-63C1-4FFD-BF0A-A80FF9A22A5C}']
  end;

{ IXMLActualDespatchDateType_cbc }

  IXMLActualDespatchDateType_cbc = interface(IXMLNode)
    ['{338C8961-B8A0-41D8-8D1F-E39E58DE93F8}']
  end;

{ IXMLActualDespatchTimeType_cbc }

  IXMLActualDespatchTimeType_cbc = interface(IXMLNode)
    ['{188FF5AB-316D-4D92-BA00-2713B297BE88}']
  end;

{ IXMLGuaranteedDespatchDateType_cbc }

  IXMLGuaranteedDespatchDateType_cbc = interface(IXMLNode)
    ['{0835F8C2-DC5B-4AF9-9510-B9DDD0CD4003}']
  end;

{ IXMLGuaranteedDespatchTimeType_cbc }

  IXMLGuaranteedDespatchTimeType_cbc = interface(IXMLNode)
    ['{D24EF4DA-A763-4906-A045-DA033C966D29}']
  end;

{ IXMLInstructionsType_cbc }

  IXMLInstructionsType_cbc = interface(IXMLNode)
    ['{3207E793-30AB-4BD7-ADCD-3FC36368E467}']
  end;

{ IXMLInstructionsType_cbcList }

  IXMLInstructionsType_cbcList = interface(IXMLNodeCollection)
    ['{7CAF142D-E0F3-42C8-AF54-4D52CC089071}']
    { Methods & Properties }
    function Add: IXMLInstructionsType_cbc;
    function Insert(const Index: Integer): IXMLInstructionsType_cbc;

    function Get_Item(const Index: Integer): IXMLInstructionsType_cbc;
    property Items[const Index: Integer]: IXMLInstructionsType_cbc read Get_Item; default;
  end;

{ IXMLDeliveryTermsType_cac }

  IXMLDeliveryTermsType_cac = interface(IXMLNode)
    ['{A9B2BFC0-F2B2-4150-9716-E943DCD47804}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_SpecialTerms: IXMLSpecialTermsType_cbcList;
    function Get_LossRiskResponsibilityCode: IXMLLossRiskResponsibilityCodeType_cbc;
    function Get_LossRisk: IXMLLossRiskType_cbcList;
    function Get_Amount: IXMLAmountType_cbc;
    function Get_DeliveryLocation: IXMLLocationType_cac;
    function Get_AllowanceCharge: IXMLAllowanceChargeType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property SpecialTerms: IXMLSpecialTermsType_cbcList read Get_SpecialTerms;
    property LossRiskResponsibilityCode: IXMLLossRiskResponsibilityCodeType_cbc read Get_LossRiskResponsibilityCode;
    property LossRisk: IXMLLossRiskType_cbcList read Get_LossRisk;
    property Amount: IXMLAmountType_cbc read Get_Amount;
    property DeliveryLocation: IXMLLocationType_cac read Get_DeliveryLocation;
    property AllowanceCharge: IXMLAllowanceChargeType_cac read Get_AllowanceCharge;
  end;

{ IXMLDeliveryTermsType_cacList }

  IXMLDeliveryTermsType_cacList = interface(IXMLNodeCollection)
    ['{414C63F1-2F02-49E6-B084-866CE96B60BF}']
    { Methods & Properties }
    function Add: IXMLDeliveryTermsType_cac;
    function Insert(const Index: Integer): IXMLDeliveryTermsType_cac;

    function Get_Item(const Index: Integer): IXMLDeliveryTermsType_cac;
    property Items[const Index: Integer]: IXMLDeliveryTermsType_cac read Get_Item; default;
  end;

{ IXMLSpecialTermsType_cbc }

  IXMLSpecialTermsType_cbc = interface(IXMLNode)
    ['{AA5B6998-A10F-4AF0-AC40-9BC5A41A59C8}']
  end;

{ IXMLSpecialTermsType_cbcList }

  IXMLSpecialTermsType_cbcList = interface(IXMLNodeCollection)
    ['{41E570D6-23AE-4B92-AF9A-3E7D6581E569}']
    { Methods & Properties }
    function Add: IXMLSpecialTermsType_cbc;
    function Insert(const Index: Integer): IXMLSpecialTermsType_cbc;

    function Get_Item(const Index: Integer): IXMLSpecialTermsType_cbc;
    property Items[const Index: Integer]: IXMLSpecialTermsType_cbc read Get_Item; default;
  end;

{ IXMLLossRiskResponsibilityCodeType_cbc }

  IXMLLossRiskResponsibilityCodeType_cbc = interface(IXMLNode)
    ['{EC15660A-BD4A-44FB-8511-0165DE75CDD4}']
  end;

{ IXMLLossRiskType_cbc }

  IXMLLossRiskType_cbc = interface(IXMLNode)
    ['{0475BE42-CC1A-42AE-A0F3-3824C03C7B99}']
  end;

{ IXMLLossRiskType_cbcList }

  IXMLLossRiskType_cbcList = interface(IXMLNodeCollection)
    ['{2A516389-CF0B-4396-9AC3-5C519B443F0D}']
    { Methods & Properties }
    function Add: IXMLLossRiskType_cbc;
    function Insert(const Index: Integer): IXMLLossRiskType_cbc;

    function Get_Item(const Index: Integer): IXMLLossRiskType_cbc;
    property Items[const Index: Integer]: IXMLLossRiskType_cbc read Get_Item; default;
  end;

{ IXMLDeliveryUnitType_cac }

  IXMLDeliveryUnitType_cac = interface(IXMLNode)
    ['{F0D138E3-C8D3-4364-9A4A-9110F05D592C}']
    { Property Accessors }
    function Get_BatchQuantity: IXMLBatchQuantityType_cbc;
    function Get_ConsumerUnitQuantity: IXMLConsumerUnitQuantityType_cbc;
    function Get_HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc;
    { Methods & Properties }
    property BatchQuantity: IXMLBatchQuantityType_cbc read Get_BatchQuantity;
    property ConsumerUnitQuantity: IXMLConsumerUnitQuantityType_cbc read Get_ConsumerUnitQuantity;
    property HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc read Get_HazardousRiskIndicator;
  end;

{ IXMLDeliveryUnitType_cacList }

  IXMLDeliveryUnitType_cacList = interface(IXMLNodeCollection)
    ['{0E975A69-AF1B-40B4-BA63-50EF9514424B}']
    { Methods & Properties }
    function Add: IXMLDeliveryUnitType_cac;
    function Insert(const Index: Integer): IXMLDeliveryUnitType_cac;

    function Get_Item(const Index: Integer): IXMLDeliveryUnitType_cac;
    property Items[const Index: Integer]: IXMLDeliveryUnitType_cac read Get_Item; default;
  end;

{ IXMLBatchQuantityType_cbc }

  IXMLBatchQuantityType_cbc = interface(IXMLNode)
    ['{5484BCD8-7FAD-4A6B-83AF-54F0CFC8D217}']
  end;

{ IXMLConsumerUnitQuantityType_cbc }

  IXMLConsumerUnitQuantityType_cbc = interface(IXMLNode)
    ['{712CABE8-C7A9-42E2-A834-A9FD25D82101}']
  end;

{ IXMLHazardousRiskIndicatorType_cbc }

  IXMLHazardousRiskIndicatorType_cbc = interface(IXMLNode)
    ['{647B17B1-3B62-4A9B-AF8F-DC5A8C7FB86C}']
  end;

{ IXMLShipmentType_cac }

  IXMLShipmentType_cac = interface(IXMLNode)
    ['{2911EEC0-8EF8-4428-8A7A-1EA5A8DAB0F9}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_ShippingPriorityLevelCode: IXMLShippingPriorityLevelCodeType_cbc;
    function Get_HandlingCode: IXMLHandlingCodeType_cbc;
    function Get_HandlingInstructions: IXMLHandlingInstructionsType_cbcList;
    function Get_Information: IXMLInformationType_cbcList;
    function Get_GrossWeightMeasure: IXMLGrossWeightMeasureType_cbc;
    function Get_NetWeightMeasure: IXMLNetWeightMeasureType_cbc;
    function Get_NetNetWeightMeasure: IXMLNetNetWeightMeasureType_cbc;
    function Get_GrossVolumeMeasure: IXMLGrossVolumeMeasureType_cbc;
    function Get_NetVolumeMeasure: IXMLNetVolumeMeasureType_cbc;
    function Get_TotalGoodsItemQuantity: IXMLTotalGoodsItemQuantityType_cbc;
    function Get_TotalTransportHandlingUnitQuantity: IXMLTotalTransportHandlingUnitQuantityType_cbc;
    function Get_InsuranceValueAmount: IXMLInsuranceValueAmountType_cbc;
    function Get_DeclaredCustomsValueAmount: IXMLDeclaredCustomsValueAmountType_cbc;
    function Get_DeclaredForCarriageValueAmount: IXMLDeclaredForCarriageValueAmountType_cbc;
    function Get_DeclaredStatisticsValueAmount: IXMLDeclaredStatisticsValueAmountType_cbc;
    function Get_FreeOnBoardValueAmount: IXMLFreeOnBoardValueAmountType_cbc;
    function Get_SpecialInstructions: IXMLSpecialInstructionsType_cbcList;
    function Get_DeliveryInstructions: IXMLDeliveryInstructionsType_cbcList;
    function Get_SplitConsignmentIndicator: IXMLSplitConsignmentIndicatorType_cbc;
    function Get_ConsignmentQuantity: IXMLConsignmentQuantityType_cbc;
    function Get_Consignment: IXMLConsignmentType_cacList;
    function Get_GoodsItem: IXMLGoodsItemType_cacList;
    function Get_ShipmentStage: IXMLShipmentStageType_cacList;
    function Get_Delivery: IXMLDeliveryType_cac;
    function Get_TransportHandlingUnit: IXMLTransportHandlingUnitType_cacList;
    function Get_ReturnAddress: IXMLAddressType_cac;
    function Get_OriginAddress: IXMLAddressType_cac;
    function Get_FirstArrivalPortLocation: IXMLLocationType_cac;
    function Get_LastExitPortLocation: IXMLLocationType_cac;
    function Get_ExportCountry: IXMLCountryType_cac;
    function Get_FreightAllowanceCharge: IXMLAllowanceChargeType_cacList;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property ShippingPriorityLevelCode: IXMLShippingPriorityLevelCodeType_cbc read Get_ShippingPriorityLevelCode;
    property HandlingCode: IXMLHandlingCodeType_cbc read Get_HandlingCode;
    property HandlingInstructions: IXMLHandlingInstructionsType_cbcList read Get_HandlingInstructions;
    property Information: IXMLInformationType_cbcList read Get_Information;
    property GrossWeightMeasure: IXMLGrossWeightMeasureType_cbc read Get_GrossWeightMeasure;
    property NetWeightMeasure: IXMLNetWeightMeasureType_cbc read Get_NetWeightMeasure;
    property NetNetWeightMeasure: IXMLNetNetWeightMeasureType_cbc read Get_NetNetWeightMeasure;
    property GrossVolumeMeasure: IXMLGrossVolumeMeasureType_cbc read Get_GrossVolumeMeasure;
    property NetVolumeMeasure: IXMLNetVolumeMeasureType_cbc read Get_NetVolumeMeasure;
    property TotalGoodsItemQuantity: IXMLTotalGoodsItemQuantityType_cbc read Get_TotalGoodsItemQuantity;
    property TotalTransportHandlingUnitQuantity: IXMLTotalTransportHandlingUnitQuantityType_cbc read Get_TotalTransportHandlingUnitQuantity;
    property InsuranceValueAmount: IXMLInsuranceValueAmountType_cbc read Get_InsuranceValueAmount;
    property DeclaredCustomsValueAmount: IXMLDeclaredCustomsValueAmountType_cbc read Get_DeclaredCustomsValueAmount;
    property DeclaredForCarriageValueAmount: IXMLDeclaredForCarriageValueAmountType_cbc read Get_DeclaredForCarriageValueAmount;
    property DeclaredStatisticsValueAmount: IXMLDeclaredStatisticsValueAmountType_cbc read Get_DeclaredStatisticsValueAmount;
    property FreeOnBoardValueAmount: IXMLFreeOnBoardValueAmountType_cbc read Get_FreeOnBoardValueAmount;
    property SpecialInstructions: IXMLSpecialInstructionsType_cbcList read Get_SpecialInstructions;
    property DeliveryInstructions: IXMLDeliveryInstructionsType_cbcList read Get_DeliveryInstructions;
    property SplitConsignmentIndicator: IXMLSplitConsignmentIndicatorType_cbc read Get_SplitConsignmentIndicator;
    property ConsignmentQuantity: IXMLConsignmentQuantityType_cbc read Get_ConsignmentQuantity;
    property Consignment: IXMLConsignmentType_cacList read Get_Consignment;
    property GoodsItem: IXMLGoodsItemType_cacList read Get_GoodsItem;
    property ShipmentStage: IXMLShipmentStageType_cacList read Get_ShipmentStage;
    property Delivery: IXMLDeliveryType_cac read Get_Delivery;
    property TransportHandlingUnit: IXMLTransportHandlingUnitType_cacList read Get_TransportHandlingUnit;
    property ReturnAddress: IXMLAddressType_cac read Get_ReturnAddress;
    property OriginAddress: IXMLAddressType_cac read Get_OriginAddress;
    property FirstArrivalPortLocation: IXMLLocationType_cac read Get_FirstArrivalPortLocation;
    property LastExitPortLocation: IXMLLocationType_cac read Get_LastExitPortLocation;
    property ExportCountry: IXMLCountryType_cac read Get_ExportCountry;
    property FreightAllowanceCharge: IXMLAllowanceChargeType_cacList read Get_FreightAllowanceCharge;
  end;

{ IXMLShipmentType_cacList }

  IXMLShipmentType_cacList = interface(IXMLNodeCollection)
    ['{399A13C2-8282-4705-A98E-8A0273655A09}']
    { Methods & Properties }
    function Add: IXMLShipmentType_cac;
    function Insert(const Index: Integer): IXMLShipmentType_cac;

    function Get_Item(const Index: Integer): IXMLShipmentType_cac;
    property Items[const Index: Integer]: IXMLShipmentType_cac read Get_Item; default;
  end;

{ IXMLShippingPriorityLevelCodeType_cbc }

  IXMLShippingPriorityLevelCodeType_cbc = interface(IXMLNode)
    ['{BDC6FF9C-F82E-42EB-8103-A177A725ADE8}']
  end;

{ IXMLHandlingCodeType_cbc }

  IXMLHandlingCodeType_cbc = interface(IXMLNode)
    ['{F93AEF55-B00E-4571-98B4-CA50F80C12CF}']
  end;

{ IXMLHandlingInstructionsType_cbc }

  IXMLHandlingInstructionsType_cbc = interface(IXMLNode)
    ['{F4BA5891-7DC7-41AE-BBFC-7D30E0AB5023}']
  end;

{ IXMLHandlingInstructionsType_cbcList }

  IXMLHandlingInstructionsType_cbcList = interface(IXMLNodeCollection)
    ['{7B34596A-8364-4E52-909D-6F42C07EA549}']
    { Methods & Properties }
    function Add: IXMLHandlingInstructionsType_cbc;
    function Insert(const Index: Integer): IXMLHandlingInstructionsType_cbc;

    function Get_Item(const Index: Integer): IXMLHandlingInstructionsType_cbc;
    property Items[const Index: Integer]: IXMLHandlingInstructionsType_cbc read Get_Item; default;
  end;

{ IXMLInformationType_cbc }

  IXMLInformationType_cbc = interface(IXMLNode)
    ['{869646AA-CD21-41CE-948D-6DE2F085BF9D}']
  end;

{ IXMLInformationType_cbcList }

  IXMLInformationType_cbcList = interface(IXMLNodeCollection)
    ['{8829BD06-473B-47E2-AD31-BF26A2ACC328}']
    { Methods & Properties }
    function Add: IXMLInformationType_cbc;
    function Insert(const Index: Integer): IXMLInformationType_cbc;

    function Get_Item(const Index: Integer): IXMLInformationType_cbc;
    property Items[const Index: Integer]: IXMLInformationType_cbc read Get_Item; default;
  end;

{ IXMLGrossWeightMeasureType_cbc }

  IXMLGrossWeightMeasureType_cbc = interface(IXMLNode)
    ['{647F5BE7-30C3-4080-A6D8-F2E5326F9CDD}']
  end;

{ IXMLNetWeightMeasureType_cbc }

  IXMLNetWeightMeasureType_cbc = interface(IXMLNode)
    ['{F8D181E3-7FF9-4278-9A77-02B1BF9BBD2D}']
  end;

{ IXMLNetNetWeightMeasureType_cbc }

  IXMLNetNetWeightMeasureType_cbc = interface(IXMLNode)
    ['{C5A60358-7658-4DBA-807F-6BD5EAEE9BE0}']
  end;

{ IXMLGrossVolumeMeasureType_cbc }

  IXMLGrossVolumeMeasureType_cbc = interface(IXMLNode)
    ['{EB6818F9-D109-4C7B-9805-53640CD0854F}']
  end;

{ IXMLNetVolumeMeasureType_cbc }

  IXMLNetVolumeMeasureType_cbc = interface(IXMLNode)
    ['{1C0D73F6-0CEC-42C5-B96A-2C9228D57EF2}']
  end;

{ IXMLTotalGoodsItemQuantityType_cbc }

  IXMLTotalGoodsItemQuantityType_cbc = interface(IXMLNode)
    ['{E6CB8FE0-7831-4842-9987-268E72318D8E}']
  end;

{ IXMLTotalTransportHandlingUnitQuantityType_cbc }

  IXMLTotalTransportHandlingUnitQuantityType_cbc = interface(IXMLNode)
    ['{268C867B-4557-49C1-981C-DE11481DAA71}']
  end;

{ IXMLInsuranceValueAmountType_cbc }

  IXMLInsuranceValueAmountType_cbc = interface(IXMLNode)
    ['{053BBFC0-DF64-4104-89F1-3EB1B7ADAF9F}']
  end;

{ IXMLDeclaredCustomsValueAmountType_cbc }

  IXMLDeclaredCustomsValueAmountType_cbc = interface(IXMLNode)
    ['{2EF9A8E3-B4A0-4A4C-BB79-E7D2BF769270}']
  end;

{ IXMLDeclaredForCarriageValueAmountType_cbc }

  IXMLDeclaredForCarriageValueAmountType_cbc = interface(IXMLNode)
    ['{97305A7E-EF30-46C7-A5E9-D4BC06DAE45E}']
  end;

{ IXMLDeclaredStatisticsValueAmountType_cbc }

  IXMLDeclaredStatisticsValueAmountType_cbc = interface(IXMLNode)
    ['{CBDA0F3E-EC46-4419-900E-F0497A909123}']
  end;

{ IXMLFreeOnBoardValueAmountType_cbc }

  IXMLFreeOnBoardValueAmountType_cbc = interface(IXMLNode)
    ['{19A5A657-2F93-4B3B-938B-D5BAA7A44469}']
  end;

{ IXMLSpecialInstructionsType_cbc }

  IXMLSpecialInstructionsType_cbc = interface(IXMLNode)
    ['{BFFC5DC0-0181-4D11-B87C-80A8137E71B3}']
  end;

{ IXMLSpecialInstructionsType_cbcList }

  IXMLSpecialInstructionsType_cbcList = interface(IXMLNodeCollection)
    ['{5097EC53-CFF0-4358-8670-43A16FAC805B}']
    { Methods & Properties }
    function Add: IXMLSpecialInstructionsType_cbc;
    function Insert(const Index: Integer): IXMLSpecialInstructionsType_cbc;

    function Get_Item(const Index: Integer): IXMLSpecialInstructionsType_cbc;
    property Items[const Index: Integer]: IXMLSpecialInstructionsType_cbc read Get_Item; default;
  end;

{ IXMLDeliveryInstructionsType_cbc }

  IXMLDeliveryInstructionsType_cbc = interface(IXMLNode)
    ['{6CE4AE71-093C-490E-A4D5-FD72D7BA79B2}']
  end;

{ IXMLDeliveryInstructionsType_cbcList }

  IXMLDeliveryInstructionsType_cbcList = interface(IXMLNodeCollection)
    ['{88F755DE-7377-4B4B-BAE1-E3E9545283C1}']
    { Methods & Properties }
    function Add: IXMLDeliveryInstructionsType_cbc;
    function Insert(const Index: Integer): IXMLDeliveryInstructionsType_cbc;

    function Get_Item(const Index: Integer): IXMLDeliveryInstructionsType_cbc;
    property Items[const Index: Integer]: IXMLDeliveryInstructionsType_cbc read Get_Item; default;
  end;

{ IXMLSplitConsignmentIndicatorType_cbc }

  IXMLSplitConsignmentIndicatorType_cbc = interface(IXMLNode)
    ['{01712156-88A6-4231-A1E3-607643BC953C}']
  end;

{ IXMLConsignmentQuantityType_cbc }

  IXMLConsignmentQuantityType_cbc = interface(IXMLNode)
    ['{D1B9E79F-EFC4-4D22-9C29-881E986A079A}']
  end;

{ IXMLConsignmentType_cac }

  IXMLConsignmentType_cac = interface(IXMLNode)
    ['{1B47C0B8-30ED-4951-AD31-3C0F9D07EF1E}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_CarrierAssignedID: IXMLCarrierAssignedIDType_cbc;
    function Get_ConsigneeAssignedID: IXMLConsigneeAssignedIDType_cbc;
    function Get_ConsignorAssignedID: IXMLConsignorAssignedIDType_cbc;
    function Get_FreightForwarderAssignedID: IXMLFreightForwarderAssignedIDType_cbc;
    function Get_BrokerAssignedID: IXMLBrokerAssignedIDType_cbc;
    function Get_ContractedCarrierAssignedID: IXMLContractedCarrierAssignedIDType_cbc;
    function Get_PerformingCarrierAssignedID: IXMLPerformingCarrierAssignedIDType_cbc;
    function Get_SummaryDescription: IXMLSummaryDescriptionType_cbcList;
    function Get_TotalInvoiceAmount: IXMLTotalInvoiceAmountType_cbc;
    function Get_DeclaredCustomsValueAmount: IXMLDeclaredCustomsValueAmountType_cbc;
    function Get_TariffDescription: IXMLTariffDescriptionType_cbcList;
    function Get_TariffCode: IXMLTariffCodeType_cbc;
    function Get_InsurancePremiumAmount: IXMLInsurancePremiumAmountType_cbc;
    function Get_GrossWeightMeasure: IXMLGrossWeightMeasureType_cbc;
    function Get_NetWeightMeasure: IXMLNetWeightMeasureType_cbc;
    function Get_NetNetWeightMeasure: IXMLNetNetWeightMeasureType_cbc;
    function Get_ChargeableWeightMeasure: IXMLChargeableWeightMeasureType_cbc;
    function Get_GrossVolumeMeasure: IXMLGrossVolumeMeasureType_cbc;
    function Get_NetVolumeMeasure: IXMLNetVolumeMeasureType_cbc;
    function Get_LoadingLengthMeasure: IXMLLoadingLengthMeasureType_cbc;
    function Get_Remarks: IXMLRemarksType_cbcList;
    function Get_HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc;
    function Get_AnimalFoodIndicator: IXMLAnimalFoodIndicatorType_cbc;
    function Get_HumanFoodIndicator: IXMLHumanFoodIndicatorType_cbc;
    function Get_LivestockIndicator: IXMLLivestockIndicatorType_cbc;
    function Get_BulkCargoIndicator: IXMLBulkCargoIndicatorType_cbc;
    function Get_ContainerizedIndicator: IXMLContainerizedIndicatorType_cbc;
    function Get_GeneralCargoIndicator: IXMLGeneralCargoIndicatorType_cbc;
    function Get_SpecialSecurityIndicator: IXMLSpecialSecurityIndicatorType_cbc;
    function Get_ThirdPartyPayerIndicator: IXMLThirdPartyPayerIndicatorType_cbc;
    function Get_CarrierServiceInstructions: IXMLCarrierServiceInstructionsType_cbcList;
    function Get_CustomsClearanceServiceInstructions: IXMLCustomsClearanceServiceInstructionsType_cbcList;
    function Get_ForwarderServiceInstructions: IXMLForwarderServiceInstructionsType_cbcList;
    function Get_SpecialServiceInstructions: IXMLSpecialServiceInstructionsType_cbcList;
    function Get_SequenceID: IXMLSequenceIDType_cbc;
    function Get_ShippingPriorityLevelCode: IXMLShippingPriorityLevelCodeType_cbc;
    function Get_HandlingCode: IXMLHandlingCodeType_cbc;
    function Get_HandlingInstructions: IXMLHandlingInstructionsType_cbcList;
    function Get_Information: IXMLInformationType_cbcList;
    function Get_TotalGoodsItemQuantity: IXMLTotalGoodsItemQuantityType_cbc;
    function Get_TotalTransportHandlingUnitQuantity: IXMLTotalTransportHandlingUnitQuantityType_cbc;
    function Get_InsuranceValueAmount: IXMLInsuranceValueAmountType_cbc;
    function Get_DeclaredForCarriageValueAmount: IXMLDeclaredForCarriageValueAmountType_cbc;
    function Get_DeclaredStatisticsValueAmount: IXMLDeclaredStatisticsValueAmountType_cbc;
    function Get_FreeOnBoardValueAmount: IXMLFreeOnBoardValueAmountType_cbc;
    function Get_SpecialInstructions: IXMLSpecialInstructionsType_cbcList;
    function Get_SplitConsignmentIndicator: IXMLSplitConsignmentIndicatorType_cbc;
    function Get_DeliveryInstructions: IXMLDeliveryInstructionsType_cbcList;
    function Get_ConsignmentQuantity: IXMLConsignmentQuantityType_cbc;
    function Get_ConsolidatableIndicator: IXMLConsolidatableIndicatorType_cbc;
    function Get_HaulageInstructions: IXMLHaulageInstructionsType_cbcList;
    function Get_LoadingSequenceID: IXMLLoadingSequenceIDType_cbc;
    function Get_ChildConsignmentQuantity: IXMLChildConsignmentQuantityType_cbc;
    function Get_TotalPackagesQuantity: IXMLTotalPackagesQuantityType_cbc;
    function Get_ConsolidatedShipment: IXMLShipmentType_cacList;
    function Get_CustomsDeclaration: IXMLCustomsDeclarationType_cacList;
    function Get_RequestedPickupTransportEvent: IXMLTransportEventType_cac;
    function Get_RequestedDeliveryTransportEvent: IXMLTransportEventType_cac;
    function Get_PlannedPickupTransportEvent: IXMLTransportEventType_cac;
    function Get_PlannedDeliveryTransportEvent: IXMLTransportEventType_cac;
    function Get_Status: IXMLStatusType_cacList;
    function Get_ChildConsignment: IXMLConsignmentType_cacList;
    function Get_ConsigneeParty: IXMLPartyType_cac;
    function Get_ExporterParty: IXMLPartyType_cac;
    function Get_ConsignorParty: IXMLPartyType_cac;
    function Get_ImporterParty: IXMLPartyType_cac;
    function Get_CarrierParty: IXMLPartyType_cac;
    function Get_FreightForwarderParty: IXMLPartyType_cac;
    function Get_NotifyParty: IXMLPartyType_cac;
    function Get_OriginalDespatchParty: IXMLPartyType_cac;
    function Get_FinalDeliveryParty: IXMLPartyType_cac;
    function Get_PerformingCarrierParty: IXMLPartyType_cac;
    function Get_SubstituteCarrierParty: IXMLPartyType_cac;
    function Get_LogisticsOperatorParty: IXMLPartyType_cac;
    function Get_TransportAdvisorParty: IXMLPartyType_cac;
    function Get_HazardousItemNotificationParty: IXMLPartyType_cac;
    function Get_InsuranceParty: IXMLPartyType_cac;
    function Get_MortgageHolderParty: IXMLPartyType_cac;
    function Get_BillOfLadingHolderParty: IXMLPartyType_cac;
    function Get_OriginalDepartureCountry: IXMLCountryType_cac;
    function Get_FinalDestinationCountry: IXMLCountryType_cac;
    function Get_TransitCountry: IXMLCountryType_cacList;
    function Get_TransportContract: IXMLContractType_cac;
    function Get_TransportEvent: IXMLTransportEventType_cacList;
    function Get_OriginalDespatchTransportationService: IXMLTransportationServiceType_cac;
    function Get_FinalDeliveryTransportationService: IXMLTransportationServiceType_cac;
    function Get_DeliveryTerms: IXMLDeliveryTermsType_cac;
    function Get_PaymentTerms: IXMLPaymentTermsType_cac;
    function Get_CollectPaymentTerms: IXMLPaymentTermsType_cac;
    function Get_DisbursementPaymentTerms: IXMLPaymentTermsType_cac;
    function Get_PrepaidPaymentTerms: IXMLPaymentTermsType_cac;
    function Get_FreightAllowanceCharge: IXMLAllowanceChargeType_cacList;
    function Get_ExtraAllowanceCharge: IXMLAllowanceChargeType_cacList;
    function Get_MainCarriageShipmentStage: IXMLShipmentStageType_cacList;
    function Get_PreCarriageShipmentStage: IXMLShipmentStageType_cacList;
    function Get_OnCarriageShipmentStage: IXMLShipmentStageType_cacList;
    function Get_TransportHandlingUnit: IXMLTransportHandlingUnitType_cacList;
    function Get_FirstArrivalPortLocation: IXMLLocationType_cac;
    function Get_LastExitPortLocation: IXMLLocationType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property CarrierAssignedID: IXMLCarrierAssignedIDType_cbc read Get_CarrierAssignedID;
    property ConsigneeAssignedID: IXMLConsigneeAssignedIDType_cbc read Get_ConsigneeAssignedID;
    property ConsignorAssignedID: IXMLConsignorAssignedIDType_cbc read Get_ConsignorAssignedID;
    property FreightForwarderAssignedID: IXMLFreightForwarderAssignedIDType_cbc read Get_FreightForwarderAssignedID;
    property BrokerAssignedID: IXMLBrokerAssignedIDType_cbc read Get_BrokerAssignedID;
    property ContractedCarrierAssignedID: IXMLContractedCarrierAssignedIDType_cbc read Get_ContractedCarrierAssignedID;
    property PerformingCarrierAssignedID: IXMLPerformingCarrierAssignedIDType_cbc read Get_PerformingCarrierAssignedID;
    property SummaryDescription: IXMLSummaryDescriptionType_cbcList read Get_SummaryDescription;
    property TotalInvoiceAmount: IXMLTotalInvoiceAmountType_cbc read Get_TotalInvoiceAmount;
    property DeclaredCustomsValueAmount: IXMLDeclaredCustomsValueAmountType_cbc read Get_DeclaredCustomsValueAmount;
    property TariffDescription: IXMLTariffDescriptionType_cbcList read Get_TariffDescription;
    property TariffCode: IXMLTariffCodeType_cbc read Get_TariffCode;
    property InsurancePremiumAmount: IXMLInsurancePremiumAmountType_cbc read Get_InsurancePremiumAmount;
    property GrossWeightMeasure: IXMLGrossWeightMeasureType_cbc read Get_GrossWeightMeasure;
    property NetWeightMeasure: IXMLNetWeightMeasureType_cbc read Get_NetWeightMeasure;
    property NetNetWeightMeasure: IXMLNetNetWeightMeasureType_cbc read Get_NetNetWeightMeasure;
    property ChargeableWeightMeasure: IXMLChargeableWeightMeasureType_cbc read Get_ChargeableWeightMeasure;
    property GrossVolumeMeasure: IXMLGrossVolumeMeasureType_cbc read Get_GrossVolumeMeasure;
    property NetVolumeMeasure: IXMLNetVolumeMeasureType_cbc read Get_NetVolumeMeasure;
    property LoadingLengthMeasure: IXMLLoadingLengthMeasureType_cbc read Get_LoadingLengthMeasure;
    property Remarks: IXMLRemarksType_cbcList read Get_Remarks;
    property HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc read Get_HazardousRiskIndicator;
    property AnimalFoodIndicator: IXMLAnimalFoodIndicatorType_cbc read Get_AnimalFoodIndicator;
    property HumanFoodIndicator: IXMLHumanFoodIndicatorType_cbc read Get_HumanFoodIndicator;
    property LivestockIndicator: IXMLLivestockIndicatorType_cbc read Get_LivestockIndicator;
    property BulkCargoIndicator: IXMLBulkCargoIndicatorType_cbc read Get_BulkCargoIndicator;
    property ContainerizedIndicator: IXMLContainerizedIndicatorType_cbc read Get_ContainerizedIndicator;
    property GeneralCargoIndicator: IXMLGeneralCargoIndicatorType_cbc read Get_GeneralCargoIndicator;
    property SpecialSecurityIndicator: IXMLSpecialSecurityIndicatorType_cbc read Get_SpecialSecurityIndicator;
    property ThirdPartyPayerIndicator: IXMLThirdPartyPayerIndicatorType_cbc read Get_ThirdPartyPayerIndicator;
    property CarrierServiceInstructions: IXMLCarrierServiceInstructionsType_cbcList read Get_CarrierServiceInstructions;
    property CustomsClearanceServiceInstructions: IXMLCustomsClearanceServiceInstructionsType_cbcList read Get_CustomsClearanceServiceInstructions;
    property ForwarderServiceInstructions: IXMLForwarderServiceInstructionsType_cbcList read Get_ForwarderServiceInstructions;
    property SpecialServiceInstructions: IXMLSpecialServiceInstructionsType_cbcList read Get_SpecialServiceInstructions;
    property SequenceID: IXMLSequenceIDType_cbc read Get_SequenceID;
    property ShippingPriorityLevelCode: IXMLShippingPriorityLevelCodeType_cbc read Get_ShippingPriorityLevelCode;
    property HandlingCode: IXMLHandlingCodeType_cbc read Get_HandlingCode;
    property HandlingInstructions: IXMLHandlingInstructionsType_cbcList read Get_HandlingInstructions;
    property Information: IXMLInformationType_cbcList read Get_Information;
    property TotalGoodsItemQuantity: IXMLTotalGoodsItemQuantityType_cbc read Get_TotalGoodsItemQuantity;
    property TotalTransportHandlingUnitQuantity: IXMLTotalTransportHandlingUnitQuantityType_cbc read Get_TotalTransportHandlingUnitQuantity;
    property InsuranceValueAmount: IXMLInsuranceValueAmountType_cbc read Get_InsuranceValueAmount;
    property DeclaredForCarriageValueAmount: IXMLDeclaredForCarriageValueAmountType_cbc read Get_DeclaredForCarriageValueAmount;
    property DeclaredStatisticsValueAmount: IXMLDeclaredStatisticsValueAmountType_cbc read Get_DeclaredStatisticsValueAmount;
    property FreeOnBoardValueAmount: IXMLFreeOnBoardValueAmountType_cbc read Get_FreeOnBoardValueAmount;
    property SpecialInstructions: IXMLSpecialInstructionsType_cbcList read Get_SpecialInstructions;
    property SplitConsignmentIndicator: IXMLSplitConsignmentIndicatorType_cbc read Get_SplitConsignmentIndicator;
    property DeliveryInstructions: IXMLDeliveryInstructionsType_cbcList read Get_DeliveryInstructions;
    property ConsignmentQuantity: IXMLConsignmentQuantityType_cbc read Get_ConsignmentQuantity;
    property ConsolidatableIndicator: IXMLConsolidatableIndicatorType_cbc read Get_ConsolidatableIndicator;
    property HaulageInstructions: IXMLHaulageInstructionsType_cbcList read Get_HaulageInstructions;
    property LoadingSequenceID: IXMLLoadingSequenceIDType_cbc read Get_LoadingSequenceID;
    property ChildConsignmentQuantity: IXMLChildConsignmentQuantityType_cbc read Get_ChildConsignmentQuantity;
    property TotalPackagesQuantity: IXMLTotalPackagesQuantityType_cbc read Get_TotalPackagesQuantity;
    property ConsolidatedShipment: IXMLShipmentType_cacList read Get_ConsolidatedShipment;
    property CustomsDeclaration: IXMLCustomsDeclarationType_cacList read Get_CustomsDeclaration;
    property RequestedPickupTransportEvent: IXMLTransportEventType_cac read Get_RequestedPickupTransportEvent;
    property RequestedDeliveryTransportEvent: IXMLTransportEventType_cac read Get_RequestedDeliveryTransportEvent;
    property PlannedPickupTransportEvent: IXMLTransportEventType_cac read Get_PlannedPickupTransportEvent;
    property PlannedDeliveryTransportEvent: IXMLTransportEventType_cac read Get_PlannedDeliveryTransportEvent;
    property Status: IXMLStatusType_cacList read Get_Status;
    property ChildConsignment: IXMLConsignmentType_cacList read Get_ChildConsignment;
    property ConsigneeParty: IXMLPartyType_cac read Get_ConsigneeParty;
    property ExporterParty: IXMLPartyType_cac read Get_ExporterParty;
    property ConsignorParty: IXMLPartyType_cac read Get_ConsignorParty;
    property ImporterParty: IXMLPartyType_cac read Get_ImporterParty;
    property CarrierParty: IXMLPartyType_cac read Get_CarrierParty;
    property FreightForwarderParty: IXMLPartyType_cac read Get_FreightForwarderParty;
    property NotifyParty: IXMLPartyType_cac read Get_NotifyParty;
    property OriginalDespatchParty: IXMLPartyType_cac read Get_OriginalDespatchParty;
    property FinalDeliveryParty: IXMLPartyType_cac read Get_FinalDeliveryParty;
    property PerformingCarrierParty: IXMLPartyType_cac read Get_PerformingCarrierParty;
    property SubstituteCarrierParty: IXMLPartyType_cac read Get_SubstituteCarrierParty;
    property LogisticsOperatorParty: IXMLPartyType_cac read Get_LogisticsOperatorParty;
    property TransportAdvisorParty: IXMLPartyType_cac read Get_TransportAdvisorParty;
    property HazardousItemNotificationParty: IXMLPartyType_cac read Get_HazardousItemNotificationParty;
    property InsuranceParty: IXMLPartyType_cac read Get_InsuranceParty;
    property MortgageHolderParty: IXMLPartyType_cac read Get_MortgageHolderParty;
    property BillOfLadingHolderParty: IXMLPartyType_cac read Get_BillOfLadingHolderParty;
    property OriginalDepartureCountry: IXMLCountryType_cac read Get_OriginalDepartureCountry;
    property FinalDestinationCountry: IXMLCountryType_cac read Get_FinalDestinationCountry;
    property TransitCountry: IXMLCountryType_cacList read Get_TransitCountry;
    property TransportContract: IXMLContractType_cac read Get_TransportContract;
    property TransportEvent: IXMLTransportEventType_cacList read Get_TransportEvent;
    property OriginalDespatchTransportationService: IXMLTransportationServiceType_cac read Get_OriginalDespatchTransportationService;
    property FinalDeliveryTransportationService: IXMLTransportationServiceType_cac read Get_FinalDeliveryTransportationService;
    property DeliveryTerms: IXMLDeliveryTermsType_cac read Get_DeliveryTerms;
    property PaymentTerms: IXMLPaymentTermsType_cac read Get_PaymentTerms;
    property CollectPaymentTerms: IXMLPaymentTermsType_cac read Get_CollectPaymentTerms;
    property DisbursementPaymentTerms: IXMLPaymentTermsType_cac read Get_DisbursementPaymentTerms;
    property PrepaidPaymentTerms: IXMLPaymentTermsType_cac read Get_PrepaidPaymentTerms;
    property FreightAllowanceCharge: IXMLAllowanceChargeType_cacList read Get_FreightAllowanceCharge;
    property ExtraAllowanceCharge: IXMLAllowanceChargeType_cacList read Get_ExtraAllowanceCharge;
    property MainCarriageShipmentStage: IXMLShipmentStageType_cacList read Get_MainCarriageShipmentStage;
    property PreCarriageShipmentStage: IXMLShipmentStageType_cacList read Get_PreCarriageShipmentStage;
    property OnCarriageShipmentStage: IXMLShipmentStageType_cacList read Get_OnCarriageShipmentStage;
    property TransportHandlingUnit: IXMLTransportHandlingUnitType_cacList read Get_TransportHandlingUnit;
    property FirstArrivalPortLocation: IXMLLocationType_cac read Get_FirstArrivalPortLocation;
    property LastExitPortLocation: IXMLLocationType_cac read Get_LastExitPortLocation;
  end;

{ IXMLConsignmentType_cacList }

  IXMLConsignmentType_cacList = interface(IXMLNodeCollection)
    ['{1A015FAD-7C49-454E-9448-3BAC479C0808}']
    { Methods & Properties }
    function Add: IXMLConsignmentType_cac;
    function Insert(const Index: Integer): IXMLConsignmentType_cac;

    function Get_Item(const Index: Integer): IXMLConsignmentType_cac;
    property Items[const Index: Integer]: IXMLConsignmentType_cac read Get_Item; default;
  end;

{ IXMLCarrierAssignedIDType_cbc }

  IXMLCarrierAssignedIDType_cbc = interface(IXMLNode)
    ['{BD1A64D7-157B-412F-89A1-39D3C42C267E}']
  end;

{ IXMLConsigneeAssignedIDType_cbc }

  IXMLConsigneeAssignedIDType_cbc = interface(IXMLNode)
    ['{4D491807-FA02-4FC8-8859-1862F674E212}']
  end;

{ IXMLConsignorAssignedIDType_cbc }

  IXMLConsignorAssignedIDType_cbc = interface(IXMLNode)
    ['{0F94FDE8-8919-495B-852D-DD629E3DE446}']
  end;

{ IXMLFreightForwarderAssignedIDType_cbc }

  IXMLFreightForwarderAssignedIDType_cbc = interface(IXMLNode)
    ['{4781515F-4DB7-482F-AA56-46602CD2D017}']
  end;

{ IXMLBrokerAssignedIDType_cbc }

  IXMLBrokerAssignedIDType_cbc = interface(IXMLNode)
    ['{16D0D571-5351-45A8-BBB6-E4BB3B302BDF}']
  end;

{ IXMLContractedCarrierAssignedIDType_cbc }

  IXMLContractedCarrierAssignedIDType_cbc = interface(IXMLNode)
    ['{3054838C-BD81-493D-A2D9-E0EFFA153BF4}']
  end;

{ IXMLPerformingCarrierAssignedIDType_cbc }

  IXMLPerformingCarrierAssignedIDType_cbc = interface(IXMLNode)
    ['{D14D9397-D79E-454A-8726-226145016C54}']
  end;

{ IXMLSummaryDescriptionType_cbc }

  IXMLSummaryDescriptionType_cbc = interface(IXMLNode)
    ['{4B439409-F456-41A4-8625-A2B2ABB00993}']
  end;

{ IXMLSummaryDescriptionType_cbcList }

  IXMLSummaryDescriptionType_cbcList = interface(IXMLNodeCollection)
    ['{66FAF1E7-3F41-43DA-9DF0-49CDCAF1AE80}']
    { Methods & Properties }
    function Add: IXMLSummaryDescriptionType_cbc;
    function Insert(const Index: Integer): IXMLSummaryDescriptionType_cbc;

    function Get_Item(const Index: Integer): IXMLSummaryDescriptionType_cbc;
    property Items[const Index: Integer]: IXMLSummaryDescriptionType_cbc read Get_Item; default;
  end;

{ IXMLTotalInvoiceAmountType_cbc }

  IXMLTotalInvoiceAmountType_cbc = interface(IXMLNode)
    ['{34E3F8ED-6BC9-42F9-9E89-D80F9842BB54}']
  end;

{ IXMLTariffDescriptionType_cbc }

  IXMLTariffDescriptionType_cbc = interface(IXMLNode)
    ['{CB8B24C2-7C75-47DC-B618-12D6E1BB243A}']
  end;

{ IXMLTariffDescriptionType_cbcList }

  IXMLTariffDescriptionType_cbcList = interface(IXMLNodeCollection)
    ['{2A6F71CB-D0A7-4E6A-B12C-D72C694FBFA2}']
    { Methods & Properties }
    function Add: IXMLTariffDescriptionType_cbc;
    function Insert(const Index: Integer): IXMLTariffDescriptionType_cbc;

    function Get_Item(const Index: Integer): IXMLTariffDescriptionType_cbc;
    property Items[const Index: Integer]: IXMLTariffDescriptionType_cbc read Get_Item; default;
  end;

{ IXMLTariffCodeType_cbc }

  IXMLTariffCodeType_cbc = interface(IXMLNode)
    ['{8E928722-36FD-4E0B-A10F-E09C2505D570}']
  end;

{ IXMLInsurancePremiumAmountType_cbc }

  IXMLInsurancePremiumAmountType_cbc = interface(IXMLNode)
    ['{612347D8-9406-479E-B7EB-96DCBE7EA7B0}']
  end;

{ IXMLChargeableWeightMeasureType_cbc }

  IXMLChargeableWeightMeasureType_cbc = interface(IXMLNode)
    ['{0DEED6C5-4F20-4B09-BB51-AE71620E7FBB}']
  end;

{ IXMLLoadingLengthMeasureType_cbc }

  IXMLLoadingLengthMeasureType_cbc = interface(IXMLNode)
    ['{75974C69-016F-47E2-9829-9824E66C1C42}']
  end;

{ IXMLRemarksType_cbc }

  IXMLRemarksType_cbc = interface(IXMLNode)
    ['{A3832C94-BCA9-4A31-A801-DF6028250A91}']
  end;

{ IXMLRemarksType_cbcList }

  IXMLRemarksType_cbcList = interface(IXMLNodeCollection)
    ['{247EC107-3DC6-41A9-88CB-389BE4E1D8AE}']
    { Methods & Properties }
    function Add: IXMLRemarksType_cbc;
    function Insert(const Index: Integer): IXMLRemarksType_cbc;

    function Get_Item(const Index: Integer): IXMLRemarksType_cbc;
    property Items[const Index: Integer]: IXMLRemarksType_cbc read Get_Item; default;
  end;

{ IXMLAnimalFoodIndicatorType_cbc }

  IXMLAnimalFoodIndicatorType_cbc = interface(IXMLNode)
    ['{84C8D561-8883-48B8-BF38-E482579737AA}']
  end;

{ IXMLHumanFoodIndicatorType_cbc }

  IXMLHumanFoodIndicatorType_cbc = interface(IXMLNode)
    ['{C9DE53B6-50A5-41BE-8414-1BCB7DF044A8}']
  end;

{ IXMLLivestockIndicatorType_cbc }

  IXMLLivestockIndicatorType_cbc = interface(IXMLNode)
    ['{D36CABC9-2D37-4CAC-ABBC-B7E73232CC06}']
  end;

{ IXMLBulkCargoIndicatorType_cbc }

  IXMLBulkCargoIndicatorType_cbc = interface(IXMLNode)
    ['{BBD02715-5A48-4B65-85A6-D408D1DC309F}']
  end;

{ IXMLContainerizedIndicatorType_cbc }

  IXMLContainerizedIndicatorType_cbc = interface(IXMLNode)
    ['{42FE1C40-D744-476D-833E-F9D8419CF10C}']
  end;

{ IXMLGeneralCargoIndicatorType_cbc }

  IXMLGeneralCargoIndicatorType_cbc = interface(IXMLNode)
    ['{04A1B0EE-52FB-47DE-B104-E6BA5D5C6E26}']
  end;

{ IXMLSpecialSecurityIndicatorType_cbc }

  IXMLSpecialSecurityIndicatorType_cbc = interface(IXMLNode)
    ['{3909E27B-A15A-470F-950D-9B17F7854F43}']
  end;

{ IXMLThirdPartyPayerIndicatorType_cbc }

  IXMLThirdPartyPayerIndicatorType_cbc = interface(IXMLNode)
    ['{7135947F-962B-4826-9A1A-2E9F53E334B8}']
  end;

{ IXMLCarrierServiceInstructionsType_cbc }

  IXMLCarrierServiceInstructionsType_cbc = interface(IXMLNode)
    ['{3E96F7D1-806F-4C8D-BD0A-092CB13D66B4}']
  end;

{ IXMLCarrierServiceInstructionsType_cbcList }

  IXMLCarrierServiceInstructionsType_cbcList = interface(IXMLNodeCollection)
    ['{440A1691-0946-46F8-85A2-681C988EDA50}']
    { Methods & Properties }
    function Add: IXMLCarrierServiceInstructionsType_cbc;
    function Insert(const Index: Integer): IXMLCarrierServiceInstructionsType_cbc;

    function Get_Item(const Index: Integer): IXMLCarrierServiceInstructionsType_cbc;
    property Items[const Index: Integer]: IXMLCarrierServiceInstructionsType_cbc read Get_Item; default;
  end;

{ IXMLCustomsClearanceServiceInstructionsType_cbc }

  IXMLCustomsClearanceServiceInstructionsType_cbc = interface(IXMLNode)
    ['{701CF600-D947-44C6-AA12-77A2816BA75B}']
  end;

{ IXMLCustomsClearanceServiceInstructionsType_cbcList }

  IXMLCustomsClearanceServiceInstructionsType_cbcList = interface(IXMLNodeCollection)
    ['{F59055BF-CC2A-4FF3-AEEF-6B5569047F6D}']
    { Methods & Properties }
    function Add: IXMLCustomsClearanceServiceInstructionsType_cbc;
    function Insert(const Index: Integer): IXMLCustomsClearanceServiceInstructionsType_cbc;

    function Get_Item(const Index: Integer): IXMLCustomsClearanceServiceInstructionsType_cbc;
    property Items[const Index: Integer]: IXMLCustomsClearanceServiceInstructionsType_cbc read Get_Item; default;
  end;

{ IXMLForwarderServiceInstructionsType_cbc }

  IXMLForwarderServiceInstructionsType_cbc = interface(IXMLNode)
    ['{E9FF9E82-F755-4FFA-9091-F78AA26EAC5F}']
  end;

{ IXMLForwarderServiceInstructionsType_cbcList }

  IXMLForwarderServiceInstructionsType_cbcList = interface(IXMLNodeCollection)
    ['{8C92FAC0-1BBE-4BB0-869B-26C7115E0AF6}']
    { Methods & Properties }
    function Add: IXMLForwarderServiceInstructionsType_cbc;
    function Insert(const Index: Integer): IXMLForwarderServiceInstructionsType_cbc;

    function Get_Item(const Index: Integer): IXMLForwarderServiceInstructionsType_cbc;
    property Items[const Index: Integer]: IXMLForwarderServiceInstructionsType_cbc read Get_Item; default;
  end;

{ IXMLSpecialServiceInstructionsType_cbc }

  IXMLSpecialServiceInstructionsType_cbc = interface(IXMLNode)
    ['{17E89FD9-9DE7-4237-A6ED-6D5FB5A1D51E}']
  end;

{ IXMLSpecialServiceInstructionsType_cbcList }

  IXMLSpecialServiceInstructionsType_cbcList = interface(IXMLNodeCollection)
    ['{2FF2B73C-325A-4B6C-9C57-7C6DB84C8DF8}']
    { Methods & Properties }
    function Add: IXMLSpecialServiceInstructionsType_cbc;
    function Insert(const Index: Integer): IXMLSpecialServiceInstructionsType_cbc;

    function Get_Item(const Index: Integer): IXMLSpecialServiceInstructionsType_cbc;
    property Items[const Index: Integer]: IXMLSpecialServiceInstructionsType_cbc read Get_Item; default;
  end;

{ IXMLSequenceIDType_cbc }

  IXMLSequenceIDType_cbc = interface(IXMLNode)
    ['{8D6E782B-37D5-404F-97D0-1780440330F4}']
  end;

{ IXMLConsolidatableIndicatorType_cbc }

  IXMLConsolidatableIndicatorType_cbc = interface(IXMLNode)
    ['{85DB7841-10DC-415C-86B5-3A5930765BB1}']
  end;

{ IXMLHaulageInstructionsType_cbc }

  IXMLHaulageInstructionsType_cbc = interface(IXMLNode)
    ['{8DF86A5B-59C3-448C-9D7B-9D8082DDBEA0}']
  end;

{ IXMLHaulageInstructionsType_cbcList }

  IXMLHaulageInstructionsType_cbcList = interface(IXMLNodeCollection)
    ['{0FAEA6D8-38A3-4B5F-A546-C76A1B2591BC}']
    { Methods & Properties }
    function Add: IXMLHaulageInstructionsType_cbc;
    function Insert(const Index: Integer): IXMLHaulageInstructionsType_cbc;

    function Get_Item(const Index: Integer): IXMLHaulageInstructionsType_cbc;
    property Items[const Index: Integer]: IXMLHaulageInstructionsType_cbc read Get_Item; default;
  end;

{ IXMLLoadingSequenceIDType_cbc }

  IXMLLoadingSequenceIDType_cbc = interface(IXMLNode)
    ['{57DACF36-AB91-46E6-A42B-B00EE7B6DDB4}']
  end;

{ IXMLChildConsignmentQuantityType_cbc }

  IXMLChildConsignmentQuantityType_cbc = interface(IXMLNode)
    ['{B5B6DD7B-ADAE-49D1-80ED-9C7BDEC7E008}']
  end;

{ IXMLTotalPackagesQuantityType_cbc }

  IXMLTotalPackagesQuantityType_cbc = interface(IXMLNode)
    ['{CBC62BE1-025A-41E0-85C8-1939DB04D7EA}']
  end;

{ IXMLCustomsDeclarationType_cac }

  IXMLCustomsDeclarationType_cac = interface(IXMLNode)
    ['{C0DD9DCC-77CB-4B2B-86B1-CE6FB6FDEF52}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_IssuerParty: IXMLPartyType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property IssuerParty: IXMLPartyType_cac read Get_IssuerParty;
  end;

{ IXMLCustomsDeclarationType_cacList }

  IXMLCustomsDeclarationType_cacList = interface(IXMLNodeCollection)
    ['{2979F90A-0CDE-4DFE-B0C6-B9C853E35B64}']
    { Methods & Properties }
    function Add: IXMLCustomsDeclarationType_cac;
    function Insert(const Index: Integer): IXMLCustomsDeclarationType_cac;

    function Get_Item(const Index: Integer): IXMLCustomsDeclarationType_cac;
    property Items[const Index: Integer]: IXMLCustomsDeclarationType_cac read Get_Item; default;
  end;

{ IXMLTransportEventType_cac }

  IXMLTransportEventType_cac = interface(IXMLNode)
    ['{F1B9C781-4E05-482F-B592-05516F490BD2}']
    { Property Accessors }
    function Get_IdentificationID: IXMLIdentificationIDType_cbc;
    function Get_OccurrenceDate: IXMLOccurrenceDateType_cbc;
    function Get_OccurrenceTime: IXMLOccurrenceTimeType_cbc;
    function Get_TransportEventTypeCode: IXMLTransportEventTypeCodeType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_CompletionIndicator: IXMLCompletionIndicatorType_cbc;
    function Get_ReportedShipment: IXMLShipmentType_cac;
    function Get_CurrentStatus: IXMLStatusType_cacList;
    function Get_Contact: IXMLContactType_cacList;
    function Get_Location: IXMLLocationType_cac;
    function Get_Signature: IXMLSignatureType_cac;
    function Get_Period: IXMLPeriodType_cacList;
    { Methods & Properties }
    property IdentificationID: IXMLIdentificationIDType_cbc read Get_IdentificationID;
    property OccurrenceDate: IXMLOccurrenceDateType_cbc read Get_OccurrenceDate;
    property OccurrenceTime: IXMLOccurrenceTimeType_cbc read Get_OccurrenceTime;
    property TransportEventTypeCode: IXMLTransportEventTypeCodeType_cbc read Get_TransportEventTypeCode;
    property Description: IXMLDescriptionType_cbcList read Get_Description;
    property CompletionIndicator: IXMLCompletionIndicatorType_cbc read Get_CompletionIndicator;
    property ReportedShipment: IXMLShipmentType_cac read Get_ReportedShipment;
    property CurrentStatus: IXMLStatusType_cacList read Get_CurrentStatus;
    property Contact: IXMLContactType_cacList read Get_Contact;
    property Location: IXMLLocationType_cac read Get_Location;
    property Signature: IXMLSignatureType_cac read Get_Signature;
    property Period: IXMLPeriodType_cacList read Get_Period;
  end;

{ IXMLTransportEventType_cacList }

  IXMLTransportEventType_cacList = interface(IXMLNodeCollection)
    ['{1D759493-2A13-4682-9FF0-6711B8E9B8E4}']
    { Methods & Properties }
    function Add: IXMLTransportEventType_cac;
    function Insert(const Index: Integer): IXMLTransportEventType_cac;

    function Get_Item(const Index: Integer): IXMLTransportEventType_cac;
    property Items[const Index: Integer]: IXMLTransportEventType_cac read Get_Item; default;
  end;

{ IXMLIdentificationIDType_cbc }

  IXMLIdentificationIDType_cbc = interface(IXMLNode)
    ['{DF4A9F73-E242-4684-B910-0CC222C05906}']
  end;

{ IXMLOccurrenceDateType_cbc }

  IXMLOccurrenceDateType_cbc = interface(IXMLNode)
    ['{F460CCD3-E99E-4599-A1A6-1D8639267CF0}']
  end;

{ IXMLOccurrenceTimeType_cbc }

  IXMLOccurrenceTimeType_cbc = interface(IXMLNode)
    ['{98C4E9F0-7E3E-4F7C-8BF2-1BBD79D3F20C}']
  end;

{ IXMLTransportEventTypeCodeType_cbc }

  IXMLTransportEventTypeCodeType_cbc = interface(IXMLNode)
    ['{653315FF-8D3E-4C65-8301-4166014CF740}']
  end;

{ IXMLCompletionIndicatorType_cbc }

  IXMLCompletionIndicatorType_cbc = interface(IXMLNode)
    ['{EB60CA3E-443B-421D-AC1A-21659B3A59C1}']
  end;

{ IXMLStatusType_cac }

  IXMLStatusType_cac = interface(IXMLNode)
    ['{7C8A8EAF-5406-41A8-99D8-9A72EACCD1BF}']
    { Property Accessors }
    function Get_ConditionCode: IXMLConditionCodeType_cbc;
    function Get_ReferenceDate: IXMLReferenceDateType_cbc;
    function Get_ReferenceTime: IXMLReferenceTimeType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_StatusReasonCode: IXMLStatusReasonCodeType_cbc;
    function Get_StatusReason: IXMLStatusReasonType_cbcList;
    function Get_SequenceID: IXMLSequenceIDType_cbc;
    function Get_Text: IXMLTextType_cbcList;
    function Get_IndicationIndicator: IXMLIndicationIndicatorType_cbc;
    function Get_Percent: IXMLPercentType_cbc;
    function Get_ReliabilityPercent: IXMLReliabilityPercentType_cbc;
    function Get_Condition: IXMLConditionType_cacList;
    { Methods & Properties }
    property ConditionCode: IXMLConditionCodeType_cbc read Get_ConditionCode;
    property ReferenceDate: IXMLReferenceDateType_cbc read Get_ReferenceDate;
    property ReferenceTime: IXMLReferenceTimeType_cbc read Get_ReferenceTime;
    property Description: IXMLDescriptionType_cbcList read Get_Description;
    property StatusReasonCode: IXMLStatusReasonCodeType_cbc read Get_StatusReasonCode;
    property StatusReason: IXMLStatusReasonType_cbcList read Get_StatusReason;
    property SequenceID: IXMLSequenceIDType_cbc read Get_SequenceID;
    property Text: IXMLTextType_cbcList read Get_Text;
    property IndicationIndicator: IXMLIndicationIndicatorType_cbc read Get_IndicationIndicator;
    property Percent: IXMLPercentType_cbc read Get_Percent;
    property ReliabilityPercent: IXMLReliabilityPercentType_cbc read Get_ReliabilityPercent;
    property Condition: IXMLConditionType_cacList read Get_Condition;
  end;

{ IXMLStatusType_cacList }

  IXMLStatusType_cacList = interface(IXMLNodeCollection)
    ['{42E5E9D1-963F-42A7-ACE3-06757C22C606}']
    { Methods & Properties }
    function Add: IXMLStatusType_cac;
    function Insert(const Index: Integer): IXMLStatusType_cac;

    function Get_Item(const Index: Integer): IXMLStatusType_cac;
    property Items[const Index: Integer]: IXMLStatusType_cac read Get_Item; default;
  end;

{ IXMLConditionCodeType_cbc }

  IXMLConditionCodeType_cbc = interface(IXMLNode)
    ['{FC42515D-1033-4EB2-8AC9-53C9D5E9ABE6}']
  end;

{ IXMLReferenceDateType_cbc }

  IXMLReferenceDateType_cbc = interface(IXMLNode)
    ['{1D623677-585F-4036-B39D-FF5277A0D1CD}']
  end;

{ IXMLReferenceTimeType_cbc }

  IXMLReferenceTimeType_cbc = interface(IXMLNode)
    ['{9C9A75F4-811E-4959-A101-D113E0D70752}']
  end;

{ IXMLStatusReasonCodeType_cbc }

  IXMLStatusReasonCodeType_cbc = interface(IXMLNode)
    ['{92F8A669-8F80-448A-8164-9E445F0E7A27}']
  end;

{ IXMLStatusReasonType_cbc }

  IXMLStatusReasonType_cbc = interface(IXMLNode)
    ['{F4BCB347-FDB1-4E41-98DA-83DA6ECE20F9}']
  end;

{ IXMLStatusReasonType_cbcList }

  IXMLStatusReasonType_cbcList = interface(IXMLNodeCollection)
    ['{67C9C78D-5402-43CB-93BF-A03CB34EBC0D}']
    { Methods & Properties }
    function Add: IXMLStatusReasonType_cbc;
    function Insert(const Index: Integer): IXMLStatusReasonType_cbc;

    function Get_Item(const Index: Integer): IXMLStatusReasonType_cbc;
    property Items[const Index: Integer]: IXMLStatusReasonType_cbc read Get_Item; default;
  end;

{ IXMLTextType_cbc }

  IXMLTextType_cbc = interface(IXMLNode)
    ['{D7D0D9D9-58D2-49A8-A8E5-84F309AC710D}']
  end;

{ IXMLTextType_cbcList }

  IXMLTextType_cbcList = interface(IXMLNodeCollection)
    ['{354E4E96-E7D1-4C31-B1B7-7AEB15A423CF}']
    { Methods & Properties }
    function Add: IXMLTextType_cbc;
    function Insert(const Index: Integer): IXMLTextType_cbc;

    function Get_Item(const Index: Integer): IXMLTextType_cbc;
    property Items[const Index: Integer]: IXMLTextType_cbc read Get_Item; default;
  end;

{ IXMLIndicationIndicatorType_cbc }

  IXMLIndicationIndicatorType_cbc = interface(IXMLNode)
    ['{FDE434C6-86D4-4B79-8FDE-95D66F78DD47}']
  end;

{ IXMLReliabilityPercentType_cbc }

  IXMLReliabilityPercentType_cbc = interface(IXMLNode)
    ['{C25913F0-3991-48EC-A92D-7065DDDE4DA1}']
  end;

{ IXMLConditionType_cac }

  IXMLConditionType_cac = interface(IXMLNode)
    ['{247CADF6-77EA-45BA-A34F-40AB629B3B8D}']
    { Property Accessors }
    function Get_AttributeID: IXMLAttributeIDType_cbc;
    function Get_Measure: IXMLMeasureType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_MinimumMeasure: IXMLMinimumMeasureType_cbc;
    function Get_MaximumMeasure: IXMLMaximumMeasureType_cbc;
    { Methods & Properties }
    property AttributeID: IXMLAttributeIDType_cbc read Get_AttributeID;
    property Measure: IXMLMeasureType_cbc read Get_Measure;
    property Description: IXMLDescriptionType_cbcList read Get_Description;
    property MinimumMeasure: IXMLMinimumMeasureType_cbc read Get_MinimumMeasure;
    property MaximumMeasure: IXMLMaximumMeasureType_cbc read Get_MaximumMeasure;
  end;

{ IXMLConditionType_cacList }

  IXMLConditionType_cacList = interface(IXMLNodeCollection)
    ['{7759B198-7B2E-46D4-B4E9-D8BA869CA400}']
    { Methods & Properties }
    function Add: IXMLConditionType_cac;
    function Insert(const Index: Integer): IXMLConditionType_cac;

    function Get_Item(const Index: Integer): IXMLConditionType_cac;
    property Items[const Index: Integer]: IXMLConditionType_cac read Get_Item; default;
  end;

{ IXMLAttributeIDType_cbc }

  IXMLAttributeIDType_cbc = interface(IXMLNode)
    ['{003A9B5F-959D-428F-B3DD-973110B5C195}']
  end;

{ IXMLMeasureType_cbc }

  IXMLMeasureType_cbc = interface(IXMLNode)
    ['{1D5D456B-3830-4A19-BE05-7CF854F5D0B3}']
  end;

{ IXMLMinimumMeasureType_cbc }

  IXMLMinimumMeasureType_cbc = interface(IXMLNode)
    ['{F3091B9F-05BB-4418-A365-AC7771AB66F2}']
  end;

{ IXMLMaximumMeasureType_cbc }

  IXMLMaximumMeasureType_cbc = interface(IXMLNode)
    ['{5E7E50A7-A355-4D1B-BD76-CDAC8B9FB9CC}']
  end;

{ IXMLContractType_cac }

  IXMLContractType_cac = interface(IXMLNode)
    ['{DF2E6BA1-2690-4C76-87C5-2A6FDD2A386F}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_IssueDate: IXMLIssueDateType_cbc;
    function Get_IssueTime: IXMLIssueTimeType_cbc;
    function Get_NominationDate: IXMLNominationDateType_cbc;
    function Get_NominationTime: IXMLNominationTimeType_cbc;
    function Get_ContractTypeCode: IXMLContractTypeCodeType_cbc;
    function Get_ContractType: IXMLContractTypeType_cbc;
    function Get_Note: IXMLNoteType_cbcList;
    function Get_VersionID: IXMLVersionIDType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_ValidityPeriod: IXMLPeriodType_cac;
    function Get_ContractDocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_NominationPeriod: IXMLPeriodType_cac;
    function Get_ContractualDelivery: IXMLDeliveryType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property IssueDate: IXMLIssueDateType_cbc read Get_IssueDate;
    property IssueTime: IXMLIssueTimeType_cbc read Get_IssueTime;
    property NominationDate: IXMLNominationDateType_cbc read Get_NominationDate;
    property NominationTime: IXMLNominationTimeType_cbc read Get_NominationTime;
    property ContractTypeCode: IXMLContractTypeCodeType_cbc read Get_ContractTypeCode;
    property ContractType: IXMLContractTypeType_cbc read Get_ContractType;
    property Note: IXMLNoteType_cbcList read Get_Note;
    property VersionID: IXMLVersionIDType_cbc read Get_VersionID;
    property Description: IXMLDescriptionType_cbcList read Get_Description;
    property ValidityPeriod: IXMLPeriodType_cac read Get_ValidityPeriod;
    property ContractDocumentReference: IXMLDocumentReferenceType_cacList read Get_ContractDocumentReference;
    property NominationPeriod: IXMLPeriodType_cac read Get_NominationPeriod;
    property ContractualDelivery: IXMLDeliveryType_cac read Get_ContractualDelivery;
  end;

{ IXMLNominationDateType_cbc }

  IXMLNominationDateType_cbc = interface(IXMLNode)
    ['{4E0EC45F-9D27-4991-B7AF-C0AB873CFD84}']
  end;

{ IXMLNominationTimeType_cbc }

  IXMLNominationTimeType_cbc = interface(IXMLNode)
    ['{B1E8DC83-F113-4349-8C4B-6F41911B0540}']
  end;

{ IXMLContractTypeCodeType_cbc }

  IXMLContractTypeCodeType_cbc = interface(IXMLNode)
    ['{F4C52401-940D-41EF-BDF4-8DD69F712360}']
  end;

{ IXMLContractTypeType_cbc }

  IXMLContractTypeType_cbc = interface(IXMLNode)
    ['{56ECCE1D-5218-41F6-B3C6-81552E28599E}']
  end;

{ IXMLTransportationServiceType_cac }

  IXMLTransportationServiceType_cac = interface(IXMLNode)
    ['{0F228992-E7BC-46DC-A606-C2FF2E1EC020}']
    { Property Accessors }
    function Get_TransportServiceCode: IXMLTransportServiceCodeType_cbc;
    function Get_TariffClassCode: IXMLTariffClassCodeType_cbc;
    function Get_Priority: IXMLPriorityType_cbc;
    function Get_FreightRateClassCode: IXMLFreightRateClassCodeType_cbc;
    function Get_TransportationServiceDescription: IXMLTransportationServiceDescriptionType_cbcList;
    function Get_TransportationServiceDetailsURI: IXMLTransportationServiceDetailsURIType_cbc;
    function Get_NominationDate: IXMLNominationDateType_cbc;
    function Get_NominationTime: IXMLNominationTimeType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_SequenceNumeric: IXMLSequenceNumericType_cbc;
    function Get_TransportEquipment: IXMLTransportEquipmentType_cacList;
    function Get_SupportedTransportEquipment: IXMLTransportEquipmentType_cacList;
    function Get_UnsupportedTransportEquipment: IXMLTransportEquipmentType_cacList;
    function Get_CommodityClassification: IXMLCommodityClassificationType_cacList;
    function Get_SupportedCommodityClassification: IXMLCommodityClassificationType_cacList;
    function Get_UnsupportedCommodityClassification: IXMLCommodityClassificationType_cacList;
    function Get_TotalCapacityDimension: IXMLDimensionType_cac;
    function Get_ShipmentStage: IXMLShipmentStageType_cacList;
    function Get_TransportEvent: IXMLTransportEventType_cacList;
    function Get_ResponsibleTransportServiceProviderParty: IXMLPartyType_cac;
    function Get_EnvironmentalEmission: IXMLEnvironmentalEmissionType_cacList;
    function Get_EstimatedDurationPeriod: IXMLPeriodType_cac;
    function Get_ScheduledServiceFrequency: IXMLServiceFrequencyType_cacList;
    { Methods & Properties }
    property TransportServiceCode: IXMLTransportServiceCodeType_cbc read Get_TransportServiceCode;
    property TariffClassCode: IXMLTariffClassCodeType_cbc read Get_TariffClassCode;
    property Priority: IXMLPriorityType_cbc read Get_Priority;
    property FreightRateClassCode: IXMLFreightRateClassCodeType_cbc read Get_FreightRateClassCode;
    property TransportationServiceDescription: IXMLTransportationServiceDescriptionType_cbcList read Get_TransportationServiceDescription;
    property TransportationServiceDetailsURI: IXMLTransportationServiceDetailsURIType_cbc read Get_TransportationServiceDetailsURI;
    property NominationDate: IXMLNominationDateType_cbc read Get_NominationDate;
    property NominationTime: IXMLNominationTimeType_cbc read Get_NominationTime;
    property Name: IXMLNameType_cbc read Get_Name;
    property SequenceNumeric: IXMLSequenceNumericType_cbc read Get_SequenceNumeric;
    property TransportEquipment: IXMLTransportEquipmentType_cacList read Get_TransportEquipment;
    property SupportedTransportEquipment: IXMLTransportEquipmentType_cacList read Get_SupportedTransportEquipment;
    property UnsupportedTransportEquipment: IXMLTransportEquipmentType_cacList read Get_UnsupportedTransportEquipment;
    property CommodityClassification: IXMLCommodityClassificationType_cacList read Get_CommodityClassification;
    property SupportedCommodityClassification: IXMLCommodityClassificationType_cacList read Get_SupportedCommodityClassification;
    property UnsupportedCommodityClassification: IXMLCommodityClassificationType_cacList read Get_UnsupportedCommodityClassification;
    property TotalCapacityDimension: IXMLDimensionType_cac read Get_TotalCapacityDimension;
    property ShipmentStage: IXMLShipmentStageType_cacList read Get_ShipmentStage;
    property TransportEvent: IXMLTransportEventType_cacList read Get_TransportEvent;
    property ResponsibleTransportServiceProviderParty: IXMLPartyType_cac read Get_ResponsibleTransportServiceProviderParty;
    property EnvironmentalEmission: IXMLEnvironmentalEmissionType_cacList read Get_EnvironmentalEmission;
    property EstimatedDurationPeriod: IXMLPeriodType_cac read Get_EstimatedDurationPeriod;
    property ScheduledServiceFrequency: IXMLServiceFrequencyType_cacList read Get_ScheduledServiceFrequency;
  end;

{ IXMLTransportServiceCodeType_cbc }

  IXMLTransportServiceCodeType_cbc = interface(IXMLNode)
    ['{55515988-EF1C-4FFF-8892-95E7609715BB}']
  end;

{ IXMLTariffClassCodeType_cbc }

  IXMLTariffClassCodeType_cbc = interface(IXMLNode)
    ['{4B15BE70-6BC8-4CCE-A96D-BAF4486B2E94}']
  end;

{ IXMLPriorityType_cbc }

  IXMLPriorityType_cbc = interface(IXMLNode)
    ['{6B460790-7B8B-42A7-B46A-2BAF8A14B438}']
  end;

{ IXMLFreightRateClassCodeType_cbc }

  IXMLFreightRateClassCodeType_cbc = interface(IXMLNode)
    ['{AD1E65D6-4718-449E-B2B0-6D450F299AB2}']
  end;

{ IXMLTransportationServiceDescriptionType_cbc }

  IXMLTransportationServiceDescriptionType_cbc = interface(IXMLNode)
    ['{B4B4EF19-0A80-48F9-AA58-95B2FF5DD780}']
  end;

{ IXMLTransportationServiceDescriptionType_cbcList }

  IXMLTransportationServiceDescriptionType_cbcList = interface(IXMLNodeCollection)
    ['{D4E3DB86-D5AA-4F4E-8B85-E90D03A99E61}']
    { Methods & Properties }
    function Add: IXMLTransportationServiceDescriptionType_cbc;
    function Insert(const Index: Integer): IXMLTransportationServiceDescriptionType_cbc;

    function Get_Item(const Index: Integer): IXMLTransportationServiceDescriptionType_cbc;
    property Items[const Index: Integer]: IXMLTransportationServiceDescriptionType_cbc read Get_Item; default;
  end;

{ IXMLTransportationServiceDetailsURIType_cbc }

  IXMLTransportationServiceDetailsURIType_cbc = interface(IXMLNode)
    ['{E00AAC93-0B1B-43C4-A52E-242D3705C762}']
  end;

{ IXMLTransportEquipmentType_cac }

  IXMLTransportEquipmentType_cac = interface(IXMLNode)
    ['{5274B1CA-8E6D-47BF-8DA9-24C239C4678A}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_ReferencedConsignmentID: IXMLReferencedConsignmentIDType_cbcList;
    function Get_TransportEquipmentTypeCode: IXMLTransportEquipmentTypeCodeType_cbc;
    function Get_ProviderTypeCode: IXMLProviderTypeCodeType_cbc;
    function Get_OwnerTypeCode: IXMLOwnerTypeCodeType_cbc;
    function Get_SizeTypeCode: IXMLSizeTypeCodeType_cbc;
    function Get_DispositionCode: IXMLDispositionCodeType_cbc;
    function Get_FullnessIndicationCode: IXMLFullnessIndicationCodeType_cbc;
    function Get_RefrigerationOnIndicator: IXMLRefrigerationOnIndicatorType_cbc;
    function Get_Information: IXMLInformationType_cbcList;
    function Get_ReturnabilityIndicator: IXMLReturnabilityIndicatorType_cbc;
    function Get_LegalStatusIndicator: IXMLLegalStatusIndicatorType_cbc;
    function Get_AirFlowPercent: IXMLAirFlowPercentType_cbc;
    function Get_HumidityPercent: IXMLHumidityPercentType_cbc;
    function Get_AnimalFoodApprovedIndicator: IXMLAnimalFoodApprovedIndicatorType_cbc;
    function Get_HumanFoodApprovedIndicator: IXMLHumanFoodApprovedIndicatorType_cbc;
    function Get_DangerousGoodsApprovedIndicator: IXMLDangerousGoodsApprovedIndicatorType_cbc;
    function Get_RefrigeratedIndicator: IXMLRefrigeratedIndicatorType_cbc;
    function Get_Characteristics: IXMLCharacteristicsType_cbc;
    function Get_DamageRemarks: IXMLDamageRemarksType_cbcList;
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_SpecialTransportRequirements: IXMLSpecialTransportRequirementsType_cbcList;
    function Get_GrossWeightMeasure: IXMLGrossWeightMeasureType_cbc;
    function Get_GrossVolumeMeasure: IXMLGrossVolumeMeasureType_cbc;
    function Get_TareWeightMeasure: IXMLTareWeightMeasureType_cbc;
    function Get_TrackingDeviceCode: IXMLTrackingDeviceCodeType_cbc;
    function Get_PowerIndicator: IXMLPowerIndicatorType_cbc;
    function Get_TraceID: IXMLTraceIDType_cbc;
    function Get_MeasurementDimension: IXMLDimensionType_cacList;
    function Get_TransportEquipmentSeal: IXMLTransportEquipmentSealType_cacList;
    function Get_MinimumTemperature: IXMLTemperatureType_cac;
    function Get_MaximumTemperature: IXMLTemperatureType_cac;
    function Get_ProviderParty: IXMLPartyType_cac;
    function Get_LoadingProofParty: IXMLPartyType_cac;
    function Get_SupplierParty: IXMLSupplierPartyType_cac;
    function Get_OwnerParty: IXMLPartyType_cac;
    function Get_OperatingParty: IXMLPartyType_cac;
    function Get_LoadingLocation: IXMLLocationType_cac;
    function Get_UnloadingLocation: IXMLLocationType_cac;
    function Get_StorageLocation: IXMLLocationType_cac;
    function Get_PositioningTransportEvent: IXMLTransportEventType_cacList;
    function Get_QuarantineTransportEvent: IXMLTransportEventType_cacList;
    function Get_DeliveryTransportEvent: IXMLTransportEventType_cacList;
    function Get_PickupTransportEvent: IXMLTransportEventType_cacList;
    function Get_HandlingTransportEvent: IXMLTransportEventType_cacList;
    function Get_LoadingTransportEvent: IXMLTransportEventType_cacList;
    function Get_TransportEvent: IXMLTransportEventType_cacList;
    function Get_ApplicableTransportMeans: IXMLTransportMeansType_cac;
    function Get_HaulageTradingTerms: IXMLTradingTermsType_cacList;
    function Get_HazardousGoodsTransit: IXMLHazardousGoodsTransitType_cacList;
    function Get_PackagedTransportHandlingUnit: IXMLTransportHandlingUnitType_cacList;
    function Get_ServiceAllowanceCharge: IXMLAllowanceChargeType_cacList;
    function Get_FreightAllowanceCharge: IXMLAllowanceChargeType_cacList;
    function Get_AttachedTransportEquipment: IXMLTransportEquipmentType_cacList;
    function Get_Delivery: IXMLDeliveryType_cac;
    function Get_Pickup: IXMLPickupType_cac;
    function Get_Despatch: IXMLDespatchType_cac;
    function Get_ShipmentDocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_ContainedInTransportEquipment: IXMLTransportEquipmentType_cacList;
    function Get_Package: IXMLPackageType_cacList;
    function Get_GoodsItem: IXMLGoodsItemType_cacList;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property ReferencedConsignmentID: IXMLReferencedConsignmentIDType_cbcList read Get_ReferencedConsignmentID;
    property TransportEquipmentTypeCode: IXMLTransportEquipmentTypeCodeType_cbc read Get_TransportEquipmentTypeCode;
    property ProviderTypeCode: IXMLProviderTypeCodeType_cbc read Get_ProviderTypeCode;
    property OwnerTypeCode: IXMLOwnerTypeCodeType_cbc read Get_OwnerTypeCode;
    property SizeTypeCode: IXMLSizeTypeCodeType_cbc read Get_SizeTypeCode;
    property DispositionCode: IXMLDispositionCodeType_cbc read Get_DispositionCode;
    property FullnessIndicationCode: IXMLFullnessIndicationCodeType_cbc read Get_FullnessIndicationCode;
    property RefrigerationOnIndicator: IXMLRefrigerationOnIndicatorType_cbc read Get_RefrigerationOnIndicator;
    property Information: IXMLInformationType_cbcList read Get_Information;
    property ReturnabilityIndicator: IXMLReturnabilityIndicatorType_cbc read Get_ReturnabilityIndicator;
    property LegalStatusIndicator: IXMLLegalStatusIndicatorType_cbc read Get_LegalStatusIndicator;
    property AirFlowPercent: IXMLAirFlowPercentType_cbc read Get_AirFlowPercent;
    property HumidityPercent: IXMLHumidityPercentType_cbc read Get_HumidityPercent;
    property AnimalFoodApprovedIndicator: IXMLAnimalFoodApprovedIndicatorType_cbc read Get_AnimalFoodApprovedIndicator;
    property HumanFoodApprovedIndicator: IXMLHumanFoodApprovedIndicatorType_cbc read Get_HumanFoodApprovedIndicator;
    property DangerousGoodsApprovedIndicator: IXMLDangerousGoodsApprovedIndicatorType_cbc read Get_DangerousGoodsApprovedIndicator;
    property RefrigeratedIndicator: IXMLRefrigeratedIndicatorType_cbc read Get_RefrigeratedIndicator;
    property Characteristics: IXMLCharacteristicsType_cbc read Get_Characteristics;
    property DamageRemarks: IXMLDamageRemarksType_cbcList read Get_DamageRemarks;
    property Description: IXMLDescriptionType_cbcList read Get_Description;
    property SpecialTransportRequirements: IXMLSpecialTransportRequirementsType_cbcList read Get_SpecialTransportRequirements;
    property GrossWeightMeasure: IXMLGrossWeightMeasureType_cbc read Get_GrossWeightMeasure;
    property GrossVolumeMeasure: IXMLGrossVolumeMeasureType_cbc read Get_GrossVolumeMeasure;
    property TareWeightMeasure: IXMLTareWeightMeasureType_cbc read Get_TareWeightMeasure;
    property TrackingDeviceCode: IXMLTrackingDeviceCodeType_cbc read Get_TrackingDeviceCode;
    property PowerIndicator: IXMLPowerIndicatorType_cbc read Get_PowerIndicator;
    property TraceID: IXMLTraceIDType_cbc read Get_TraceID;
    property MeasurementDimension: IXMLDimensionType_cacList read Get_MeasurementDimension;
    property TransportEquipmentSeal: IXMLTransportEquipmentSealType_cacList read Get_TransportEquipmentSeal;
    property MinimumTemperature: IXMLTemperatureType_cac read Get_MinimumTemperature;
    property MaximumTemperature: IXMLTemperatureType_cac read Get_MaximumTemperature;
    property ProviderParty: IXMLPartyType_cac read Get_ProviderParty;
    property LoadingProofParty: IXMLPartyType_cac read Get_LoadingProofParty;
    property SupplierParty: IXMLSupplierPartyType_cac read Get_SupplierParty;
    property OwnerParty: IXMLPartyType_cac read Get_OwnerParty;
    property OperatingParty: IXMLPartyType_cac read Get_OperatingParty;
    property LoadingLocation: IXMLLocationType_cac read Get_LoadingLocation;
    property UnloadingLocation: IXMLLocationType_cac read Get_UnloadingLocation;
    property StorageLocation: IXMLLocationType_cac read Get_StorageLocation;
    property PositioningTransportEvent: IXMLTransportEventType_cacList read Get_PositioningTransportEvent;
    property QuarantineTransportEvent: IXMLTransportEventType_cacList read Get_QuarantineTransportEvent;
    property DeliveryTransportEvent: IXMLTransportEventType_cacList read Get_DeliveryTransportEvent;
    property PickupTransportEvent: IXMLTransportEventType_cacList read Get_PickupTransportEvent;
    property HandlingTransportEvent: IXMLTransportEventType_cacList read Get_HandlingTransportEvent;
    property LoadingTransportEvent: IXMLTransportEventType_cacList read Get_LoadingTransportEvent;
    property TransportEvent: IXMLTransportEventType_cacList read Get_TransportEvent;
    property ApplicableTransportMeans: IXMLTransportMeansType_cac read Get_ApplicableTransportMeans;
    property HaulageTradingTerms: IXMLTradingTermsType_cacList read Get_HaulageTradingTerms;
    property HazardousGoodsTransit: IXMLHazardousGoodsTransitType_cacList read Get_HazardousGoodsTransit;
    property PackagedTransportHandlingUnit: IXMLTransportHandlingUnitType_cacList read Get_PackagedTransportHandlingUnit;
    property ServiceAllowanceCharge: IXMLAllowanceChargeType_cacList read Get_ServiceAllowanceCharge;
    property FreightAllowanceCharge: IXMLAllowanceChargeType_cacList read Get_FreightAllowanceCharge;
    property AttachedTransportEquipment: IXMLTransportEquipmentType_cacList read Get_AttachedTransportEquipment;
    property Delivery: IXMLDeliveryType_cac read Get_Delivery;
    property Pickup: IXMLPickupType_cac read Get_Pickup;
    property Despatch: IXMLDespatchType_cac read Get_Despatch;
    property ShipmentDocumentReference: IXMLDocumentReferenceType_cacList read Get_ShipmentDocumentReference;
    property ContainedInTransportEquipment: IXMLTransportEquipmentType_cacList read Get_ContainedInTransportEquipment;
    property Package: IXMLPackageType_cacList read Get_Package;
    property GoodsItem: IXMLGoodsItemType_cacList read Get_GoodsItem;
  end;

{ IXMLTransportEquipmentType_cacList }

  IXMLTransportEquipmentType_cacList = interface(IXMLNodeCollection)
    ['{67BE67E5-7B57-4B39-8744-F6A754A63C7E}']
    { Methods & Properties }
    function Add: IXMLTransportEquipmentType_cac;
    function Insert(const Index: Integer): IXMLTransportEquipmentType_cac;

    function Get_Item(const Index: Integer): IXMLTransportEquipmentType_cac;
    property Items[const Index: Integer]: IXMLTransportEquipmentType_cac read Get_Item; default;
  end;

{ IXMLReferencedConsignmentIDType_cbc }

  IXMLReferencedConsignmentIDType_cbc = interface(IXMLNode)
    ['{93CB301E-3C8A-445A-BA92-63E56FB69C12}']
  end;

{ IXMLReferencedConsignmentIDType_cbcList }

  IXMLReferencedConsignmentIDType_cbcList = interface(IXMLNodeCollection)
    ['{070FB6CD-7D21-4C04-8F7C-41F6AC4FCB6F}']
    { Methods & Properties }
    function Add: IXMLReferencedConsignmentIDType_cbc;
    function Insert(const Index: Integer): IXMLReferencedConsignmentIDType_cbc;

    function Get_Item(const Index: Integer): IXMLReferencedConsignmentIDType_cbc;
    property Items[const Index: Integer]: IXMLReferencedConsignmentIDType_cbc read Get_Item; default;
  end;

{ IXMLTransportEquipmentTypeCodeType_cbc }

  IXMLTransportEquipmentTypeCodeType_cbc = interface(IXMLNode)
    ['{09E3C930-E1EA-4F39-9EB3-99861EEE6BA1}']
  end;

{ IXMLProviderTypeCodeType_cbc }

  IXMLProviderTypeCodeType_cbc = interface(IXMLNode)
    ['{9F70168F-44FF-467B-A4F7-756E41DC8698}']
  end;

{ IXMLOwnerTypeCodeType_cbc }

  IXMLOwnerTypeCodeType_cbc = interface(IXMLNode)
    ['{44C38E06-3280-476F-A11B-7501E378AE56}']
  end;

{ IXMLSizeTypeCodeType_cbc }

  IXMLSizeTypeCodeType_cbc = interface(IXMLNode)
    ['{9AB198B3-8907-4F92-BF04-3F04336DE9CC}']
  end;

{ IXMLDispositionCodeType_cbc }

  IXMLDispositionCodeType_cbc = interface(IXMLNode)
    ['{0C41FAF6-A9DA-4018-86E7-BADF05A58033}']
  end;

{ IXMLFullnessIndicationCodeType_cbc }

  IXMLFullnessIndicationCodeType_cbc = interface(IXMLNode)
    ['{EAB1920C-A9E9-4F52-931E-D3EDBEFF9294}']
  end;

{ IXMLRefrigerationOnIndicatorType_cbc }

  IXMLRefrigerationOnIndicatorType_cbc = interface(IXMLNode)
    ['{AEAA2A12-7DCE-4378-A8D7-92F0AE130438}']
  end;

{ IXMLReturnabilityIndicatorType_cbc }

  IXMLReturnabilityIndicatorType_cbc = interface(IXMLNode)
    ['{C0414C90-6259-4F9E-AED6-46CEB9627C2C}']
  end;

{ IXMLLegalStatusIndicatorType_cbc }

  IXMLLegalStatusIndicatorType_cbc = interface(IXMLNode)
    ['{B3D8B9A0-11C3-46FB-B2C7-985F9A48E1E1}']
  end;

{ IXMLAirFlowPercentType_cbc }

  IXMLAirFlowPercentType_cbc = interface(IXMLNode)
    ['{066E341A-DE38-4CA9-8DDB-27F83760D359}']
  end;

{ IXMLHumidityPercentType_cbc }

  IXMLHumidityPercentType_cbc = interface(IXMLNode)
    ['{9C6B400B-0EF9-4A02-AB39-8460B93B0092}']
  end;

{ IXMLAnimalFoodApprovedIndicatorType_cbc }

  IXMLAnimalFoodApprovedIndicatorType_cbc = interface(IXMLNode)
    ['{57811C08-4FA3-4CF1-B8FA-88910D16363F}']
  end;

{ IXMLHumanFoodApprovedIndicatorType_cbc }

  IXMLHumanFoodApprovedIndicatorType_cbc = interface(IXMLNode)
    ['{3FEEC91D-58D7-4DB8-95B4-3AED5F3AAAFD}']
  end;

{ IXMLDangerousGoodsApprovedIndicatorType_cbc }

  IXMLDangerousGoodsApprovedIndicatorType_cbc = interface(IXMLNode)
    ['{C1DD9688-8B8D-43F2-B372-407C64DC7AB6}']
  end;

{ IXMLRefrigeratedIndicatorType_cbc }

  IXMLRefrigeratedIndicatorType_cbc = interface(IXMLNode)
    ['{9B212447-4A7D-4831-93AA-686D994E5968}']
  end;

{ IXMLCharacteristicsType_cbc }

  IXMLCharacteristicsType_cbc = interface(IXMLNode)
    ['{5CE0BD3A-D16C-431D-B58C-85619C497C7E}']
  end;

{ IXMLDamageRemarksType_cbc }

  IXMLDamageRemarksType_cbc = interface(IXMLNode)
    ['{4BC05DAA-E241-4B08-89AC-57BF946DD474}']
  end;

{ IXMLDamageRemarksType_cbcList }

  IXMLDamageRemarksType_cbcList = interface(IXMLNodeCollection)
    ['{92207A79-691A-450B-B504-99CBE6370121}']
    { Methods & Properties }
    function Add: IXMLDamageRemarksType_cbc;
    function Insert(const Index: Integer): IXMLDamageRemarksType_cbc;

    function Get_Item(const Index: Integer): IXMLDamageRemarksType_cbc;
    property Items[const Index: Integer]: IXMLDamageRemarksType_cbc read Get_Item; default;
  end;

{ IXMLSpecialTransportRequirementsType_cbc }

  IXMLSpecialTransportRequirementsType_cbc = interface(IXMLNode)
    ['{CB73CBFF-8471-4D07-BBC8-406BA5070604}']
  end;

{ IXMLSpecialTransportRequirementsType_cbcList }

  IXMLSpecialTransportRequirementsType_cbcList = interface(IXMLNodeCollection)
    ['{AF6D45D7-CA27-41FB-8B6C-684A0604919F}']
    { Methods & Properties }
    function Add: IXMLSpecialTransportRequirementsType_cbc;
    function Insert(const Index: Integer): IXMLSpecialTransportRequirementsType_cbc;

    function Get_Item(const Index: Integer): IXMLSpecialTransportRequirementsType_cbc;
    property Items[const Index: Integer]: IXMLSpecialTransportRequirementsType_cbc read Get_Item; default;
  end;

{ IXMLTareWeightMeasureType_cbc }

  IXMLTareWeightMeasureType_cbc = interface(IXMLNode)
    ['{A917C733-989D-4C6B-9C44-A14FB25A7272}']
  end;

{ IXMLTrackingDeviceCodeType_cbc }

  IXMLTrackingDeviceCodeType_cbc = interface(IXMLNode)
    ['{C2D58CCA-B4B9-4523-AE58-A2DA2DA32855}']
  end;

{ IXMLPowerIndicatorType_cbc }

  IXMLPowerIndicatorType_cbc = interface(IXMLNode)
    ['{A0041786-C890-4242-B02C-73CA5F03790B}']
  end;

{ IXMLTraceIDType_cbc }

  IXMLTraceIDType_cbc = interface(IXMLNode)
    ['{E11EF42A-3F22-4882-BAB6-C43E8690CD98}']
  end;

{ IXMLDimensionType_cac }

  IXMLDimensionType_cac = interface(IXMLNode)
    ['{215D9E3E-23E9-4673-AABC-16F4BFE2A6C2}']
    { Property Accessors }
    function Get_AttributeID: IXMLAttributeIDType_cbc;
    function Get_Measure: IXMLMeasureType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_MinimumMeasure: IXMLMinimumMeasureType_cbc;
    function Get_MaximumMeasure: IXMLMaximumMeasureType_cbc;
    { Methods & Properties }
    property AttributeID: IXMLAttributeIDType_cbc read Get_AttributeID;
    property Measure: IXMLMeasureType_cbc read Get_Measure;
    property Description: IXMLDescriptionType_cbcList read Get_Description;
    property MinimumMeasure: IXMLMinimumMeasureType_cbc read Get_MinimumMeasure;
    property MaximumMeasure: IXMLMaximumMeasureType_cbc read Get_MaximumMeasure;
  end;

{ IXMLDimensionType_cacList }

  IXMLDimensionType_cacList = interface(IXMLNodeCollection)
    ['{F945D6AB-B4D5-4818-B5BE-64D0411B4580}']
    { Methods & Properties }
    function Add: IXMLDimensionType_cac;
    function Insert(const Index: Integer): IXMLDimensionType_cac;

    function Get_Item(const Index: Integer): IXMLDimensionType_cac;
    property Items[const Index: Integer]: IXMLDimensionType_cac read Get_Item; default;
  end;

{ IXMLTransportEquipmentSealType_cac }

  IXMLTransportEquipmentSealType_cac = interface(IXMLNode)
    ['{7AFD4241-72AD-4B1E-9E9E-DE1C4F3B5A95}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_SealIssuerTypeCode: IXMLSealIssuerTypeCodeType_cbc;
    function Get_Condition: IXMLConditionType_cbc;
    function Get_SealStatusCode: IXMLSealStatusCodeType_cbc;
    function Get_SealingPartyType: IXMLSealingPartyTypeType_cbc;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property SealIssuerTypeCode: IXMLSealIssuerTypeCodeType_cbc read Get_SealIssuerTypeCode;
    property Condition: IXMLConditionType_cbc read Get_Condition;
    property SealStatusCode: IXMLSealStatusCodeType_cbc read Get_SealStatusCode;
    property SealingPartyType: IXMLSealingPartyTypeType_cbc read Get_SealingPartyType;
  end;

{ IXMLTransportEquipmentSealType_cacList }

  IXMLTransportEquipmentSealType_cacList = interface(IXMLNodeCollection)
    ['{1FD75C72-A124-44E1-9248-F32FB732F1F5}']
    { Methods & Properties }
    function Add: IXMLTransportEquipmentSealType_cac;
    function Insert(const Index: Integer): IXMLTransportEquipmentSealType_cac;

    function Get_Item(const Index: Integer): IXMLTransportEquipmentSealType_cac;
    property Items[const Index: Integer]: IXMLTransportEquipmentSealType_cac read Get_Item; default;
  end;

{ IXMLSealIssuerTypeCodeType_cbc }

  IXMLSealIssuerTypeCodeType_cbc = interface(IXMLNode)
    ['{7DA8CFA8-73F7-496B-AD56-D81261FC7DA5}']
  end;

{ IXMLConditionType_cbc }

  IXMLConditionType_cbc = interface(IXMLNode)
    ['{9F28D859-6506-42B3-9681-8A0A68E0CD27}']
  end;

{ IXMLSealStatusCodeType_cbc }

  IXMLSealStatusCodeType_cbc = interface(IXMLNode)
    ['{98AEF393-9B02-4D99-8DEA-85D7163FF009}']
  end;

{ IXMLSealingPartyTypeType_cbc }

  IXMLSealingPartyTypeType_cbc = interface(IXMLNode)
    ['{A71651DC-19DD-410D-BC0A-39F989E999D4}']
  end;

{ IXMLTemperatureType_cac }

  IXMLTemperatureType_cac = interface(IXMLNode)
    ['{BC652820-33E7-4ABE-A9B1-B3110362435F}']
    { Property Accessors }
    function Get_AttributeID: IXMLAttributeIDType_cbc;
    function Get_Measure: IXMLMeasureType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
    { Methods & Properties }
    property AttributeID: IXMLAttributeIDType_cbc read Get_AttributeID;
    property Measure: IXMLMeasureType_cbc read Get_Measure;
    property Description: IXMLDescriptionType_cbcList read Get_Description;
  end;

{ IXMLTemperatureType_cacList }

  IXMLTemperatureType_cacList = interface(IXMLNodeCollection)
    ['{BF7163C6-E06A-41FE-BF05-99DA6BCFA8ED}']
    { Methods & Properties }
    function Add: IXMLTemperatureType_cac;
    function Insert(const Index: Integer): IXMLTemperatureType_cac;

    function Get_Item(const Index: Integer): IXMLTemperatureType_cac;
    property Items[const Index: Integer]: IXMLTemperatureType_cac read Get_Item; default;
  end;

{ IXMLTransportMeansType_cac }

  IXMLTransportMeansType_cac = interface(IXMLNode)
    ['{85AE541D-C5AA-4DAE-8CE5-0B2D1E9CE1EC}']
    { Property Accessors }
    function Get_JourneyID: IXMLJourneyIDType_cbc;
    function Get_RegistrationNationalityID: IXMLRegistrationNationalityIDType_cbc;
    function Get_RegistrationNationality: IXMLRegistrationNationalityType_cbcList;
    function Get_DirectionCode: IXMLDirectionCodeType_cbc;
    function Get_TransportMeansTypeCode: IXMLTransportMeansTypeCodeType_cbc;
    function Get_TradeServiceCode: IXMLTradeServiceCodeType_cbc;
    function Get_Stowage: IXMLStowageType_cac;
    function Get_AirTransport: IXMLAirTransportType_cac;
    function Get_RoadTransport: IXMLRoadTransportType_cac;
    function Get_RailTransport: IXMLRailTransportType_cac;
    function Get_MaritimeTransport: IXMLMaritimeTransportType_cac;
    function Get_OwnerParty: IXMLPartyType_cac;
    function Get_MeasurementDimension: IXMLDimensionType_cacList;
    { Methods & Properties }
    property JourneyID: IXMLJourneyIDType_cbc read Get_JourneyID;
    property RegistrationNationalityID: IXMLRegistrationNationalityIDType_cbc read Get_RegistrationNationalityID;
    property RegistrationNationality: IXMLRegistrationNationalityType_cbcList read Get_RegistrationNationality;
    property DirectionCode: IXMLDirectionCodeType_cbc read Get_DirectionCode;
    property TransportMeansTypeCode: IXMLTransportMeansTypeCodeType_cbc read Get_TransportMeansTypeCode;
    property TradeServiceCode: IXMLTradeServiceCodeType_cbc read Get_TradeServiceCode;
    property Stowage: IXMLStowageType_cac read Get_Stowage;
    property AirTransport: IXMLAirTransportType_cac read Get_AirTransport;
    property RoadTransport: IXMLRoadTransportType_cac read Get_RoadTransport;
    property RailTransport: IXMLRailTransportType_cac read Get_RailTransport;
    property MaritimeTransport: IXMLMaritimeTransportType_cac read Get_MaritimeTransport;
    property OwnerParty: IXMLPartyType_cac read Get_OwnerParty;
    property MeasurementDimension: IXMLDimensionType_cacList read Get_MeasurementDimension;
  end;

{ IXMLTransportMeansType_cacList }

  IXMLTransportMeansType_cacList = interface(IXMLNodeCollection)
    ['{93A97D2F-B1A5-4591-B298-2E23AD91F0B6}']
    { Methods & Properties }
    function Add: IXMLTransportMeansType_cac;
    function Insert(const Index: Integer): IXMLTransportMeansType_cac;

    function Get_Item(const Index: Integer): IXMLTransportMeansType_cac;
    property Items[const Index: Integer]: IXMLTransportMeansType_cac read Get_Item; default;
  end;

{ IXMLJourneyIDType_cbc }

  IXMLJourneyIDType_cbc = interface(IXMLNode)
    ['{8F40B544-177A-4426-9332-244FC09B92A8}']
  end;

{ IXMLRegistrationNationalityIDType_cbc }

  IXMLRegistrationNationalityIDType_cbc = interface(IXMLNode)
    ['{20D27BA9-F8AE-4A71-8208-F4BBDCB68166}']
  end;

{ IXMLRegistrationNationalityType_cbc }

  IXMLRegistrationNationalityType_cbc = interface(IXMLNode)
    ['{2C385C50-39FC-4AA2-AA6B-0DAAAE4AE4FD}']
  end;

{ IXMLRegistrationNationalityType_cbcList }

  IXMLRegistrationNationalityType_cbcList = interface(IXMLNodeCollection)
    ['{6AFEE47F-426E-46C7-891A-1B36F5B45076}']
    { Methods & Properties }
    function Add: IXMLRegistrationNationalityType_cbc;
    function Insert(const Index: Integer): IXMLRegistrationNationalityType_cbc;

    function Get_Item(const Index: Integer): IXMLRegistrationNationalityType_cbc;
    property Items[const Index: Integer]: IXMLRegistrationNationalityType_cbc read Get_Item; default;
  end;

{ IXMLDirectionCodeType_cbc }

  IXMLDirectionCodeType_cbc = interface(IXMLNode)
    ['{680E683F-4141-4FD7-809A-0081E7AB0F69}']
  end;

{ IXMLTransportMeansTypeCodeType_cbc }

  IXMLTransportMeansTypeCodeType_cbc = interface(IXMLNode)
    ['{92AB1559-4D22-4A0B-BF78-EFCC97F0C318}']
  end;

{ IXMLTradeServiceCodeType_cbc }

  IXMLTradeServiceCodeType_cbc = interface(IXMLNode)
    ['{B8E584FF-866A-44E9-9AD1-3CF2C72B691C}']
  end;

{ IXMLStowageType_cac }

  IXMLStowageType_cac = interface(IXMLNode)
    ['{ADE944B5-0C8D-4E89-B9E9-B75EC232372F}']
    { Property Accessors }
    function Get_LocationID: IXMLLocationIDType_cbc;
    function Get_Location: IXMLLocationType_cbcList;
    function Get_MeasurementDimension: IXMLDimensionType_cacList;
    { Methods & Properties }
    property LocationID: IXMLLocationIDType_cbc read Get_LocationID;
    property Location: IXMLLocationType_cbcList read Get_Location;
    property MeasurementDimension: IXMLDimensionType_cacList read Get_MeasurementDimension;
  end;

{ IXMLLocationIDType_cbc }

  IXMLLocationIDType_cbc = interface(IXMLNode)
    ['{379E0D20-1723-4686-AF70-0A2D42BC5269}']
  end;

{ IXMLLocationType_cbc }

  IXMLLocationType_cbc = interface(IXMLNode)
    ['{262634FC-A2E9-40B6-9E4F-E55C38431EEC}']
  end;

{ IXMLLocationType_cbcList }

  IXMLLocationType_cbcList = interface(IXMLNodeCollection)
    ['{49E01B8D-41F8-4446-A860-B2BD0667163C}']
    { Methods & Properties }
    function Add: IXMLLocationType_cbc;
    function Insert(const Index: Integer): IXMLLocationType_cbc;

    function Get_Item(const Index: Integer): IXMLLocationType_cbc;
    property Items[const Index: Integer]: IXMLLocationType_cbc read Get_Item; default;
  end;

{ IXMLAirTransportType_cac }

  IXMLAirTransportType_cac = interface(IXMLNode)
    ['{DC50D468-DA8C-44DA-8D51-7A024DCBA015}']
    { Property Accessors }
    function Get_AircraftID: IXMLAircraftIDType_cbc;
    { Methods & Properties }
    property AircraftID: IXMLAircraftIDType_cbc read Get_AircraftID;
  end;

{ IXMLAircraftIDType_cbc }

  IXMLAircraftIDType_cbc = interface(IXMLNode)
    ['{193177F6-A6D9-40C4-846C-2215D19BEB50}']
  end;

{ IXMLRoadTransportType_cac }

  IXMLRoadTransportType_cac = interface(IXMLNode)
    ['{A114A0B5-D151-497E-B396-DAF8AE506C00}']
    { Property Accessors }
    function Get_LicensePlateID: IXMLLicensePlateIDType_cbc;
    { Methods & Properties }
    property LicensePlateID: IXMLLicensePlateIDType_cbc read Get_LicensePlateID;
  end;

{ IXMLLicensePlateIDType_cbc }

  IXMLLicensePlateIDType_cbc = interface(IXMLNode)
    ['{9B0D6332-65EF-469A-B5FE-E83486FE8F9A}']
  end;

{ IXMLRailTransportType_cac }

  IXMLRailTransportType_cac = interface(IXMLNode)
    ['{36E3BADA-A8C2-4D25-8B53-E7970B0DA484}']
    { Property Accessors }
    function Get_TrainID: IXMLTrainIDType_cbc;
    function Get_RailCarID: IXMLRailCarIDType_cbc;
    { Methods & Properties }
    property TrainID: IXMLTrainIDType_cbc read Get_TrainID;
    property RailCarID: IXMLRailCarIDType_cbc read Get_RailCarID;
  end;

{ IXMLTrainIDType_cbc }

  IXMLTrainIDType_cbc = interface(IXMLNode)
    ['{A197ECD4-651E-40A8-9B05-0333201D071C}']
  end;

{ IXMLRailCarIDType_cbc }

  IXMLRailCarIDType_cbc = interface(IXMLNode)
    ['{7CC7FFB0-F786-425E-B47C-E48B6E51F330}']
  end;

{ IXMLMaritimeTransportType_cac }

  IXMLMaritimeTransportType_cac = interface(IXMLNode)
    ['{5B0C9716-899D-4181-A778-D22F2A48BE29}']
    { Property Accessors }
    function Get_VesselID: IXMLVesselIDType_cbc;
    function Get_VesselName: IXMLVesselNameType_cbc;
    function Get_RadioCallSignID: IXMLRadioCallSignIDType_cbc;
    function Get_ShipsRequirements: IXMLShipsRequirementsType_cbcList;
    function Get_GrossTonnageMeasure: IXMLGrossTonnageMeasureType_cbc;
    function Get_NetTonnageMeasure: IXMLNetTonnageMeasureType_cbc;
    function Get_RegistryCertificateDocumentReference: IXMLDocumentReferenceType_cac;
    function Get_RegistryPortLocation: IXMLLocationType_cac;
    { Methods & Properties }
    property VesselID: IXMLVesselIDType_cbc read Get_VesselID;
    property VesselName: IXMLVesselNameType_cbc read Get_VesselName;
    property RadioCallSignID: IXMLRadioCallSignIDType_cbc read Get_RadioCallSignID;
    property ShipsRequirements: IXMLShipsRequirementsType_cbcList read Get_ShipsRequirements;
    property GrossTonnageMeasure: IXMLGrossTonnageMeasureType_cbc read Get_GrossTonnageMeasure;
    property NetTonnageMeasure: IXMLNetTonnageMeasureType_cbc read Get_NetTonnageMeasure;
    property RegistryCertificateDocumentReference: IXMLDocumentReferenceType_cac read Get_RegistryCertificateDocumentReference;
    property RegistryPortLocation: IXMLLocationType_cac read Get_RegistryPortLocation;
  end;

{ IXMLVesselIDType_cbc }

  IXMLVesselIDType_cbc = interface(IXMLNode)
    ['{D8FB4288-344D-4CDF-8B1D-07E11FFF3B4D}']
  end;

{ IXMLVesselNameType_cbc }

  IXMLVesselNameType_cbc = interface(IXMLNode)
    ['{C785766F-81E2-4444-AD5C-6BC53B2BCAF8}']
  end;

{ IXMLRadioCallSignIDType_cbc }

  IXMLRadioCallSignIDType_cbc = interface(IXMLNode)
    ['{CBD7B328-6F64-4A97-B24F-24322A242423}']
  end;

{ IXMLShipsRequirementsType_cbc }

  IXMLShipsRequirementsType_cbc = interface(IXMLNode)
    ['{723852FD-F2DD-4C22-808D-49BF78240127}']
  end;

{ IXMLShipsRequirementsType_cbcList }

  IXMLShipsRequirementsType_cbcList = interface(IXMLNodeCollection)
    ['{BC279EA1-D914-4266-9C54-3B70C87F1D82}']
    { Methods & Properties }
    function Add: IXMLShipsRequirementsType_cbc;
    function Insert(const Index: Integer): IXMLShipsRequirementsType_cbc;

    function Get_Item(const Index: Integer): IXMLShipsRequirementsType_cbc;
    property Items[const Index: Integer]: IXMLShipsRequirementsType_cbc read Get_Item; default;
  end;

{ IXMLGrossTonnageMeasureType_cbc }

  IXMLGrossTonnageMeasureType_cbc = interface(IXMLNode)
    ['{CAD228D5-0744-4CBB-8C93-EE403447F29F}']
  end;

{ IXMLNetTonnageMeasureType_cbc }

  IXMLNetTonnageMeasureType_cbc = interface(IXMLNode)
    ['{EB90A3D9-BB94-4134-90B9-57E548C6FC5D}']
  end;

{ IXMLTradingTermsType_cac }

  IXMLTradingTermsType_cac = interface(IXMLNode)
    ['{0F848D08-7ACB-43EB-A39D-1D855DBBF5D4}']
    { Property Accessors }
    function Get_Information: IXMLInformationType_cbcList;
    function Get_Reference: IXMLReferenceType_cbc;
    function Get_ApplicableAddress: IXMLAddressType_cac;
    { Methods & Properties }
    property Information: IXMLInformationType_cbcList read Get_Information;
    property Reference: IXMLReferenceType_cbc read Get_Reference;
    property ApplicableAddress: IXMLAddressType_cac read Get_ApplicableAddress;
  end;

{ IXMLTradingTermsType_cacList }

  IXMLTradingTermsType_cacList = interface(IXMLNodeCollection)
    ['{3EE5EC4C-675C-4299-B927-08F2A8E23EA0}']
    { Methods & Properties }
    function Add: IXMLTradingTermsType_cac;
    function Insert(const Index: Integer): IXMLTradingTermsType_cac;

    function Get_Item(const Index: Integer): IXMLTradingTermsType_cac;
    property Items[const Index: Integer]: IXMLTradingTermsType_cac read Get_Item; default;
  end;

{ IXMLReferenceType_cbc }

  IXMLReferenceType_cbc = interface(IXMLNode)
    ['{54BAA7D6-9DFC-4C8A-8A5D-26D3C3120047}']
  end;

{ IXMLHazardousGoodsTransitType_cac }

  IXMLHazardousGoodsTransitType_cac = interface(IXMLNode)
    ['{BE3889BB-5385-4523-B127-3B64C1970693}']
    { Property Accessors }
    function Get_TransportEmergencyCardCode: IXMLTransportEmergencyCardCodeType_cbc;
    function Get_PackingCriteriaCode: IXMLPackingCriteriaCodeType_cbc;
    function Get_HazardousRegulationCode: IXMLHazardousRegulationCodeType_cbc;
    function Get_InhalationToxicityZoneCode: IXMLInhalationToxicityZoneCodeType_cbc;
    function Get_TransportAuthorizationCode: IXMLTransportAuthorizationCodeType_cbc;
    function Get_MaximumTemperature: IXMLTemperatureType_cac;
    function Get_MinimumTemperature: IXMLTemperatureType_cac;
    { Methods & Properties }
    property TransportEmergencyCardCode: IXMLTransportEmergencyCardCodeType_cbc read Get_TransportEmergencyCardCode;
    property PackingCriteriaCode: IXMLPackingCriteriaCodeType_cbc read Get_PackingCriteriaCode;
    property HazardousRegulationCode: IXMLHazardousRegulationCodeType_cbc read Get_HazardousRegulationCode;
    property InhalationToxicityZoneCode: IXMLInhalationToxicityZoneCodeType_cbc read Get_InhalationToxicityZoneCode;
    property TransportAuthorizationCode: IXMLTransportAuthorizationCodeType_cbc read Get_TransportAuthorizationCode;
    property MaximumTemperature: IXMLTemperatureType_cac read Get_MaximumTemperature;
    property MinimumTemperature: IXMLTemperatureType_cac read Get_MinimumTemperature;
  end;

{ IXMLHazardousGoodsTransitType_cacList }

  IXMLHazardousGoodsTransitType_cacList = interface(IXMLNodeCollection)
    ['{F123B3FE-C604-4863-81B1-985BF072497B}']
    { Methods & Properties }
    function Add: IXMLHazardousGoodsTransitType_cac;
    function Insert(const Index: Integer): IXMLHazardousGoodsTransitType_cac;

    function Get_Item(const Index: Integer): IXMLHazardousGoodsTransitType_cac;
    property Items[const Index: Integer]: IXMLHazardousGoodsTransitType_cac read Get_Item; default;
  end;

{ IXMLTransportEmergencyCardCodeType_cbc }

  IXMLTransportEmergencyCardCodeType_cbc = interface(IXMLNode)
    ['{88FCBC1C-C17D-4BF0-9417-552230A21B21}']
  end;

{ IXMLPackingCriteriaCodeType_cbc }

  IXMLPackingCriteriaCodeType_cbc = interface(IXMLNode)
    ['{37326820-BCD6-4CC6-98B2-9FC305EF9A96}']
  end;

{ IXMLHazardousRegulationCodeType_cbc }

  IXMLHazardousRegulationCodeType_cbc = interface(IXMLNode)
    ['{D06502D4-CF74-48F7-99E5-A80CE7D0104C}']
  end;

{ IXMLInhalationToxicityZoneCodeType_cbc }

  IXMLInhalationToxicityZoneCodeType_cbc = interface(IXMLNode)
    ['{A2A540B0-03E3-4CEE-A10E-3FB88FF88CD6}']
  end;

{ IXMLTransportAuthorizationCodeType_cbc }

  IXMLTransportAuthorizationCodeType_cbc = interface(IXMLNode)
    ['{3697D4AA-7804-4C0E-AC26-0534517D284F}']
  end;

{ IXMLTransportHandlingUnitType_cac }

  IXMLTransportHandlingUnitType_cac = interface(IXMLNode)
    ['{9BB4631F-97B1-42AF-97E8-24D4B11F7929}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_TransportHandlingUnitTypeCode: IXMLTransportHandlingUnitTypeCodeType_cbc;
    function Get_HandlingCode: IXMLHandlingCodeType_cbc;
    function Get_HandlingInstructions: IXMLHandlingInstructionsType_cbcList;
    function Get_HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc;
    function Get_TotalGoodsItemQuantity: IXMLTotalGoodsItemQuantityType_cbc;
    function Get_TotalPackageQuantity: IXMLTotalPackageQuantityType_cbc;
    function Get_DamageRemarks: IXMLDamageRemarksType_cbcList;
    function Get_ShippingMarks: IXMLShippingMarksType_cbcList;
    function Get_TraceID: IXMLTraceIDType_cbc;
    function Get_HandlingUnitDespatchLine: IXMLDespatchLineType_cacList;
    function Get_ActualPackage: IXMLPackageType_cacList;
    function Get_ReceivedHandlingUnitReceiptLine: IXMLReceiptLineType_cacList;
    function Get_TransportEquipment: IXMLTransportEquipmentType_cacList;
    function Get_TransportMeans: IXMLTransportMeansType_cacList;
    function Get_HazardousGoodsTransit: IXMLHazardousGoodsTransitType_cacList;
    function Get_MeasurementDimension: IXMLDimensionType_cacList;
    function Get_MinimumTemperature: IXMLTemperatureType_cac;
    function Get_MaximumTemperature: IXMLTemperatureType_cac;
    function Get_GoodsItem: IXMLGoodsItemType_cacList;
    function Get_FloorSpaceMeasurementDimension: IXMLDimensionType_cac;
    function Get_PalletSpaceMeasurementDimension: IXMLDimensionType_cac;
    function Get_ShipmentDocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_Status: IXMLStatusType_cacList;
    function Get_CustomsDeclaration: IXMLCustomsDeclarationType_cacList;
    function Get_ReferencedShipment: IXMLShipmentType_cacList;
    function Get_Package: IXMLPackageType_cacList;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property TransportHandlingUnitTypeCode: IXMLTransportHandlingUnitTypeCodeType_cbc read Get_TransportHandlingUnitTypeCode;
    property HandlingCode: IXMLHandlingCodeType_cbc read Get_HandlingCode;
    property HandlingInstructions: IXMLHandlingInstructionsType_cbcList read Get_HandlingInstructions;
    property HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc read Get_HazardousRiskIndicator;
    property TotalGoodsItemQuantity: IXMLTotalGoodsItemQuantityType_cbc read Get_TotalGoodsItemQuantity;
    property TotalPackageQuantity: IXMLTotalPackageQuantityType_cbc read Get_TotalPackageQuantity;
    property DamageRemarks: IXMLDamageRemarksType_cbcList read Get_DamageRemarks;
    property ShippingMarks: IXMLShippingMarksType_cbcList read Get_ShippingMarks;
    property TraceID: IXMLTraceIDType_cbc read Get_TraceID;
    property HandlingUnitDespatchLine: IXMLDespatchLineType_cacList read Get_HandlingUnitDespatchLine;
    property ActualPackage: IXMLPackageType_cacList read Get_ActualPackage;
    property ReceivedHandlingUnitReceiptLine: IXMLReceiptLineType_cacList read Get_ReceivedHandlingUnitReceiptLine;
    property TransportEquipment: IXMLTransportEquipmentType_cacList read Get_TransportEquipment;
    property TransportMeans: IXMLTransportMeansType_cacList read Get_TransportMeans;
    property HazardousGoodsTransit: IXMLHazardousGoodsTransitType_cacList read Get_HazardousGoodsTransit;
    property MeasurementDimension: IXMLDimensionType_cacList read Get_MeasurementDimension;
    property MinimumTemperature: IXMLTemperatureType_cac read Get_MinimumTemperature;
    property MaximumTemperature: IXMLTemperatureType_cac read Get_MaximumTemperature;
    property GoodsItem: IXMLGoodsItemType_cacList read Get_GoodsItem;
    property FloorSpaceMeasurementDimension: IXMLDimensionType_cac read Get_FloorSpaceMeasurementDimension;
    property PalletSpaceMeasurementDimension: IXMLDimensionType_cac read Get_PalletSpaceMeasurementDimension;
    property ShipmentDocumentReference: IXMLDocumentReferenceType_cacList read Get_ShipmentDocumentReference;
    property Status: IXMLStatusType_cacList read Get_Status;
    property CustomsDeclaration: IXMLCustomsDeclarationType_cacList read Get_CustomsDeclaration;
    property ReferencedShipment: IXMLShipmentType_cacList read Get_ReferencedShipment;
    property Package: IXMLPackageType_cacList read Get_Package;
  end;

{ IXMLTransportHandlingUnitType_cacList }

  IXMLTransportHandlingUnitType_cacList = interface(IXMLNodeCollection)
    ['{90AD45F6-E9D4-40F7-8A8E-15DA9C16C2B2}']
    { Methods & Properties }
    function Add: IXMLTransportHandlingUnitType_cac;
    function Insert(const Index: Integer): IXMLTransportHandlingUnitType_cac;

    function Get_Item(const Index: Integer): IXMLTransportHandlingUnitType_cac;
    property Items[const Index: Integer]: IXMLTransportHandlingUnitType_cac read Get_Item; default;
  end;

{ IXMLTransportHandlingUnitTypeCodeType_cbc }

  IXMLTransportHandlingUnitTypeCodeType_cbc = interface(IXMLNode)
    ['{6F36DC81-F570-4B1C-BF40-9F9B74DC462B}']
  end;

{ IXMLTotalPackageQuantityType_cbc }

  IXMLTotalPackageQuantityType_cbc = interface(IXMLNode)
    ['{8D7F7241-0301-4B8A-BFF5-EBC66F332E4B}']
  end;

{ IXMLShippingMarksType_cbc }

  IXMLShippingMarksType_cbc = interface(IXMLNode)
    ['{B825E869-56C1-4F51-898C-0A1D6DBCB36D}']
  end;

{ IXMLShippingMarksType_cbcList }

  IXMLShippingMarksType_cbcList = interface(IXMLNodeCollection)
    ['{57E5652C-280C-4F13-8179-B8CAE6C568AD}']
    { Methods & Properties }
    function Add: IXMLShippingMarksType_cbc;
    function Insert(const Index: Integer): IXMLShippingMarksType_cbc;

    function Get_Item(const Index: Integer): IXMLShippingMarksType_cbc;
    property Items[const Index: Integer]: IXMLShippingMarksType_cbc read Get_Item; default;
  end;

{ IXMLDespatchLineType_cac }

  IXMLDespatchLineType_cac = interface(IXMLNode)
    ['{71715F06-5209-4ECC-8040-970D86E50025}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_UUID: IXMLUUIDType_cbc;
    function Get_Note: IXMLNoteType_cbcList;
    function Get_LineStatusCode: IXMLLineStatusCodeType_cbc;
    function Get_DeliveredQuantity: IXMLDeliveredQuantityType_cbc;
    function Get_BackorderQuantity: IXMLBackorderQuantityType_cbc;
    function Get_BackorderReason: IXMLBackorderReasonType_cbcList;
    function Get_OutstandingQuantity: IXMLOutstandingQuantityType_cbc;
    function Get_OutstandingReason: IXMLOutstandingReasonType_cbcList;
    function Get_OversupplyQuantity: IXMLOversupplyQuantityType_cbc;
    function Get_OrderLineReference: IXMLOrderLineReferenceType_cacList;
    function Get_DocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_Item: IXMLItemType_cac;
    function Get_Shipment: IXMLShipmentType_cacList;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property UUID: IXMLUUIDType_cbc read Get_UUID;
    property Note: IXMLNoteType_cbcList read Get_Note;
    property LineStatusCode: IXMLLineStatusCodeType_cbc read Get_LineStatusCode;
    property DeliveredQuantity: IXMLDeliveredQuantityType_cbc read Get_DeliveredQuantity;
    property BackorderQuantity: IXMLBackorderQuantityType_cbc read Get_BackorderQuantity;
    property BackorderReason: IXMLBackorderReasonType_cbcList read Get_BackorderReason;
    property OutstandingQuantity: IXMLOutstandingQuantityType_cbc read Get_OutstandingQuantity;
    property OutstandingReason: IXMLOutstandingReasonType_cbcList read Get_OutstandingReason;
    property OversupplyQuantity: IXMLOversupplyQuantityType_cbc read Get_OversupplyQuantity;
    property OrderLineReference: IXMLOrderLineReferenceType_cacList read Get_OrderLineReference;
    property DocumentReference: IXMLDocumentReferenceType_cacList read Get_DocumentReference;
    property Item: IXMLItemType_cac read Get_Item;
    property Shipment: IXMLShipmentType_cacList read Get_Shipment;
  end;

{ IXMLDespatchLineType_cacList }

  IXMLDespatchLineType_cacList = interface(IXMLNodeCollection)
    ['{67C03EE8-1906-448A-8EAF-6835B686F65E}']
    { Methods & Properties }
    function Add: IXMLDespatchLineType_cac;
    function Insert(const Index: Integer): IXMLDespatchLineType_cac;

    function Get_Item(const Index: Integer): IXMLDespatchLineType_cac;
    property Items[const Index: Integer]: IXMLDespatchLineType_cac read Get_Item; default;
  end;

{ IXMLLineStatusCodeType_cbc }

  IXMLLineStatusCodeType_cbc = interface(IXMLNode)
    ['{CE300768-4CA1-4118-8B65-D3AD77C0D8E5}']
  end;

{ IXMLDeliveredQuantityType_cbc }

  IXMLDeliveredQuantityType_cbc = interface(IXMLNode)
    ['{6CCFF948-31F7-431E-91A3-B8F6772129F5}']
  end;

{ IXMLBackorderQuantityType_cbc }

  IXMLBackorderQuantityType_cbc = interface(IXMLNode)
    ['{DE5A1CA6-9505-401D-A840-0F713EA5A4D0}']
  end;

{ IXMLBackorderReasonType_cbc }

  IXMLBackorderReasonType_cbc = interface(IXMLNode)
    ['{A6414832-3B05-4A8D-95BD-B06DBAB1944B}']
  end;

{ IXMLBackorderReasonType_cbcList }

  IXMLBackorderReasonType_cbcList = interface(IXMLNodeCollection)
    ['{1BE4CFEB-D957-4EDD-BC55-7A5E295C8F84}']
    { Methods & Properties }
    function Add: IXMLBackorderReasonType_cbc;
    function Insert(const Index: Integer): IXMLBackorderReasonType_cbc;

    function Get_Item(const Index: Integer): IXMLBackorderReasonType_cbc;
    property Items[const Index: Integer]: IXMLBackorderReasonType_cbc read Get_Item; default;
  end;

{ IXMLOutstandingQuantityType_cbc }

  IXMLOutstandingQuantityType_cbc = interface(IXMLNode)
    ['{00AD15D4-4D6C-4F62-9E7E-A35D315621D2}']
  end;

{ IXMLOutstandingReasonType_cbc }

  IXMLOutstandingReasonType_cbc = interface(IXMLNode)
    ['{AEBC6ABF-B966-4898-830C-F0C3781149A2}']
  end;

{ IXMLOutstandingReasonType_cbcList }

  IXMLOutstandingReasonType_cbcList = interface(IXMLNodeCollection)
    ['{A226DBA3-ECD1-411A-A697-C263CBDF1615}']
    { Methods & Properties }
    function Add: IXMLOutstandingReasonType_cbc;
    function Insert(const Index: Integer): IXMLOutstandingReasonType_cbc;

    function Get_Item(const Index: Integer): IXMLOutstandingReasonType_cbc;
    property Items[const Index: Integer]: IXMLOutstandingReasonType_cbc read Get_Item; default;
  end;

{ IXMLOversupplyQuantityType_cbc }

  IXMLOversupplyQuantityType_cbc = interface(IXMLNode)
    ['{1D5950E3-5777-4EE8-AC61-F928DF90F242}']
  end;

{ IXMLOrderLineReferenceType_cac }

  IXMLOrderLineReferenceType_cac = interface(IXMLNode)
    ['{40752EC0-1AD0-4556-8FF2-8B4CBBAE31A3}']
    { Property Accessors }
    function Get_LineID: IXMLLineIDType_cbc;
    function Get_SalesOrderLineID: IXMLSalesOrderLineIDType_cbc;
    function Get_UUID: IXMLUUIDType_cbc;
    function Get_LineStatusCode: IXMLLineStatusCodeType_cbc;
    function Get_OrderReference: IXMLOrderReferenceType_cac;
    { Methods & Properties }
    property LineID: IXMLLineIDType_cbc read Get_LineID;
    property SalesOrderLineID: IXMLSalesOrderLineIDType_cbc read Get_SalesOrderLineID;
    property UUID: IXMLUUIDType_cbc read Get_UUID;
    property LineStatusCode: IXMLLineStatusCodeType_cbc read Get_LineStatusCode;
    property OrderReference: IXMLOrderReferenceType_cac read Get_OrderReference;
  end;

{ IXMLOrderLineReferenceType_cacList }

  IXMLOrderLineReferenceType_cacList = interface(IXMLNodeCollection)
    ['{B444F179-A2EA-494C-8A5D-6558B370B5B8}']
    { Methods & Properties }
    function Add: IXMLOrderLineReferenceType_cac;
    function Insert(const Index: Integer): IXMLOrderLineReferenceType_cac;

    function Get_Item(const Index: Integer): IXMLOrderLineReferenceType_cac;
    property Items[const Index: Integer]: IXMLOrderLineReferenceType_cac read Get_Item; default;
  end;

{ IXMLLineIDType_cbc }

  IXMLLineIDType_cbc = interface(IXMLNode)
    ['{8EE55931-149E-402B-996E-3688CB231187}']
  end;

{ IXMLSalesOrderLineIDType_cbc }

  IXMLSalesOrderLineIDType_cbc = interface(IXMLNode)
    ['{85DF1E73-34FA-4FE3-86A8-97D048712B1C}']
  end;

{ IXMLItemType_cac }

  IXMLItemType_cac = interface(IXMLNode)
    ['{C0BFEEFD-C0E0-4F6D-A089-F172A09EBCE4}']
    { Property Accessors }
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_PackQuantity: IXMLPackQuantityType_cbc;
    function Get_PackSizeNumeric: IXMLPackSizeNumericType_cbc;
    function Get_CatalogueIndicator: IXMLCatalogueIndicatorType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc;
    function Get_AdditionalInformation: IXMLAdditionalInformationType_cbcList;
    function Get_Keyword: IXMLKeywordType_cbcList;
    function Get_BrandName: IXMLBrandNameType_cbcList;
    function Get_ModelName: IXMLModelNameType_cbcList;
    function Get_BuyersItemIdentification: IXMLItemIdentificationType_cac;
    function Get_SellersItemIdentification: IXMLItemIdentificationType_cac;
    function Get_ManufacturersItemIdentification: IXMLItemIdentificationType_cacList;
    function Get_StandardItemIdentification: IXMLItemIdentificationType_cac;
    function Get_CatalogueItemIdentification: IXMLItemIdentificationType_cac;
    function Get_AdditionalItemIdentification: IXMLItemIdentificationType_cacList;
    function Get_CatalogueDocumentReference: IXMLDocumentReferenceType_cac;
    function Get_ItemSpecificationDocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_OriginCountry: IXMLCountryType_cac;
    function Get_CommodityClassification: IXMLCommodityClassificationType_cacList;
    function Get_TransactionConditions: IXMLTransactionConditionsType_cacList;
    function Get_HazardousItem: IXMLHazardousItemType_cacList;
    function Get_ClassifiedTaxCategory: IXMLTaxCategoryType_cacList;
    function Get_AdditionalItemProperty: IXMLItemPropertyType_cacList;
    function Get_ManufacturerParty: IXMLPartyType_cacList;
    function Get_InformationContentProviderParty: IXMLPartyType_cac;
    function Get_OriginAddress: IXMLAddressType_cacList;
    function Get_ItemInstance: IXMLItemInstanceType_cacList;
    function Get_Certificate: IXMLCertificateType_cacList;
    function Get_Dimension: IXMLDimensionType_cacList;
    { Methods & Properties }
    property Description: IXMLDescriptionType_cbcList read Get_Description;
    property PackQuantity: IXMLPackQuantityType_cbc read Get_PackQuantity;
    property PackSizeNumeric: IXMLPackSizeNumericType_cbc read Get_PackSizeNumeric;
    property CatalogueIndicator: IXMLCatalogueIndicatorType_cbc read Get_CatalogueIndicator;
    property Name: IXMLNameType_cbc read Get_Name;
    property HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc read Get_HazardousRiskIndicator;
    property AdditionalInformation: IXMLAdditionalInformationType_cbcList read Get_AdditionalInformation;
    property Keyword: IXMLKeywordType_cbcList read Get_Keyword;
    property BrandName: IXMLBrandNameType_cbcList read Get_BrandName;
    property ModelName: IXMLModelNameType_cbcList read Get_ModelName;
    property BuyersItemIdentification: IXMLItemIdentificationType_cac read Get_BuyersItemIdentification;
    property SellersItemIdentification: IXMLItemIdentificationType_cac read Get_SellersItemIdentification;
    property ManufacturersItemIdentification: IXMLItemIdentificationType_cacList read Get_ManufacturersItemIdentification;
    property StandardItemIdentification: IXMLItemIdentificationType_cac read Get_StandardItemIdentification;
    property CatalogueItemIdentification: IXMLItemIdentificationType_cac read Get_CatalogueItemIdentification;
    property AdditionalItemIdentification: IXMLItemIdentificationType_cacList read Get_AdditionalItemIdentification;
    property CatalogueDocumentReference: IXMLDocumentReferenceType_cac read Get_CatalogueDocumentReference;
    property ItemSpecificationDocumentReference: IXMLDocumentReferenceType_cacList read Get_ItemSpecificationDocumentReference;
    property OriginCountry: IXMLCountryType_cac read Get_OriginCountry;
    property CommodityClassification: IXMLCommodityClassificationType_cacList read Get_CommodityClassification;
    property TransactionConditions: IXMLTransactionConditionsType_cacList read Get_TransactionConditions;
    property HazardousItem: IXMLHazardousItemType_cacList read Get_HazardousItem;
    property ClassifiedTaxCategory: IXMLTaxCategoryType_cacList read Get_ClassifiedTaxCategory;
    property AdditionalItemProperty: IXMLItemPropertyType_cacList read Get_AdditionalItemProperty;
    property ManufacturerParty: IXMLPartyType_cacList read Get_ManufacturerParty;
    property InformationContentProviderParty: IXMLPartyType_cac read Get_InformationContentProviderParty;
    property OriginAddress: IXMLAddressType_cacList read Get_OriginAddress;
    property ItemInstance: IXMLItemInstanceType_cacList read Get_ItemInstance;
    property Certificate: IXMLCertificateType_cacList read Get_Certificate;
    property Dimension: IXMLDimensionType_cacList read Get_Dimension;
  end;

{ IXMLItemType_cacList }

  IXMLItemType_cacList = interface(IXMLNodeCollection)
    ['{FF06C454-D98A-429E-8646-E93B4A7D9462}']
    { Methods & Properties }
    function Add: IXMLItemType_cac;
    function Insert(const Index: Integer): IXMLItemType_cac;

    function Get_Item(const Index: Integer): IXMLItemType_cac;
    property Items[const Index: Integer]: IXMLItemType_cac read Get_Item; default;
  end;

{ IXMLPackQuantityType_cbc }

  IXMLPackQuantityType_cbc = interface(IXMLNode)
    ['{7B4FCD0C-99E8-4E5E-89DE-F0907D3BB2BC}']
  end;

{ IXMLPackSizeNumericType_cbc }

  IXMLPackSizeNumericType_cbc = interface(IXMLNode)
    ['{B8F5A5AF-62CA-4283-9290-D56810B8F833}']
  end;

{ IXMLCatalogueIndicatorType_cbc }

  IXMLCatalogueIndicatorType_cbc = interface(IXMLNode)
    ['{A83F1218-C338-4365-A30E-34233FB797DC}']
  end;

{ IXMLAdditionalInformationType_cbc }

  IXMLAdditionalInformationType_cbc = interface(IXMLNode)
    ['{CBFF8E0C-4E98-4F97-801E-3133B450E47F}']
  end;

{ IXMLAdditionalInformationType_cbcList }

  IXMLAdditionalInformationType_cbcList = interface(IXMLNodeCollection)
    ['{C4821AB5-A5F8-4A99-A139-073E366FCE5B}']
    { Methods & Properties }
    function Add: IXMLAdditionalInformationType_cbc;
    function Insert(const Index: Integer): IXMLAdditionalInformationType_cbc;

    function Get_Item(const Index: Integer): IXMLAdditionalInformationType_cbc;
    property Items[const Index: Integer]: IXMLAdditionalInformationType_cbc read Get_Item; default;
  end;

{ IXMLKeywordType_cbc }

  IXMLKeywordType_cbc = interface(IXMLNode)
    ['{BDEB1FB2-1107-41F4-AA21-8940EF290B77}']
  end;

{ IXMLKeywordType_cbcList }

  IXMLKeywordType_cbcList = interface(IXMLNodeCollection)
    ['{3906B3CA-1117-404D-BD3D-B763710086CB}']
    { Methods & Properties }
    function Add: IXMLKeywordType_cbc;
    function Insert(const Index: Integer): IXMLKeywordType_cbc;

    function Get_Item(const Index: Integer): IXMLKeywordType_cbc;
    property Items[const Index: Integer]: IXMLKeywordType_cbc read Get_Item; default;
  end;

{ IXMLBrandNameType_cbc }

  IXMLBrandNameType_cbc = interface(IXMLNode)
    ['{AE2B1E53-78D4-45CE-8F3E-5AADB4B5B73B}']
  end;

{ IXMLBrandNameType_cbcList }

  IXMLBrandNameType_cbcList = interface(IXMLNodeCollection)
    ['{4AA62927-CE03-423F-8E88-024ED6384356}']
    { Methods & Properties }
    function Add: IXMLBrandNameType_cbc;
    function Insert(const Index: Integer): IXMLBrandNameType_cbc;

    function Get_Item(const Index: Integer): IXMLBrandNameType_cbc;
    property Items[const Index: Integer]: IXMLBrandNameType_cbc read Get_Item; default;
  end;

{ IXMLModelNameType_cbc }

  IXMLModelNameType_cbc = interface(IXMLNode)
    ['{F2B4A8A2-4258-43F0-B98B-3B2547616AFE}']
  end;

{ IXMLModelNameType_cbcList }

  IXMLModelNameType_cbcList = interface(IXMLNodeCollection)
    ['{8C48EA7B-1DFF-422F-A315-75D096FE26AD}']
    { Methods & Properties }
    function Add: IXMLModelNameType_cbc;
    function Insert(const Index: Integer): IXMLModelNameType_cbc;

    function Get_Item(const Index: Integer): IXMLModelNameType_cbc;
    property Items[const Index: Integer]: IXMLModelNameType_cbc read Get_Item; default;
  end;

{ IXMLItemIdentificationType_cac }

  IXMLItemIdentificationType_cac = interface(IXMLNode)
    ['{E11F094C-889E-4C47-9EC3-3E873F0EB202}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_ExtendedID: IXMLExtendedIDType_cbc;
    function Get_BarcodeSymbologyID: IXMLBarcodeSymbologyIDType_cbc;
    function Get_PhysicalAttribute: IXMLPhysicalAttributeType_cacList;
    function Get_MeasurementDimension: IXMLDimensionType_cacList;
    function Get_IssuerParty: IXMLPartyType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property ExtendedID: IXMLExtendedIDType_cbc read Get_ExtendedID;
    property BarcodeSymbologyID: IXMLBarcodeSymbologyIDType_cbc read Get_BarcodeSymbologyID;
    property PhysicalAttribute: IXMLPhysicalAttributeType_cacList read Get_PhysicalAttribute;
    property MeasurementDimension: IXMLDimensionType_cacList read Get_MeasurementDimension;
    property IssuerParty: IXMLPartyType_cac read Get_IssuerParty;
  end;

{ IXMLItemIdentificationType_cacList }

  IXMLItemIdentificationType_cacList = interface(IXMLNodeCollection)
    ['{33EC4BE9-88A0-4CCA-8BE6-87C7D9A6CA9B}']
    { Methods & Properties }
    function Add: IXMLItemIdentificationType_cac;
    function Insert(const Index: Integer): IXMLItemIdentificationType_cac;

    function Get_Item(const Index: Integer): IXMLItemIdentificationType_cac;
    property Items[const Index: Integer]: IXMLItemIdentificationType_cac read Get_Item; default;
  end;

{ IXMLExtendedIDType_cbc }

  IXMLExtendedIDType_cbc = interface(IXMLNode)
    ['{35524ACB-EEBA-4971-B0B3-20928B58B3BD}']
  end;

{ IXMLBarcodeSymbologyIDType_cbc }

  IXMLBarcodeSymbologyIDType_cbc = interface(IXMLNode)
    ['{8B22C8D8-9CC4-475A-A302-4FA3B01CBECE}']
  end;

{ IXMLPhysicalAttributeType_cac }

  IXMLPhysicalAttributeType_cac = interface(IXMLNode)
    ['{6EE623EE-B885-4AF7-8732-CBB8B6DDC08D}']
    { Property Accessors }
    function Get_AttributeID: IXMLAttributeIDType_cbc;
    function Get_PositionCode: IXMLPositionCodeType_cbc;
    function Get_DescriptionCode: IXMLDescriptionCodeType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
    { Methods & Properties }
    property AttributeID: IXMLAttributeIDType_cbc read Get_AttributeID;
    property PositionCode: IXMLPositionCodeType_cbc read Get_PositionCode;
    property DescriptionCode: IXMLDescriptionCodeType_cbc read Get_DescriptionCode;
    property Description: IXMLDescriptionType_cbcList read Get_Description;
  end;

{ IXMLPhysicalAttributeType_cacList }

  IXMLPhysicalAttributeType_cacList = interface(IXMLNodeCollection)
    ['{30CC3194-EB60-4BC7-8EBA-86B82DE1D8DE}']
    { Methods & Properties }
    function Add: IXMLPhysicalAttributeType_cac;
    function Insert(const Index: Integer): IXMLPhysicalAttributeType_cac;

    function Get_Item(const Index: Integer): IXMLPhysicalAttributeType_cac;
    property Items[const Index: Integer]: IXMLPhysicalAttributeType_cac read Get_Item; default;
  end;

{ IXMLPositionCodeType_cbc }

  IXMLPositionCodeType_cbc = interface(IXMLNode)
    ['{C00C279C-7F1D-4ECA-804D-1E7E9B6ED3BE}']
  end;

{ IXMLCommodityClassificationType_cac }

  IXMLCommodityClassificationType_cac = interface(IXMLNode)
    ['{754A21A6-8CEF-4752-BE12-9FE432FC916C}']
    { Property Accessors }
    function Get_NatureCode: IXMLNatureCodeType_cbc;
    function Get_CargoTypeCode: IXMLCargoTypeCodeType_cbc;
    function Get_CommodityCode: IXMLCommodityCodeType_cbc;
    function Get_ItemClassificationCode: IXMLItemClassificationCodeType_cbc;
    { Methods & Properties }
    property NatureCode: IXMLNatureCodeType_cbc read Get_NatureCode;
    property CargoTypeCode: IXMLCargoTypeCodeType_cbc read Get_CargoTypeCode;
    property CommodityCode: IXMLCommodityCodeType_cbc read Get_CommodityCode;
    property ItemClassificationCode: IXMLItemClassificationCodeType_cbc read Get_ItemClassificationCode;
  end;

{ IXMLCommodityClassificationType_cacList }

  IXMLCommodityClassificationType_cacList = interface(IXMLNodeCollection)
    ['{888128A6-3FDA-4A40-A51F-923D51B0DFDE}']
    { Methods & Properties }
    function Add: IXMLCommodityClassificationType_cac;
    function Insert(const Index: Integer): IXMLCommodityClassificationType_cac;

    function Get_Item(const Index: Integer): IXMLCommodityClassificationType_cac;
    property Items[const Index: Integer]: IXMLCommodityClassificationType_cac read Get_Item; default;
  end;

{ IXMLNatureCodeType_cbc }

  IXMLNatureCodeType_cbc = interface(IXMLNode)
    ['{F853F8CB-368D-456B-A344-F6A8E9DE4A43}']
  end;

{ IXMLCargoTypeCodeType_cbc }

  IXMLCargoTypeCodeType_cbc = interface(IXMLNode)
    ['{12545F5B-148B-4EDA-B634-5CA17F278BA6}']
  end;

{ IXMLCommodityCodeType_cbc }

  IXMLCommodityCodeType_cbc = interface(IXMLNode)
    ['{09929B93-12EC-4DEB-9BE4-926DC4AAF095}']
  end;

{ IXMLItemClassificationCodeType_cbc }

  IXMLItemClassificationCodeType_cbc = interface(IXMLNode)
    ['{E10B4A56-83AC-43D0-A485-80CB25E33607}']
  end;

{ IXMLTransactionConditionsType_cac }

  IXMLTransactionConditionsType_cac = interface(IXMLNode)
    ['{67338296-A01E-44D5-AE18-D5123641BD54}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_ActionCode: IXMLActionCodeType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_DocumentReference: IXMLDocumentReferenceType_cacList;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property ActionCode: IXMLActionCodeType_cbc read Get_ActionCode;
    property Description: IXMLDescriptionType_cbcList read Get_Description;
    property DocumentReference: IXMLDocumentReferenceType_cacList read Get_DocumentReference;
  end;

{ IXMLTransactionConditionsType_cacList }

  IXMLTransactionConditionsType_cacList = interface(IXMLNodeCollection)
    ['{A1B3D13A-C253-4FB7-9EA6-298C8FC001EF}']
    { Methods & Properties }
    function Add: IXMLTransactionConditionsType_cac;
    function Insert(const Index: Integer): IXMLTransactionConditionsType_cac;

    function Get_Item(const Index: Integer): IXMLTransactionConditionsType_cac;
    property Items[const Index: Integer]: IXMLTransactionConditionsType_cac read Get_Item; default;
  end;

{ IXMLActionCodeType_cbc }

  IXMLActionCodeType_cbc = interface(IXMLNode)
    ['{8814893E-166B-4EC0-93ED-CB02F0C7FFB7}']
  end;

{ IXMLHazardousItemType_cac }

  IXMLHazardousItemType_cac = interface(IXMLNode)
    ['{DD3F2F7A-B095-4F2E-BC68-3D25D254447B}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_PlacardNotation: IXMLPlacardNotationType_cbc;
    function Get_PlacardEndorsement: IXMLPlacardEndorsementType_cbc;
    function Get_AdditionalInformation: IXMLAdditionalInformationType_cbcList;
    function Get_UNDGCode: IXMLUNDGCodeType_cbc;
    function Get_EmergencyProceduresCode: IXMLEmergencyProceduresCodeType_cbc;
    function Get_MedicalFirstAidGuideCode: IXMLMedicalFirstAidGuideCodeType_cbc;
    function Get_TechnicalName: IXMLTechnicalNameType_cbc;
    function Get_CategoryName: IXMLCategoryNameType_cbc;
    function Get_HazardousCategoryCode: IXMLHazardousCategoryCodeType_cbc;
    function Get_UpperOrangeHazardPlacardID: IXMLUpperOrangeHazardPlacardIDType_cbc;
    function Get_LowerOrangeHazardPlacardID: IXMLLowerOrangeHazardPlacardIDType_cbc;
    function Get_MarkingID: IXMLMarkingIDType_cbc;
    function Get_HazardClassID: IXMLHazardClassIDType_cbc;
    function Get_NetWeightMeasure: IXMLNetWeightMeasureType_cbc;
    function Get_NetVolumeMeasure: IXMLNetVolumeMeasureType_cbc;
    function Get_Quantity: IXMLQuantityType_cbc;
    function Get_ContactParty: IXMLPartyType_cac;
    function Get_SecondaryHazard: IXMLSecondaryHazardType_cacList;
    function Get_HazardousGoodsTransit: IXMLHazardousGoodsTransitType_cacList;
    function Get_EmergencyTemperature: IXMLTemperatureType_cac;
    function Get_FlashpointTemperature: IXMLTemperatureType_cac;
    function Get_AdditionalTemperature: IXMLTemperatureType_cacList;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property PlacardNotation: IXMLPlacardNotationType_cbc read Get_PlacardNotation;
    property PlacardEndorsement: IXMLPlacardEndorsementType_cbc read Get_PlacardEndorsement;
    property AdditionalInformation: IXMLAdditionalInformationType_cbcList read Get_AdditionalInformation;
    property UNDGCode: IXMLUNDGCodeType_cbc read Get_UNDGCode;
    property EmergencyProceduresCode: IXMLEmergencyProceduresCodeType_cbc read Get_EmergencyProceduresCode;
    property MedicalFirstAidGuideCode: IXMLMedicalFirstAidGuideCodeType_cbc read Get_MedicalFirstAidGuideCode;
    property TechnicalName: IXMLTechnicalNameType_cbc read Get_TechnicalName;
    property CategoryName: IXMLCategoryNameType_cbc read Get_CategoryName;
    property HazardousCategoryCode: IXMLHazardousCategoryCodeType_cbc read Get_HazardousCategoryCode;
    property UpperOrangeHazardPlacardID: IXMLUpperOrangeHazardPlacardIDType_cbc read Get_UpperOrangeHazardPlacardID;
    property LowerOrangeHazardPlacardID: IXMLLowerOrangeHazardPlacardIDType_cbc read Get_LowerOrangeHazardPlacardID;
    property MarkingID: IXMLMarkingIDType_cbc read Get_MarkingID;
    property HazardClassID: IXMLHazardClassIDType_cbc read Get_HazardClassID;
    property NetWeightMeasure: IXMLNetWeightMeasureType_cbc read Get_NetWeightMeasure;
    property NetVolumeMeasure: IXMLNetVolumeMeasureType_cbc read Get_NetVolumeMeasure;
    property Quantity: IXMLQuantityType_cbc read Get_Quantity;
    property ContactParty: IXMLPartyType_cac read Get_ContactParty;
    property SecondaryHazard: IXMLSecondaryHazardType_cacList read Get_SecondaryHazard;
    property HazardousGoodsTransit: IXMLHazardousGoodsTransitType_cacList read Get_HazardousGoodsTransit;
    property EmergencyTemperature: IXMLTemperatureType_cac read Get_EmergencyTemperature;
    property FlashpointTemperature: IXMLTemperatureType_cac read Get_FlashpointTemperature;
    property AdditionalTemperature: IXMLTemperatureType_cacList read Get_AdditionalTemperature;
  end;

{ IXMLHazardousItemType_cacList }

  IXMLHazardousItemType_cacList = interface(IXMLNodeCollection)
    ['{8DB58F1E-AE9A-4256-A686-A7812E137B9F}']
    { Methods & Properties }
    function Add: IXMLHazardousItemType_cac;
    function Insert(const Index: Integer): IXMLHazardousItemType_cac;

    function Get_Item(const Index: Integer): IXMLHazardousItemType_cac;
    property Items[const Index: Integer]: IXMLHazardousItemType_cac read Get_Item; default;
  end;

{ IXMLPlacardNotationType_cbc }

  IXMLPlacardNotationType_cbc = interface(IXMLNode)
    ['{5867AF55-CD78-4D9A-9DE1-7AC5F5F2DC74}']
  end;

{ IXMLPlacardEndorsementType_cbc }

  IXMLPlacardEndorsementType_cbc = interface(IXMLNode)
    ['{0E74FFBA-6958-4A7D-B880-DDAA29768A8C}']
  end;

{ IXMLUNDGCodeType_cbc }

  IXMLUNDGCodeType_cbc = interface(IXMLNode)
    ['{38CEF8DA-1932-43BA-9CE1-2283649455F5}']
  end;

{ IXMLEmergencyProceduresCodeType_cbc }

  IXMLEmergencyProceduresCodeType_cbc = interface(IXMLNode)
    ['{C06D0298-5002-4C3E-9588-3B76899240C3}']
  end;

{ IXMLMedicalFirstAidGuideCodeType_cbc }

  IXMLMedicalFirstAidGuideCodeType_cbc = interface(IXMLNode)
    ['{F2E6A32A-7B19-4246-9CFF-F7C55E9B8E38}']
  end;

{ IXMLTechnicalNameType_cbc }

  IXMLTechnicalNameType_cbc = interface(IXMLNode)
    ['{B0383D69-7636-4C9D-91EE-AE1DB43E93FE}']
  end;

{ IXMLCategoryNameType_cbc }

  IXMLCategoryNameType_cbc = interface(IXMLNode)
    ['{7138C730-0EF5-4BB8-8C32-3BCD0C7CC28A}']
  end;

{ IXMLHazardousCategoryCodeType_cbc }

  IXMLHazardousCategoryCodeType_cbc = interface(IXMLNode)
    ['{73B4A44B-7A98-4DF1-81F3-0910AB202F36}']
  end;

{ IXMLUpperOrangeHazardPlacardIDType_cbc }

  IXMLUpperOrangeHazardPlacardIDType_cbc = interface(IXMLNode)
    ['{95646C0E-1C48-4033-B715-6BC8CC617A12}']
  end;

{ IXMLLowerOrangeHazardPlacardIDType_cbc }

  IXMLLowerOrangeHazardPlacardIDType_cbc = interface(IXMLNode)
    ['{09BF86D8-9123-4385-9D59-1B6D46EFDF1C}']
  end;

{ IXMLMarkingIDType_cbc }

  IXMLMarkingIDType_cbc = interface(IXMLNode)
    ['{4E3FCB62-DA87-466C-BAEC-65F7F5952137}']
  end;

{ IXMLHazardClassIDType_cbc }

  IXMLHazardClassIDType_cbc = interface(IXMLNode)
    ['{61437BDC-504E-441B-B24D-8A6BB8ACFBB6}']
  end;

{ IXMLSecondaryHazardType_cac }

  IXMLSecondaryHazardType_cac = interface(IXMLNode)
    ['{5AA82CFB-8317-4030-A8A5-63B9403F0864}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_PlacardNotation: IXMLPlacardNotationType_cbc;
    function Get_PlacardEndorsement: IXMLPlacardEndorsementType_cbc;
    function Get_EmergencyProceduresCode: IXMLEmergencyProceduresCodeType_cbc;
    function Get_Extension: IXMLExtensionType_cbcList;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property PlacardNotation: IXMLPlacardNotationType_cbc read Get_PlacardNotation;
    property PlacardEndorsement: IXMLPlacardEndorsementType_cbc read Get_PlacardEndorsement;
    property EmergencyProceduresCode: IXMLEmergencyProceduresCodeType_cbc read Get_EmergencyProceduresCode;
    property Extension: IXMLExtensionType_cbcList read Get_Extension;
  end;

{ IXMLSecondaryHazardType_cacList }

  IXMLSecondaryHazardType_cacList = interface(IXMLNodeCollection)
    ['{95A60BDC-B9F4-4AC6-8DFB-DF80A9C8E236}']
    { Methods & Properties }
    function Add: IXMLSecondaryHazardType_cac;
    function Insert(const Index: Integer): IXMLSecondaryHazardType_cac;

    function Get_Item(const Index: Integer): IXMLSecondaryHazardType_cac;
    property Items[const Index: Integer]: IXMLSecondaryHazardType_cac read Get_Item; default;
  end;

{ IXMLExtensionType_cbc }

  IXMLExtensionType_cbc = interface(IXMLNode)
    ['{7B2E1F8D-3BF6-43F3-80C5-5C6204772DC0}']
  end;

{ IXMLExtensionType_cbcList }

  IXMLExtensionType_cbcList = interface(IXMLNodeCollection)
    ['{ABDCEE65-62A1-4575-A0B9-A9035A041CA0}']
    { Methods & Properties }
    function Add: IXMLExtensionType_cbc;
    function Insert(const Index: Integer): IXMLExtensionType_cbc;

    function Get_Item(const Index: Integer): IXMLExtensionType_cbc;
    property Items[const Index: Integer]: IXMLExtensionType_cbc read Get_Item; default;
  end;

{ IXMLItemPropertyType_cac }

  IXMLItemPropertyType_cac = interface(IXMLNode)
    ['{0B8FBEE7-6157-474F-8068-F65E3CFAFC0A}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_NameCode: IXMLNameCodeType_cbc;
    function Get_TestMethod: IXMLTestMethodType_cbc;
    function Get_Value: IXMLValueType_cbc;
    function Get_ValueQuantity: IXMLValueQuantityType_cbc;
    function Get_ValueQualifier: IXMLValueQualifierType_cbcList;
    function Get_ImportanceCode: IXMLImportanceCodeType_cbc;
    function Get_ListValue: IXMLListValueType_cbcList;
    function Get_UsabilityPeriod: IXMLPeriodType_cac;
    function Get_ItemPropertyGroup: IXMLItemPropertyGroupType_cacList;
    function Get_RangeDimension: IXMLDimensionType_cac;
    function Get_ItemPropertyRange: IXMLItemPropertyRangeType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property Name: IXMLNameType_cbc read Get_Name;
    property NameCode: IXMLNameCodeType_cbc read Get_NameCode;
    property TestMethod: IXMLTestMethodType_cbc read Get_TestMethod;
    property Value: IXMLValueType_cbc read Get_Value;
    property ValueQuantity: IXMLValueQuantityType_cbc read Get_ValueQuantity;
    property ValueQualifier: IXMLValueQualifierType_cbcList read Get_ValueQualifier;
    property ImportanceCode: IXMLImportanceCodeType_cbc read Get_ImportanceCode;
    property ListValue: IXMLListValueType_cbcList read Get_ListValue;
    property UsabilityPeriod: IXMLPeriodType_cac read Get_UsabilityPeriod;
    property ItemPropertyGroup: IXMLItemPropertyGroupType_cacList read Get_ItemPropertyGroup;
    property RangeDimension: IXMLDimensionType_cac read Get_RangeDimension;
    property ItemPropertyRange: IXMLItemPropertyRangeType_cac read Get_ItemPropertyRange;
  end;

{ IXMLItemPropertyType_cacList }

  IXMLItemPropertyType_cacList = interface(IXMLNodeCollection)
    ['{7A204A55-DCC9-4104-AC68-151E09130460}']
    { Methods & Properties }
    function Add: IXMLItemPropertyType_cac;
    function Insert(const Index: Integer): IXMLItemPropertyType_cac;

    function Get_Item(const Index: Integer): IXMLItemPropertyType_cac;
    property Items[const Index: Integer]: IXMLItemPropertyType_cac read Get_Item; default;
  end;

{ IXMLNameCodeType_cbc }

  IXMLNameCodeType_cbc = interface(IXMLNode)
    ['{F17C6DA5-D92F-4404-8301-137B726591A3}']
  end;

{ IXMLTestMethodType_cbc }

  IXMLTestMethodType_cbc = interface(IXMLNode)
    ['{275BD41B-FAF2-49BA-8E8B-265D1515C4DE}']
  end;

{ IXMLValueQuantityType_cbc }

  IXMLValueQuantityType_cbc = interface(IXMLNode)
    ['{CE2103E2-D866-4CC2-8F1D-EA3BB2874DEB}']
  end;

{ IXMLValueQualifierType_cbc }

  IXMLValueQualifierType_cbc = interface(IXMLNode)
    ['{0208BFF7-D203-4CCF-BEBF-C43840DC58E9}']
  end;

{ IXMLValueQualifierType_cbcList }

  IXMLValueQualifierType_cbcList = interface(IXMLNodeCollection)
    ['{79F1C180-5724-428A-9813-D2E045D19766}']
    { Methods & Properties }
    function Add: IXMLValueQualifierType_cbc;
    function Insert(const Index: Integer): IXMLValueQualifierType_cbc;

    function Get_Item(const Index: Integer): IXMLValueQualifierType_cbc;
    property Items[const Index: Integer]: IXMLValueQualifierType_cbc read Get_Item; default;
  end;

{ IXMLImportanceCodeType_cbc }

  IXMLImportanceCodeType_cbc = interface(IXMLNode)
    ['{25A4BBFA-D8AA-47C7-A8FE-8700F3CAF204}']
  end;

{ IXMLListValueType_cbc }

  IXMLListValueType_cbc = interface(IXMLNode)
    ['{6A535397-5B96-42C8-AA6B-F8D94F6E705E}']
  end;

{ IXMLListValueType_cbcList }

  IXMLListValueType_cbcList = interface(IXMLNodeCollection)
    ['{DAF5DB6A-6BB3-433F-9C82-6A9E75808D05}']
    { Methods & Properties }
    function Add: IXMLListValueType_cbc;
    function Insert(const Index: Integer): IXMLListValueType_cbc;

    function Get_Item(const Index: Integer): IXMLListValueType_cbc;
    property Items[const Index: Integer]: IXMLListValueType_cbc read Get_Item; default;
  end;

{ IXMLItemPropertyGroupType_cac }

  IXMLItemPropertyGroupType_cac = interface(IXMLNode)
    ['{191FF036-B66E-4DC3-8959-8784031382A4}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_ImportanceCode: IXMLImportanceCodeType_cbc;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property Name: IXMLNameType_cbc read Get_Name;
    property ImportanceCode: IXMLImportanceCodeType_cbc read Get_ImportanceCode;
  end;

{ IXMLItemPropertyGroupType_cacList }

  IXMLItemPropertyGroupType_cacList = interface(IXMLNodeCollection)
    ['{67152CC1-947B-4961-933E-E345AFCB1ADB}']
    { Methods & Properties }
    function Add: IXMLItemPropertyGroupType_cac;
    function Insert(const Index: Integer): IXMLItemPropertyGroupType_cac;

    function Get_Item(const Index: Integer): IXMLItemPropertyGroupType_cac;
    property Items[const Index: Integer]: IXMLItemPropertyGroupType_cac read Get_Item; default;
  end;

{ IXMLItemPropertyRangeType_cac }

  IXMLItemPropertyRangeType_cac = interface(IXMLNode)
    ['{D547623A-2CE8-491D-8822-624B006056BD}']
    { Property Accessors }
    function Get_MinimumValue: IXMLMinimumValueType_cbc;
    function Get_MaximumValue: IXMLMaximumValueType_cbc;
    { Methods & Properties }
    property MinimumValue: IXMLMinimumValueType_cbc read Get_MinimumValue;
    property MaximumValue: IXMLMaximumValueType_cbc read Get_MaximumValue;
  end;

{ IXMLMinimumValueType_cbc }

  IXMLMinimumValueType_cbc = interface(IXMLNode)
    ['{5B55786C-3CBB-4BE9-96D8-DEE9842887C9}']
  end;

{ IXMLMaximumValueType_cbc }

  IXMLMaximumValueType_cbc = interface(IXMLNode)
    ['{6A87F42B-04B6-436B-9221-DC796D56E4C0}']
  end;

{ IXMLItemInstanceType_cac }

  IXMLItemInstanceType_cac = interface(IXMLNode)
    ['{0F9F3098-2CA4-4330-86CD-F0832662429C}']
    { Property Accessors }
    function Get_ProductTraceID: IXMLProductTraceIDType_cbc;
    function Get_ManufactureDate: IXMLManufactureDateType_cbc;
    function Get_ManufactureTime: IXMLManufactureTimeType_cbc;
    function Get_BestBeforeDate: IXMLBestBeforeDateType_cbc;
    function Get_RegistrationID: IXMLRegistrationIDType_cbc;
    function Get_SerialID: IXMLSerialIDType_cbc;
    function Get_AdditionalItemProperty: IXMLItemPropertyType_cacList;
    function Get_LotIdentification: IXMLLotIdentificationType_cac;
    { Methods & Properties }
    property ProductTraceID: IXMLProductTraceIDType_cbc read Get_ProductTraceID;
    property ManufactureDate: IXMLManufactureDateType_cbc read Get_ManufactureDate;
    property ManufactureTime: IXMLManufactureTimeType_cbc read Get_ManufactureTime;
    property BestBeforeDate: IXMLBestBeforeDateType_cbc read Get_BestBeforeDate;
    property RegistrationID: IXMLRegistrationIDType_cbc read Get_RegistrationID;
    property SerialID: IXMLSerialIDType_cbc read Get_SerialID;
    property AdditionalItemProperty: IXMLItemPropertyType_cacList read Get_AdditionalItemProperty;
    property LotIdentification: IXMLLotIdentificationType_cac read Get_LotIdentification;
  end;

{ IXMLItemInstanceType_cacList }

  IXMLItemInstanceType_cacList = interface(IXMLNodeCollection)
    ['{EC8C51FD-B4FA-4831-A65E-DB4256A1F17A}']
    { Methods & Properties }
    function Add: IXMLItemInstanceType_cac;
    function Insert(const Index: Integer): IXMLItemInstanceType_cac;

    function Get_Item(const Index: Integer): IXMLItemInstanceType_cac;
    property Items[const Index: Integer]: IXMLItemInstanceType_cac read Get_Item; default;
  end;

{ IXMLProductTraceIDType_cbc }

  IXMLProductTraceIDType_cbc = interface(IXMLNode)
    ['{FDDB9C0C-AAE5-41C5-9021-A090379C1F67}']
  end;

{ IXMLManufactureDateType_cbc }

  IXMLManufactureDateType_cbc = interface(IXMLNode)
    ['{F72E2ED7-5D13-4683-9A51-59FEF2C7A4FF}']
  end;

{ IXMLManufactureTimeType_cbc }

  IXMLManufactureTimeType_cbc = interface(IXMLNode)
    ['{EC738A75-7D08-4805-BEEA-C6611DC298A4}']
  end;

{ IXMLBestBeforeDateType_cbc }

  IXMLBestBeforeDateType_cbc = interface(IXMLNode)
    ['{C99B8F64-F8B4-47EC-A482-7F880DA6C20A}']
  end;

{ IXMLRegistrationIDType_cbc }

  IXMLRegistrationIDType_cbc = interface(IXMLNode)
    ['{489B3A8F-D4E2-4773-A5BA-E641E3024817}']
  end;

{ IXMLSerialIDType_cbc }

  IXMLSerialIDType_cbc = interface(IXMLNode)
    ['{A0112200-20E9-44C8-8A44-A8C3430A8307}']
  end;

{ IXMLLotIdentificationType_cac }

  IXMLLotIdentificationType_cac = interface(IXMLNode)
    ['{593730D2-2D84-4F94-80D0-AD0086827885}']
    { Property Accessors }
    function Get_LotNumberID: IXMLLotNumberIDType_cbc;
    function Get_ExpiryDate: IXMLExpiryDateType_cbc;
    function Get_AdditionalItemProperty: IXMLItemPropertyType_cacList;
    { Methods & Properties }
    property LotNumberID: IXMLLotNumberIDType_cbc read Get_LotNumberID;
    property ExpiryDate: IXMLExpiryDateType_cbc read Get_ExpiryDate;
    property AdditionalItemProperty: IXMLItemPropertyType_cacList read Get_AdditionalItemProperty;
  end;

{ IXMLLotNumberIDType_cbc }

  IXMLLotNumberIDType_cbc = interface(IXMLNode)
    ['{AF87ACAF-EAC5-4076-BFBB-C2123E840305}']
  end;

{ IXMLCertificateType_cac }

  IXMLCertificateType_cac = interface(IXMLNode)
    ['{A64F022B-C231-4B27-BAFA-FB825AA8D463}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_CertificateTypeCode: IXMLCertificateTypeCodeType_cbc;
    function Get_CertificateType: IXMLCertificateTypeType_cbc;
    function Get_Remarks: IXMLRemarksType_cbcList;
    function Get_IssuerParty: IXMLPartyType_cac;
    function Get_DocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_Signature: IXMLSignatureType_cacList;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property CertificateTypeCode: IXMLCertificateTypeCodeType_cbc read Get_CertificateTypeCode;
    property CertificateType: IXMLCertificateTypeType_cbc read Get_CertificateType;
    property Remarks: IXMLRemarksType_cbcList read Get_Remarks;
    property IssuerParty: IXMLPartyType_cac read Get_IssuerParty;
    property DocumentReference: IXMLDocumentReferenceType_cacList read Get_DocumentReference;
    property Signature: IXMLSignatureType_cacList read Get_Signature;
  end;

{ IXMLCertificateType_cacList }

  IXMLCertificateType_cacList = interface(IXMLNodeCollection)
    ['{2313FDCA-269C-4686-960D-2B94BB0E65EB}']
    { Methods & Properties }
    function Add: IXMLCertificateType_cac;
    function Insert(const Index: Integer): IXMLCertificateType_cac;

    function Get_Item(const Index: Integer): IXMLCertificateType_cac;
    property Items[const Index: Integer]: IXMLCertificateType_cac read Get_Item; default;
  end;

{ IXMLCertificateTypeCodeType_cbc }

  IXMLCertificateTypeCodeType_cbc = interface(IXMLNode)
    ['{0B8E0EB7-3D05-4024-B555-9DD1DF1A6D48}']
  end;

{ IXMLCertificateTypeType_cbc }

  IXMLCertificateTypeType_cbc = interface(IXMLNode)
    ['{40147F3C-0DAE-436F-BCD0-3764CC1AE7F7}']
  end;

{ IXMLPackageType_cac }

  IXMLPackageType_cac = interface(IXMLNode)
    ['{1F8FC7BF-77F3-455A-AE25-01EEB7834FFB}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_Quantity: IXMLQuantityType_cbc;
    function Get_ReturnableMaterialIndicator: IXMLReturnableMaterialIndicatorType_cbc;
    function Get_PackageLevelCode: IXMLPackageLevelCodeType_cbc;
    function Get_PackagingTypeCode: IXMLPackagingTypeCodeType_cbc;
    function Get_PackingMaterial: IXMLPackingMaterialType_cbcList;
    function Get_TraceID: IXMLTraceIDType_cbc;
    function Get_ContainedPackage: IXMLPackageType_cacList;
    function Get_ContainingTransportEquipment: IXMLTransportEquipmentType_cac;
    function Get_GoodsItem: IXMLGoodsItemType_cacList;
    function Get_MeasurementDimension: IXMLDimensionType_cacList;
    function Get_DeliveryUnit: IXMLDeliveryUnitType_cacList;
    function Get_Delivery: IXMLDeliveryType_cac;
    function Get_Pickup: IXMLPickupType_cac;
    function Get_Despatch: IXMLDespatchType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property Quantity: IXMLQuantityType_cbc read Get_Quantity;
    property ReturnableMaterialIndicator: IXMLReturnableMaterialIndicatorType_cbc read Get_ReturnableMaterialIndicator;
    property PackageLevelCode: IXMLPackageLevelCodeType_cbc read Get_PackageLevelCode;
    property PackagingTypeCode: IXMLPackagingTypeCodeType_cbc read Get_PackagingTypeCode;
    property PackingMaterial: IXMLPackingMaterialType_cbcList read Get_PackingMaterial;
    property TraceID: IXMLTraceIDType_cbc read Get_TraceID;
    property ContainedPackage: IXMLPackageType_cacList read Get_ContainedPackage;
    property ContainingTransportEquipment: IXMLTransportEquipmentType_cac read Get_ContainingTransportEquipment;
    property GoodsItem: IXMLGoodsItemType_cacList read Get_GoodsItem;
    property MeasurementDimension: IXMLDimensionType_cacList read Get_MeasurementDimension;
    property DeliveryUnit: IXMLDeliveryUnitType_cacList read Get_DeliveryUnit;
    property Delivery: IXMLDeliveryType_cac read Get_Delivery;
    property Pickup: IXMLPickupType_cac read Get_Pickup;
    property Despatch: IXMLDespatchType_cac read Get_Despatch;
  end;

{ IXMLPackageType_cacList }

  IXMLPackageType_cacList = interface(IXMLNodeCollection)
    ['{3F028498-8A1F-48FF-AB17-3CBBA56CDA54}']
    { Methods & Properties }
    function Add: IXMLPackageType_cac;
    function Insert(const Index: Integer): IXMLPackageType_cac;

    function Get_Item(const Index: Integer): IXMLPackageType_cac;
    property Items[const Index: Integer]: IXMLPackageType_cac read Get_Item; default;
  end;

{ IXMLReturnableMaterialIndicatorType_cbc }

  IXMLReturnableMaterialIndicatorType_cbc = interface(IXMLNode)
    ['{B73280F0-D4FD-4DD3-ABDC-0304A9A38BBA}']
  end;

{ IXMLPackageLevelCodeType_cbc }

  IXMLPackageLevelCodeType_cbc = interface(IXMLNode)
    ['{13BBF96A-60B0-4120-942D-2588E6ED7C3E}']
  end;

{ IXMLPackagingTypeCodeType_cbc }

  IXMLPackagingTypeCodeType_cbc = interface(IXMLNode)
    ['{7479E0C3-0CB1-417F-8D71-238F36AE9B01}']
  end;

{ IXMLPackingMaterialType_cbc }

  IXMLPackingMaterialType_cbc = interface(IXMLNode)
    ['{82B7E61D-8468-46F8-8318-EE0F339301B0}']
  end;

{ IXMLPackingMaterialType_cbcList }

  IXMLPackingMaterialType_cbcList = interface(IXMLNodeCollection)
    ['{AFCF8996-7668-4012-9D4E-C4EB33927969}']
    { Methods & Properties }
    function Add: IXMLPackingMaterialType_cbc;
    function Insert(const Index: Integer): IXMLPackingMaterialType_cbc;

    function Get_Item(const Index: Integer): IXMLPackingMaterialType_cbc;
    property Items[const Index: Integer]: IXMLPackingMaterialType_cbc read Get_Item; default;
  end;

{ IXMLGoodsItemType_cac }

  IXMLGoodsItemType_cac = interface(IXMLNode)
    ['{A7FC7F9D-24AB-404E-9359-135D971B59B8}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_SequenceNumberID: IXMLSequenceNumberIDType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc;
    function Get_DeclaredCustomsValueAmount: IXMLDeclaredCustomsValueAmountType_cbc;
    function Get_DeclaredForCarriageValueAmount: IXMLDeclaredForCarriageValueAmountType_cbc;
    function Get_DeclaredStatisticsValueAmount: IXMLDeclaredStatisticsValueAmountType_cbc;
    function Get_FreeOnBoardValueAmount: IXMLFreeOnBoardValueAmountType_cbc;
    function Get_InsuranceValueAmount: IXMLInsuranceValueAmountType_cbc;
    function Get_ValueAmount: IXMLValueAmountType_cbc;
    function Get_GrossWeightMeasure: IXMLGrossWeightMeasureType_cbc;
    function Get_NetWeightMeasure: IXMLNetWeightMeasureType_cbc;
    function Get_NetNetWeightMeasure: IXMLNetNetWeightMeasureType_cbc;
    function Get_ChargeableWeightMeasure: IXMLChargeableWeightMeasureType_cbc;
    function Get_GrossVolumeMeasure: IXMLGrossVolumeMeasureType_cbc;
    function Get_NetVolumeMeasure: IXMLNetVolumeMeasureType_cbc;
    function Get_Quantity: IXMLQuantityType_cbc;
    function Get_PreferenceCriterionCode: IXMLPreferenceCriterionCodeType_cbc;
    function Get_RequiredCustomsID: IXMLRequiredCustomsIDType_cbc;
    function Get_CustomsStatusCode: IXMLCustomsStatusCodeType_cbc;
    function Get_CustomsTariffQuantity: IXMLCustomsTariffQuantityType_cbc;
    function Get_CustomsImportClassifiedIndicator: IXMLCustomsImportClassifiedIndicatorType_cbc;
    function Get_ChargeableQuantity: IXMLChargeableQuantityType_cbc;
    function Get_ReturnableQuantity: IXMLReturnableQuantityType_cbc;
    function Get_TraceID: IXMLTraceIDType_cbc;
    function Get_Item: IXMLItemType_cacList;
    function Get_GoodsItemContainer: IXMLGoodsItemContainerType_cacList;
    function Get_FreightAllowanceCharge: IXMLAllowanceChargeType_cacList;
    function Get_InvoiceLine: IXMLInvoiceLineType_cacList;
    function Get_Temperature: IXMLTemperatureType_cacList;
    function Get_ContainedGoodsItem: IXMLGoodsItemType_cacList;
    function Get_OriginAddress: IXMLAddressType_cac;
    function Get_Delivery: IXMLDeliveryType_cac;
    function Get_Pickup: IXMLPickupType_cac;
    function Get_Despatch: IXMLDespatchType_cac;
    function Get_MeasurementDimension: IXMLDimensionType_cacList;
    function Get_ContainingPackage: IXMLPackageType_cacList;
    function Get_ShipmentDocumentReference: IXMLDocumentReferenceType_cac;
    function Get_MinimumTemperature: IXMLTemperatureType_cac;
    function Get_MaximumTemperature: IXMLTemperatureType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property SequenceNumberID: IXMLSequenceNumberIDType_cbc read Get_SequenceNumberID;
    property Description: IXMLDescriptionType_cbcList read Get_Description;
    property HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc read Get_HazardousRiskIndicator;
    property DeclaredCustomsValueAmount: IXMLDeclaredCustomsValueAmountType_cbc read Get_DeclaredCustomsValueAmount;
    property DeclaredForCarriageValueAmount: IXMLDeclaredForCarriageValueAmountType_cbc read Get_DeclaredForCarriageValueAmount;
    property DeclaredStatisticsValueAmount: IXMLDeclaredStatisticsValueAmountType_cbc read Get_DeclaredStatisticsValueAmount;
    property FreeOnBoardValueAmount: IXMLFreeOnBoardValueAmountType_cbc read Get_FreeOnBoardValueAmount;
    property InsuranceValueAmount: IXMLInsuranceValueAmountType_cbc read Get_InsuranceValueAmount;
    property ValueAmount: IXMLValueAmountType_cbc read Get_ValueAmount;
    property GrossWeightMeasure: IXMLGrossWeightMeasureType_cbc read Get_GrossWeightMeasure;
    property NetWeightMeasure: IXMLNetWeightMeasureType_cbc read Get_NetWeightMeasure;
    property NetNetWeightMeasure: IXMLNetNetWeightMeasureType_cbc read Get_NetNetWeightMeasure;
    property ChargeableWeightMeasure: IXMLChargeableWeightMeasureType_cbc read Get_ChargeableWeightMeasure;
    property GrossVolumeMeasure: IXMLGrossVolumeMeasureType_cbc read Get_GrossVolumeMeasure;
    property NetVolumeMeasure: IXMLNetVolumeMeasureType_cbc read Get_NetVolumeMeasure;
    property Quantity: IXMLQuantityType_cbc read Get_Quantity;
    property PreferenceCriterionCode: IXMLPreferenceCriterionCodeType_cbc read Get_PreferenceCriterionCode;
    property RequiredCustomsID: IXMLRequiredCustomsIDType_cbc read Get_RequiredCustomsID;
    property CustomsStatusCode: IXMLCustomsStatusCodeType_cbc read Get_CustomsStatusCode;
    property CustomsTariffQuantity: IXMLCustomsTariffQuantityType_cbc read Get_CustomsTariffQuantity;
    property CustomsImportClassifiedIndicator: IXMLCustomsImportClassifiedIndicatorType_cbc read Get_CustomsImportClassifiedIndicator;
    property ChargeableQuantity: IXMLChargeableQuantityType_cbc read Get_ChargeableQuantity;
    property ReturnableQuantity: IXMLReturnableQuantityType_cbc read Get_ReturnableQuantity;
    property TraceID: IXMLTraceIDType_cbc read Get_TraceID;
    property Item: IXMLItemType_cacList read Get_Item;
    property GoodsItemContainer: IXMLGoodsItemContainerType_cacList read Get_GoodsItemContainer;
    property FreightAllowanceCharge: IXMLAllowanceChargeType_cacList read Get_FreightAllowanceCharge;
    property InvoiceLine: IXMLInvoiceLineType_cacList read Get_InvoiceLine;
    property Temperature: IXMLTemperatureType_cacList read Get_Temperature;
    property ContainedGoodsItem: IXMLGoodsItemType_cacList read Get_ContainedGoodsItem;
    property OriginAddress: IXMLAddressType_cac read Get_OriginAddress;
    property Delivery: IXMLDeliveryType_cac read Get_Delivery;
    property Pickup: IXMLPickupType_cac read Get_Pickup;
    property Despatch: IXMLDespatchType_cac read Get_Despatch;
    property MeasurementDimension: IXMLDimensionType_cacList read Get_MeasurementDimension;
    property ContainingPackage: IXMLPackageType_cacList read Get_ContainingPackage;
    property ShipmentDocumentReference: IXMLDocumentReferenceType_cac read Get_ShipmentDocumentReference;
    property MinimumTemperature: IXMLTemperatureType_cac read Get_MinimumTemperature;
    property MaximumTemperature: IXMLTemperatureType_cac read Get_MaximumTemperature;
  end;

{ IXMLGoodsItemType_cacList }

  IXMLGoodsItemType_cacList = interface(IXMLNodeCollection)
    ['{EDB5FB4E-5D14-4CD2-A553-F2143BBC626A}']
    { Methods & Properties }
    function Add: IXMLGoodsItemType_cac;
    function Insert(const Index: Integer): IXMLGoodsItemType_cac;

    function Get_Item(const Index: Integer): IXMLGoodsItemType_cac;
    property Items[const Index: Integer]: IXMLGoodsItemType_cac read Get_Item; default;
  end;

{ IXMLSequenceNumberIDType_cbc }

  IXMLSequenceNumberIDType_cbc = interface(IXMLNode)
    ['{9D80CA2A-8CC3-48CB-9DDD-C09571254D04}']
  end;

{ IXMLValueAmountType_cbc }

  IXMLValueAmountType_cbc = interface(IXMLNode)
    ['{1A7294D0-7719-4569-AEDA-087756F25A3F}']
  end;

{ IXMLPreferenceCriterionCodeType_cbc }

  IXMLPreferenceCriterionCodeType_cbc = interface(IXMLNode)
    ['{80C3035B-9793-413A-A39A-C958BE921B48}']
  end;

{ IXMLRequiredCustomsIDType_cbc }

  IXMLRequiredCustomsIDType_cbc = interface(IXMLNode)
    ['{4F5200C1-EFD2-4032-B8D8-CAD625034CA1}']
  end;

{ IXMLCustomsStatusCodeType_cbc }

  IXMLCustomsStatusCodeType_cbc = interface(IXMLNode)
    ['{7D966E6A-B74E-41DD-8254-A9F523AD9D29}']
  end;

{ IXMLCustomsTariffQuantityType_cbc }

  IXMLCustomsTariffQuantityType_cbc = interface(IXMLNode)
    ['{6AD29DB6-69EE-4CD5-AA0E-F6431C6E410F}']
  end;

{ IXMLCustomsImportClassifiedIndicatorType_cbc }

  IXMLCustomsImportClassifiedIndicatorType_cbc = interface(IXMLNode)
    ['{DF2BA2A4-EC78-4358-B250-DB0F23A066C9}']
  end;

{ IXMLChargeableQuantityType_cbc }

  IXMLChargeableQuantityType_cbc = interface(IXMLNode)
    ['{88BF671A-BF0D-4BE7-91A3-A9386E06E4C8}']
  end;

{ IXMLReturnableQuantityType_cbc }

  IXMLReturnableQuantityType_cbc = interface(IXMLNode)
    ['{52A6C8CB-CD31-4C32-81A8-DC7295AA2206}']
  end;

{ IXMLGoodsItemContainerType_cac }

  IXMLGoodsItemContainerType_cac = interface(IXMLNode)
    ['{E7EC5762-5789-4E00-9085-1D6458EFF010}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_Quantity: IXMLQuantityType_cbc;
    function Get_TransportEquipment: IXMLTransportEquipmentType_cacList;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property Quantity: IXMLQuantityType_cbc read Get_Quantity;
    property TransportEquipment: IXMLTransportEquipmentType_cacList read Get_TransportEquipment;
  end;

{ IXMLGoodsItemContainerType_cacList }

  IXMLGoodsItemContainerType_cacList = interface(IXMLNodeCollection)
    ['{5D766BF1-9340-4FAE-9BC7-D3E4B2A4B9B9}']
    { Methods & Properties }
    function Add: IXMLGoodsItemContainerType_cac;
    function Insert(const Index: Integer): IXMLGoodsItemContainerType_cac;

    function Get_Item(const Index: Integer): IXMLGoodsItemContainerType_cac;
    property Items[const Index: Integer]: IXMLGoodsItemContainerType_cac read Get_Item; default;
  end;

{ IXMLInvoiceLineType_cac }

  IXMLInvoiceLineType_cac = interface(IXMLNode)
    ['{B71295BF-3271-464F-A92C-EA7B88483978}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_UUID: IXMLUUIDType_cbc;
    function Get_Note: IXMLNoteType_cbcList;
    function Get_InvoicedQuantity: IXMLInvoicedQuantityType_cbc;
    function Get_LineExtensionAmount: IXMLLineExtensionAmountType_cbc;
    function Get_TaxPointDate: IXMLTaxPointDateType_cbc;
    function Get_AccountingCostCode: IXMLAccountingCostCodeType_cbc;
    function Get_AccountingCost: IXMLAccountingCostType_cbc;
    function Get_PaymentPurposeCode: IXMLPaymentPurposeCodeType_cbc;
    function Get_FreeOfChargeIndicator: IXMLFreeOfChargeIndicatorType_cbc;
    function Get_InvoicePeriod: IXMLPeriodType_cacList;
    function Get_OrderLineReference: IXMLOrderLineReferenceType_cacList;
    function Get_DespatchLineReference: IXMLLineReferenceType_cacList;
    function Get_ReceiptLineReference: IXMLLineReferenceType_cacList;
    function Get_BillingReference: IXMLBillingReferenceType_cacList;
    function Get_DocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_PricingReference: IXMLPricingReferenceType_cac;
    function Get_OriginatorParty: IXMLPartyType_cac;
    function Get_Delivery: IXMLDeliveryType_cacList;
    function Get_PaymentTerms: IXMLPaymentTermsType_cacList;
    function Get_AllowanceCharge: IXMLAllowanceChargeType_cacList;
    function Get_TaxTotal: IXMLTaxTotalType_cacList;
    function Get_WithholdingTaxTotal: IXMLTaxTotalType_cacList;
    function Get_Item: IXMLItemType_cac;
    function Get_Price: IXMLPriceType_cac;
    function Get_DeliveryTerms: IXMLDeliveryTermsType_cac;
    function Get_SubInvoiceLine: IXMLInvoiceLineType_cacList;
    function Get_ItemPriceExtension: IXMLPriceExtensionType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property UUID: IXMLUUIDType_cbc read Get_UUID;
    property Note: IXMLNoteType_cbcList read Get_Note;
    property InvoicedQuantity: IXMLInvoicedQuantityType_cbc read Get_InvoicedQuantity;
    property LineExtensionAmount: IXMLLineExtensionAmountType_cbc read Get_LineExtensionAmount;
    property TaxPointDate: IXMLTaxPointDateType_cbc read Get_TaxPointDate;
    property AccountingCostCode: IXMLAccountingCostCodeType_cbc read Get_AccountingCostCode;
    property AccountingCost: IXMLAccountingCostType_cbc read Get_AccountingCost;
    property PaymentPurposeCode: IXMLPaymentPurposeCodeType_cbc read Get_PaymentPurposeCode;
    property FreeOfChargeIndicator: IXMLFreeOfChargeIndicatorType_cbc read Get_FreeOfChargeIndicator;
    property InvoicePeriod: IXMLPeriodType_cacList read Get_InvoicePeriod;
    property OrderLineReference: IXMLOrderLineReferenceType_cacList read Get_OrderLineReference;
    property DespatchLineReference: IXMLLineReferenceType_cacList read Get_DespatchLineReference;
    property ReceiptLineReference: IXMLLineReferenceType_cacList read Get_ReceiptLineReference;
    property BillingReference: IXMLBillingReferenceType_cacList read Get_BillingReference;
    property DocumentReference: IXMLDocumentReferenceType_cacList read Get_DocumentReference;
    property PricingReference: IXMLPricingReferenceType_cac read Get_PricingReference;
    property OriginatorParty: IXMLPartyType_cac read Get_OriginatorParty;
    property Delivery: IXMLDeliveryType_cacList read Get_Delivery;
    property PaymentTerms: IXMLPaymentTermsType_cacList read Get_PaymentTerms;
    property AllowanceCharge: IXMLAllowanceChargeType_cacList read Get_AllowanceCharge;
    property TaxTotal: IXMLTaxTotalType_cacList read Get_TaxTotal;
    property WithholdingTaxTotal: IXMLTaxTotalType_cacList read Get_WithholdingTaxTotal;
    property Item: IXMLItemType_cac read Get_Item;
    property Price: IXMLPriceType_cac read Get_Price;
    property DeliveryTerms: IXMLDeliveryTermsType_cac read Get_DeliveryTerms;
    property SubInvoiceLine: IXMLInvoiceLineType_cacList read Get_SubInvoiceLine;
    property ItemPriceExtension: IXMLPriceExtensionType_cac read Get_ItemPriceExtension;
  end;

{ IXMLInvoiceLineType_cacList }

  IXMLInvoiceLineType_cacList = interface(IXMLNodeCollection)
    ['{A9BB9F41-387A-4FE5-AF6A-48D2C72F68EA}']
    { Methods & Properties }
    function Add: IXMLInvoiceLineType_cac;
    function Insert(const Index: Integer): IXMLInvoiceLineType_cac;

    function Get_Item(const Index: Integer): IXMLInvoiceLineType_cac;
    property Items[const Index: Integer]: IXMLInvoiceLineType_cac read Get_Item; default;
  end;

{ IXMLInvoicedQuantityType_cbc }

  IXMLInvoicedQuantityType_cbc = interface(IXMLNode)
    ['{E0056521-FB46-448A-A1B7-C3FF336CCD8B}']
  end;

{ IXMLLineExtensionAmountType_cbc }

  IXMLLineExtensionAmountType_cbc = interface(IXMLNode)
    ['{910B657E-E6F0-499F-9DB8-33B628386667}']
  end;

{ IXMLPaymentPurposeCodeType_cbc }

  IXMLPaymentPurposeCodeType_cbc = interface(IXMLNode)
    ['{38F1D4EA-9F57-4AA2-A5CE-3E51CF0DF03B}']
  end;

{ IXMLFreeOfChargeIndicatorType_cbc }

  IXMLFreeOfChargeIndicatorType_cbc = interface(IXMLNode)
    ['{67AFF8E3-3452-4CFF-9A4B-6F53EA9A8EAC}']
  end;

{ IXMLLineReferenceType_cac }

  IXMLLineReferenceType_cac = interface(IXMLNode)
    ['{7151FECD-2159-41C7-A01F-D0E5106D2AB2}']
    { Property Accessors }
    function Get_LineID: IXMLLineIDType_cbc;
    function Get_UUID: IXMLUUIDType_cbc;
    function Get_LineStatusCode: IXMLLineStatusCodeType_cbc;
    function Get_DocumentReference: IXMLDocumentReferenceType_cac;
    { Methods & Properties }
    property LineID: IXMLLineIDType_cbc read Get_LineID;
    property UUID: IXMLUUIDType_cbc read Get_UUID;
    property LineStatusCode: IXMLLineStatusCodeType_cbc read Get_LineStatusCode;
    property DocumentReference: IXMLDocumentReferenceType_cac read Get_DocumentReference;
  end;

{ IXMLLineReferenceType_cacList }

  IXMLLineReferenceType_cacList = interface(IXMLNodeCollection)
    ['{872600FC-5763-44F2-B414-0F51891A7C34}']
    { Methods & Properties }
    function Add: IXMLLineReferenceType_cac;
    function Insert(const Index: Integer): IXMLLineReferenceType_cac;

    function Get_Item(const Index: Integer): IXMLLineReferenceType_cac;
    property Items[const Index: Integer]: IXMLLineReferenceType_cac read Get_Item; default;
  end;

{ IXMLPricingReferenceType_cac }

  IXMLPricingReferenceType_cac = interface(IXMLNode)
    ['{96B7DCF4-B542-4228-B811-1DB3F9AC7606}']
    { Property Accessors }
    function Get_OriginalItemLocationQuantity: IXMLItemLocationQuantityType_cac;
    function Get_AlternativeConditionPrice: IXMLPriceType_cacList;
    { Methods & Properties }
    property OriginalItemLocationQuantity: IXMLItemLocationQuantityType_cac read Get_OriginalItemLocationQuantity;
    property AlternativeConditionPrice: IXMLPriceType_cacList read Get_AlternativeConditionPrice;
  end;

{ IXMLItemLocationQuantityType_cac }

  IXMLItemLocationQuantityType_cac = interface(IXMLNode)
    ['{2E06C04A-5038-456A-B780-00E78462CD06}']
    { Property Accessors }
    function Get_LeadTimeMeasure: IXMLLeadTimeMeasureType_cbc;
    function Get_MinimumQuantity: IXMLMinimumQuantityType_cbc;
    function Get_MaximumQuantity: IXMLMaximumQuantityType_cbc;
    function Get_HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc;
    function Get_TradingRestrictions: IXMLTradingRestrictionsType_cbcList;
    function Get_ApplicableTerritoryAddress: IXMLAddressType_cacList;
    function Get_Price: IXMLPriceType_cac;
    function Get_DeliveryUnit: IXMLDeliveryUnitType_cacList;
    function Get_ApplicableTaxCategory: IXMLTaxCategoryType_cacList;
    function Get_Package: IXMLPackageType_cac;
    function Get_AllowanceCharge: IXMLAllowanceChargeType_cacList;
    function Get_DependentPriceReference: IXMLDependentPriceReferenceType_cac;
    { Methods & Properties }
    property LeadTimeMeasure: IXMLLeadTimeMeasureType_cbc read Get_LeadTimeMeasure;
    property MinimumQuantity: IXMLMinimumQuantityType_cbc read Get_MinimumQuantity;
    property MaximumQuantity: IXMLMaximumQuantityType_cbc read Get_MaximumQuantity;
    property HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc read Get_HazardousRiskIndicator;
    property TradingRestrictions: IXMLTradingRestrictionsType_cbcList read Get_TradingRestrictions;
    property ApplicableTerritoryAddress: IXMLAddressType_cacList read Get_ApplicableTerritoryAddress;
    property Price: IXMLPriceType_cac read Get_Price;
    property DeliveryUnit: IXMLDeliveryUnitType_cacList read Get_DeliveryUnit;
    property ApplicableTaxCategory: IXMLTaxCategoryType_cacList read Get_ApplicableTaxCategory;
    property Package: IXMLPackageType_cac read Get_Package;
    property AllowanceCharge: IXMLAllowanceChargeType_cacList read Get_AllowanceCharge;
    property DependentPriceReference: IXMLDependentPriceReferenceType_cac read Get_DependentPriceReference;
  end;

{ IXMLLeadTimeMeasureType_cbc }

  IXMLLeadTimeMeasureType_cbc = interface(IXMLNode)
    ['{05235072-7BB8-47D1-BB61-978A21FAA2A2}']
  end;

{ IXMLTradingRestrictionsType_cbc }

  IXMLTradingRestrictionsType_cbc = interface(IXMLNode)
    ['{C12503C8-35AA-485C-8AD7-96FFAEFD2448}']
  end;

{ IXMLTradingRestrictionsType_cbcList }

  IXMLTradingRestrictionsType_cbcList = interface(IXMLNodeCollection)
    ['{6172D51E-09DC-467A-8527-AD15B3E3A70C}']
    { Methods & Properties }
    function Add: IXMLTradingRestrictionsType_cbc;
    function Insert(const Index: Integer): IXMLTradingRestrictionsType_cbc;

    function Get_Item(const Index: Integer): IXMLTradingRestrictionsType_cbc;
    property Items[const Index: Integer]: IXMLTradingRestrictionsType_cbc read Get_Item; default;
  end;

{ IXMLPriceType_cac }

  IXMLPriceType_cac = interface(IXMLNode)
    ['{B996FE1F-DE19-4907-A52B-382396EA7017}']
    { Property Accessors }
    function Get_PriceAmount: IXMLPriceAmountType_cbc;
    function Get_BaseQuantity: IXMLBaseQuantityType_cbc;
    function Get_PriceChangeReason: IXMLPriceChangeReasonType_cbcList;
    function Get_PriceTypeCode: IXMLPriceTypeCodeType_cbc;
    function Get_PriceType: IXMLPriceTypeType_cbc;
    function Get_OrderableUnitFactorRate: IXMLOrderableUnitFactorRateType_cbc;
    function Get_ValidityPeriod: IXMLPeriodType_cacList;
    function Get_PriceList: IXMLPriceListType_cac;
    function Get_AllowanceCharge: IXMLAllowanceChargeType_cacList;
    function Get_PricingExchangeRate: IXMLExchangeRateType_cac;
    { Methods & Properties }
    property PriceAmount: IXMLPriceAmountType_cbc read Get_PriceAmount;
    property BaseQuantity: IXMLBaseQuantityType_cbc read Get_BaseQuantity;
    property PriceChangeReason: IXMLPriceChangeReasonType_cbcList read Get_PriceChangeReason;
    property PriceTypeCode: IXMLPriceTypeCodeType_cbc read Get_PriceTypeCode;
    property PriceType: IXMLPriceTypeType_cbc read Get_PriceType;
    property OrderableUnitFactorRate: IXMLOrderableUnitFactorRateType_cbc read Get_OrderableUnitFactorRate;
    property ValidityPeriod: IXMLPeriodType_cacList read Get_ValidityPeriod;
    property PriceList: IXMLPriceListType_cac read Get_PriceList;
    property AllowanceCharge: IXMLAllowanceChargeType_cacList read Get_AllowanceCharge;
    property PricingExchangeRate: IXMLExchangeRateType_cac read Get_PricingExchangeRate;
  end;

{ IXMLPriceType_cacList }

  IXMLPriceType_cacList = interface(IXMLNodeCollection)
    ['{981EA58A-8401-4A53-B2C1-297664F966B0}']
    { Methods & Properties }
    function Add: IXMLPriceType_cac;
    function Insert(const Index: Integer): IXMLPriceType_cac;

    function Get_Item(const Index: Integer): IXMLPriceType_cac;
    property Items[const Index: Integer]: IXMLPriceType_cac read Get_Item; default;
  end;

{ IXMLPriceAmountType_cbc }

  IXMLPriceAmountType_cbc = interface(IXMLNode)
    ['{9FB91536-44B2-4190-841C-65C831529B39}']
  end;

{ IXMLBaseQuantityType_cbc }

  IXMLBaseQuantityType_cbc = interface(IXMLNode)
    ['{7CD889CC-7B3E-49E1-97A5-37DA3B89551C}']
  end;

{ IXMLPriceChangeReasonType_cbc }

  IXMLPriceChangeReasonType_cbc = interface(IXMLNode)
    ['{278BA8C1-7BCD-452B-AD35-87FAF6F28E7F}']
  end;

{ IXMLPriceChangeReasonType_cbcList }

  IXMLPriceChangeReasonType_cbcList = interface(IXMLNodeCollection)
    ['{EFA79890-58E6-4011-B0C0-7F19346E4D9C}']
    { Methods & Properties }
    function Add: IXMLPriceChangeReasonType_cbc;
    function Insert(const Index: Integer): IXMLPriceChangeReasonType_cbc;

    function Get_Item(const Index: Integer): IXMLPriceChangeReasonType_cbc;
    property Items[const Index: Integer]: IXMLPriceChangeReasonType_cbc read Get_Item; default;
  end;

{ IXMLPriceTypeCodeType_cbc }

  IXMLPriceTypeCodeType_cbc = interface(IXMLNode)
    ['{61D886EA-B7E8-4252-8393-593AF4B1BF2E}']
  end;

{ IXMLPriceTypeType_cbc }

  IXMLPriceTypeType_cbc = interface(IXMLNode)
    ['{6FD50122-D573-4C57-AF14-B8A913B4AD33}']
  end;

{ IXMLOrderableUnitFactorRateType_cbc }

  IXMLOrderableUnitFactorRateType_cbc = interface(IXMLNode)
    ['{4A4C1B5E-A25E-49EC-AB4B-9C6E35B37454}']
  end;

{ IXMLPriceListType_cac }

  IXMLPriceListType_cac = interface(IXMLNode)
    ['{BCEFA80F-1671-47A8-ADC0-FDA3B8CB2160}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_StatusCode: IXMLStatusCodeType_cbc;
    function Get_ValidityPeriod: IXMLPeriodType_cacList;
    function Get_PreviousPriceList: IXMLPriceListType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property StatusCode: IXMLStatusCodeType_cbc read Get_StatusCode;
    property ValidityPeriod: IXMLPeriodType_cacList read Get_ValidityPeriod;
    property PreviousPriceList: IXMLPriceListType_cac read Get_PreviousPriceList;
  end;

{ IXMLStatusCodeType_cbc }

  IXMLStatusCodeType_cbc = interface(IXMLNode)
    ['{0F719F3E-69FC-456A-9294-D0D079EDB342}']
  end;

{ IXMLExchangeRateType_cac }

  IXMLExchangeRateType_cac = interface(IXMLNode)
    ['{052AAC0B-35F9-48E0-A0BA-7C1A87BAB428}']
    { Property Accessors }
    function Get_SourceCurrencyCode: IXMLSourceCurrencyCodeType_cbc;
    function Get_SourceCurrencyBaseRate: IXMLSourceCurrencyBaseRateType_cbc;
    function Get_TargetCurrencyCode: IXMLTargetCurrencyCodeType_cbc;
    function Get_TargetCurrencyBaseRate: IXMLTargetCurrencyBaseRateType_cbc;
    function Get_ExchangeMarketID: IXMLExchangeMarketIDType_cbc;
    function Get_CalculationRate: IXMLCalculationRateType_cbc;
    function Get_MathematicOperatorCode: IXMLMathematicOperatorCodeType_cbc;
    function Get_Date: IXMLDateType_cbc;
    function Get_ForeignExchangeContract: IXMLContractType_cac;
    { Methods & Properties }
    property SourceCurrencyCode: IXMLSourceCurrencyCodeType_cbc read Get_SourceCurrencyCode;
    property SourceCurrencyBaseRate: IXMLSourceCurrencyBaseRateType_cbc read Get_SourceCurrencyBaseRate;
    property TargetCurrencyCode: IXMLTargetCurrencyCodeType_cbc read Get_TargetCurrencyCode;
    property TargetCurrencyBaseRate: IXMLTargetCurrencyBaseRateType_cbc read Get_TargetCurrencyBaseRate;
    property ExchangeMarketID: IXMLExchangeMarketIDType_cbc read Get_ExchangeMarketID;
    property CalculationRate: IXMLCalculationRateType_cbc read Get_CalculationRate;
    property MathematicOperatorCode: IXMLMathematicOperatorCodeType_cbc read Get_MathematicOperatorCode;
    property Date: IXMLDateType_cbc read Get_Date;
    property ForeignExchangeContract: IXMLContractType_cac read Get_ForeignExchangeContract;
  end;

{ IXMLSourceCurrencyCodeType_cbc }

  IXMLSourceCurrencyCodeType_cbc = interface(IXMLNode)
    ['{A5B7BF46-507D-4359-B424-C17DCF4A2552}']
  end;

{ IXMLSourceCurrencyBaseRateType_cbc }

  IXMLSourceCurrencyBaseRateType_cbc = interface(IXMLNode)
    ['{47CACD1B-8779-4163-B92C-7DD863584B14}']
  end;

{ IXMLTargetCurrencyCodeType_cbc }

  IXMLTargetCurrencyCodeType_cbc = interface(IXMLNode)
    ['{F4D951D3-BF76-4219-AE9B-C653FF668EBB}']
  end;

{ IXMLTargetCurrencyBaseRateType_cbc }

  IXMLTargetCurrencyBaseRateType_cbc = interface(IXMLNode)
    ['{0CA11A1C-A869-44EC-93C1-247118A8A438}']
  end;

{ IXMLExchangeMarketIDType_cbc }

  IXMLExchangeMarketIDType_cbc = interface(IXMLNode)
    ['{40FA2872-5B32-4863-871A-D405E71E15D6}']
  end;

{ IXMLCalculationRateType_cbc }

  IXMLCalculationRateType_cbc = interface(IXMLNode)
    ['{7FAEFE1B-DB17-4B22-97E6-7E57C7FDEA37}']
  end;

{ IXMLMathematicOperatorCodeType_cbc }

  IXMLMathematicOperatorCodeType_cbc = interface(IXMLNode)
    ['{CE9FFDC9-2079-4CA2-988F-E838F1B5C564}']
  end;

{ IXMLDateType_cbc }

  IXMLDateType_cbc = interface(IXMLNode)
    ['{B249F96D-174B-4676-A71F-AA4C7D28CBAB}']
  end;

{ IXMLDependentPriceReferenceType_cac }

  IXMLDependentPriceReferenceType_cac = interface(IXMLNode)
    ['{B278CE97-B09F-4459-BFF9-48557477A904}']
    { Property Accessors }
    function Get_Percent: IXMLPercentType_cbc;
    function Get_LocationAddress: IXMLAddressType_cac;
    function Get_DependentLineReference: IXMLLineReferenceType_cac;
    { Methods & Properties }
    property Percent: IXMLPercentType_cbc read Get_Percent;
    property LocationAddress: IXMLAddressType_cac read Get_LocationAddress;
    property DependentLineReference: IXMLLineReferenceType_cac read Get_DependentLineReference;
  end;

{ IXMLPaymentTermsType_cac }

  IXMLPaymentTermsType_cac = interface(IXMLNode)
    ['{D0F6F955-DB0B-4AE9-85F3-314E29BB0223}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_PaymentMeansID: IXMLPaymentMeansIDType_cbcList;
    function Get_PrepaidPaymentReferenceID: IXMLPrepaidPaymentReferenceIDType_cbc;
    function Get_Note: IXMLNoteType_cbcList;
    function Get_ReferenceEventCode: IXMLReferenceEventCodeType_cbc;
    function Get_SettlementDiscountPercent: IXMLSettlementDiscountPercentType_cbc;
    function Get_PenaltySurchargePercent: IXMLPenaltySurchargePercentType_cbc;
    function Get_PaymentPercent: IXMLPaymentPercentType_cbc;
    function Get_Amount: IXMLAmountType_cbc;
    function Get_SettlementDiscountAmount: IXMLSettlementDiscountAmountType_cbc;
    function Get_PenaltyAmount: IXMLPenaltyAmountType_cbc;
    function Get_PaymentTermsDetailsURI: IXMLPaymentTermsDetailsURIType_cbc;
    function Get_PaymentDueDate: IXMLPaymentDueDateType_cbc;
    function Get_InstallmentDueDate: IXMLInstallmentDueDateType_cbc;
    function Get_InvoicingPartyReference: IXMLInvoicingPartyReferenceType_cbc;
    function Get_SettlementPeriod: IXMLPeriodType_cac;
    function Get_PenaltyPeriod: IXMLPeriodType_cac;
    function Get_ExchangeRate: IXMLExchangeRateType_cac;
    function Get_ValidityPeriod: IXMLPeriodType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property PaymentMeansID: IXMLPaymentMeansIDType_cbcList read Get_PaymentMeansID;
    property PrepaidPaymentReferenceID: IXMLPrepaidPaymentReferenceIDType_cbc read Get_PrepaidPaymentReferenceID;
    property Note: IXMLNoteType_cbcList read Get_Note;
    property ReferenceEventCode: IXMLReferenceEventCodeType_cbc read Get_ReferenceEventCode;
    property SettlementDiscountPercent: IXMLSettlementDiscountPercentType_cbc read Get_SettlementDiscountPercent;
    property PenaltySurchargePercent: IXMLPenaltySurchargePercentType_cbc read Get_PenaltySurchargePercent;
    property PaymentPercent: IXMLPaymentPercentType_cbc read Get_PaymentPercent;
    property Amount: IXMLAmountType_cbc read Get_Amount;
    property SettlementDiscountAmount: IXMLSettlementDiscountAmountType_cbc read Get_SettlementDiscountAmount;
    property PenaltyAmount: IXMLPenaltyAmountType_cbc read Get_PenaltyAmount;
    property PaymentTermsDetailsURI: IXMLPaymentTermsDetailsURIType_cbc read Get_PaymentTermsDetailsURI;
    property PaymentDueDate: IXMLPaymentDueDateType_cbc read Get_PaymentDueDate;
    property InstallmentDueDate: IXMLInstallmentDueDateType_cbc read Get_InstallmentDueDate;
    property InvoicingPartyReference: IXMLInvoicingPartyReferenceType_cbc read Get_InvoicingPartyReference;
    property SettlementPeriod: IXMLPeriodType_cac read Get_SettlementPeriod;
    property PenaltyPeriod: IXMLPeriodType_cac read Get_PenaltyPeriod;
    property ExchangeRate: IXMLExchangeRateType_cac read Get_ExchangeRate;
    property ValidityPeriod: IXMLPeriodType_cac read Get_ValidityPeriod;
  end;

{ IXMLPaymentTermsType_cacList }

  IXMLPaymentTermsType_cacList = interface(IXMLNodeCollection)
    ['{265F7BAF-F7F2-409B-A77E-1D1A29C7E733}']
    { Methods & Properties }
    function Add: IXMLPaymentTermsType_cac;
    function Insert(const Index: Integer): IXMLPaymentTermsType_cac;

    function Get_Item(const Index: Integer): IXMLPaymentTermsType_cac;
    property Items[const Index: Integer]: IXMLPaymentTermsType_cac read Get_Item; default;
  end;

{ IXMLPaymentMeansIDType_cbc }

  IXMLPaymentMeansIDType_cbc = interface(IXMLNode)
    ['{289273AE-2745-42BD-B566-755BFAC03A2A}']
  end;

{ IXMLPaymentMeansIDType_cbcList }

  IXMLPaymentMeansIDType_cbcList = interface(IXMLNodeCollection)
    ['{797EA0D5-938D-4CE2-BD5A-9BD9830BDDD4}']
    { Methods & Properties }
    function Add: IXMLPaymentMeansIDType_cbc;
    function Insert(const Index: Integer): IXMLPaymentMeansIDType_cbc;

    function Get_Item(const Index: Integer): IXMLPaymentMeansIDType_cbc;
    property Items[const Index: Integer]: IXMLPaymentMeansIDType_cbc read Get_Item; default;
  end;

{ IXMLPrepaidPaymentReferenceIDType_cbc }

  IXMLPrepaidPaymentReferenceIDType_cbc = interface(IXMLNode)
    ['{32A35286-3364-49D6-AD7D-086E2E89A57F}']
  end;

{ IXMLReferenceEventCodeType_cbc }

  IXMLReferenceEventCodeType_cbc = interface(IXMLNode)
    ['{4DD94D0D-18D2-43B1-9A1F-6B27B2DFD20B}']
  end;

{ IXMLSettlementDiscountPercentType_cbc }

  IXMLSettlementDiscountPercentType_cbc = interface(IXMLNode)
    ['{5F8BA791-D3FA-4A94-9ACF-421F7435EB3C}']
  end;

{ IXMLPenaltySurchargePercentType_cbc }

  IXMLPenaltySurchargePercentType_cbc = interface(IXMLNode)
    ['{69DFD026-5909-407D-9BA2-21168339B1C5}']
  end;

{ IXMLPaymentPercentType_cbc }

  IXMLPaymentPercentType_cbc = interface(IXMLNode)
    ['{FF91396A-7D18-4338-89F2-48F48F94A019}']
  end;

{ IXMLSettlementDiscountAmountType_cbc }

  IXMLSettlementDiscountAmountType_cbc = interface(IXMLNode)
    ['{1D053B5E-196B-46A2-8752-7438F5A87E8C}']
  end;

{ IXMLPenaltyAmountType_cbc }

  IXMLPenaltyAmountType_cbc = interface(IXMLNode)
    ['{969260A7-BC6B-4A98-9E5B-524B2A4EC9B6}']
  end;

{ IXMLPaymentTermsDetailsURIType_cbc }

  IXMLPaymentTermsDetailsURIType_cbc = interface(IXMLNode)
    ['{B798C844-F7DD-42CB-83DD-739203F084C2}']
  end;

{ IXMLInstallmentDueDateType_cbc }

  IXMLInstallmentDueDateType_cbc = interface(IXMLNode)
    ['{E4192535-5F3E-4716-94A1-843C0457944C}']
  end;

{ IXMLInvoicingPartyReferenceType_cbc }

  IXMLInvoicingPartyReferenceType_cbc = interface(IXMLNode)
    ['{7C98F213-EC84-4EDD-BD24-86F43E543B8E}']
  end;

{ IXMLPriceExtensionType_cac }

  IXMLPriceExtensionType_cac = interface(IXMLNode)
    ['{251B58FF-7A45-4FFD-B876-28299653E843}']
    { Property Accessors }
    function Get_Amount: IXMLAmountType_cbc;
    function Get_TaxTotal: IXMLTaxTotalType_cacList;
    { Methods & Properties }
    property Amount: IXMLAmountType_cbc read Get_Amount;
    property TaxTotal: IXMLTaxTotalType_cacList read Get_TaxTotal;
  end;

{ IXMLPickupType_cac }

  IXMLPickupType_cac = interface(IXMLNode)
    ['{D5C14ACA-60CB-40E5-8865-0B528ED3FF0D}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_ActualPickupDate: IXMLActualPickupDateType_cbc;
    function Get_ActualPickupTime: IXMLActualPickupTimeType_cbc;
    function Get_EarliestPickupDate: IXMLEarliestPickupDateType_cbc;
    function Get_EarliestPickupTime: IXMLEarliestPickupTimeType_cbc;
    function Get_LatestPickupDate: IXMLLatestPickupDateType_cbc;
    function Get_LatestPickupTime: IXMLLatestPickupTimeType_cbc;
    function Get_PickupLocation: IXMLLocationType_cac;
    function Get_PickupParty: IXMLPartyType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property ActualPickupDate: IXMLActualPickupDateType_cbc read Get_ActualPickupDate;
    property ActualPickupTime: IXMLActualPickupTimeType_cbc read Get_ActualPickupTime;
    property EarliestPickupDate: IXMLEarliestPickupDateType_cbc read Get_EarliestPickupDate;
    property EarliestPickupTime: IXMLEarliestPickupTimeType_cbc read Get_EarliestPickupTime;
    property LatestPickupDate: IXMLLatestPickupDateType_cbc read Get_LatestPickupDate;
    property LatestPickupTime: IXMLLatestPickupTimeType_cbc read Get_LatestPickupTime;
    property PickupLocation: IXMLLocationType_cac read Get_PickupLocation;
    property PickupParty: IXMLPartyType_cac read Get_PickupParty;
  end;

{ IXMLActualPickupDateType_cbc }

  IXMLActualPickupDateType_cbc = interface(IXMLNode)
    ['{DB6FDA20-3840-454C-8816-32573ADFCB01}']
  end;

{ IXMLActualPickupTimeType_cbc }

  IXMLActualPickupTimeType_cbc = interface(IXMLNode)
    ['{DE968192-2806-459D-A794-1F5BF6D57B59}']
  end;

{ IXMLEarliestPickupDateType_cbc }

  IXMLEarliestPickupDateType_cbc = interface(IXMLNode)
    ['{A1DC8D51-59D5-4C3A-AE70-65D2112F5366}']
  end;

{ IXMLEarliestPickupTimeType_cbc }

  IXMLEarliestPickupTimeType_cbc = interface(IXMLNode)
    ['{479273AF-920F-4C54-A95E-B28A3592EABD}']
  end;

{ IXMLLatestPickupDateType_cbc }

  IXMLLatestPickupDateType_cbc = interface(IXMLNode)
    ['{30E151BE-9A77-4E0A-801E-3DE281CCE93C}']
  end;

{ IXMLLatestPickupTimeType_cbc }

  IXMLLatestPickupTimeType_cbc = interface(IXMLNode)
    ['{65C1F910-34FF-4402-BC13-3ECA79049993}']
  end;

{ IXMLReceiptLineType_cac }

  IXMLReceiptLineType_cac = interface(IXMLNode)
    ['{959C611D-B875-4441-81CF-671EA163C21A}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_UUID: IXMLUUIDType_cbc;
    function Get_Note: IXMLNoteType_cbcList;
    function Get_ReceivedQuantity: IXMLReceivedQuantityType_cbc;
    function Get_ShortQuantity: IXMLShortQuantityType_cbc;
    function Get_ShortageActionCode: IXMLShortageActionCodeType_cbc;
    function Get_RejectedQuantity: IXMLRejectedQuantityType_cbc;
    function Get_RejectReasonCode: IXMLRejectReasonCodeType_cbc;
    function Get_RejectReason: IXMLRejectReasonType_cbcList;
    function Get_RejectActionCode: IXMLRejectActionCodeType_cbc;
    function Get_QuantityDiscrepancyCode: IXMLQuantityDiscrepancyCodeType_cbc;
    function Get_OversupplyQuantity: IXMLOversupplyQuantityType_cbc;
    function Get_ReceivedDate: IXMLReceivedDateType_cbc;
    function Get_TimingComplaintCode: IXMLTimingComplaintCodeType_cbc;
    function Get_TimingComplaint: IXMLTimingComplaintType_cbc;
    function Get_OrderLineReference: IXMLOrderLineReferenceType_cac;
    function Get_DespatchLineReference: IXMLLineReferenceType_cacList;
    function Get_DocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_Item: IXMLItemType_cacList;
    function Get_Shipment: IXMLShipmentType_cacList;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property UUID: IXMLUUIDType_cbc read Get_UUID;
    property Note: IXMLNoteType_cbcList read Get_Note;
    property ReceivedQuantity: IXMLReceivedQuantityType_cbc read Get_ReceivedQuantity;
    property ShortQuantity: IXMLShortQuantityType_cbc read Get_ShortQuantity;
    property ShortageActionCode: IXMLShortageActionCodeType_cbc read Get_ShortageActionCode;
    property RejectedQuantity: IXMLRejectedQuantityType_cbc read Get_RejectedQuantity;
    property RejectReasonCode: IXMLRejectReasonCodeType_cbc read Get_RejectReasonCode;
    property RejectReason: IXMLRejectReasonType_cbcList read Get_RejectReason;
    property RejectActionCode: IXMLRejectActionCodeType_cbc read Get_RejectActionCode;
    property QuantityDiscrepancyCode: IXMLQuantityDiscrepancyCodeType_cbc read Get_QuantityDiscrepancyCode;
    property OversupplyQuantity: IXMLOversupplyQuantityType_cbc read Get_OversupplyQuantity;
    property ReceivedDate: IXMLReceivedDateType_cbc read Get_ReceivedDate;
    property TimingComplaintCode: IXMLTimingComplaintCodeType_cbc read Get_TimingComplaintCode;
    property TimingComplaint: IXMLTimingComplaintType_cbc read Get_TimingComplaint;
    property OrderLineReference: IXMLOrderLineReferenceType_cac read Get_OrderLineReference;
    property DespatchLineReference: IXMLLineReferenceType_cacList read Get_DespatchLineReference;
    property DocumentReference: IXMLDocumentReferenceType_cacList read Get_DocumentReference;
    property Item: IXMLItemType_cacList read Get_Item;
    property Shipment: IXMLShipmentType_cacList read Get_Shipment;
  end;

{ IXMLReceiptLineType_cacList }

  IXMLReceiptLineType_cacList = interface(IXMLNodeCollection)
    ['{A5D4146B-21A2-418E-B7E2-E31D43336053}']
    { Methods & Properties }
    function Add: IXMLReceiptLineType_cac;
    function Insert(const Index: Integer): IXMLReceiptLineType_cac;

    function Get_Item(const Index: Integer): IXMLReceiptLineType_cac;
    property Items[const Index: Integer]: IXMLReceiptLineType_cac read Get_Item; default;
  end;

{ IXMLReceivedQuantityType_cbc }

  IXMLReceivedQuantityType_cbc = interface(IXMLNode)
    ['{67FFE6A2-6C0A-4364-838B-4A10538E806D}']
  end;

{ IXMLShortQuantityType_cbc }

  IXMLShortQuantityType_cbc = interface(IXMLNode)
    ['{6F42A3FD-10A0-4615-B3BC-C825B151623A}']
  end;

{ IXMLShortageActionCodeType_cbc }

  IXMLShortageActionCodeType_cbc = interface(IXMLNode)
    ['{3F952522-02A8-4CF4-8D19-837804EBA7C4}']
  end;

{ IXMLRejectedQuantityType_cbc }

  IXMLRejectedQuantityType_cbc = interface(IXMLNode)
    ['{DF34EB54-9680-413C-B9D3-C4E3CE624132}']
  end;

{ IXMLRejectReasonCodeType_cbc }

  IXMLRejectReasonCodeType_cbc = interface(IXMLNode)
    ['{53BCC71C-E485-48D8-97F3-85E36786D0C2}']
  end;

{ IXMLRejectReasonType_cbc }

  IXMLRejectReasonType_cbc = interface(IXMLNode)
    ['{A15164DB-7645-473B-B401-9F7BDB8CEE1F}']
  end;

{ IXMLRejectReasonType_cbcList }

  IXMLRejectReasonType_cbcList = interface(IXMLNodeCollection)
    ['{726DD94E-0137-4883-BF2C-5BC0F5CED9B9}']
    { Methods & Properties }
    function Add: IXMLRejectReasonType_cbc;
    function Insert(const Index: Integer): IXMLRejectReasonType_cbc;

    function Get_Item(const Index: Integer): IXMLRejectReasonType_cbc;
    property Items[const Index: Integer]: IXMLRejectReasonType_cbc read Get_Item; default;
  end;

{ IXMLRejectActionCodeType_cbc }

  IXMLRejectActionCodeType_cbc = interface(IXMLNode)
    ['{F7E2124C-8368-422A-911F-BF5200B13147}']
  end;

{ IXMLQuantityDiscrepancyCodeType_cbc }

  IXMLQuantityDiscrepancyCodeType_cbc = interface(IXMLNode)
    ['{C7D36CFB-7A7B-4585-BF31-B85953E91A07}']
  end;

{ IXMLReceivedDateType_cbc }

  IXMLReceivedDateType_cbc = interface(IXMLNode)
    ['{BFE30A26-4BE5-4886-870E-98322A36B88C}']
  end;

{ IXMLTimingComplaintCodeType_cbc }

  IXMLTimingComplaintCodeType_cbc = interface(IXMLNode)
    ['{9820C235-9D95-40A9-AD3F-CCA1DFFFFC55}']
  end;

{ IXMLTimingComplaintType_cbc }

  IXMLTimingComplaintType_cbc = interface(IXMLNode)
    ['{88F51138-B479-4D83-8D87-1756A08D4E70}']
  end;

{ IXMLShipmentStageType_cac }

  IXMLShipmentStageType_cac = interface(IXMLNode)
    ['{3C7E77F1-9D1E-445A-9764-538C7F485841}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_TransportModeCode: IXMLTransportModeCodeType_cbc;
    function Get_TransportMeansTypeCode: IXMLTransportMeansTypeCodeType_cbc;
    function Get_TransitDirectionCode: IXMLTransitDirectionCodeType_cbc;
    function Get_PreCarriageIndicator: IXMLPreCarriageIndicatorType_cbc;
    function Get_OnCarriageIndicator: IXMLOnCarriageIndicatorType_cbc;
    function Get_EstimatedDeliveryDate: IXMLEstimatedDeliveryDateType_cbc;
    function Get_EstimatedDeliveryTime: IXMLEstimatedDeliveryTimeType_cbc;
    function Get_RequiredDeliveryDate: IXMLRequiredDeliveryDateType_cbc;
    function Get_RequiredDeliveryTime: IXMLRequiredDeliveryTimeType_cbc;
    function Get_LoadingSequenceID: IXMLLoadingSequenceIDType_cbc;
    function Get_SuccessiveSequenceID: IXMLSuccessiveSequenceIDType_cbc;
    function Get_Instructions: IXMLInstructionsType_cbcList;
    function Get_DemurrageInstructions: IXMLDemurrageInstructionsType_cbcList;
    function Get_CrewQuantity: IXMLCrewQuantityType_cbc;
    function Get_PassengerQuantity: IXMLPassengerQuantityType_cbc;
    function Get_TransitPeriod: IXMLPeriodType_cac;
    function Get_CarrierParty: IXMLPartyType_cacList;
    function Get_TransportMeans: IXMLTransportMeansType_cac;
    function Get_LoadingPortLocation: IXMLLocationType_cac;
    function Get_UnloadingPortLocation: IXMLLocationType_cac;
    function Get_TransshipPortLocation: IXMLLocationType_cac;
    function Get_LoadingTransportEvent: IXMLTransportEventType_cac;
    function Get_ExaminationTransportEvent: IXMLTransportEventType_cac;
    function Get_AvailabilityTransportEvent: IXMLTransportEventType_cac;
    function Get_ExportationTransportEvent: IXMLTransportEventType_cac;
    function Get_DischargeTransportEvent: IXMLTransportEventType_cac;
    function Get_WarehousingTransportEvent: IXMLTransportEventType_cac;
    function Get_TakeoverTransportEvent: IXMLTransportEventType_cac;
    function Get_OptionalTakeoverTransportEvent: IXMLTransportEventType_cac;
    function Get_DropoffTransportEvent: IXMLTransportEventType_cac;
    function Get_ActualPickupTransportEvent: IXMLTransportEventType_cac;
    function Get_DeliveryTransportEvent: IXMLTransportEventType_cac;
    function Get_ReceiptTransportEvent: IXMLTransportEventType_cac;
    function Get_StorageTransportEvent: IXMLTransportEventType_cac;
    function Get_AcceptanceTransportEvent: IXMLTransportEventType_cac;
    function Get_TerminalOperatorParty: IXMLPartyType_cac;
    function Get_CustomsAgentParty: IXMLPartyType_cac;
    function Get_EstimatedTransitPeriod: IXMLPeriodType_cac;
    function Get_FreightAllowanceCharge: IXMLAllowanceChargeType_cacList;
    function Get_FreightChargeLocation: IXMLLocationType_cac;
    function Get_DetentionTransportEvent: IXMLTransportEventType_cacList;
    function Get_RequestedDepartureTransportEvent: IXMLTransportEventType_cac;
    function Get_RequestedArrivalTransportEvent: IXMLTransportEventType_cac;
    function Get_RequestedWaypointTransportEvent: IXMLTransportEventType_cacList;
    function Get_PlannedDepartureTransportEvent: IXMLTransportEventType_cac;
    function Get_PlannedArrivalTransportEvent: IXMLTransportEventType_cac;
    function Get_PlannedWaypointTransportEvent: IXMLTransportEventType_cacList;
    function Get_ActualDepartureTransportEvent: IXMLTransportEventType_cac;
    function Get_ActualWaypointTransportEvent: IXMLTransportEventType_cac;
    function Get_ActualArrivalTransportEvent: IXMLTransportEventType_cac;
    function Get_TransportEvent: IXMLTransportEventType_cacList;
    function Get_EstimatedDepartureTransportEvent: IXMLTransportEventType_cac;
    function Get_EstimatedArrivalTransportEvent: IXMLTransportEventType_cac;
    function Get_PassengerPerson: IXMLPersonType_cacList;
    function Get_DriverPerson: IXMLPersonType_cacList;
    function Get_ReportingPerson: IXMLPersonType_cac;
    function Get_CrewMemberPerson: IXMLPersonType_cacList;
    function Get_SecurityOfficerPerson: IXMLPersonType_cac;
    function Get_MasterPerson: IXMLPersonType_cac;
    function Get_ShipsSurgeonPerson: IXMLPersonType_cac;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property TransportModeCode: IXMLTransportModeCodeType_cbc read Get_TransportModeCode;
    property TransportMeansTypeCode: IXMLTransportMeansTypeCodeType_cbc read Get_TransportMeansTypeCode;
    property TransitDirectionCode: IXMLTransitDirectionCodeType_cbc read Get_TransitDirectionCode;
    property PreCarriageIndicator: IXMLPreCarriageIndicatorType_cbc read Get_PreCarriageIndicator;
    property OnCarriageIndicator: IXMLOnCarriageIndicatorType_cbc read Get_OnCarriageIndicator;
    property EstimatedDeliveryDate: IXMLEstimatedDeliveryDateType_cbc read Get_EstimatedDeliveryDate;
    property EstimatedDeliveryTime: IXMLEstimatedDeliveryTimeType_cbc read Get_EstimatedDeliveryTime;
    property RequiredDeliveryDate: IXMLRequiredDeliveryDateType_cbc read Get_RequiredDeliveryDate;
    property RequiredDeliveryTime: IXMLRequiredDeliveryTimeType_cbc read Get_RequiredDeliveryTime;
    property LoadingSequenceID: IXMLLoadingSequenceIDType_cbc read Get_LoadingSequenceID;
    property SuccessiveSequenceID: IXMLSuccessiveSequenceIDType_cbc read Get_SuccessiveSequenceID;
    property Instructions: IXMLInstructionsType_cbcList read Get_Instructions;
    property DemurrageInstructions: IXMLDemurrageInstructionsType_cbcList read Get_DemurrageInstructions;
    property CrewQuantity: IXMLCrewQuantityType_cbc read Get_CrewQuantity;
    property PassengerQuantity: IXMLPassengerQuantityType_cbc read Get_PassengerQuantity;
    property TransitPeriod: IXMLPeriodType_cac read Get_TransitPeriod;
    property CarrierParty: IXMLPartyType_cacList read Get_CarrierParty;
    property TransportMeans: IXMLTransportMeansType_cac read Get_TransportMeans;
    property LoadingPortLocation: IXMLLocationType_cac read Get_LoadingPortLocation;
    property UnloadingPortLocation: IXMLLocationType_cac read Get_UnloadingPortLocation;
    property TransshipPortLocation: IXMLLocationType_cac read Get_TransshipPortLocation;
    property LoadingTransportEvent: IXMLTransportEventType_cac read Get_LoadingTransportEvent;
    property ExaminationTransportEvent: IXMLTransportEventType_cac read Get_ExaminationTransportEvent;
    property AvailabilityTransportEvent: IXMLTransportEventType_cac read Get_AvailabilityTransportEvent;
    property ExportationTransportEvent: IXMLTransportEventType_cac read Get_ExportationTransportEvent;
    property DischargeTransportEvent: IXMLTransportEventType_cac read Get_DischargeTransportEvent;
    property WarehousingTransportEvent: IXMLTransportEventType_cac read Get_WarehousingTransportEvent;
    property TakeoverTransportEvent: IXMLTransportEventType_cac read Get_TakeoverTransportEvent;
    property OptionalTakeoverTransportEvent: IXMLTransportEventType_cac read Get_OptionalTakeoverTransportEvent;
    property DropoffTransportEvent: IXMLTransportEventType_cac read Get_DropoffTransportEvent;
    property ActualPickupTransportEvent: IXMLTransportEventType_cac read Get_ActualPickupTransportEvent;
    property DeliveryTransportEvent: IXMLTransportEventType_cac read Get_DeliveryTransportEvent;
    property ReceiptTransportEvent: IXMLTransportEventType_cac read Get_ReceiptTransportEvent;
    property StorageTransportEvent: IXMLTransportEventType_cac read Get_StorageTransportEvent;
    property AcceptanceTransportEvent: IXMLTransportEventType_cac read Get_AcceptanceTransportEvent;
    property TerminalOperatorParty: IXMLPartyType_cac read Get_TerminalOperatorParty;
    property CustomsAgentParty: IXMLPartyType_cac read Get_CustomsAgentParty;
    property EstimatedTransitPeriod: IXMLPeriodType_cac read Get_EstimatedTransitPeriod;
    property FreightAllowanceCharge: IXMLAllowanceChargeType_cacList read Get_FreightAllowanceCharge;
    property FreightChargeLocation: IXMLLocationType_cac read Get_FreightChargeLocation;
    property DetentionTransportEvent: IXMLTransportEventType_cacList read Get_DetentionTransportEvent;
    property RequestedDepartureTransportEvent: IXMLTransportEventType_cac read Get_RequestedDepartureTransportEvent;
    property RequestedArrivalTransportEvent: IXMLTransportEventType_cac read Get_RequestedArrivalTransportEvent;
    property RequestedWaypointTransportEvent: IXMLTransportEventType_cacList read Get_RequestedWaypointTransportEvent;
    property PlannedDepartureTransportEvent: IXMLTransportEventType_cac read Get_PlannedDepartureTransportEvent;
    property PlannedArrivalTransportEvent: IXMLTransportEventType_cac read Get_PlannedArrivalTransportEvent;
    property PlannedWaypointTransportEvent: IXMLTransportEventType_cacList read Get_PlannedWaypointTransportEvent;
    property ActualDepartureTransportEvent: IXMLTransportEventType_cac read Get_ActualDepartureTransportEvent;
    property ActualWaypointTransportEvent: IXMLTransportEventType_cac read Get_ActualWaypointTransportEvent;
    property ActualArrivalTransportEvent: IXMLTransportEventType_cac read Get_ActualArrivalTransportEvent;
    property TransportEvent: IXMLTransportEventType_cacList read Get_TransportEvent;
    property EstimatedDepartureTransportEvent: IXMLTransportEventType_cac read Get_EstimatedDepartureTransportEvent;
    property EstimatedArrivalTransportEvent: IXMLTransportEventType_cac read Get_EstimatedArrivalTransportEvent;
    property PassengerPerson: IXMLPersonType_cacList read Get_PassengerPerson;
    property DriverPerson: IXMLPersonType_cacList read Get_DriverPerson;
    property ReportingPerson: IXMLPersonType_cac read Get_ReportingPerson;
    property CrewMemberPerson: IXMLPersonType_cacList read Get_CrewMemberPerson;
    property SecurityOfficerPerson: IXMLPersonType_cac read Get_SecurityOfficerPerson;
    property MasterPerson: IXMLPersonType_cac read Get_MasterPerson;
    property ShipsSurgeonPerson: IXMLPersonType_cac read Get_ShipsSurgeonPerson;
  end;

{ IXMLShipmentStageType_cacList }

  IXMLShipmentStageType_cacList = interface(IXMLNodeCollection)
    ['{EF4F61C1-6B4E-4617-8DB4-E054FA4E8AEB}']
    { Methods & Properties }
    function Add: IXMLShipmentStageType_cac;
    function Insert(const Index: Integer): IXMLShipmentStageType_cac;

    function Get_Item(const Index: Integer): IXMLShipmentStageType_cac;
    property Items[const Index: Integer]: IXMLShipmentStageType_cac read Get_Item; default;
  end;

{ IXMLTransportModeCodeType_cbc }

  IXMLTransportModeCodeType_cbc = interface(IXMLNode)
    ['{C9424266-0E35-46D3-96A9-3748022AFFB8}']
  end;

{ IXMLTransitDirectionCodeType_cbc }

  IXMLTransitDirectionCodeType_cbc = interface(IXMLNode)
    ['{5E2F4114-06F4-4ED3-9F61-6420F1573810}']
  end;

{ IXMLPreCarriageIndicatorType_cbc }

  IXMLPreCarriageIndicatorType_cbc = interface(IXMLNode)
    ['{07BCD6C9-A106-4AF4-BC23-FB1B03B3DAD9}']
  end;

{ IXMLOnCarriageIndicatorType_cbc }

  IXMLOnCarriageIndicatorType_cbc = interface(IXMLNode)
    ['{71E5D34E-7AF1-496E-9016-E69C85FE707B}']
  end;

{ IXMLEstimatedDeliveryDateType_cbc }

  IXMLEstimatedDeliveryDateType_cbc = interface(IXMLNode)
    ['{CEBA0CE1-1E3C-4FBF-A9EE-B520B31AD5D1}']
  end;

{ IXMLEstimatedDeliveryTimeType_cbc }

  IXMLEstimatedDeliveryTimeType_cbc = interface(IXMLNode)
    ['{1287869D-28DF-4ED0-98F3-8947B0ED17C0}']
  end;

{ IXMLRequiredDeliveryDateType_cbc }

  IXMLRequiredDeliveryDateType_cbc = interface(IXMLNode)
    ['{C3CAC9C6-0CEB-4EBB-A41B-52F46248EF38}']
  end;

{ IXMLRequiredDeliveryTimeType_cbc }

  IXMLRequiredDeliveryTimeType_cbc = interface(IXMLNode)
    ['{87C77100-2085-4B6B-B8CF-B5EA27AAA027}']
  end;

{ IXMLSuccessiveSequenceIDType_cbc }

  IXMLSuccessiveSequenceIDType_cbc = interface(IXMLNode)
    ['{7734B613-5F4A-41FA-B1FA-4F5F96AE57A2}']
  end;

{ IXMLDemurrageInstructionsType_cbc }

  IXMLDemurrageInstructionsType_cbc = interface(IXMLNode)
    ['{B76D4D6C-03FB-425D-9DB1-5429253E21B4}']
  end;

{ IXMLDemurrageInstructionsType_cbcList }

  IXMLDemurrageInstructionsType_cbcList = interface(IXMLNodeCollection)
    ['{8E1F00CA-530F-4B7E-A3B5-C73DE2DED966}']
    { Methods & Properties }
    function Add: IXMLDemurrageInstructionsType_cbc;
    function Insert(const Index: Integer): IXMLDemurrageInstructionsType_cbc;

    function Get_Item(const Index: Integer): IXMLDemurrageInstructionsType_cbc;
    property Items[const Index: Integer]: IXMLDemurrageInstructionsType_cbc read Get_Item; default;
  end;

{ IXMLCrewQuantityType_cbc }

  IXMLCrewQuantityType_cbc = interface(IXMLNode)
    ['{E81E3D81-821D-41A0-9524-4749750F875E}']
  end;

{ IXMLPassengerQuantityType_cbc }

  IXMLPassengerQuantityType_cbc = interface(IXMLNode)
    ['{6CDF6FC4-E7A1-43DC-A63C-7EFE6C862A54}']
  end;

{ IXMLEnvironmentalEmissionType_cac }

  IXMLEnvironmentalEmissionType_cac = interface(IXMLNode)
    ['{A2269630-37E3-4419-8F65-5AFA5C675019}']
    { Property Accessors }
    function Get_EnvironmentalEmissionTypeCode: IXMLEnvironmentalEmissionTypeCodeType_cbc;
    function Get_ValueMeasure: IXMLValueMeasureType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_EmissionCalculationMethod: IXMLEmissionCalculationMethodType_cacList;
    { Methods & Properties }
    property EnvironmentalEmissionTypeCode: IXMLEnvironmentalEmissionTypeCodeType_cbc read Get_EnvironmentalEmissionTypeCode;
    property ValueMeasure: IXMLValueMeasureType_cbc read Get_ValueMeasure;
    property Description: IXMLDescriptionType_cbcList read Get_Description;
    property EmissionCalculationMethod: IXMLEmissionCalculationMethodType_cacList read Get_EmissionCalculationMethod;
  end;

{ IXMLEnvironmentalEmissionType_cacList }

  IXMLEnvironmentalEmissionType_cacList = interface(IXMLNodeCollection)
    ['{E9D0FAB6-454E-48E7-9CDA-042353B48D47}']
    { Methods & Properties }
    function Add: IXMLEnvironmentalEmissionType_cac;
    function Insert(const Index: Integer): IXMLEnvironmentalEmissionType_cac;

    function Get_Item(const Index: Integer): IXMLEnvironmentalEmissionType_cac;
    property Items[const Index: Integer]: IXMLEnvironmentalEmissionType_cac read Get_Item; default;
  end;

{ IXMLEnvironmentalEmissionTypeCodeType_cbc }

  IXMLEnvironmentalEmissionTypeCodeType_cbc = interface(IXMLNode)
    ['{EE83CC69-F1B8-48C0-BAAF-AEB659233E78}']
  end;

{ IXMLValueMeasureType_cbc }

  IXMLValueMeasureType_cbc = interface(IXMLNode)
    ['{AC59B2F4-12E8-4092-8EB7-61CE2707BAD0}']
  end;

{ IXMLEmissionCalculationMethodType_cac }

  IXMLEmissionCalculationMethodType_cac = interface(IXMLNode)
    ['{0E65DEA7-E060-42D7-A937-89F6323D4CBF}']
    { Property Accessors }
    function Get_CalculationMethodCode: IXMLCalculationMethodCodeType_cbc;
    function Get_FullnessIndicationCode: IXMLFullnessIndicationCodeType_cbc;
    function Get_MeasurementFromLocation: IXMLLocationType_cac;
    function Get_MeasurementToLocation: IXMLLocationType_cac;
    { Methods & Properties }
    property CalculationMethodCode: IXMLCalculationMethodCodeType_cbc read Get_CalculationMethodCode;
    property FullnessIndicationCode: IXMLFullnessIndicationCodeType_cbc read Get_FullnessIndicationCode;
    property MeasurementFromLocation: IXMLLocationType_cac read Get_MeasurementFromLocation;
    property MeasurementToLocation: IXMLLocationType_cac read Get_MeasurementToLocation;
  end;

{ IXMLEmissionCalculationMethodType_cacList }

  IXMLEmissionCalculationMethodType_cacList = interface(IXMLNodeCollection)
    ['{A6B5BCC8-1EE6-431D-AE91-5EFBB9D82780}']
    { Methods & Properties }
    function Add: IXMLEmissionCalculationMethodType_cac;
    function Insert(const Index: Integer): IXMLEmissionCalculationMethodType_cac;

    function Get_Item(const Index: Integer): IXMLEmissionCalculationMethodType_cac;
    property Items[const Index: Integer]: IXMLEmissionCalculationMethodType_cac read Get_Item; default;
  end;

{ IXMLCalculationMethodCodeType_cbc }

  IXMLCalculationMethodCodeType_cbc = interface(IXMLNode)
    ['{6E17910F-AF8E-4FAC-AAB6-CDBFF6B7923A}']
  end;

{ IXMLServiceFrequencyType_cac }

  IXMLServiceFrequencyType_cac = interface(IXMLNode)
    ['{0D13B606-A932-4115-99A8-C213E979ADE0}']
    { Property Accessors }
    function Get_WeekDayCode: IXMLWeekDayCodeType_cbc;
    { Methods & Properties }
    property WeekDayCode: IXMLWeekDayCodeType_cbc read Get_WeekDayCode;
  end;

{ IXMLServiceFrequencyType_cacList }

  IXMLServiceFrequencyType_cacList = interface(IXMLNodeCollection)
    ['{088A223B-3241-403C-A7BE-A9CDB6414545}']
    { Methods & Properties }
    function Add: IXMLServiceFrequencyType_cac;
    function Insert(const Index: Integer): IXMLServiceFrequencyType_cac;

    function Get_Item(const Index: Integer): IXMLServiceFrequencyType_cac;
    property Items[const Index: Integer]: IXMLServiceFrequencyType_cac read Get_Item; default;
  end;

{ IXMLWeekDayCodeType_cbc }

  IXMLWeekDayCodeType_cbc = interface(IXMLNode)
    ['{90C902B9-603C-4236-B2A7-8618BA583303}']
  end;

{ IXMLPaymentType_cac }

  IXMLPaymentType_cac = interface(IXMLNode)
    ['{71590688-83E3-4689-9CAC-D8A9FF2CBA24}']
    { Property Accessors }
    function Get_ID: IXMLIDType_cbc;
    function Get_PaidAmount: IXMLPaidAmountType_cbc;
    function Get_ReceivedDate: IXMLReceivedDateType_cbc;
    function Get_PaidDate: IXMLPaidDateType_cbc;
    function Get_PaidTime: IXMLPaidTimeType_cbc;
    function Get_InstructionID: IXMLInstructionIDType_cbc;
    { Methods & Properties }
    property ID: IXMLIDType_cbc read Get_ID;
    property PaidAmount: IXMLPaidAmountType_cbc read Get_PaidAmount;
    property ReceivedDate: IXMLReceivedDateType_cbc read Get_ReceivedDate;
    property PaidDate: IXMLPaidDateType_cbc read Get_PaidDate;
    property PaidTime: IXMLPaidTimeType_cbc read Get_PaidTime;
    property InstructionID: IXMLInstructionIDType_cbc read Get_InstructionID;
  end;

{ IXMLPaymentType_cacList }

  IXMLPaymentType_cacList = interface(IXMLNodeCollection)
    ['{D8B86830-9AB2-4728-BDC3-2B99419A85A0}']
    { Methods & Properties }
    function Add: IXMLPaymentType_cac;
    function Insert(const Index: Integer): IXMLPaymentType_cac;

    function Get_Item(const Index: Integer): IXMLPaymentType_cac;
    property Items[const Index: Integer]: IXMLPaymentType_cac read Get_Item; default;
  end;

{ IXMLPaidAmountType_cbc }

  IXMLPaidAmountType_cbc = interface(IXMLNode)
    ['{586539D6-0D16-403B-BEAD-2CBE8D12D784}']
  end;

{ IXMLPaidDateType_cbc }

  IXMLPaidDateType_cbc = interface(IXMLNode)
    ['{7E060B35-C9B4-490A-BD9D-916433F870CA}']
  end;

{ IXMLPaidTimeType_cbc }

  IXMLPaidTimeType_cbc = interface(IXMLNode)
    ['{DD7B835F-6162-4A9F-A6E4-987AEC5F6CA7}']
  end;

{ IXMLMonetaryTotalType_cac }

  IXMLMonetaryTotalType_cac = interface(IXMLNode)
    ['{17169F87-FB79-481F-8EC0-4B1CD879A4AD}']
    { Property Accessors }
    function Get_LineExtensionAmount: IXMLLineExtensionAmountType_cbc;
    function Get_TaxExclusiveAmount: IXMLTaxExclusiveAmountType_cbc;
    function Get_TaxInclusiveAmount: IXMLTaxInclusiveAmountType_cbc;
    function Get_AllowanceTotalAmount: IXMLAllowanceTotalAmountType_cbc;
    function Get_ChargeTotalAmount: IXMLChargeTotalAmountType_cbc;
    function Get_PrepaidAmount: IXMLPrepaidAmountType_cbc;
    function Get_PayableRoundingAmount: IXMLPayableRoundingAmountType_cbc;
    function Get_PayableAmount: IXMLPayableAmountType_cbc;
    function Get_PayableAlternativeAmount: IXMLPayableAlternativeAmountType_cbc;
    { Methods & Properties }
    property LineExtensionAmount: IXMLLineExtensionAmountType_cbc read Get_LineExtensionAmount;
    property TaxExclusiveAmount: IXMLTaxExclusiveAmountType_cbc read Get_TaxExclusiveAmount;
    property TaxInclusiveAmount: IXMLTaxInclusiveAmountType_cbc read Get_TaxInclusiveAmount;
    property AllowanceTotalAmount: IXMLAllowanceTotalAmountType_cbc read Get_AllowanceTotalAmount;
    property ChargeTotalAmount: IXMLChargeTotalAmountType_cbc read Get_ChargeTotalAmount;
    property PrepaidAmount: IXMLPrepaidAmountType_cbc read Get_PrepaidAmount;
    property PayableRoundingAmount: IXMLPayableRoundingAmountType_cbc read Get_PayableRoundingAmount;
    property PayableAmount: IXMLPayableAmountType_cbc read Get_PayableAmount;
    property PayableAlternativeAmount: IXMLPayableAlternativeAmountType_cbc read Get_PayableAlternativeAmount;
  end;

{ IXMLTaxExclusiveAmountType_cbc }

  IXMLTaxExclusiveAmountType_cbc = interface(IXMLNode)
    ['{BDECD649-6EEB-4BE9-81F4-F285156B2145}']
  end;

{ IXMLTaxInclusiveAmountType_cbc }

  IXMLTaxInclusiveAmountType_cbc = interface(IXMLNode)
    ['{6C0D73E1-9344-4BD4-AD9E-70CA9B1E5C86}']
  end;

{ IXMLAllowanceTotalAmountType_cbc }

  IXMLAllowanceTotalAmountType_cbc = interface(IXMLNode)
    ['{D81CD406-EC42-453B-92C5-B8204FD94590}']
  end;

{ IXMLChargeTotalAmountType_cbc }

  IXMLChargeTotalAmountType_cbc = interface(IXMLNode)
    ['{140A9579-C8FB-4E05-9593-96AA2C2081D7}']
  end;

{ IXMLPrepaidAmountType_cbc }

  IXMLPrepaidAmountType_cbc = interface(IXMLNode)
    ['{D4BAAAF3-B310-445B-B06C-202161FB84AA}']
  end;

{ IXMLPayableRoundingAmountType_cbc }

  IXMLPayableRoundingAmountType_cbc = interface(IXMLNode)
    ['{D20EFBC8-FB58-4B0F-9978-8F5E69AF83F4}']
  end;

{ IXMLPayableAmountType_cbc }

  IXMLPayableAmountType_cbc = interface(IXMLNode)
    ['{41A8A5A0-2E3A-47AE-BB8A-72683AAB85D8}']
  end;

{ IXMLPayableAlternativeAmountType_cbc }

  IXMLPayableAlternativeAmountType_cbc = interface(IXMLNode)
    ['{7A25D31B-EA49-402C-8F63-491C9CCB4AEE}']
  end;

{ Forward Decls }

  TXMLInvoiceType = class;
  TXMLUBLExtensionsType_ext = class;
  TXMLUBLExtensionType_ext = class;
  TXMLIDType_cbc = class;
  TXMLNameType_cbc = class;
  TXMLExtensionAgencyIDType_ext = class;
  TXMLExtensionAgencyNameType_ext = class;
  TXMLExtensionVersionIDType_ext = class;
  TXMLExtensionAgencyURIType_ext = class;
  TXMLExtensionURIType_ext = class;
  TXMLExtensionReasonCodeType_ext = class;
  TXMLExtensionReasonType_ext = class;
  TXMLExtensionContentType = class;
  TXMLUBLVersionIDType_cbc = class;
  TXMLCustomizationIDType_cbc = class;
  TXMLProfileIDType_cbc = class;
  TXMLProfileExecutionIDType_cbc = class;
  TXMLCopyIndicatorType_cbc = class;
  TXMLUUIDType_cbc = class;
  TXMLIssueDateType_cbc = class;
  TXMLIssueTimeType_cbc = class;
  TXMLDueDateType_cbc = class;
  TXMLInvoiceTypeCodeType_cbc = class;
  TXMLNoteType_cbc = class;
  TXMLNoteType_cbcList = class;
  TXMLTaxPointDateType_cbc = class;
  TXMLDocumentCurrencyCodeType_cbc = class;
  TXMLTaxCurrencyCodeType_cbc = class;
  TXMLPricingCurrencyCodeType_cbc = class;
  TXMLPaymentCurrencyCodeType_cbc = class;
  TXMLPaymentAlternativeCurrencyCodeType_cbc = class;
  TXMLAccountingCostCodeType_cbc = class;
  TXMLAccountingCostType_cbc = class;
  TXMLLineCountNumericType_cbc = class;
  TXMLBuyerReferenceType_cbc = class;
  TXMLPeriodType_cac = class;
  TXMLPeriodType_cacList = class;
  TXMLStartDateType_cbc = class;
  TXMLStartTimeType_cbc = class;
  TXMLEndDateType_cbc = class;
  TXMLEndTimeType_cbc = class;
  TXMLDurationMeasureType_cbc = class;
  TXMLDescriptionCodeType_cbc = class;
  TXMLDescriptionCodeType_cbcList = class;
  TXMLDescriptionType_cbc = class;
  TXMLDescriptionType_cbcList = class;
  TXMLOrderReferenceType_cac = class;
  TXMLSalesOrderIDType_cbc = class;
  TXMLCustomerReferenceType_cbc = class;
  TXMLOrderTypeCodeType_cbc = class;
  TXMLDocumentReferenceType_cac = class;
  TXMLDocumentReferenceType_cacList = class;
  TXMLDocumentTypeCodeType_cbc = class;
  TXMLDocumentTypeType_cbc = class;
  TXMLXPathType_cbc = class;
  TXMLXPathType_cbcList = class;
  TXMLLanguageIDType_cbc = class;
  TXMLLocaleCodeType_cbc = class;
  TXMLVersionIDType_cbc = class;
  TXMLDocumentStatusCodeType_cbc = class;
  TXMLDocumentDescriptionType_cbc = class;
  TXMLDocumentDescriptionType_cbcList = class;
  TXMLAttachmentType_cac = class;
  TXMLEmbeddedDocumentBinaryObjectType_cbc = class;
  TXMLExternalReferenceType_cac = class;
  TXMLURIType_cbc = class;
  TXMLDocumentHashType_cbc = class;
  TXMLHashAlgorithmMethodType_cbc = class;
  TXMLExpiryDateType_cbc = class;
  TXMLExpiryTimeType_cbc = class;
  TXMLMimeCodeType_cbc = class;
  TXMLFormatCodeType_cbc = class;
  TXMLEncodingCodeType_cbc = class;
  TXMLCharacterSetCodeType_cbc = class;
  TXMLFileNameType_cbc = class;
  TXMLPartyType_cac = class;
  TXMLPartyType_cacList = class;
  TXMLMarkCareIndicatorType_cbc = class;
  TXMLMarkAttentionIndicatorType_cbc = class;
  TXMLWebsiteURIType_cbc = class;
  TXMLLogoReferenceIDType_cbc = class;
  TXMLEndpointIDType_cbc = class;
  TXMLIndustryClassificationCodeType_cbc = class;
  TXMLPartyIdentificationType_cac = class;
  TXMLPartyIdentificationType_cacList = class;
  TXMLPartyNameType_cac = class;
  TXMLPartyNameType_cacList = class;
  TXMLLanguageType_cac = class;
  TXMLAddressType_cac = class;
  TXMLAddressType_cacList = class;
  TXMLAddressTypeCodeType_cbc = class;
  TXMLAddressFormatCodeType_cbc = class;
  TXMLPostboxType_cbc = class;
  TXMLFloorType_cbc = class;
  TXMLRoomType_cbc = class;
  TXMLStreetNameType_cbc = class;
  TXMLAdditionalStreetNameType_cbc = class;
  TXMLBlockNameType_cbc = class;
  TXMLBuildingNameType_cbc = class;
  TXMLBuildingNumberType_cbc = class;
  TXMLInhouseMailType_cbc = class;
  TXMLDepartmentType_cbc = class;
  TXMLMarkAttentionType_cbc = class;
  TXMLMarkCareType_cbc = class;
  TXMLPlotIdentificationType_cbc = class;
  TXMLCitySubdivisionNameType_cbc = class;
  TXMLCityNameType_cbc = class;
  TXMLPostalZoneType_cbc = class;
  TXMLCountrySubentityType_cbc = class;
  TXMLCountrySubentityCodeType_cbc = class;
  TXMLRegionType_cbc = class;
  TXMLDistrictType_cbc = class;
  TXMLTimezoneOffsetType_cbc = class;
  TXMLAddressLineType_cac = class;
  TXMLAddressLineType_cacList = class;
  TXMLLineType_cbc = class;
  TXMLCountryType_cac = class;
  TXMLCountryType_cacList = class;
  TXMLIdentificationCodeType_cbc = class;
  TXMLLocationCoordinateType_cac = class;
  TXMLLocationCoordinateType_cacList = class;
  TXMLCoordinateSystemCodeType_cbc = class;
  TXMLLatitudeDegreesMeasureType_cbc = class;
  TXMLLatitudeMinutesMeasureType_cbc = class;
  TXMLLatitudeDirectionCodeType_cbc = class;
  TXMLLongitudeDegreesMeasureType_cbc = class;
  TXMLLongitudeMinutesMeasureType_cbc = class;
  TXMLLongitudeDirectionCodeType_cbc = class;
  TXMLAltitudeMeasureType_cbc = class;
  TXMLLocationType_cac = class;
  TXMLLocationType_cacList = class;
  TXMLConditionsType_cbc = class;
  TXMLConditionsType_cbcList = class;
  TXMLLocationTypeCodeType_cbc = class;
  TXMLInformationURIType_cbc = class;
  TXMLPartyTaxSchemeType_cac = class;
  TXMLPartyTaxSchemeType_cacList = class;
  TXMLRegistrationNameType_cbc = class;
  TXMLCompanyIDType_cbc = class;
  TXMLTaxLevelCodeType_cbc = class;
  TXMLExemptionReasonCodeType_cbc = class;
  TXMLExemptionReasonType_cbc = class;
  TXMLExemptionReasonType_cbcList = class;
  TXMLTaxSchemeType_cac = class;
  TXMLTaxTypeCodeType_cbc = class;
  TXMLCurrencyCodeType_cbc = class;
  TXMLPartyLegalEntityType_cac = class;
  TXMLPartyLegalEntityType_cacList = class;
  TXMLRegistrationDateType_cbc = class;
  TXMLRegistrationExpirationDateType_cbc = class;
  TXMLCompanyLegalFormCodeType_cbc = class;
  TXMLCompanyLegalFormType_cbc = class;
  TXMLSoleProprietorshipIndicatorType_cbc = class;
  TXMLCompanyLiquidationStatusCodeType_cbc = class;
  TXMLCorporateStockAmountType_cbc = class;
  TXMLFullyPaidSharesIndicatorType_cbc = class;
  TXMLCorporateRegistrationSchemeType_cac = class;
  TXMLCorporateRegistrationTypeCodeType_cbc = class;
  TXMLShareholderPartyType_cac = class;
  TXMLShareholderPartyType_cacList = class;
  TXMLPartecipationPercentType_cbc = class;
  TXMLContactType_cac = class;
  TXMLContactType_cacList = class;
  TXMLTelephoneType_cbc = class;
  TXMLTelefaxType_cbc = class;
  TXMLElectronicMailType_cbc = class;
  TXMLCommunicationType_cac = class;
  TXMLCommunicationType_cacList = class;
  TXMLChannelCodeType_cbc = class;
  TXMLChannelType_cbc = class;
  TXMLValueType_cbc = class;
  TXMLPersonType_cac = class;
  TXMLPersonType_cacList = class;
  TXMLFirstNameType_cbc = class;
  TXMLFamilyNameType_cbc = class;
  TXMLTitleType_cbc = class;
  TXMLMiddleNameType_cbc = class;
  TXMLOtherNameType_cbc = class;
  TXMLNameSuffixType_cbc = class;
  TXMLJobTitleType_cbc = class;
  TXMLNationalityIDType_cbc = class;
  TXMLGenderCodeType_cbc = class;
  TXMLBirthDateType_cbc = class;
  TXMLBirthplaceNameType_cbc = class;
  TXMLOrganizationDepartmentType_cbc = class;
  TXMLFinancialAccountType_cac = class;
  TXMLAliasNameType_cbc = class;
  TXMLAccountTypeCodeType_cbc = class;
  TXMLAccountFormatCodeType_cbc = class;
  TXMLPaymentNoteType_cbc = class;
  TXMLPaymentNoteType_cbcList = class;
  TXMLBranchType_cac = class;
  TXMLFinancialInstitutionType_cac = class;
  TXMLServiceProviderPartyType_cac = class;
  TXMLServiceProviderPartyType_cacList = class;
  TXMLServiceTypeCodeType_cbc = class;
  TXMLServiceTypeType_cbc = class;
  TXMLServiceTypeType_cbcList = class;
  TXMLPowerOfAttorneyType_cac = class;
  TXMLPowerOfAttorneyType_cacList = class;
  TXMLResultOfVerificationType_cac = class;
  TXMLValidatorIDType_cbc = class;
  TXMLValidationResultCodeType_cbc = class;
  TXMLValidationDateType_cbc = class;
  TXMLValidationTimeType_cbc = class;
  TXMLValidateProcessType_cbc = class;
  TXMLValidateToolType_cbc = class;
  TXMLValidateToolVersionType_cbc = class;
  TXMLBillingReferenceType_cac = class;
  TXMLBillingReferenceType_cacList = class;
  TXMLBillingReferenceLineType_cac = class;
  TXMLBillingReferenceLineType_cacList = class;
  TXMLAmountType_cbc = class;
  TXMLAllowanceChargeType_cac = class;
  TXMLAllowanceChargeType_cacList = class;
  TXMLChargeIndicatorType_cbc = class;
  TXMLAllowanceChargeReasonCodeType_cbc = class;
  TXMLAllowanceChargeReasonType_cbc = class;
  TXMLAllowanceChargeReasonType_cbcList = class;
  TXMLMultiplierFactorNumericType_cbc = class;
  TXMLPrepaidIndicatorType_cbc = class;
  TXMLSequenceNumericType_cbc = class;
  TXMLBaseAmountType_cbc = class;
  TXMLPerUnitAmountType_cbc = class;
  TXMLTaxCategoryType_cac = class;
  TXMLTaxCategoryType_cacList = class;
  TXMLPercentType_cbc = class;
  TXMLBaseUnitMeasureType_cbc = class;
  TXMLTaxExemptionReasonCodeType_cbc = class;
  TXMLTaxExemptionReasonType_cbc = class;
  TXMLTaxExemptionReasonType_cbcList = class;
  TXMLTierRangeType_cbc = class;
  TXMLTierRatePercentType_cbc = class;
  TXMLTaxTotalType_cac = class;
  TXMLTaxTotalType_cacList = class;
  TXMLTaxAmountType_cbc = class;
  TXMLRoundingAmountType_cbc = class;
  TXMLTaxEvidenceIndicatorType_cbc = class;
  TXMLTaxIncludedIndicatorType_cbc = class;
  TXMLTaxSubtotalType_cac = class;
  TXMLTaxSubtotalType_cacList = class;
  TXMLTaxableAmountType_cbc = class;
  TXMLCalculationSequenceNumericType_cbc = class;
  TXMLTransactionCurrencyTaxAmountType_cbc = class;
  TXMLPaymentMeansType_cac = class;
  TXMLPaymentMeansType_cacList = class;
  TXMLPaymentMeansCodeType_cbc = class;
  TXMLPaymentDueDateType_cbc = class;
  TXMLPaymentChannelCodeType_cbc = class;
  TXMLInstructionIDType_cbc = class;
  TXMLInstructionNoteType_cbc = class;
  TXMLInstructionNoteType_cbcList = class;
  TXMLPaymentIDType_cbc = class;
  TXMLPaymentIDType_cbcList = class;
  TXMLCardAccountType_cac = class;
  TXMLPrimaryAccountNumberIDType_cbc = class;
  TXMLNetworkIDType_cbc = class;
  TXMLCardTypeCodeType_cbc = class;
  TXMLValidityStartDateType_cbc = class;
  TXMLIssuerIDType_cbc = class;
  TXMLIssueNumberIDType_cbc = class;
  TXMLCV2IDType_cbc = class;
  TXMLCardChipCodeType_cbc = class;
  TXMLChipApplicationIDType_cbc = class;
  TXMLHolderNameType_cbc = class;
  TXMLCreditAccountType_cac = class;
  TXMLAccountIDType_cbc = class;
  TXMLPaymentMandateType_cac = class;
  TXMLMandateTypeCodeType_cbc = class;
  TXMLMaximumPaymentInstructionsNumericType_cbc = class;
  TXMLMaximumPaidAmountType_cbc = class;
  TXMLSignatureIDType_cbc = class;
  TXMLClauseType_cac = class;
  TXMLClauseType_cacList = class;
  TXMLContentType_cbc = class;
  TXMLContentType_cbcList = class;
  TXMLTradeFinancingType_cac = class;
  TXMLFinancingInstrumentCodeType_cbc = class;
  TXMLProjectReferenceType_cac = class;
  TXMLProjectReferenceType_cacList = class;
  TXMLWorkPhaseReferenceType_cac = class;
  TXMLWorkPhaseReferenceType_cacList = class;
  TXMLWorkPhaseCodeType_cbc = class;
  TXMLWorkPhaseType_cbc = class;
  TXMLWorkPhaseType_cbcList = class;
  TXMLProgressPercentType_cbc = class;
  TXMLSignatureType_cac = class;
  TXMLSignatureType_cacList = class;
  TXMLCanonicalizationMethodType_cbc = class;
  TXMLSignatureMethodType_cbc = class;
  TXMLSupplierPartyType_cac = class;
  TXMLCustomerAssignedAccountIDType_cbc = class;
  TXMLAdditionalAccountIDType_cbc = class;
  TXMLAdditionalAccountIDType_cbcList = class;
  TXMLDataSendingCapabilityType_cbc = class;
  TXMLCustomerPartyType_cac = class;
  TXMLSupplierAssignedAccountIDType_cbc = class;
  TXMLDeliveryType_cac = class;
  TXMLDeliveryType_cacList = class;
  TXMLQuantityType_cbc = class;
  TXMLMinimumQuantityType_cbc = class;
  TXMLMaximumQuantityType_cbc = class;
  TXMLActualDeliveryDateType_cbc = class;
  TXMLActualDeliveryTimeType_cbc = class;
  TXMLLatestDeliveryDateType_cbc = class;
  TXMLLatestDeliveryTimeType_cbc = class;
  TXMLReleaseIDType_cbc = class;
  TXMLTrackingIDType_cbc = class;
  TXMLDespatchType_cac = class;
  TXMLRequestedDespatchDateType_cbc = class;
  TXMLRequestedDespatchTimeType_cbc = class;
  TXMLEstimatedDespatchDateType_cbc = class;
  TXMLEstimatedDespatchTimeType_cbc = class;
  TXMLActualDespatchDateType_cbc = class;
  TXMLActualDespatchTimeType_cbc = class;
  TXMLGuaranteedDespatchDateType_cbc = class;
  TXMLGuaranteedDespatchTimeType_cbc = class;
  TXMLInstructionsType_cbc = class;
  TXMLInstructionsType_cbcList = class;
  TXMLDeliveryTermsType_cac = class;
  TXMLDeliveryTermsType_cacList = class;
  TXMLSpecialTermsType_cbc = class;
  TXMLSpecialTermsType_cbcList = class;
  TXMLLossRiskResponsibilityCodeType_cbc = class;
  TXMLLossRiskType_cbc = class;
  TXMLLossRiskType_cbcList = class;
  TXMLDeliveryUnitType_cac = class;
  TXMLDeliveryUnitType_cacList = class;
  TXMLBatchQuantityType_cbc = class;
  TXMLConsumerUnitQuantityType_cbc = class;
  TXMLHazardousRiskIndicatorType_cbc = class;
  TXMLShipmentType_cac = class;
  TXMLShipmentType_cacList = class;
  TXMLShippingPriorityLevelCodeType_cbc = class;
  TXMLHandlingCodeType_cbc = class;
  TXMLHandlingInstructionsType_cbc = class;
  TXMLHandlingInstructionsType_cbcList = class;
  TXMLInformationType_cbc = class;
  TXMLInformationType_cbcList = class;
  TXMLGrossWeightMeasureType_cbc = class;
  TXMLNetWeightMeasureType_cbc = class;
  TXMLNetNetWeightMeasureType_cbc = class;
  TXMLGrossVolumeMeasureType_cbc = class;
  TXMLNetVolumeMeasureType_cbc = class;
  TXMLTotalGoodsItemQuantityType_cbc = class;
  TXMLTotalTransportHandlingUnitQuantityType_cbc = class;
  TXMLInsuranceValueAmountType_cbc = class;
  TXMLDeclaredCustomsValueAmountType_cbc = class;
  TXMLDeclaredForCarriageValueAmountType_cbc = class;
  TXMLDeclaredStatisticsValueAmountType_cbc = class;
  TXMLFreeOnBoardValueAmountType_cbc = class;
  TXMLSpecialInstructionsType_cbc = class;
  TXMLSpecialInstructionsType_cbcList = class;
  TXMLDeliveryInstructionsType_cbc = class;
  TXMLDeliveryInstructionsType_cbcList = class;
  TXMLSplitConsignmentIndicatorType_cbc = class;
  TXMLConsignmentQuantityType_cbc = class;
  TXMLConsignmentType_cac = class;
  TXMLConsignmentType_cacList = class;
  TXMLCarrierAssignedIDType_cbc = class;
  TXMLConsigneeAssignedIDType_cbc = class;
  TXMLConsignorAssignedIDType_cbc = class;
  TXMLFreightForwarderAssignedIDType_cbc = class;
  TXMLBrokerAssignedIDType_cbc = class;
  TXMLContractedCarrierAssignedIDType_cbc = class;
  TXMLPerformingCarrierAssignedIDType_cbc = class;
  TXMLSummaryDescriptionType_cbc = class;
  TXMLSummaryDescriptionType_cbcList = class;
  TXMLTotalInvoiceAmountType_cbc = class;
  TXMLTariffDescriptionType_cbc = class;
  TXMLTariffDescriptionType_cbcList = class;
  TXMLTariffCodeType_cbc = class;
  TXMLInsurancePremiumAmountType_cbc = class;
  TXMLChargeableWeightMeasureType_cbc = class;
  TXMLLoadingLengthMeasureType_cbc = class;
  TXMLRemarksType_cbc = class;
  TXMLRemarksType_cbcList = class;
  TXMLAnimalFoodIndicatorType_cbc = class;
  TXMLHumanFoodIndicatorType_cbc = class;
  TXMLLivestockIndicatorType_cbc = class;
  TXMLBulkCargoIndicatorType_cbc = class;
  TXMLContainerizedIndicatorType_cbc = class;
  TXMLGeneralCargoIndicatorType_cbc = class;
  TXMLSpecialSecurityIndicatorType_cbc = class;
  TXMLThirdPartyPayerIndicatorType_cbc = class;
  TXMLCarrierServiceInstructionsType_cbc = class;
  TXMLCarrierServiceInstructionsType_cbcList = class;
  TXMLCustomsClearanceServiceInstructionsType_cbc = class;
  TXMLCustomsClearanceServiceInstructionsType_cbcList = class;
  TXMLForwarderServiceInstructionsType_cbc = class;
  TXMLForwarderServiceInstructionsType_cbcList = class;
  TXMLSpecialServiceInstructionsType_cbc = class;
  TXMLSpecialServiceInstructionsType_cbcList = class;
  TXMLSequenceIDType_cbc = class;
  TXMLConsolidatableIndicatorType_cbc = class;
  TXMLHaulageInstructionsType_cbc = class;
  TXMLHaulageInstructionsType_cbcList = class;
  TXMLLoadingSequenceIDType_cbc = class;
  TXMLChildConsignmentQuantityType_cbc = class;
  TXMLTotalPackagesQuantityType_cbc = class;
  TXMLCustomsDeclarationType_cac = class;
  TXMLCustomsDeclarationType_cacList = class;
  TXMLTransportEventType_cac = class;
  TXMLTransportEventType_cacList = class;
  TXMLIdentificationIDType_cbc = class;
  TXMLOccurrenceDateType_cbc = class;
  TXMLOccurrenceTimeType_cbc = class;
  TXMLTransportEventTypeCodeType_cbc = class;
  TXMLCompletionIndicatorType_cbc = class;
  TXMLStatusType_cac = class;
  TXMLStatusType_cacList = class;
  TXMLConditionCodeType_cbc = class;
  TXMLReferenceDateType_cbc = class;
  TXMLReferenceTimeType_cbc = class;
  TXMLStatusReasonCodeType_cbc = class;
  TXMLStatusReasonType_cbc = class;
  TXMLStatusReasonType_cbcList = class;
  TXMLTextType_cbc = class;
  TXMLTextType_cbcList = class;
  TXMLIndicationIndicatorType_cbc = class;
  TXMLReliabilityPercentType_cbc = class;
  TXMLConditionType_cac = class;
  TXMLConditionType_cacList = class;
  TXMLAttributeIDType_cbc = class;
  TXMLMeasureType_cbc = class;
  TXMLMinimumMeasureType_cbc = class;
  TXMLMaximumMeasureType_cbc = class;
  TXMLContractType_cac = class;
  TXMLNominationDateType_cbc = class;
  TXMLNominationTimeType_cbc = class;
  TXMLContractTypeCodeType_cbc = class;
  TXMLContractTypeType_cbc = class;
  TXMLTransportationServiceType_cac = class;
  TXMLTransportServiceCodeType_cbc = class;
  TXMLTariffClassCodeType_cbc = class;
  TXMLPriorityType_cbc = class;
  TXMLFreightRateClassCodeType_cbc = class;
  TXMLTransportationServiceDescriptionType_cbc = class;
  TXMLTransportationServiceDescriptionType_cbcList = class;
  TXMLTransportationServiceDetailsURIType_cbc = class;
  TXMLTransportEquipmentType_cac = class;
  TXMLTransportEquipmentType_cacList = class;
  TXMLReferencedConsignmentIDType_cbc = class;
  TXMLReferencedConsignmentIDType_cbcList = class;
  TXMLTransportEquipmentTypeCodeType_cbc = class;
  TXMLProviderTypeCodeType_cbc = class;
  TXMLOwnerTypeCodeType_cbc = class;
  TXMLSizeTypeCodeType_cbc = class;
  TXMLDispositionCodeType_cbc = class;
  TXMLFullnessIndicationCodeType_cbc = class;
  TXMLRefrigerationOnIndicatorType_cbc = class;
  TXMLReturnabilityIndicatorType_cbc = class;
  TXMLLegalStatusIndicatorType_cbc = class;
  TXMLAirFlowPercentType_cbc = class;
  TXMLHumidityPercentType_cbc = class;
  TXMLAnimalFoodApprovedIndicatorType_cbc = class;
  TXMLHumanFoodApprovedIndicatorType_cbc = class;
  TXMLDangerousGoodsApprovedIndicatorType_cbc = class;
  TXMLRefrigeratedIndicatorType_cbc = class;
  TXMLCharacteristicsType_cbc = class;
  TXMLDamageRemarksType_cbc = class;
  TXMLDamageRemarksType_cbcList = class;
  TXMLSpecialTransportRequirementsType_cbc = class;
  TXMLSpecialTransportRequirementsType_cbcList = class;
  TXMLTareWeightMeasureType_cbc = class;
  TXMLTrackingDeviceCodeType_cbc = class;
  TXMLPowerIndicatorType_cbc = class;
  TXMLTraceIDType_cbc = class;
  TXMLDimensionType_cac = class;
  TXMLDimensionType_cacList = class;
  TXMLTransportEquipmentSealType_cac = class;
  TXMLTransportEquipmentSealType_cacList = class;
  TXMLSealIssuerTypeCodeType_cbc = class;
  TXMLConditionType_cbc = class;
  TXMLSealStatusCodeType_cbc = class;
  TXMLSealingPartyTypeType_cbc = class;
  TXMLTemperatureType_cac = class;
  TXMLTemperatureType_cacList = class;
  TXMLTransportMeansType_cac = class;
  TXMLTransportMeansType_cacList = class;
  TXMLJourneyIDType_cbc = class;
  TXMLRegistrationNationalityIDType_cbc = class;
  TXMLRegistrationNationalityType_cbc = class;
  TXMLRegistrationNationalityType_cbcList = class;
  TXMLDirectionCodeType_cbc = class;
  TXMLTransportMeansTypeCodeType_cbc = class;
  TXMLTradeServiceCodeType_cbc = class;
  TXMLStowageType_cac = class;
  TXMLLocationIDType_cbc = class;
  TXMLLocationType_cbc = class;
  TXMLLocationType_cbcList = class;
  TXMLAirTransportType_cac = class;
  TXMLAircraftIDType_cbc = class;
  TXMLRoadTransportType_cac = class;
  TXMLLicensePlateIDType_cbc = class;
  TXMLRailTransportType_cac = class;
  TXMLTrainIDType_cbc = class;
  TXMLRailCarIDType_cbc = class;
  TXMLMaritimeTransportType_cac = class;
  TXMLVesselIDType_cbc = class;
  TXMLVesselNameType_cbc = class;
  TXMLRadioCallSignIDType_cbc = class;
  TXMLShipsRequirementsType_cbc = class;
  TXMLShipsRequirementsType_cbcList = class;
  TXMLGrossTonnageMeasureType_cbc = class;
  TXMLNetTonnageMeasureType_cbc = class;
  TXMLTradingTermsType_cac = class;
  TXMLTradingTermsType_cacList = class;
  TXMLReferenceType_cbc = class;
  TXMLHazardousGoodsTransitType_cac = class;
  TXMLHazardousGoodsTransitType_cacList = class;
  TXMLTransportEmergencyCardCodeType_cbc = class;
  TXMLPackingCriteriaCodeType_cbc = class;
  TXMLHazardousRegulationCodeType_cbc = class;
  TXMLInhalationToxicityZoneCodeType_cbc = class;
  TXMLTransportAuthorizationCodeType_cbc = class;
  TXMLTransportHandlingUnitType_cac = class;
  TXMLTransportHandlingUnitType_cacList = class;
  TXMLTransportHandlingUnitTypeCodeType_cbc = class;
  TXMLTotalPackageQuantityType_cbc = class;
  TXMLShippingMarksType_cbc = class;
  TXMLShippingMarksType_cbcList = class;
  TXMLDespatchLineType_cac = class;
  TXMLDespatchLineType_cacList = class;
  TXMLLineStatusCodeType_cbc = class;
  TXMLDeliveredQuantityType_cbc = class;
  TXMLBackorderQuantityType_cbc = class;
  TXMLBackorderReasonType_cbc = class;
  TXMLBackorderReasonType_cbcList = class;
  TXMLOutstandingQuantityType_cbc = class;
  TXMLOutstandingReasonType_cbc = class;
  TXMLOutstandingReasonType_cbcList = class;
  TXMLOversupplyQuantityType_cbc = class;
  TXMLOrderLineReferenceType_cac = class;
  TXMLOrderLineReferenceType_cacList = class;
  TXMLLineIDType_cbc = class;
  TXMLSalesOrderLineIDType_cbc = class;
  TXMLItemType_cac = class;
  TXMLItemType_cacList = class;
  TXMLPackQuantityType_cbc = class;
  TXMLPackSizeNumericType_cbc = class;
  TXMLCatalogueIndicatorType_cbc = class;
  TXMLAdditionalInformationType_cbc = class;
  TXMLAdditionalInformationType_cbcList = class;
  TXMLKeywordType_cbc = class;
  TXMLKeywordType_cbcList = class;
  TXMLBrandNameType_cbc = class;
  TXMLBrandNameType_cbcList = class;
  TXMLModelNameType_cbc = class;
  TXMLModelNameType_cbcList = class;
  TXMLItemIdentificationType_cac = class;
  TXMLItemIdentificationType_cacList = class;
  TXMLExtendedIDType_cbc = class;
  TXMLBarcodeSymbologyIDType_cbc = class;
  TXMLPhysicalAttributeType_cac = class;
  TXMLPhysicalAttributeType_cacList = class;
  TXMLPositionCodeType_cbc = class;
  TXMLCommodityClassificationType_cac = class;
  TXMLCommodityClassificationType_cacList = class;
  TXMLNatureCodeType_cbc = class;
  TXMLCargoTypeCodeType_cbc = class;
  TXMLCommodityCodeType_cbc = class;
  TXMLItemClassificationCodeType_cbc = class;
  TXMLTransactionConditionsType_cac = class;
  TXMLTransactionConditionsType_cacList = class;
  TXMLActionCodeType_cbc = class;
  TXMLHazardousItemType_cac = class;
  TXMLHazardousItemType_cacList = class;
  TXMLPlacardNotationType_cbc = class;
  TXMLPlacardEndorsementType_cbc = class;
  TXMLUNDGCodeType_cbc = class;
  TXMLEmergencyProceduresCodeType_cbc = class;
  TXMLMedicalFirstAidGuideCodeType_cbc = class;
  TXMLTechnicalNameType_cbc = class;
  TXMLCategoryNameType_cbc = class;
  TXMLHazardousCategoryCodeType_cbc = class;
  TXMLUpperOrangeHazardPlacardIDType_cbc = class;
  TXMLLowerOrangeHazardPlacardIDType_cbc = class;
  TXMLMarkingIDType_cbc = class;
  TXMLHazardClassIDType_cbc = class;
  TXMLSecondaryHazardType_cac = class;
  TXMLSecondaryHazardType_cacList = class;
  TXMLExtensionType_cbc = class;
  TXMLExtensionType_cbcList = class;
  TXMLItemPropertyType_cac = class;
  TXMLItemPropertyType_cacList = class;
  TXMLNameCodeType_cbc = class;
  TXMLTestMethodType_cbc = class;
  TXMLValueQuantityType_cbc = class;
  TXMLValueQualifierType_cbc = class;
  TXMLValueQualifierType_cbcList = class;
  TXMLImportanceCodeType_cbc = class;
  TXMLListValueType_cbc = class;
  TXMLListValueType_cbcList = class;
  TXMLItemPropertyGroupType_cac = class;
  TXMLItemPropertyGroupType_cacList = class;
  TXMLItemPropertyRangeType_cac = class;
  TXMLMinimumValueType_cbc = class;
  TXMLMaximumValueType_cbc = class;
  TXMLItemInstanceType_cac = class;
  TXMLItemInstanceType_cacList = class;
  TXMLProductTraceIDType_cbc = class;
  TXMLManufactureDateType_cbc = class;
  TXMLManufactureTimeType_cbc = class;
  TXMLBestBeforeDateType_cbc = class;
  TXMLRegistrationIDType_cbc = class;
  TXMLSerialIDType_cbc = class;
  TXMLLotIdentificationType_cac = class;
  TXMLLotNumberIDType_cbc = class;
  TXMLCertificateType_cac = class;
  TXMLCertificateType_cacList = class;
  TXMLCertificateTypeCodeType_cbc = class;
  TXMLCertificateTypeType_cbc = class;
  TXMLPackageType_cac = class;
  TXMLPackageType_cacList = class;
  TXMLReturnableMaterialIndicatorType_cbc = class;
  TXMLPackageLevelCodeType_cbc = class;
  TXMLPackagingTypeCodeType_cbc = class;
  TXMLPackingMaterialType_cbc = class;
  TXMLPackingMaterialType_cbcList = class;
  TXMLGoodsItemType_cac = class;
  TXMLGoodsItemType_cacList = class;
  TXMLSequenceNumberIDType_cbc = class;
  TXMLValueAmountType_cbc = class;
  TXMLPreferenceCriterionCodeType_cbc = class;
  TXMLRequiredCustomsIDType_cbc = class;
  TXMLCustomsStatusCodeType_cbc = class;
  TXMLCustomsTariffQuantityType_cbc = class;
  TXMLCustomsImportClassifiedIndicatorType_cbc = class;
  TXMLChargeableQuantityType_cbc = class;
  TXMLReturnableQuantityType_cbc = class;
  TXMLGoodsItemContainerType_cac = class;
  TXMLGoodsItemContainerType_cacList = class;
  TXMLInvoiceLineType_cac = class;
  TXMLInvoiceLineType_cacList = class;
  TXMLInvoicedQuantityType_cbc = class;
  TXMLLineExtensionAmountType_cbc = class;
  TXMLPaymentPurposeCodeType_cbc = class;
  TXMLFreeOfChargeIndicatorType_cbc = class;
  TXMLLineReferenceType_cac = class;
  TXMLLineReferenceType_cacList = class;
  TXMLPricingReferenceType_cac = class;
  TXMLItemLocationQuantityType_cac = class;
  TXMLLeadTimeMeasureType_cbc = class;
  TXMLTradingRestrictionsType_cbc = class;
  TXMLTradingRestrictionsType_cbcList = class;
  TXMLPriceType_cac = class;
  TXMLPriceType_cacList = class;
  TXMLPriceAmountType_cbc = class;
  TXMLBaseQuantityType_cbc = class;
  TXMLPriceChangeReasonType_cbc = class;
  TXMLPriceChangeReasonType_cbcList = class;
  TXMLPriceTypeCodeType_cbc = class;
  TXMLPriceTypeType_cbc = class;
  TXMLOrderableUnitFactorRateType_cbc = class;
  TXMLPriceListType_cac = class;
  TXMLStatusCodeType_cbc = class;
  TXMLExchangeRateType_cac = class;
  TXMLSourceCurrencyCodeType_cbc = class;
  TXMLSourceCurrencyBaseRateType_cbc = class;
  TXMLTargetCurrencyCodeType_cbc = class;
  TXMLTargetCurrencyBaseRateType_cbc = class;
  TXMLExchangeMarketIDType_cbc = class;
  TXMLCalculationRateType_cbc = class;
  TXMLMathematicOperatorCodeType_cbc = class;
  TXMLDateType_cbc = class;
  TXMLDependentPriceReferenceType_cac = class;
  TXMLPaymentTermsType_cac = class;
  TXMLPaymentTermsType_cacList = class;
  TXMLPaymentMeansIDType_cbc = class;
  TXMLPaymentMeansIDType_cbcList = class;
  TXMLPrepaidPaymentReferenceIDType_cbc = class;
  TXMLReferenceEventCodeType_cbc = class;
  TXMLSettlementDiscountPercentType_cbc = class;
  TXMLPenaltySurchargePercentType_cbc = class;
  TXMLPaymentPercentType_cbc = class;
  TXMLSettlementDiscountAmountType_cbc = class;
  TXMLPenaltyAmountType_cbc = class;
  TXMLPaymentTermsDetailsURIType_cbc = class;
  TXMLInstallmentDueDateType_cbc = class;
  TXMLInvoicingPartyReferenceType_cbc = class;
  TXMLPriceExtensionType_cac = class;
  TXMLPickupType_cac = class;
  TXMLActualPickupDateType_cbc = class;
  TXMLActualPickupTimeType_cbc = class;
  TXMLEarliestPickupDateType_cbc = class;
  TXMLEarliestPickupTimeType_cbc = class;
  TXMLLatestPickupDateType_cbc = class;
  TXMLLatestPickupTimeType_cbc = class;
  TXMLReceiptLineType_cac = class;
  TXMLReceiptLineType_cacList = class;
  TXMLReceivedQuantityType_cbc = class;
  TXMLShortQuantityType_cbc = class;
  TXMLShortageActionCodeType_cbc = class;
  TXMLRejectedQuantityType_cbc = class;
  TXMLRejectReasonCodeType_cbc = class;
  TXMLRejectReasonType_cbc = class;
  TXMLRejectReasonType_cbcList = class;
  TXMLRejectActionCodeType_cbc = class;
  TXMLQuantityDiscrepancyCodeType_cbc = class;
  TXMLReceivedDateType_cbc = class;
  TXMLTimingComplaintCodeType_cbc = class;
  TXMLTimingComplaintType_cbc = class;
  TXMLShipmentStageType_cac = class;
  TXMLShipmentStageType_cacList = class;
  TXMLTransportModeCodeType_cbc = class;
  TXMLTransitDirectionCodeType_cbc = class;
  TXMLPreCarriageIndicatorType_cbc = class;
  TXMLOnCarriageIndicatorType_cbc = class;
  TXMLEstimatedDeliveryDateType_cbc = class;
  TXMLEstimatedDeliveryTimeType_cbc = class;
  TXMLRequiredDeliveryDateType_cbc = class;
  TXMLRequiredDeliveryTimeType_cbc = class;
  TXMLSuccessiveSequenceIDType_cbc = class;
  TXMLDemurrageInstructionsType_cbc = class;
  TXMLDemurrageInstructionsType_cbcList = class;
  TXMLCrewQuantityType_cbc = class;
  TXMLPassengerQuantityType_cbc = class;
  TXMLEnvironmentalEmissionType_cac = class;
  TXMLEnvironmentalEmissionType_cacList = class;
  TXMLEnvironmentalEmissionTypeCodeType_cbc = class;
  TXMLValueMeasureType_cbc = class;
  TXMLEmissionCalculationMethodType_cac = class;
  TXMLEmissionCalculationMethodType_cacList = class;
  TXMLCalculationMethodCodeType_cbc = class;
  TXMLServiceFrequencyType_cac = class;
  TXMLServiceFrequencyType_cacList = class;
  TXMLWeekDayCodeType_cbc = class;
  TXMLPaymentType_cac = class;
  TXMLPaymentType_cacList = class;
  TXMLPaidAmountType_cbc = class;
  TXMLPaidDateType_cbc = class;
  TXMLPaidTimeType_cbc = class;
  TXMLMonetaryTotalType_cac = class;
  TXMLTaxExclusiveAmountType_cbc = class;
  TXMLTaxInclusiveAmountType_cbc = class;
  TXMLAllowanceTotalAmountType_cbc = class;
  TXMLChargeTotalAmountType_cbc = class;
  TXMLPrepaidAmountType_cbc = class;
  TXMLPayableRoundingAmountType_cbc = class;
  TXMLPayableAmountType_cbc = class;
  TXMLPayableAlternativeAmountType_cbc = class;

{ TXMLInvoiceType }
  [stored('''
     xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2"
     xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2"
     xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2"
     xmlns:ext="urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2"
     xmlns:xsd="http://www.w3.org/2001/XMLSchema"
     xmlns:ccts="urn:un:unece:uncefact:documentation:2"
     targetNamespace="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2"
     elementFormDefault="qualified"
     attributeFormDefault="unqualified"
     version="2.1"
  ''')]
  TXMLInvoiceType = class(TXMLNode, IXMLInvoiceType)
  private
    FNote: IXMLNoteType_cbcList;
    FInvoicePeriod: IXMLPeriodType_cacList;
    FBillingReference: IXMLBillingReferenceType_cacList;
    FDespatchDocumentReference: IXMLDocumentReferenceType_cacList;
    FReceiptDocumentReference: IXMLDocumentReferenceType_cacList;
    FStatementDocumentReference: IXMLDocumentReferenceType_cacList;
    FOriginatorDocumentReference: IXMLDocumentReferenceType_cacList;
    FContractDocumentReference: IXMLDocumentReferenceType_cacList;
    FAdditionalDocumentReference: IXMLDocumentReferenceType_cacList;
    FProjectReference: IXMLProjectReferenceType_cacList;
    FSignature: IXMLSignatureType_cacList;
    FDelivery: IXMLDeliveryType_cacList;
    FPaymentMeans: IXMLPaymentMeansType_cacList;
    FPaymentTerms: IXMLPaymentTermsType_cacList;
    FPrepaidPayment: IXMLPaymentType_cacList;
    FAllowanceCharge: IXMLAllowanceChargeType_cacList;
    FTaxTotal: IXMLTaxTotalType_cacList;
    FWithholdingTaxTotal: IXMLTaxTotalType_cacList;
    FInvoiceLine: IXMLInvoiceLineType_cacList;
  protected
    { IXMLInvoiceType }
    function Get_UBLExtensions: IXMLUBLExtensionsType_ext;
    function Get_UBLVersionID: IXMLUBLVersionIDType_cbc;
    function Get_CustomizationID: IXMLCustomizationIDType_cbc;
    function Get_ProfileID: IXMLProfileIDType_cbc;
    function Get_ProfileExecutionID: IXMLProfileExecutionIDType_cbc;
    function Get_ID: IXMLIDType_cbc;
    function Get_CopyIndicator: IXMLCopyIndicatorType_cbc;
    function Get_UUID: IXMLUUIDType_cbc;
    function Get_IssueDate: IXMLIssueDateType_cbc;
    function Get_IssueTime: IXMLIssueTimeType_cbc;
    function Get_DueDate: IXMLDueDateType_cbc;
    function Get_InvoiceTypeCode: IXMLInvoiceTypeCodeType_cbc;
    function Get_Note: IXMLNoteType_cbcList;
    function Get_TaxPointDate: IXMLTaxPointDateType_cbc;
    function Get_DocumentCurrencyCode: IXMLDocumentCurrencyCodeType_cbc;
    function Get_TaxCurrencyCode: IXMLTaxCurrencyCodeType_cbc;
    function Get_PricingCurrencyCode: IXMLPricingCurrencyCodeType_cbc;
    function Get_PaymentCurrencyCode: IXMLPaymentCurrencyCodeType_cbc;
    function Get_PaymentAlternativeCurrencyCode: IXMLPaymentAlternativeCurrencyCodeType_cbc;
    function Get_AccountingCostCode: IXMLAccountingCostCodeType_cbc;
    function Get_AccountingCost: IXMLAccountingCostType_cbc;
    function Get_LineCountNumeric: IXMLLineCountNumericType_cbc;
    function Get_BuyerReference: IXMLBuyerReferenceType_cbc;
    function Get_InvoicePeriod: IXMLPeriodType_cacList;
    function Get_OrderReference: IXMLOrderReferenceType_cac;
    function Get_BillingReference: IXMLBillingReferenceType_cacList;
    function Get_DespatchDocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_ReceiptDocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_StatementDocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_OriginatorDocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_ContractDocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_AdditionalDocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_ProjectReference: IXMLProjectReferenceType_cacList;
    function Get_Signature: IXMLSignatureType_cacList;
    function Get_AccountingSupplierParty: IXMLSupplierPartyType_cac;
    function Get_AccountingCustomerParty: IXMLCustomerPartyType_cac;
    function Get_PayeeParty: IXMLPartyType_cac;
    function Get_BuyerCustomerParty: IXMLCustomerPartyType_cac;
    function Get_SellerSupplierParty: IXMLSupplierPartyType_cac;
    function Get_TaxRepresentativeParty: IXMLPartyType_cac;
    function Get_Delivery: IXMLDeliveryType_cacList;
    function Get_DeliveryTerms: IXMLDeliveryTermsType_cac;
    function Get_PaymentMeans: IXMLPaymentMeansType_cacList;
    function Get_PaymentTerms: IXMLPaymentTermsType_cacList;
    function Get_PrepaidPayment: IXMLPaymentType_cacList;
    function Get_AllowanceCharge: IXMLAllowanceChargeType_cacList;
    function Get_TaxExchangeRate: IXMLExchangeRateType_cac;
    function Get_PricingExchangeRate: IXMLExchangeRateType_cac;
    function Get_PaymentExchangeRate: IXMLExchangeRateType_cac;
    function Get_PaymentAlternativeExchangeRate: IXMLExchangeRateType_cac;
    function Get_TaxTotal: IXMLTaxTotalType_cacList;
    function Get_WithholdingTaxTotal: IXMLTaxTotalType_cacList;
    function Get_LegalMonetaryTotal: IXMLMonetaryTotalType_cac;
    function Get_InvoiceLine: IXMLInvoiceLineType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLUBLExtensionsType_ext }

  TXMLUBLExtensionsType_ext = class(TXMLNodeCollection, IXMLUBLExtensionsType_ext)
  protected
    { IXMLUBLExtensionsType_ext }
    function Get_UBLExtension(const Index: Integer): IXMLUBLExtensionType_ext;
    function Add: IXMLUBLExtensionType_ext;
    function Insert(const Index: Integer): IXMLUBLExtensionType_ext;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLUBLExtensionType_ext }

  TXMLUBLExtensionType_ext = class(TXMLNode, IXMLUBLExtensionType_ext)
  protected
    { IXMLUBLExtensionType_ext }
    function Get_ID: IXMLIDType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_ExtensionAgencyID: IXMLExtensionAgencyIDType_ext;
    function Get_ExtensionAgencyName: IXMLExtensionAgencyNameType_ext;
    function Get_ExtensionVersionID: IXMLExtensionVersionIDType_ext;
    function Get_ExtensionAgencyURI: IXMLExtensionAgencyURIType_ext;
    function Get_ExtensionURI: IXMLExtensionURIType_ext;
    function Get_ExtensionReasonCode: IXMLExtensionReasonCodeType_ext;
    function Get_ExtensionReason: IXMLExtensionReasonType_ext;
    function Get_ExtensionContent: IXMLExtensionContentType;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLIDType_cbc }

  TXMLIDType_cbc = class(TXMLNode, IXMLIDType_cbc)
  protected
    { IXMLIDType_cbc }
  end;

{ TXMLNameType_cbc }

  TXMLNameType_cbc = class(TXMLNode, IXMLNameType_cbc)
  protected
    { IXMLNameType_cbc }
  end;

{ TXMLExtensionAgencyIDType_ext }

  TXMLExtensionAgencyIDType_ext = class(TXMLNode, IXMLExtensionAgencyIDType_ext)
  protected
    { IXMLExtensionAgencyIDType_ext }
  end;

{ TXMLExtensionAgencyNameType_ext }

  TXMLExtensionAgencyNameType_ext = class(TXMLNode, IXMLExtensionAgencyNameType_ext)
  protected
    { IXMLExtensionAgencyNameType_ext }
  end;

{ TXMLExtensionVersionIDType_ext }

  TXMLExtensionVersionIDType_ext = class(TXMLNode, IXMLExtensionVersionIDType_ext)
  protected
    { IXMLExtensionVersionIDType_ext }
  end;

{ TXMLExtensionAgencyURIType_ext }

  TXMLExtensionAgencyURIType_ext = class(TXMLNode, IXMLExtensionAgencyURIType_ext)
  protected
    { IXMLExtensionAgencyURIType_ext }
  end;

{ TXMLExtensionURIType_ext }

  TXMLExtensionURIType_ext = class(TXMLNode, IXMLExtensionURIType_ext)
  protected
    { IXMLExtensionURIType_ext }
  end;

{ TXMLExtensionReasonCodeType_ext }

  TXMLExtensionReasonCodeType_ext = class(TXMLNode, IXMLExtensionReasonCodeType_ext)
  protected
    { IXMLExtensionReasonCodeType_ext }
  end;

{ TXMLExtensionReasonType_ext }

  TXMLExtensionReasonType_ext = class(TXMLNode, IXMLExtensionReasonType_ext)
  protected
    { IXMLExtensionReasonType_ext }
  end;

{ TXMLExtensionContentType }

  TXMLExtensionContentType = class(TXMLNode, IXMLExtensionContentType)
  protected
    { IXMLExtensionContentType }
  end;

{ TXMLUBLVersionIDType_cbc }

  TXMLUBLVersionIDType_cbc = class(TXMLNode, IXMLUBLVersionIDType_cbc)
  protected
    { IXMLUBLVersionIDType_cbc }
  end;

{ TXMLCustomizationIDType_cbc }

  TXMLCustomizationIDType_cbc = class(TXMLNode, IXMLCustomizationIDType_cbc)
  protected
    { IXMLCustomizationIDType_cbc }
  end;

{ TXMLProfileIDType_cbc }

  TXMLProfileIDType_cbc = class(TXMLNode, IXMLProfileIDType_cbc)
  protected
    { IXMLProfileIDType_cbc }
  end;

{ TXMLProfileExecutionIDType_cbc }

  TXMLProfileExecutionIDType_cbc = class(TXMLNode, IXMLProfileExecutionIDType_cbc)
  protected
    { IXMLProfileExecutionIDType_cbc }
  end;

{ TXMLCopyIndicatorType_cbc }

  TXMLCopyIndicatorType_cbc = class(TXMLNode, IXMLCopyIndicatorType_cbc)
  protected
    { IXMLCopyIndicatorType_cbc }
  end;

{ TXMLUUIDType_cbc }

  TXMLUUIDType_cbc = class(TXMLNode, IXMLUUIDType_cbc)
  protected
    { IXMLUUIDType_cbc }
  end;

{ TXMLIssueDateType_cbc }

  TXMLIssueDateType_cbc = class(TXMLNode, IXMLIssueDateType_cbc)
  protected
    { IXMLIssueDateType_cbc }
  end;

{ TXMLIssueTimeType_cbc }

  TXMLIssueTimeType_cbc = class(TXMLNode, IXMLIssueTimeType_cbc)
  protected
    { IXMLIssueTimeType_cbc }
  end;

{ TXMLDueDateType_cbc }

  TXMLDueDateType_cbc = class(TXMLNode, IXMLDueDateType_cbc)
  protected
    { IXMLDueDateType_cbc }
  end;

{ TXMLInvoiceTypeCodeType_cbc }

  TXMLInvoiceTypeCodeType_cbc = class(TXMLNode, IXMLInvoiceTypeCodeType_cbc)
  protected
    { IXMLInvoiceTypeCodeType_cbc }
  end;

{ TXMLNoteType_cbc }

  TXMLNoteType_cbc = class(TXMLNode, IXMLNoteType_cbc)
  protected
    { IXMLNoteType_cbc }
  end;

{ TXMLNoteType_cbcList }

  TXMLNoteType_cbcList = class(TXMLNodeCollection, IXMLNoteType_cbcList)
  protected
    { IXMLNoteType_cbcList }
    function Add: IXMLNoteType_cbc;
    function Insert(const Index: Integer): IXMLNoteType_cbc;

    function Get_Item(const Index: Integer): IXMLNoteType_cbc;
  end;

{ TXMLTaxPointDateType_cbc }

  TXMLTaxPointDateType_cbc = class(TXMLNode, IXMLTaxPointDateType_cbc)
  protected
    { IXMLTaxPointDateType_cbc }
  end;

{ TXMLDocumentCurrencyCodeType_cbc }

  TXMLDocumentCurrencyCodeType_cbc = class(TXMLNode, IXMLDocumentCurrencyCodeType_cbc)
  protected
    { IXMLDocumentCurrencyCodeType_cbc }
  end;

{ TXMLTaxCurrencyCodeType_cbc }

  TXMLTaxCurrencyCodeType_cbc = class(TXMLNode, IXMLTaxCurrencyCodeType_cbc)
  protected
    { IXMLTaxCurrencyCodeType_cbc }
  end;

{ TXMLPricingCurrencyCodeType_cbc }

  TXMLPricingCurrencyCodeType_cbc = class(TXMLNode, IXMLPricingCurrencyCodeType_cbc)
  protected
    { IXMLPricingCurrencyCodeType_cbc }
  end;

{ TXMLPaymentCurrencyCodeType_cbc }

  TXMLPaymentCurrencyCodeType_cbc = class(TXMLNode, IXMLPaymentCurrencyCodeType_cbc)
  protected
    { IXMLPaymentCurrencyCodeType_cbc }
  end;

{ TXMLPaymentAlternativeCurrencyCodeType_cbc }

  TXMLPaymentAlternativeCurrencyCodeType_cbc = class(TXMLNode, IXMLPaymentAlternativeCurrencyCodeType_cbc)
  protected
    { IXMLPaymentAlternativeCurrencyCodeType_cbc }
  end;

{ TXMLAccountingCostCodeType_cbc }

  TXMLAccountingCostCodeType_cbc = class(TXMLNode, IXMLAccountingCostCodeType_cbc)
  protected
    { IXMLAccountingCostCodeType_cbc }
  end;

{ TXMLAccountingCostType_cbc }

  TXMLAccountingCostType_cbc = class(TXMLNode, IXMLAccountingCostType_cbc)
  protected
    { IXMLAccountingCostType_cbc }
  end;

{ TXMLLineCountNumericType_cbc }

  TXMLLineCountNumericType_cbc = class(TXMLNode, IXMLLineCountNumericType_cbc)
  protected
    { IXMLLineCountNumericType_cbc }
  end;

{ TXMLBuyerReferenceType_cbc }

  TXMLBuyerReferenceType_cbc = class(TXMLNode, IXMLBuyerReferenceType_cbc)
  protected
    { IXMLBuyerReferenceType_cbc }
  end;

{ TXMLPeriodType_cac }

  TXMLPeriodType_cac = class(TXMLNode, IXMLPeriodType_cac)
  private
    FDescriptionCode: IXMLDescriptionCodeType_cbcList;
    FDescription: IXMLDescriptionType_cbcList;
  protected
    { IXMLPeriodType_cac }
    function Get_StartDate: IXMLStartDateType_cbc;
    function Get_StartTime: IXMLStartTimeType_cbc;
    function Get_EndDate: IXMLEndDateType_cbc;
    function Get_EndTime: IXMLEndTimeType_cbc;
    function Get_DurationMeasure: IXMLDurationMeasureType_cbc;
    function Get_DescriptionCode: IXMLDescriptionCodeType_cbcList;
    function Get_Description: IXMLDescriptionType_cbcList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPeriodType_cacList }

  TXMLPeriodType_cacList = class(TXMLNodeCollection, IXMLPeriodType_cacList)
  protected
    { IXMLPeriodType_cacList }
    function Add: IXMLPeriodType_cac;
    function Insert(const Index: Integer): IXMLPeriodType_cac;

    function Get_Item(const Index: Integer): IXMLPeriodType_cac;
  end;

{ TXMLStartDateType_cbc }

  TXMLStartDateType_cbc = class(TXMLNode, IXMLStartDateType_cbc)
  protected
    { IXMLStartDateType_cbc }
  end;

{ TXMLStartTimeType_cbc }

  TXMLStartTimeType_cbc = class(TXMLNode, IXMLStartTimeType_cbc)
  protected
    { IXMLStartTimeType_cbc }
  end;

{ TXMLEndDateType_cbc }

  TXMLEndDateType_cbc = class(TXMLNode, IXMLEndDateType_cbc)
  protected
    { IXMLEndDateType_cbc }
  end;

{ TXMLEndTimeType_cbc }

  TXMLEndTimeType_cbc = class(TXMLNode, IXMLEndTimeType_cbc)
  protected
    { IXMLEndTimeType_cbc }
  end;

{ TXMLDurationMeasureType_cbc }

  TXMLDurationMeasureType_cbc = class(TXMLNode, IXMLDurationMeasureType_cbc)
  protected
    { IXMLDurationMeasureType_cbc }
  end;

{ TXMLDescriptionCodeType_cbc }

  TXMLDescriptionCodeType_cbc = class(TXMLNode, IXMLDescriptionCodeType_cbc)
  protected
    { IXMLDescriptionCodeType_cbc }
  end;

{ TXMLDescriptionCodeType_cbcList }

  TXMLDescriptionCodeType_cbcList = class(TXMLNodeCollection, IXMLDescriptionCodeType_cbcList)
  protected
    { IXMLDescriptionCodeType_cbcList }
    function Add: IXMLDescriptionCodeType_cbc;
    function Insert(const Index: Integer): IXMLDescriptionCodeType_cbc;

    function Get_Item(const Index: Integer): IXMLDescriptionCodeType_cbc;
  end;

{ TXMLDescriptionType_cbc }

  TXMLDescriptionType_cbc = class(TXMLNode, IXMLDescriptionType_cbc)
  protected
    { IXMLDescriptionType_cbc }
  end;

{ TXMLDescriptionType_cbcList }

  TXMLDescriptionType_cbcList = class(TXMLNodeCollection, IXMLDescriptionType_cbcList)
  protected
    { IXMLDescriptionType_cbcList }
    function Add: IXMLDescriptionType_cbc;
    function Insert(const Index: Integer): IXMLDescriptionType_cbc;

    function Get_Item(const Index: Integer): IXMLDescriptionType_cbc;
  end;

{ TXMLOrderReferenceType_cac }

  TXMLOrderReferenceType_cac = class(TXMLNode, IXMLOrderReferenceType_cac)
  protected
    { IXMLOrderReferenceType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_SalesOrderID: IXMLSalesOrderIDType_cbc;
    function Get_CopyIndicator: IXMLCopyIndicatorType_cbc;
    function Get_UUID: IXMLUUIDType_cbc;
    function Get_IssueDate: IXMLIssueDateType_cbc;
    function Get_IssueTime: IXMLIssueTimeType_cbc;
    function Get_CustomerReference: IXMLCustomerReferenceType_cbc;
    function Get_OrderTypeCode: IXMLOrderTypeCodeType_cbc;
    function Get_DocumentReference: IXMLDocumentReferenceType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSalesOrderIDType_cbc }

  TXMLSalesOrderIDType_cbc = class(TXMLNode, IXMLSalesOrderIDType_cbc)
  protected
    { IXMLSalesOrderIDType_cbc }
  end;

{ TXMLCustomerReferenceType_cbc }

  TXMLCustomerReferenceType_cbc = class(TXMLNode, IXMLCustomerReferenceType_cbc)
  protected
    { IXMLCustomerReferenceType_cbc }
  end;

{ TXMLOrderTypeCodeType_cbc }

  TXMLOrderTypeCodeType_cbc = class(TXMLNode, IXMLOrderTypeCodeType_cbc)
  protected
    { IXMLOrderTypeCodeType_cbc }
  end;

{ TXMLDocumentReferenceType_cac }

  TXMLDocumentReferenceType_cac = class(TXMLNode, IXMLDocumentReferenceType_cac)
  private
    FXPath: IXMLXPathType_cbcList;
    FDocumentDescription: IXMLDocumentDescriptionType_cbcList;
  protected
    { IXMLDocumentReferenceType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_CopyIndicator: IXMLCopyIndicatorType_cbc;
    function Get_UUID: IXMLUUIDType_cbc;
    function Get_IssueDate: IXMLIssueDateType_cbc;
    function Get_IssueTime: IXMLIssueTimeType_cbc;
    function Get_DocumentTypeCode: IXMLDocumentTypeCodeType_cbc;
    function Get_DocumentType: IXMLDocumentTypeType_cbc;
    function Get_XPath: IXMLXPathType_cbcList;
    function Get_LanguageID: IXMLLanguageIDType_cbc;
    function Get_LocaleCode: IXMLLocaleCodeType_cbc;
    function Get_VersionID: IXMLVersionIDType_cbc;
    function Get_DocumentStatusCode: IXMLDocumentStatusCodeType_cbc;
    function Get_DocumentDescription: IXMLDocumentDescriptionType_cbcList;
    function Get_Attachment: IXMLAttachmentType_cac;
    function Get_ValidityPeriod: IXMLPeriodType_cac;
    function Get_IssuerParty: IXMLPartyType_cac;
    function Get_ResultOfVerification: IXMLResultOfVerificationType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDocumentReferenceType_cacList }

  TXMLDocumentReferenceType_cacList = class(TXMLNodeCollection, IXMLDocumentReferenceType_cacList)
  protected
    { IXMLDocumentReferenceType_cacList }
    function Add: IXMLDocumentReferenceType_cac;
    function Insert(const Index: Integer): IXMLDocumentReferenceType_cac;

    function Get_Item(const Index: Integer): IXMLDocumentReferenceType_cac;
  end;

{ TXMLDocumentTypeCodeType_cbc }

  TXMLDocumentTypeCodeType_cbc = class(TXMLNode, IXMLDocumentTypeCodeType_cbc)
  protected
    { IXMLDocumentTypeCodeType_cbc }
  end;

{ TXMLDocumentTypeType_cbc }

  TXMLDocumentTypeType_cbc = class(TXMLNode, IXMLDocumentTypeType_cbc)
  protected
    { IXMLDocumentTypeType_cbc }
  end;

{ TXMLXPathType_cbc }

  TXMLXPathType_cbc = class(TXMLNode, IXMLXPathType_cbc)
  protected
    { IXMLXPathType_cbc }
  end;

{ TXMLXPathType_cbcList }

  TXMLXPathType_cbcList = class(TXMLNodeCollection, IXMLXPathType_cbcList)
  protected
    { IXMLXPathType_cbcList }
    function Add: IXMLXPathType_cbc;
    function Insert(const Index: Integer): IXMLXPathType_cbc;

    function Get_Item(const Index: Integer): IXMLXPathType_cbc;
  end;

{ TXMLLanguageIDType_cbc }

  TXMLLanguageIDType_cbc = class(TXMLNode, IXMLLanguageIDType_cbc)
  protected
    { IXMLLanguageIDType_cbc }
  end;

{ TXMLLocaleCodeType_cbc }

  TXMLLocaleCodeType_cbc = class(TXMLNode, IXMLLocaleCodeType_cbc)
  protected
    { IXMLLocaleCodeType_cbc }
  end;

{ TXMLVersionIDType_cbc }

  TXMLVersionIDType_cbc = class(TXMLNode, IXMLVersionIDType_cbc)
  protected
    { IXMLVersionIDType_cbc }
  end;

{ TXMLDocumentStatusCodeType_cbc }

  TXMLDocumentStatusCodeType_cbc = class(TXMLNode, IXMLDocumentStatusCodeType_cbc)
  protected
    { IXMLDocumentStatusCodeType_cbc }
  end;

{ TXMLDocumentDescriptionType_cbc }

  TXMLDocumentDescriptionType_cbc = class(TXMLNode, IXMLDocumentDescriptionType_cbc)
  protected
    { IXMLDocumentDescriptionType_cbc }
  end;

{ TXMLDocumentDescriptionType_cbcList }

  TXMLDocumentDescriptionType_cbcList = class(TXMLNodeCollection, IXMLDocumentDescriptionType_cbcList)
  protected
    { IXMLDocumentDescriptionType_cbcList }
    function Add: IXMLDocumentDescriptionType_cbc;
    function Insert(const Index: Integer): IXMLDocumentDescriptionType_cbc;

    function Get_Item(const Index: Integer): IXMLDocumentDescriptionType_cbc;
  end;

{ TXMLAttachmentType_cac }

  TXMLAttachmentType_cac = class(TXMLNode, IXMLAttachmentType_cac)
  protected
    { IXMLAttachmentType_cac }
    function Get_EmbeddedDocumentBinaryObject: IXMLEmbeddedDocumentBinaryObjectType_cbc;
    function Get_ExternalReference: IXMLExternalReferenceType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLEmbeddedDocumentBinaryObjectType_cbc }

  TXMLEmbeddedDocumentBinaryObjectType_cbc = class(TXMLNode, IXMLEmbeddedDocumentBinaryObjectType_cbc)
  protected
    { IXMLEmbeddedDocumentBinaryObjectType_cbc }
  end;

{ TXMLExternalReferenceType_cac }

  TXMLExternalReferenceType_cac = class(TXMLNode, IXMLExternalReferenceType_cac)
  private
    FDescription: IXMLDescriptionType_cbcList;
  protected
    { IXMLExternalReferenceType_cac }
    function Get_URI: IXMLURIType_cbc;
    function Get_DocumentHash: IXMLDocumentHashType_cbc;
    function Get_HashAlgorithmMethod: IXMLHashAlgorithmMethodType_cbc;
    function Get_ExpiryDate: IXMLExpiryDateType_cbc;
    function Get_ExpiryTime: IXMLExpiryTimeType_cbc;
    function Get_MimeCode: IXMLMimeCodeType_cbc;
    function Get_FormatCode: IXMLFormatCodeType_cbc;
    function Get_EncodingCode: IXMLEncodingCodeType_cbc;
    function Get_CharacterSetCode: IXMLCharacterSetCodeType_cbc;
    function Get_FileName: IXMLFileNameType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLURIType_cbc }

  TXMLURIType_cbc = class(TXMLNode, IXMLURIType_cbc)
  protected
    { IXMLURIType_cbc }
  end;

{ TXMLDocumentHashType_cbc }

  TXMLDocumentHashType_cbc = class(TXMLNode, IXMLDocumentHashType_cbc)
  protected
    { IXMLDocumentHashType_cbc }
  end;

{ TXMLHashAlgorithmMethodType_cbc }

  TXMLHashAlgorithmMethodType_cbc = class(TXMLNode, IXMLHashAlgorithmMethodType_cbc)
  protected
    { IXMLHashAlgorithmMethodType_cbc }
  end;

{ TXMLExpiryDateType_cbc }

  TXMLExpiryDateType_cbc = class(TXMLNode, IXMLExpiryDateType_cbc)
  protected
    { IXMLExpiryDateType_cbc }
  end;

{ TXMLExpiryTimeType_cbc }

  TXMLExpiryTimeType_cbc = class(TXMLNode, IXMLExpiryTimeType_cbc)
  protected
    { IXMLExpiryTimeType_cbc }
  end;

{ TXMLMimeCodeType_cbc }

  TXMLMimeCodeType_cbc = class(TXMLNode, IXMLMimeCodeType_cbc)
  protected
    { IXMLMimeCodeType_cbc }
  end;

{ TXMLFormatCodeType_cbc }

  TXMLFormatCodeType_cbc = class(TXMLNode, IXMLFormatCodeType_cbc)
  protected
    { IXMLFormatCodeType_cbc }
  end;

{ TXMLEncodingCodeType_cbc }

  TXMLEncodingCodeType_cbc = class(TXMLNode, IXMLEncodingCodeType_cbc)
  protected
    { IXMLEncodingCodeType_cbc }
  end;

{ TXMLCharacterSetCodeType_cbc }

  TXMLCharacterSetCodeType_cbc = class(TXMLNode, IXMLCharacterSetCodeType_cbc)
  protected
    { IXMLCharacterSetCodeType_cbc }
  end;

{ TXMLFileNameType_cbc }

  TXMLFileNameType_cbc = class(TXMLNode, IXMLFileNameType_cbc)
  protected
    { IXMLFileNameType_cbc }
  end;

{ TXMLPartyType_cac }

  TXMLPartyType_cac = class(TXMLNode, IXMLPartyType_cac)
  private
    FPartyIdentification: IXMLPartyIdentificationType_cacList;
    FPartyName: IXMLPartyNameType_cacList;
    FPartyTaxScheme: IXMLPartyTaxSchemeType_cacList;
    FPartyLegalEntity: IXMLPartyLegalEntityType_cacList;
    FPerson: IXMLPersonType_cacList;
    FServiceProviderParty: IXMLServiceProviderPartyType_cacList;
    FPowerOfAttorney: IXMLPowerOfAttorneyType_cacList;
  protected
    { IXMLPartyType_cac }
    function Get_MarkCareIndicator: IXMLMarkCareIndicatorType_cbc;
    function Get_MarkAttentionIndicator: IXMLMarkAttentionIndicatorType_cbc;
    function Get_WebsiteURI: IXMLWebsiteURIType_cbc;
    function Get_LogoReferenceID: IXMLLogoReferenceIDType_cbc;
    function Get_EndpointID: IXMLEndpointIDType_cbc;
    function Get_IndustryClassificationCode: IXMLIndustryClassificationCodeType_cbc;
    function Get_PartyIdentification: IXMLPartyIdentificationType_cacList;
    function Get_PartyName: IXMLPartyNameType_cacList;
    function Get_Language: IXMLLanguageType_cac;
    function Get_PostalAddress: IXMLAddressType_cac;
    function Get_PhysicalLocation: IXMLLocationType_cac;
    function Get_PartyTaxScheme: IXMLPartyTaxSchemeType_cacList;
    function Get_PartyLegalEntity: IXMLPartyLegalEntityType_cacList;
    function Get_Contact: IXMLContactType_cac;
    function Get_Person: IXMLPersonType_cacList;
    function Get_AgentParty: IXMLPartyType_cac;
    function Get_ServiceProviderParty: IXMLServiceProviderPartyType_cacList;
    function Get_PowerOfAttorney: IXMLPowerOfAttorneyType_cacList;
    function Get_FinancialAccount: IXMLFinancialAccountType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPartyType_cacList }

  TXMLPartyType_cacList = class(TXMLNodeCollection, IXMLPartyType_cacList)
  protected
    { IXMLPartyType_cacList }
    function Add: IXMLPartyType_cac;
    function Insert(const Index: Integer): IXMLPartyType_cac;

    function Get_Item(const Index: Integer): IXMLPartyType_cac;
  end;

{ TXMLMarkCareIndicatorType_cbc }

  TXMLMarkCareIndicatorType_cbc = class(TXMLNode, IXMLMarkCareIndicatorType_cbc)
  protected
    { IXMLMarkCareIndicatorType_cbc }
  end;

{ TXMLMarkAttentionIndicatorType_cbc }

  TXMLMarkAttentionIndicatorType_cbc = class(TXMLNode, IXMLMarkAttentionIndicatorType_cbc)
  protected
    { IXMLMarkAttentionIndicatorType_cbc }
  end;

{ TXMLWebsiteURIType_cbc }

  TXMLWebsiteURIType_cbc = class(TXMLNode, IXMLWebsiteURIType_cbc)
  protected
    { IXMLWebsiteURIType_cbc }
  end;

{ TXMLLogoReferenceIDType_cbc }

  TXMLLogoReferenceIDType_cbc = class(TXMLNode, IXMLLogoReferenceIDType_cbc)
  protected
    { IXMLLogoReferenceIDType_cbc }
  end;

{ TXMLEndpointIDType_cbc }

  TXMLEndpointIDType_cbc = class(TXMLNode, IXMLEndpointIDType_cbc)
  protected
    { IXMLEndpointIDType_cbc }
  end;

{ TXMLIndustryClassificationCodeType_cbc }

  TXMLIndustryClassificationCodeType_cbc = class(TXMLNode, IXMLIndustryClassificationCodeType_cbc)
  protected
    { IXMLIndustryClassificationCodeType_cbc }
  end;

{ TXMLPartyIdentificationType_cac }

  TXMLPartyIdentificationType_cac = class(TXMLNode, IXMLPartyIdentificationType_cac)
  protected
    { IXMLPartyIdentificationType_cac }
    function Get_ID: IXMLIDType_cbc;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPartyIdentificationType_cacList }

  TXMLPartyIdentificationType_cacList = class(TXMLNodeCollection, IXMLPartyIdentificationType_cacList)
  protected
    { IXMLPartyIdentificationType_cacList }
    function Add: IXMLPartyIdentificationType_cac;
    function Insert(const Index: Integer): IXMLPartyIdentificationType_cac;

    function Get_Item(const Index: Integer): IXMLPartyIdentificationType_cac;
  end;

{ TXMLPartyNameType_cac }

  TXMLPartyNameType_cac = class(TXMLNode, IXMLPartyNameType_cac)
  protected
    { IXMLPartyNameType_cac }
    function Get_Name: IXMLNameType_cbc;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPartyNameType_cacList }

  TXMLPartyNameType_cacList = class(TXMLNodeCollection, IXMLPartyNameType_cacList)
  protected
    { IXMLPartyNameType_cacList }
    function Add: IXMLPartyNameType_cac;
    function Insert(const Index: Integer): IXMLPartyNameType_cac;

    function Get_Item(const Index: Integer): IXMLPartyNameType_cac;
  end;

{ TXMLLanguageType_cac }

  TXMLLanguageType_cac = class(TXMLNode, IXMLLanguageType_cac)
  protected
    { IXMLLanguageType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_LocaleCode: IXMLLocaleCodeType_cbc;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLAddressType_cac }

  TXMLAddressType_cac = class(TXMLNode, IXMLAddressType_cac)
  private
    FAddressLine: IXMLAddressLineType_cacList;
    FLocationCoordinate: IXMLLocationCoordinateType_cacList;
  protected
    { IXMLAddressType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_AddressTypeCode: IXMLAddressTypeCodeType_cbc;
    function Get_AddressFormatCode: IXMLAddressFormatCodeType_cbc;
    function Get_Postbox: IXMLPostboxType_cbc;
    function Get_Floor: IXMLFloorType_cbc;
    function Get_Room: IXMLRoomType_cbc;
    function Get_StreetName: IXMLStreetNameType_cbc;
    function Get_AdditionalStreetName: IXMLAdditionalStreetNameType_cbc;
    function Get_BlockName: IXMLBlockNameType_cbc;
    function Get_BuildingName: IXMLBuildingNameType_cbc;
    function Get_BuildingNumber: IXMLBuildingNumberType_cbc;
    function Get_InhouseMail: IXMLInhouseMailType_cbc;
    function Get_Department: IXMLDepartmentType_cbc;
    function Get_MarkAttention: IXMLMarkAttentionType_cbc;
    function Get_MarkCare: IXMLMarkCareType_cbc;
    function Get_PlotIdentification: IXMLPlotIdentificationType_cbc;
    function Get_CitySubdivisionName: IXMLCitySubdivisionNameType_cbc;
    function Get_CityName: IXMLCityNameType_cbc;
    function Get_PostalZone: IXMLPostalZoneType_cbc;
    function Get_CountrySubentity: IXMLCountrySubentityType_cbc;
    function Get_CountrySubentityCode: IXMLCountrySubentityCodeType_cbc;
    function Get_Region: IXMLRegionType_cbc;
    function Get_District: IXMLDistrictType_cbc;
    function Get_TimezoneOffset: IXMLTimezoneOffsetType_cbc;
    function Get_AddressLine: IXMLAddressLineType_cacList;
    function Get_Country: IXMLCountryType_cac;
    function Get_LocationCoordinate: IXMLLocationCoordinateType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLAddressType_cacList }

  TXMLAddressType_cacList = class(TXMLNodeCollection, IXMLAddressType_cacList)
  protected
    { IXMLAddressType_cacList }
    function Add: IXMLAddressType_cac;
    function Insert(const Index: Integer): IXMLAddressType_cac;

    function Get_Item(const Index: Integer): IXMLAddressType_cac;
  end;

{ TXMLAddressTypeCodeType_cbc }

  TXMLAddressTypeCodeType_cbc = class(TXMLNode, IXMLAddressTypeCodeType_cbc)
  protected
    { IXMLAddressTypeCodeType_cbc }
  end;

{ TXMLAddressFormatCodeType_cbc }

  TXMLAddressFormatCodeType_cbc = class(TXMLNode, IXMLAddressFormatCodeType_cbc)
  protected
    { IXMLAddressFormatCodeType_cbc }
  end;

{ TXMLPostboxType_cbc }

  TXMLPostboxType_cbc = class(TXMLNode, IXMLPostboxType_cbc)
  protected
    { IXMLPostboxType_cbc }
  end;

{ TXMLFloorType_cbc }

  TXMLFloorType_cbc = class(TXMLNode, IXMLFloorType_cbc)
  protected
    { IXMLFloorType_cbc }
  end;

{ TXMLRoomType_cbc }

  TXMLRoomType_cbc = class(TXMLNode, IXMLRoomType_cbc)
  protected
    { IXMLRoomType_cbc }
  end;

{ TXMLStreetNameType_cbc }

  TXMLStreetNameType_cbc = class(TXMLNode, IXMLStreetNameType_cbc)
  protected
    { IXMLStreetNameType_cbc }
  end;

{ TXMLAdditionalStreetNameType_cbc }

  TXMLAdditionalStreetNameType_cbc = class(TXMLNode, IXMLAdditionalStreetNameType_cbc)
  protected
    { IXMLAdditionalStreetNameType_cbc }
  end;

{ TXMLBlockNameType_cbc }

  TXMLBlockNameType_cbc = class(TXMLNode, IXMLBlockNameType_cbc)
  protected
    { IXMLBlockNameType_cbc }
  end;

{ TXMLBuildingNameType_cbc }

  TXMLBuildingNameType_cbc = class(TXMLNode, IXMLBuildingNameType_cbc)
  protected
    { IXMLBuildingNameType_cbc }
  end;

{ TXMLBuildingNumberType_cbc }

  TXMLBuildingNumberType_cbc = class(TXMLNode, IXMLBuildingNumberType_cbc)
  protected
    { IXMLBuildingNumberType_cbc }
  end;

{ TXMLInhouseMailType_cbc }

  TXMLInhouseMailType_cbc = class(TXMLNode, IXMLInhouseMailType_cbc)
  protected
    { IXMLInhouseMailType_cbc }
  end;

{ TXMLDepartmentType_cbc }

  TXMLDepartmentType_cbc = class(TXMLNode, IXMLDepartmentType_cbc)
  protected
    { IXMLDepartmentType_cbc }
  end;

{ TXMLMarkAttentionType_cbc }

  TXMLMarkAttentionType_cbc = class(TXMLNode, IXMLMarkAttentionType_cbc)
  protected
    { IXMLMarkAttentionType_cbc }
  end;

{ TXMLMarkCareType_cbc }

  TXMLMarkCareType_cbc = class(TXMLNode, IXMLMarkCareType_cbc)
  protected
    { IXMLMarkCareType_cbc }
  end;

{ TXMLPlotIdentificationType_cbc }

  TXMLPlotIdentificationType_cbc = class(TXMLNode, IXMLPlotIdentificationType_cbc)
  protected
    { IXMLPlotIdentificationType_cbc }
  end;

{ TXMLCitySubdivisionNameType_cbc }

  TXMLCitySubdivisionNameType_cbc = class(TXMLNode, IXMLCitySubdivisionNameType_cbc)
  protected
    { IXMLCitySubdivisionNameType_cbc }
  end;

{ TXMLCityNameType_cbc }

  TXMLCityNameType_cbc = class(TXMLNode, IXMLCityNameType_cbc)
  protected
    { IXMLCityNameType_cbc }
  end;

{ TXMLPostalZoneType_cbc }

  TXMLPostalZoneType_cbc = class(TXMLNode, IXMLPostalZoneType_cbc)
  protected
    { IXMLPostalZoneType_cbc }
  end;

{ TXMLCountrySubentityType_cbc }

  TXMLCountrySubentityType_cbc = class(TXMLNode, IXMLCountrySubentityType_cbc)
  protected
    { IXMLCountrySubentityType_cbc }
  end;

{ TXMLCountrySubentityCodeType_cbc }

  TXMLCountrySubentityCodeType_cbc = class(TXMLNode, IXMLCountrySubentityCodeType_cbc)
  protected
    { IXMLCountrySubentityCodeType_cbc }
  end;

{ TXMLRegionType_cbc }

  TXMLRegionType_cbc = class(TXMLNode, IXMLRegionType_cbc)
  protected
    { IXMLRegionType_cbc }
  end;

{ TXMLDistrictType_cbc }

  TXMLDistrictType_cbc = class(TXMLNode, IXMLDistrictType_cbc)
  protected
    { IXMLDistrictType_cbc }
  end;

{ TXMLTimezoneOffsetType_cbc }

  TXMLTimezoneOffsetType_cbc = class(TXMLNode, IXMLTimezoneOffsetType_cbc)
  protected
    { IXMLTimezoneOffsetType_cbc }
  end;

{ TXMLAddressLineType_cac }

  TXMLAddressLineType_cac = class(TXMLNode, IXMLAddressLineType_cac)
  protected
    { IXMLAddressLineType_cac }
    function Get_Line: IXMLLineType_cbc;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLAddressLineType_cacList }

  TXMLAddressLineType_cacList = class(TXMLNodeCollection, IXMLAddressLineType_cacList)
  protected
    { IXMLAddressLineType_cacList }
    function Add: IXMLAddressLineType_cac;
    function Insert(const Index: Integer): IXMLAddressLineType_cac;

    function Get_Item(const Index: Integer): IXMLAddressLineType_cac;
  end;

{ TXMLLineType_cbc }

  TXMLLineType_cbc = class(TXMLNode, IXMLLineType_cbc)
  protected
    { IXMLLineType_cbc }
  end;

{ TXMLCountryType_cac }

  TXMLCountryType_cac = class(TXMLNode, IXMLCountryType_cac)
  protected
    { IXMLCountryType_cac }
    function Get_IdentificationCode: IXMLIdentificationCodeType_cbc;
    function Get_Name: IXMLNameType_cbc;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCountryType_cacList }

  TXMLCountryType_cacList = class(TXMLNodeCollection, IXMLCountryType_cacList)
  protected
    { IXMLCountryType_cacList }
    function Add: IXMLCountryType_cac;
    function Insert(const Index: Integer): IXMLCountryType_cac;

    function Get_Item(const Index: Integer): IXMLCountryType_cac;
  end;

{ TXMLIdentificationCodeType_cbc }

  TXMLIdentificationCodeType_cbc = class(TXMLNode, IXMLIdentificationCodeType_cbc)
  protected
    { IXMLIdentificationCodeType_cbc }
  end;

{ TXMLLocationCoordinateType_cac }

  TXMLLocationCoordinateType_cac = class(TXMLNode, IXMLLocationCoordinateType_cac)
  protected
    { IXMLLocationCoordinateType_cac }
    function Get_CoordinateSystemCode: IXMLCoordinateSystemCodeType_cbc;
    function Get_LatitudeDegreesMeasure: IXMLLatitudeDegreesMeasureType_cbc;
    function Get_LatitudeMinutesMeasure: IXMLLatitudeMinutesMeasureType_cbc;
    function Get_LatitudeDirectionCode: IXMLLatitudeDirectionCodeType_cbc;
    function Get_LongitudeDegreesMeasure: IXMLLongitudeDegreesMeasureType_cbc;
    function Get_LongitudeMinutesMeasure: IXMLLongitudeMinutesMeasureType_cbc;
    function Get_LongitudeDirectionCode: IXMLLongitudeDirectionCodeType_cbc;
    function Get_AltitudeMeasure: IXMLAltitudeMeasureType_cbc;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLocationCoordinateType_cacList }

  TXMLLocationCoordinateType_cacList = class(TXMLNodeCollection, IXMLLocationCoordinateType_cacList)
  protected
    { IXMLLocationCoordinateType_cacList }
    function Add: IXMLLocationCoordinateType_cac;
    function Insert(const Index: Integer): IXMLLocationCoordinateType_cac;

    function Get_Item(const Index: Integer): IXMLLocationCoordinateType_cac;
  end;

{ TXMLCoordinateSystemCodeType_cbc }

  TXMLCoordinateSystemCodeType_cbc = class(TXMLNode, IXMLCoordinateSystemCodeType_cbc)
  protected
    { IXMLCoordinateSystemCodeType_cbc }
  end;

{ TXMLLatitudeDegreesMeasureType_cbc }

  TXMLLatitudeDegreesMeasureType_cbc = class(TXMLNode, IXMLLatitudeDegreesMeasureType_cbc)
  protected
    { IXMLLatitudeDegreesMeasureType_cbc }
  end;

{ TXMLLatitudeMinutesMeasureType_cbc }

  TXMLLatitudeMinutesMeasureType_cbc = class(TXMLNode, IXMLLatitudeMinutesMeasureType_cbc)
  protected
    { IXMLLatitudeMinutesMeasureType_cbc }
  end;

{ TXMLLatitudeDirectionCodeType_cbc }

  TXMLLatitudeDirectionCodeType_cbc = class(TXMLNode, IXMLLatitudeDirectionCodeType_cbc)
  protected
    { IXMLLatitudeDirectionCodeType_cbc }
  end;

{ TXMLLongitudeDegreesMeasureType_cbc }

  TXMLLongitudeDegreesMeasureType_cbc = class(TXMLNode, IXMLLongitudeDegreesMeasureType_cbc)
  protected
    { IXMLLongitudeDegreesMeasureType_cbc }
  end;

{ TXMLLongitudeMinutesMeasureType_cbc }

  TXMLLongitudeMinutesMeasureType_cbc = class(TXMLNode, IXMLLongitudeMinutesMeasureType_cbc)
  protected
    { IXMLLongitudeMinutesMeasureType_cbc }
  end;

{ TXMLLongitudeDirectionCodeType_cbc }

  TXMLLongitudeDirectionCodeType_cbc = class(TXMLNode, IXMLLongitudeDirectionCodeType_cbc)
  protected
    { IXMLLongitudeDirectionCodeType_cbc }
  end;

{ TXMLAltitudeMeasureType_cbc }

  TXMLAltitudeMeasureType_cbc = class(TXMLNode, IXMLAltitudeMeasureType_cbc)
  protected
    { IXMLAltitudeMeasureType_cbc }
  end;

{ TXMLLocationType_cac }

  TXMLLocationType_cac = class(TXMLNode, IXMLLocationType_cac)
  private
    FDescription: IXMLDescriptionType_cbcList;
    FConditions: IXMLConditionsType_cbcList;
    FValidityPeriod: IXMLPeriodType_cacList;
    FSubsidiaryLocation: IXMLLocationType_cacList;
    FLocationCoordinate: IXMLLocationCoordinateType_cacList;
  protected
    { IXMLLocationType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_Conditions: IXMLConditionsType_cbcList;
    function Get_CountrySubentity: IXMLCountrySubentityType_cbc;
    function Get_CountrySubentityCode: IXMLCountrySubentityCodeType_cbc;
    function Get_LocationTypeCode: IXMLLocationTypeCodeType_cbc;
    function Get_InformationURI: IXMLInformationURIType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_ValidityPeriod: IXMLPeriodType_cacList;
    function Get_Address: IXMLAddressType_cac;
    function Get_SubsidiaryLocation: IXMLLocationType_cacList;
    function Get_LocationCoordinate: IXMLLocationCoordinateType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLocationType_cacList }

  TXMLLocationType_cacList = class(TXMLNodeCollection, IXMLLocationType_cacList)
  protected
    { IXMLLocationType_cacList }
    function Add: IXMLLocationType_cac;
    function Insert(const Index: Integer): IXMLLocationType_cac;

    function Get_Item(const Index: Integer): IXMLLocationType_cac;
  end;

{ TXMLConditionsType_cbc }

  TXMLConditionsType_cbc = class(TXMLNode, IXMLConditionsType_cbc)
  protected
    { IXMLConditionsType_cbc }
  end;

{ TXMLConditionsType_cbcList }

  TXMLConditionsType_cbcList = class(TXMLNodeCollection, IXMLConditionsType_cbcList)
  protected
    { IXMLConditionsType_cbcList }
    function Add: IXMLConditionsType_cbc;
    function Insert(const Index: Integer): IXMLConditionsType_cbc;

    function Get_Item(const Index: Integer): IXMLConditionsType_cbc;
  end;

{ TXMLLocationTypeCodeType_cbc }

  TXMLLocationTypeCodeType_cbc = class(TXMLNode, IXMLLocationTypeCodeType_cbc)
  protected
    { IXMLLocationTypeCodeType_cbc }
  end;

{ TXMLInformationURIType_cbc }

  TXMLInformationURIType_cbc = class(TXMLNode, IXMLInformationURIType_cbc)
  protected
    { IXMLInformationURIType_cbc }
  end;

{ TXMLPartyTaxSchemeType_cac }

  TXMLPartyTaxSchemeType_cac = class(TXMLNode, IXMLPartyTaxSchemeType_cac)
  private
    FExemptionReason: IXMLExemptionReasonType_cbcList;
  protected
    { IXMLPartyTaxSchemeType_cac }
    function Get_RegistrationName: IXMLRegistrationNameType_cbc;
    function Get_CompanyID: IXMLCompanyIDType_cbc;
    function Get_TaxLevelCode: IXMLTaxLevelCodeType_cbc;
    function Get_ExemptionReasonCode: IXMLExemptionReasonCodeType_cbc;
    function Get_ExemptionReason: IXMLExemptionReasonType_cbcList;
    function Get_RegistrationAddress: IXMLAddressType_cac;
    function Get_TaxScheme: IXMLTaxSchemeType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPartyTaxSchemeType_cacList }

  TXMLPartyTaxSchemeType_cacList = class(TXMLNodeCollection, IXMLPartyTaxSchemeType_cacList)
  protected
    { IXMLPartyTaxSchemeType_cacList }
    function Add: IXMLPartyTaxSchemeType_cac;
    function Insert(const Index: Integer): IXMLPartyTaxSchemeType_cac;

    function Get_Item(const Index: Integer): IXMLPartyTaxSchemeType_cac;
  end;

{ TXMLRegistrationNameType_cbc }

  TXMLRegistrationNameType_cbc = class(TXMLNode, IXMLRegistrationNameType_cbc)
  protected
    { IXMLRegistrationNameType_cbc }
  end;

{ TXMLCompanyIDType_cbc }

  TXMLCompanyIDType_cbc = class(TXMLNode, IXMLCompanyIDType_cbc)
  protected
    { IXMLCompanyIDType_cbc }
  end;

{ TXMLTaxLevelCodeType_cbc }

  TXMLTaxLevelCodeType_cbc = class(TXMLNode, IXMLTaxLevelCodeType_cbc)
  protected
    { IXMLTaxLevelCodeType_cbc }
  end;

{ TXMLExemptionReasonCodeType_cbc }

  TXMLExemptionReasonCodeType_cbc = class(TXMLNode, IXMLExemptionReasonCodeType_cbc)
  protected
    { IXMLExemptionReasonCodeType_cbc }
  end;

{ TXMLExemptionReasonType_cbc }

  TXMLExemptionReasonType_cbc = class(TXMLNode, IXMLExemptionReasonType_cbc)
  protected
    { IXMLExemptionReasonType_cbc }
  end;

{ TXMLExemptionReasonType_cbcList }

  TXMLExemptionReasonType_cbcList = class(TXMLNodeCollection, IXMLExemptionReasonType_cbcList)
  protected
    { IXMLExemptionReasonType_cbcList }
    function Add: IXMLExemptionReasonType_cbc;
    function Insert(const Index: Integer): IXMLExemptionReasonType_cbc;

    function Get_Item(const Index: Integer): IXMLExemptionReasonType_cbc;
  end;

{ TXMLTaxSchemeType_cac }

  TXMLTaxSchemeType_cac = class(TXMLNode, IXMLTaxSchemeType_cac)
  private
    FJurisdictionRegionAddress: IXMLAddressType_cacList;
  protected
    { IXMLTaxSchemeType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_TaxTypeCode: IXMLTaxTypeCodeType_cbc;
    function Get_CurrencyCode: IXMLCurrencyCodeType_cbc;
    function Get_JurisdictionRegionAddress: IXMLAddressType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTaxTypeCodeType_cbc }

  TXMLTaxTypeCodeType_cbc = class(TXMLNode, IXMLTaxTypeCodeType_cbc)
  protected
    { IXMLTaxTypeCodeType_cbc }
  end;

{ TXMLCurrencyCodeType_cbc }

  TXMLCurrencyCodeType_cbc = class(TXMLNode, IXMLCurrencyCodeType_cbc)
  protected
    { IXMLCurrencyCodeType_cbc }
  end;

{ TXMLPartyLegalEntityType_cac }

  TXMLPartyLegalEntityType_cac = class(TXMLNode, IXMLPartyLegalEntityType_cac)
  private
    FShareholderParty: IXMLShareholderPartyType_cacList;
  protected
    { IXMLPartyLegalEntityType_cac }
    function Get_RegistrationName: IXMLRegistrationNameType_cbc;
    function Get_CompanyID: IXMLCompanyIDType_cbc;
    function Get_RegistrationDate: IXMLRegistrationDateType_cbc;
    function Get_RegistrationExpirationDate: IXMLRegistrationExpirationDateType_cbc;
    function Get_CompanyLegalFormCode: IXMLCompanyLegalFormCodeType_cbc;
    function Get_CompanyLegalForm: IXMLCompanyLegalFormType_cbc;
    function Get_SoleProprietorshipIndicator: IXMLSoleProprietorshipIndicatorType_cbc;
    function Get_CompanyLiquidationStatusCode: IXMLCompanyLiquidationStatusCodeType_cbc;
    function Get_CorporateStockAmount: IXMLCorporateStockAmountType_cbc;
    function Get_FullyPaidSharesIndicator: IXMLFullyPaidSharesIndicatorType_cbc;
    function Get_RegistrationAddress: IXMLAddressType_cac;
    function Get_CorporateRegistrationScheme: IXMLCorporateRegistrationSchemeType_cac;
    function Get_HeadOfficeParty: IXMLPartyType_cac;
    function Get_ShareholderParty: IXMLShareholderPartyType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPartyLegalEntityType_cacList }

  TXMLPartyLegalEntityType_cacList = class(TXMLNodeCollection, IXMLPartyLegalEntityType_cacList)
  protected
    { IXMLPartyLegalEntityType_cacList }
    function Add: IXMLPartyLegalEntityType_cac;
    function Insert(const Index: Integer): IXMLPartyLegalEntityType_cac;

    function Get_Item(const Index: Integer): IXMLPartyLegalEntityType_cac;
  end;

{ TXMLRegistrationDateType_cbc }

  TXMLRegistrationDateType_cbc = class(TXMLNode, IXMLRegistrationDateType_cbc)
  protected
    { IXMLRegistrationDateType_cbc }
  end;

{ TXMLRegistrationExpirationDateType_cbc }

  TXMLRegistrationExpirationDateType_cbc = class(TXMLNode, IXMLRegistrationExpirationDateType_cbc)
  protected
    { IXMLRegistrationExpirationDateType_cbc }
  end;

{ TXMLCompanyLegalFormCodeType_cbc }

  TXMLCompanyLegalFormCodeType_cbc = class(TXMLNode, IXMLCompanyLegalFormCodeType_cbc)
  protected
    { IXMLCompanyLegalFormCodeType_cbc }
  end;

{ TXMLCompanyLegalFormType_cbc }

  TXMLCompanyLegalFormType_cbc = class(TXMLNode, IXMLCompanyLegalFormType_cbc)
  protected
    { IXMLCompanyLegalFormType_cbc }
  end;

{ TXMLSoleProprietorshipIndicatorType_cbc }

  TXMLSoleProprietorshipIndicatorType_cbc = class(TXMLNode, IXMLSoleProprietorshipIndicatorType_cbc)
  protected
    { IXMLSoleProprietorshipIndicatorType_cbc }
  end;

{ TXMLCompanyLiquidationStatusCodeType_cbc }

  TXMLCompanyLiquidationStatusCodeType_cbc = class(TXMLNode, IXMLCompanyLiquidationStatusCodeType_cbc)
  protected
    { IXMLCompanyLiquidationStatusCodeType_cbc }
  end;

{ TXMLCorporateStockAmountType_cbc }

  TXMLCorporateStockAmountType_cbc = class(TXMLNode, IXMLCorporateStockAmountType_cbc)
  protected
    { IXMLCorporateStockAmountType_cbc }
  end;

{ TXMLFullyPaidSharesIndicatorType_cbc }

  TXMLFullyPaidSharesIndicatorType_cbc = class(TXMLNode, IXMLFullyPaidSharesIndicatorType_cbc)
  protected
    { IXMLFullyPaidSharesIndicatorType_cbc }
  end;

{ TXMLCorporateRegistrationSchemeType_cac }

  TXMLCorporateRegistrationSchemeType_cac = class(TXMLNode, IXMLCorporateRegistrationSchemeType_cac)
  private
    FJurisdictionRegionAddress: IXMLAddressType_cacList;
  protected
    { IXMLCorporateRegistrationSchemeType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_CorporateRegistrationTypeCode: IXMLCorporateRegistrationTypeCodeType_cbc;
    function Get_JurisdictionRegionAddress: IXMLAddressType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCorporateRegistrationTypeCodeType_cbc }

  TXMLCorporateRegistrationTypeCodeType_cbc = class(TXMLNode, IXMLCorporateRegistrationTypeCodeType_cbc)
  protected
    { IXMLCorporateRegistrationTypeCodeType_cbc }
  end;

{ TXMLShareholderPartyType_cac }

  TXMLShareholderPartyType_cac = class(TXMLNode, IXMLShareholderPartyType_cac)
  protected
    { IXMLShareholderPartyType_cac }
    function Get_PartecipationPercent: IXMLPartecipationPercentType_cbc;
    function Get_Party: IXMLPartyType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLShareholderPartyType_cacList }

  TXMLShareholderPartyType_cacList = class(TXMLNodeCollection, IXMLShareholderPartyType_cacList)
  protected
    { IXMLShareholderPartyType_cacList }
    function Add: IXMLShareholderPartyType_cac;
    function Insert(const Index: Integer): IXMLShareholderPartyType_cac;

    function Get_Item(const Index: Integer): IXMLShareholderPartyType_cac;
  end;

{ TXMLPartecipationPercentType_cbc }

  TXMLPartecipationPercentType_cbc = class(TXMLNode, IXMLPartecipationPercentType_cbc)
  protected
    { IXMLPartecipationPercentType_cbc }
  end;

{ TXMLContactType_cac }

  TXMLContactType_cac = class(TXMLNode, IXMLContactType_cac)
  private
    FNote: IXMLNoteType_cbcList;
    FOtherCommunication: IXMLCommunicationType_cacList;
  protected
    { IXMLContactType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_Telephone: IXMLTelephoneType_cbc;
    function Get_Telefax: IXMLTelefaxType_cbc;
    function Get_ElectronicMail: IXMLElectronicMailType_cbc;
    function Get_Note: IXMLNoteType_cbcList;
    function Get_OtherCommunication: IXMLCommunicationType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLContactType_cacList }

  TXMLContactType_cacList = class(TXMLNodeCollection, IXMLContactType_cacList)
  protected
    { IXMLContactType_cacList }
    function Add: IXMLContactType_cac;
    function Insert(const Index: Integer): IXMLContactType_cac;

    function Get_Item(const Index: Integer): IXMLContactType_cac;
  end;

{ TXMLTelephoneType_cbc }

  TXMLTelephoneType_cbc = class(TXMLNode, IXMLTelephoneType_cbc)
  protected
    { IXMLTelephoneType_cbc }
  end;

{ TXMLTelefaxType_cbc }

  TXMLTelefaxType_cbc = class(TXMLNode, IXMLTelefaxType_cbc)
  protected
    { IXMLTelefaxType_cbc }
  end;

{ TXMLElectronicMailType_cbc }

  TXMLElectronicMailType_cbc = class(TXMLNode, IXMLElectronicMailType_cbc)
  protected
    { IXMLElectronicMailType_cbc }
  end;

{ TXMLCommunicationType_cac }

  TXMLCommunicationType_cac = class(TXMLNode, IXMLCommunicationType_cac)
  protected
    { IXMLCommunicationType_cac }
    function Get_ChannelCode: IXMLChannelCodeType_cbc;
    function Get_Channel: IXMLChannelType_cbc;
    function Get_Value: IXMLValueType_cbc;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCommunicationType_cacList }

  TXMLCommunicationType_cacList = class(TXMLNodeCollection, IXMLCommunicationType_cacList)
  protected
    { IXMLCommunicationType_cacList }
    function Add: IXMLCommunicationType_cac;
    function Insert(const Index: Integer): IXMLCommunicationType_cac;

    function Get_Item(const Index: Integer): IXMLCommunicationType_cac;
  end;

{ TXMLChannelCodeType_cbc }

  TXMLChannelCodeType_cbc = class(TXMLNode, IXMLChannelCodeType_cbc)
  protected
    { IXMLChannelCodeType_cbc }
  end;

{ TXMLChannelType_cbc }

  TXMLChannelType_cbc = class(TXMLNode, IXMLChannelType_cbc)
  protected
    { IXMLChannelType_cbc }
  end;

{ TXMLValueType_cbc }

  TXMLValueType_cbc = class(TXMLNode, IXMLValueType_cbc)
  protected
    { IXMLValueType_cbc }
  end;

{ TXMLPersonType_cac }

  TXMLPersonType_cac = class(TXMLNode, IXMLPersonType_cac)
  private
    FIdentityDocumentReference: IXMLDocumentReferenceType_cacList;
  protected
    { IXMLPersonType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_FirstName: IXMLFirstNameType_cbc;
    function Get_FamilyName: IXMLFamilyNameType_cbc;
    function Get_Title: IXMLTitleType_cbc;
    function Get_MiddleName: IXMLMiddleNameType_cbc;
    function Get_OtherName: IXMLOtherNameType_cbc;
    function Get_NameSuffix: IXMLNameSuffixType_cbc;
    function Get_JobTitle: IXMLJobTitleType_cbc;
    function Get_NationalityID: IXMLNationalityIDType_cbc;
    function Get_GenderCode: IXMLGenderCodeType_cbc;
    function Get_BirthDate: IXMLBirthDateType_cbc;
    function Get_BirthplaceName: IXMLBirthplaceNameType_cbc;
    function Get_OrganizationDepartment: IXMLOrganizationDepartmentType_cbc;
    function Get_Contact: IXMLContactType_cac;
    function Get_FinancialAccount: IXMLFinancialAccountType_cac;
    function Get_IdentityDocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_ResidenceAddress: IXMLAddressType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPersonType_cacList }

  TXMLPersonType_cacList = class(TXMLNodeCollection, IXMLPersonType_cacList)
  protected
    { IXMLPersonType_cacList }
    function Add: IXMLPersonType_cac;
    function Insert(const Index: Integer): IXMLPersonType_cac;

    function Get_Item(const Index: Integer): IXMLPersonType_cac;
  end;

{ TXMLFirstNameType_cbc }

  TXMLFirstNameType_cbc = class(TXMLNode, IXMLFirstNameType_cbc)
  protected
    { IXMLFirstNameType_cbc }
  end;

{ TXMLFamilyNameType_cbc }

  TXMLFamilyNameType_cbc = class(TXMLNode, IXMLFamilyNameType_cbc)
  protected
    { IXMLFamilyNameType_cbc }
  end;

{ TXMLTitleType_cbc }

  TXMLTitleType_cbc = class(TXMLNode, IXMLTitleType_cbc)
  protected
    { IXMLTitleType_cbc }
  end;

{ TXMLMiddleNameType_cbc }

  TXMLMiddleNameType_cbc = class(TXMLNode, IXMLMiddleNameType_cbc)
  protected
    { IXMLMiddleNameType_cbc }
  end;

{ TXMLOtherNameType_cbc }

  TXMLOtherNameType_cbc = class(TXMLNode, IXMLOtherNameType_cbc)
  protected
    { IXMLOtherNameType_cbc }
  end;

{ TXMLNameSuffixType_cbc }

  TXMLNameSuffixType_cbc = class(TXMLNode, IXMLNameSuffixType_cbc)
  protected
    { IXMLNameSuffixType_cbc }
  end;

{ TXMLJobTitleType_cbc }

  TXMLJobTitleType_cbc = class(TXMLNode, IXMLJobTitleType_cbc)
  protected
    { IXMLJobTitleType_cbc }
  end;

{ TXMLNationalityIDType_cbc }

  TXMLNationalityIDType_cbc = class(TXMLNode, IXMLNationalityIDType_cbc)
  protected
    { IXMLNationalityIDType_cbc }
  end;

{ TXMLGenderCodeType_cbc }

  TXMLGenderCodeType_cbc = class(TXMLNode, IXMLGenderCodeType_cbc)
  protected
    { IXMLGenderCodeType_cbc }
  end;

{ TXMLBirthDateType_cbc }

  TXMLBirthDateType_cbc = class(TXMLNode, IXMLBirthDateType_cbc)
  protected
    { IXMLBirthDateType_cbc }
  end;

{ TXMLBirthplaceNameType_cbc }

  TXMLBirthplaceNameType_cbc = class(TXMLNode, IXMLBirthplaceNameType_cbc)
  protected
    { IXMLBirthplaceNameType_cbc }
  end;

{ TXMLOrganizationDepartmentType_cbc }

  TXMLOrganizationDepartmentType_cbc = class(TXMLNode, IXMLOrganizationDepartmentType_cbc)
  protected
    { IXMLOrganizationDepartmentType_cbc }
  end;

{ TXMLFinancialAccountType_cac }

  TXMLFinancialAccountType_cac = class(TXMLNode, IXMLFinancialAccountType_cac)
  private
    FPaymentNote: IXMLPaymentNoteType_cbcList;
  protected
    { IXMLFinancialAccountType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_AliasName: IXMLAliasNameType_cbc;
    function Get_AccountTypeCode: IXMLAccountTypeCodeType_cbc;
    function Get_AccountFormatCode: IXMLAccountFormatCodeType_cbc;
    function Get_CurrencyCode: IXMLCurrencyCodeType_cbc;
    function Get_PaymentNote: IXMLPaymentNoteType_cbcList;
    function Get_FinancialInstitutionBranch: IXMLBranchType_cac;
    function Get_Country: IXMLCountryType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLAliasNameType_cbc }

  TXMLAliasNameType_cbc = class(TXMLNode, IXMLAliasNameType_cbc)
  protected
    { IXMLAliasNameType_cbc }
  end;

{ TXMLAccountTypeCodeType_cbc }

  TXMLAccountTypeCodeType_cbc = class(TXMLNode, IXMLAccountTypeCodeType_cbc)
  protected
    { IXMLAccountTypeCodeType_cbc }
  end;

{ TXMLAccountFormatCodeType_cbc }

  TXMLAccountFormatCodeType_cbc = class(TXMLNode, IXMLAccountFormatCodeType_cbc)
  protected
    { IXMLAccountFormatCodeType_cbc }
  end;

{ TXMLPaymentNoteType_cbc }

  TXMLPaymentNoteType_cbc = class(TXMLNode, IXMLPaymentNoteType_cbc)
  protected
    { IXMLPaymentNoteType_cbc }
  end;

{ TXMLPaymentNoteType_cbcList }

  TXMLPaymentNoteType_cbcList = class(TXMLNodeCollection, IXMLPaymentNoteType_cbcList)
  protected
    { IXMLPaymentNoteType_cbcList }
    function Add: IXMLPaymentNoteType_cbc;
    function Insert(const Index: Integer): IXMLPaymentNoteType_cbc;

    function Get_Item(const Index: Integer): IXMLPaymentNoteType_cbc;
  end;

{ TXMLBranchType_cac }

  TXMLBranchType_cac = class(TXMLNode, IXMLBranchType_cac)
  protected
    { IXMLBranchType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_FinancialInstitution: IXMLFinancialInstitutionType_cac;
    function Get_Address: IXMLAddressType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLFinancialInstitutionType_cac }

  TXMLFinancialInstitutionType_cac = class(TXMLNode, IXMLFinancialInstitutionType_cac)
  protected
    { IXMLFinancialInstitutionType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_Address: IXMLAddressType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLServiceProviderPartyType_cac }

  TXMLServiceProviderPartyType_cac = class(TXMLNode, IXMLServiceProviderPartyType_cac)
  private
    FServiceType: IXMLServiceTypeType_cbcList;
  protected
    { IXMLServiceProviderPartyType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_ServiceTypeCode: IXMLServiceTypeCodeType_cbc;
    function Get_ServiceType: IXMLServiceTypeType_cbcList;
    function Get_Party: IXMLPartyType_cac;
    function Get_SellerContact: IXMLContactType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLServiceProviderPartyType_cacList }

  TXMLServiceProviderPartyType_cacList = class(TXMLNodeCollection, IXMLServiceProviderPartyType_cacList)
  protected
    { IXMLServiceProviderPartyType_cacList }
    function Add: IXMLServiceProviderPartyType_cac;
    function Insert(const Index: Integer): IXMLServiceProviderPartyType_cac;

    function Get_Item(const Index: Integer): IXMLServiceProviderPartyType_cac;
  end;

{ TXMLServiceTypeCodeType_cbc }

  TXMLServiceTypeCodeType_cbc = class(TXMLNode, IXMLServiceTypeCodeType_cbc)
  protected
    { IXMLServiceTypeCodeType_cbc }
  end;

{ TXMLServiceTypeType_cbc }

  TXMLServiceTypeType_cbc = class(TXMLNode, IXMLServiceTypeType_cbc)
  protected
    { IXMLServiceTypeType_cbc }
  end;

{ TXMLServiceTypeType_cbcList }

  TXMLServiceTypeType_cbcList = class(TXMLNodeCollection, IXMLServiceTypeType_cbcList)
  protected
    { IXMLServiceTypeType_cbcList }
    function Add: IXMLServiceTypeType_cbc;
    function Insert(const Index: Integer): IXMLServiceTypeType_cbc;

    function Get_Item(const Index: Integer): IXMLServiceTypeType_cbc;
  end;

{ TXMLPowerOfAttorneyType_cac }

  TXMLPowerOfAttorneyType_cac = class(TXMLNode, IXMLPowerOfAttorneyType_cac)
  private
    FDescription: IXMLDescriptionType_cbcList;
    FWitnessParty: IXMLPartyType_cacList;
    FMandateDocumentReference: IXMLDocumentReferenceType_cacList;
  protected
    { IXMLPowerOfAttorneyType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_IssueDate: IXMLIssueDateType_cbc;
    function Get_IssueTime: IXMLIssueTimeType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_NotaryParty: IXMLPartyType_cac;
    function Get_AgentParty: IXMLPartyType_cac;
    function Get_WitnessParty: IXMLPartyType_cacList;
    function Get_MandateDocumentReference: IXMLDocumentReferenceType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPowerOfAttorneyType_cacList }

  TXMLPowerOfAttorneyType_cacList = class(TXMLNodeCollection, IXMLPowerOfAttorneyType_cacList)
  protected
    { IXMLPowerOfAttorneyType_cacList }
    function Add: IXMLPowerOfAttorneyType_cac;
    function Insert(const Index: Integer): IXMLPowerOfAttorneyType_cac;

    function Get_Item(const Index: Integer): IXMLPowerOfAttorneyType_cac;
  end;

{ TXMLResultOfVerificationType_cac }

  TXMLResultOfVerificationType_cac = class(TXMLNode, IXMLResultOfVerificationType_cac)
  protected
    { IXMLResultOfVerificationType_cac }
    function Get_ValidatorID: IXMLValidatorIDType_cbc;
    function Get_ValidationResultCode: IXMLValidationResultCodeType_cbc;
    function Get_ValidationDate: IXMLValidationDateType_cbc;
    function Get_ValidationTime: IXMLValidationTimeType_cbc;
    function Get_ValidateProcess: IXMLValidateProcessType_cbc;
    function Get_ValidateTool: IXMLValidateToolType_cbc;
    function Get_ValidateToolVersion: IXMLValidateToolVersionType_cbc;
    function Get_SignatoryParty: IXMLPartyType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLValidatorIDType_cbc }

  TXMLValidatorIDType_cbc = class(TXMLNode, IXMLValidatorIDType_cbc)
  protected
    { IXMLValidatorIDType_cbc }
  end;

{ TXMLValidationResultCodeType_cbc }

  TXMLValidationResultCodeType_cbc = class(TXMLNode, IXMLValidationResultCodeType_cbc)
  protected
    { IXMLValidationResultCodeType_cbc }
  end;

{ TXMLValidationDateType_cbc }

  TXMLValidationDateType_cbc = class(TXMLNode, IXMLValidationDateType_cbc)
  protected
    { IXMLValidationDateType_cbc }
  end;

{ TXMLValidationTimeType_cbc }

  TXMLValidationTimeType_cbc = class(TXMLNode, IXMLValidationTimeType_cbc)
  protected
    { IXMLValidationTimeType_cbc }
  end;

{ TXMLValidateProcessType_cbc }

  TXMLValidateProcessType_cbc = class(TXMLNode, IXMLValidateProcessType_cbc)
  protected
    { IXMLValidateProcessType_cbc }
  end;

{ TXMLValidateToolType_cbc }

  TXMLValidateToolType_cbc = class(TXMLNode, IXMLValidateToolType_cbc)
  protected
    { IXMLValidateToolType_cbc }
  end;

{ TXMLValidateToolVersionType_cbc }

  TXMLValidateToolVersionType_cbc = class(TXMLNode, IXMLValidateToolVersionType_cbc)
  protected
    { IXMLValidateToolVersionType_cbc }
  end;

{ TXMLBillingReferenceType_cac }

  TXMLBillingReferenceType_cac = class(TXMLNode, IXMLBillingReferenceType_cac)
  private
    FBillingReferenceLine: IXMLBillingReferenceLineType_cacList;
  protected
    { IXMLBillingReferenceType_cac }
    function Get_InvoiceDocumentReference: IXMLDocumentReferenceType_cac;
    function Get_SelfBilledInvoiceDocumentReference: IXMLDocumentReferenceType_cac;
    function Get_CreditNoteDocumentReference: IXMLDocumentReferenceType_cac;
    function Get_SelfBilledCreditNoteDocumentReference: IXMLDocumentReferenceType_cac;
    function Get_DebitNoteDocumentReference: IXMLDocumentReferenceType_cac;
    function Get_ReminderDocumentReference: IXMLDocumentReferenceType_cac;
    function Get_AdditionalDocumentReference: IXMLDocumentReferenceType_cac;
    function Get_BillingReferenceLine: IXMLBillingReferenceLineType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBillingReferenceType_cacList }

  TXMLBillingReferenceType_cacList = class(TXMLNodeCollection, IXMLBillingReferenceType_cacList)
  protected
    { IXMLBillingReferenceType_cacList }
    function Add: IXMLBillingReferenceType_cac;
    function Insert(const Index: Integer): IXMLBillingReferenceType_cac;

    function Get_Item(const Index: Integer): IXMLBillingReferenceType_cac;
  end;

{ TXMLBillingReferenceLineType_cac }

  TXMLBillingReferenceLineType_cac = class(TXMLNode, IXMLBillingReferenceLineType_cac)
  private
    FAllowanceCharge: IXMLAllowanceChargeType_cacList;
  protected
    { IXMLBillingReferenceLineType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_Amount: IXMLAmountType_cbc;
    function Get_AllowanceCharge: IXMLAllowanceChargeType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBillingReferenceLineType_cacList }

  TXMLBillingReferenceLineType_cacList = class(TXMLNodeCollection, IXMLBillingReferenceLineType_cacList)
  protected
    { IXMLBillingReferenceLineType_cacList }
    function Add: IXMLBillingReferenceLineType_cac;
    function Insert(const Index: Integer): IXMLBillingReferenceLineType_cac;

    function Get_Item(const Index: Integer): IXMLBillingReferenceLineType_cac;
  end;

{ TXMLAmountType_cbc }

  TXMLAmountType_cbc = class(TXMLNode, IXMLAmountType_cbc)
  protected
    { IXMLAmountType_cbc }
  end;

{ TXMLAllowanceChargeType_cac }

  TXMLAllowanceChargeType_cac = class(TXMLNode, IXMLAllowanceChargeType_cac)
  private
    FAllowanceChargeReason: IXMLAllowanceChargeReasonType_cbcList;
    FTaxCategory: IXMLTaxCategoryType_cacList;
    FPaymentMeans: IXMLPaymentMeansType_cacList;
  protected
    { IXMLAllowanceChargeType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_ChargeIndicator: IXMLChargeIndicatorType_cbc;
    function Get_AllowanceChargeReasonCode: IXMLAllowanceChargeReasonCodeType_cbc;
    function Get_AllowanceChargeReason: IXMLAllowanceChargeReasonType_cbcList;
    function Get_MultiplierFactorNumeric: IXMLMultiplierFactorNumericType_cbc;
    function Get_PrepaidIndicator: IXMLPrepaidIndicatorType_cbc;
    function Get_SequenceNumeric: IXMLSequenceNumericType_cbc;
    function Get_Amount: IXMLAmountType_cbc;
    function Get_BaseAmount: IXMLBaseAmountType_cbc;
    function Get_AccountingCostCode: IXMLAccountingCostCodeType_cbc;
    function Get_AccountingCost: IXMLAccountingCostType_cbc;
    function Get_PerUnitAmount: IXMLPerUnitAmountType_cbc;
    function Get_TaxCategory: IXMLTaxCategoryType_cacList;
    function Get_TaxTotal: IXMLTaxTotalType_cac;
    function Get_PaymentMeans: IXMLPaymentMeansType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLAllowanceChargeType_cacList }

  TXMLAllowanceChargeType_cacList = class(TXMLNodeCollection, IXMLAllowanceChargeType_cacList)
  protected
    { IXMLAllowanceChargeType_cacList }
    function Add: IXMLAllowanceChargeType_cac;
    function Insert(const Index: Integer): IXMLAllowanceChargeType_cac;

    function Get_Item(const Index: Integer): IXMLAllowanceChargeType_cac;
  end;

{ TXMLChargeIndicatorType_cbc }

  TXMLChargeIndicatorType_cbc = class(TXMLNode, IXMLChargeIndicatorType_cbc)
  protected
    { IXMLChargeIndicatorType_cbc }
  end;

{ TXMLAllowanceChargeReasonCodeType_cbc }

  TXMLAllowanceChargeReasonCodeType_cbc = class(TXMLNode, IXMLAllowanceChargeReasonCodeType_cbc)
  protected
    { IXMLAllowanceChargeReasonCodeType_cbc }
  end;

{ TXMLAllowanceChargeReasonType_cbc }

  TXMLAllowanceChargeReasonType_cbc = class(TXMLNode, IXMLAllowanceChargeReasonType_cbc)
  protected
    { IXMLAllowanceChargeReasonType_cbc }
  end;

{ TXMLAllowanceChargeReasonType_cbcList }

  TXMLAllowanceChargeReasonType_cbcList = class(TXMLNodeCollection, IXMLAllowanceChargeReasonType_cbcList)
  protected
    { IXMLAllowanceChargeReasonType_cbcList }
    function Add: IXMLAllowanceChargeReasonType_cbc;
    function Insert(const Index: Integer): IXMLAllowanceChargeReasonType_cbc;

    function Get_Item(const Index: Integer): IXMLAllowanceChargeReasonType_cbc;
  end;

{ TXMLMultiplierFactorNumericType_cbc }

  TXMLMultiplierFactorNumericType_cbc = class(TXMLNode, IXMLMultiplierFactorNumericType_cbc)
  protected
    { IXMLMultiplierFactorNumericType_cbc }
  end;

{ TXMLPrepaidIndicatorType_cbc }

  TXMLPrepaidIndicatorType_cbc = class(TXMLNode, IXMLPrepaidIndicatorType_cbc)
  protected
    { IXMLPrepaidIndicatorType_cbc }
  end;

{ TXMLSequenceNumericType_cbc }

  TXMLSequenceNumericType_cbc = class(TXMLNode, IXMLSequenceNumericType_cbc)
  protected
    { IXMLSequenceNumericType_cbc }
  end;

{ TXMLBaseAmountType_cbc }

  TXMLBaseAmountType_cbc = class(TXMLNode, IXMLBaseAmountType_cbc)
  protected
    { IXMLBaseAmountType_cbc }
  end;

{ TXMLPerUnitAmountType_cbc }

  TXMLPerUnitAmountType_cbc = class(TXMLNode, IXMLPerUnitAmountType_cbc)
  protected
    { IXMLPerUnitAmountType_cbc }
  end;

{ TXMLTaxCategoryType_cac }

  TXMLTaxCategoryType_cac = class(TXMLNode, IXMLTaxCategoryType_cac)
  private
    FTaxExemptionReason: IXMLTaxExemptionReasonType_cbcList;
  protected
    { IXMLTaxCategoryType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_Percent: IXMLPercentType_cbc;
    function Get_BaseUnitMeasure: IXMLBaseUnitMeasureType_cbc;
    function Get_PerUnitAmount: IXMLPerUnitAmountType_cbc;
    function Get_TaxExemptionReasonCode: IXMLTaxExemptionReasonCodeType_cbc;
    function Get_TaxExemptionReason: IXMLTaxExemptionReasonType_cbcList;
    function Get_TierRange: IXMLTierRangeType_cbc;
    function Get_TierRatePercent: IXMLTierRatePercentType_cbc;
    function Get_TaxScheme: IXMLTaxSchemeType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTaxCategoryType_cacList }

  TXMLTaxCategoryType_cacList = class(TXMLNodeCollection, IXMLTaxCategoryType_cacList)
  protected
    { IXMLTaxCategoryType_cacList }
    function Add: IXMLTaxCategoryType_cac;
    function Insert(const Index: Integer): IXMLTaxCategoryType_cac;

    function Get_Item(const Index: Integer): IXMLTaxCategoryType_cac;
  end;

{ TXMLPercentType_cbc }

  TXMLPercentType_cbc = class(TXMLNode, IXMLPercentType_cbc)
  protected
    { IXMLPercentType_cbc }
  end;

{ TXMLBaseUnitMeasureType_cbc }

  TXMLBaseUnitMeasureType_cbc = class(TXMLNode, IXMLBaseUnitMeasureType_cbc)
  protected
    { IXMLBaseUnitMeasureType_cbc }
  end;

{ TXMLTaxExemptionReasonCodeType_cbc }

  TXMLTaxExemptionReasonCodeType_cbc = class(TXMLNode, IXMLTaxExemptionReasonCodeType_cbc)
  protected
    { IXMLTaxExemptionReasonCodeType_cbc }
  end;

{ TXMLTaxExemptionReasonType_cbc }

  TXMLTaxExemptionReasonType_cbc = class(TXMLNode, IXMLTaxExemptionReasonType_cbc)
  protected
    { IXMLTaxExemptionReasonType_cbc }
  end;

{ TXMLTaxExemptionReasonType_cbcList }

  TXMLTaxExemptionReasonType_cbcList = class(TXMLNodeCollection, IXMLTaxExemptionReasonType_cbcList)
  protected
    { IXMLTaxExemptionReasonType_cbcList }
    function Add: IXMLTaxExemptionReasonType_cbc;
    function Insert(const Index: Integer): IXMLTaxExemptionReasonType_cbc;

    function Get_Item(const Index: Integer): IXMLTaxExemptionReasonType_cbc;
  end;

{ TXMLTierRangeType_cbc }

  TXMLTierRangeType_cbc = class(TXMLNode, IXMLTierRangeType_cbc)
  protected
    { IXMLTierRangeType_cbc }
  end;

{ TXMLTierRatePercentType_cbc }

  TXMLTierRatePercentType_cbc = class(TXMLNode, IXMLTierRatePercentType_cbc)
  protected
    { IXMLTierRatePercentType_cbc }
  end;

{ TXMLTaxTotalType_cac }

  TXMLTaxTotalType_cac = class(TXMLNode, IXMLTaxTotalType_cac)
  private
    FTaxSubtotal: IXMLTaxSubtotalType_cacList;
  protected
    { IXMLTaxTotalType_cac }
    function Get_TaxAmount: IXMLTaxAmountType_cbc;
    function Get_RoundingAmount: IXMLRoundingAmountType_cbc;
    function Get_TaxEvidenceIndicator: IXMLTaxEvidenceIndicatorType_cbc;
    function Get_TaxIncludedIndicator: IXMLTaxIncludedIndicatorType_cbc;
    function Get_TaxSubtotal: IXMLTaxSubtotalType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTaxTotalType_cacList }

  TXMLTaxTotalType_cacList = class(TXMLNodeCollection, IXMLTaxTotalType_cacList)
  protected
    { IXMLTaxTotalType_cacList }
    function Add: IXMLTaxTotalType_cac;
    function Insert(const Index: Integer): IXMLTaxTotalType_cac;

    function Get_Item(const Index: Integer): IXMLTaxTotalType_cac;
  end;

{ TXMLTaxAmountType_cbc }

  TXMLTaxAmountType_cbc = class(TXMLNode, IXMLTaxAmountType_cbc)
  protected
    { IXMLTaxAmountType_cbc }
  end;

{ TXMLRoundingAmountType_cbc }

  TXMLRoundingAmountType_cbc = class(TXMLNode, IXMLRoundingAmountType_cbc)
  protected
    { IXMLRoundingAmountType_cbc }
  end;

{ TXMLTaxEvidenceIndicatorType_cbc }

  TXMLTaxEvidenceIndicatorType_cbc = class(TXMLNode, IXMLTaxEvidenceIndicatorType_cbc)
  protected
    { IXMLTaxEvidenceIndicatorType_cbc }
  end;

{ TXMLTaxIncludedIndicatorType_cbc }

  TXMLTaxIncludedIndicatorType_cbc = class(TXMLNode, IXMLTaxIncludedIndicatorType_cbc)
  protected
    { IXMLTaxIncludedIndicatorType_cbc }
  end;

{ TXMLTaxSubtotalType_cac }

  TXMLTaxSubtotalType_cac = class(TXMLNode, IXMLTaxSubtotalType_cac)
  protected
    { IXMLTaxSubtotalType_cac }
    function Get_TaxableAmount: IXMLTaxableAmountType_cbc;
    function Get_TaxAmount: IXMLTaxAmountType_cbc;
    function Get_CalculationSequenceNumeric: IXMLCalculationSequenceNumericType_cbc;
    function Get_TransactionCurrencyTaxAmount: IXMLTransactionCurrencyTaxAmountType_cbc;
    function Get_Percent: IXMLPercentType_cbc;
    function Get_BaseUnitMeasure: IXMLBaseUnitMeasureType_cbc;
    function Get_PerUnitAmount: IXMLPerUnitAmountType_cbc;
    function Get_TierRange: IXMLTierRangeType_cbc;
    function Get_TierRatePercent: IXMLTierRatePercentType_cbc;
    function Get_TaxCategory: IXMLTaxCategoryType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTaxSubtotalType_cacList }

  TXMLTaxSubtotalType_cacList = class(TXMLNodeCollection, IXMLTaxSubtotalType_cacList)
  protected
    { IXMLTaxSubtotalType_cacList }
    function Add: IXMLTaxSubtotalType_cac;
    function Insert(const Index: Integer): IXMLTaxSubtotalType_cac;

    function Get_Item(const Index: Integer): IXMLTaxSubtotalType_cac;
  end;

{ TXMLTaxableAmountType_cbc }

  TXMLTaxableAmountType_cbc = class(TXMLNode, IXMLTaxableAmountType_cbc)
  protected
    { IXMLTaxableAmountType_cbc }
  end;

{ TXMLCalculationSequenceNumericType_cbc }

  TXMLCalculationSequenceNumericType_cbc = class(TXMLNode, IXMLCalculationSequenceNumericType_cbc)
  protected
    { IXMLCalculationSequenceNumericType_cbc }
  end;

{ TXMLTransactionCurrencyTaxAmountType_cbc }

  TXMLTransactionCurrencyTaxAmountType_cbc = class(TXMLNode, IXMLTransactionCurrencyTaxAmountType_cbc)
  protected
    { IXMLTransactionCurrencyTaxAmountType_cbc }
  end;

{ TXMLPaymentMeansType_cac }

  TXMLPaymentMeansType_cac = class(TXMLNode, IXMLPaymentMeansType_cac)
  private
    FInstructionNote: IXMLInstructionNoteType_cbcList;
    FPaymentID: IXMLPaymentIDType_cbcList;
  protected
    { IXMLPaymentMeansType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_PaymentMeansCode: IXMLPaymentMeansCodeType_cbc;
    function Get_PaymentDueDate: IXMLPaymentDueDateType_cbc;
    function Get_PaymentChannelCode: IXMLPaymentChannelCodeType_cbc;
    function Get_InstructionID: IXMLInstructionIDType_cbc;
    function Get_InstructionNote: IXMLInstructionNoteType_cbcList;
    function Get_PaymentID: IXMLPaymentIDType_cbcList;
    function Get_CardAccount: IXMLCardAccountType_cac;
    function Get_PayerFinancialAccount: IXMLFinancialAccountType_cac;
    function Get_PayeeFinancialAccount: IXMLFinancialAccountType_cac;
    function Get_CreditAccount: IXMLCreditAccountType_cac;
    function Get_PaymentMandate: IXMLPaymentMandateType_cac;
    function Get_TradeFinancing: IXMLTradeFinancingType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPaymentMeansType_cacList }

  TXMLPaymentMeansType_cacList = class(TXMLNodeCollection, IXMLPaymentMeansType_cacList)
  protected
    { IXMLPaymentMeansType_cacList }
    function Add: IXMLPaymentMeansType_cac;
    function Insert(const Index: Integer): IXMLPaymentMeansType_cac;

    function Get_Item(const Index: Integer): IXMLPaymentMeansType_cac;
  end;

{ TXMLPaymentMeansCodeType_cbc }

  TXMLPaymentMeansCodeType_cbc = class(TXMLNode, IXMLPaymentMeansCodeType_cbc)
  protected
    { IXMLPaymentMeansCodeType_cbc }
  end;

{ TXMLPaymentDueDateType_cbc }

  TXMLPaymentDueDateType_cbc = class(TXMLNode, IXMLPaymentDueDateType_cbc)
  protected
    { IXMLPaymentDueDateType_cbc }
  end;

{ TXMLPaymentChannelCodeType_cbc }

  TXMLPaymentChannelCodeType_cbc = class(TXMLNode, IXMLPaymentChannelCodeType_cbc)
  protected
    { IXMLPaymentChannelCodeType_cbc }
  end;

{ TXMLInstructionIDType_cbc }

  TXMLInstructionIDType_cbc = class(TXMLNode, IXMLInstructionIDType_cbc)
  protected
    { IXMLInstructionIDType_cbc }
  end;

{ TXMLInstructionNoteType_cbc }

  TXMLInstructionNoteType_cbc = class(TXMLNode, IXMLInstructionNoteType_cbc)
  protected
    { IXMLInstructionNoteType_cbc }
  end;

{ TXMLInstructionNoteType_cbcList }

  TXMLInstructionNoteType_cbcList = class(TXMLNodeCollection, IXMLInstructionNoteType_cbcList)
  protected
    { IXMLInstructionNoteType_cbcList }
    function Add: IXMLInstructionNoteType_cbc;
    function Insert(const Index: Integer): IXMLInstructionNoteType_cbc;

    function Get_Item(const Index: Integer): IXMLInstructionNoteType_cbc;
  end;

{ TXMLPaymentIDType_cbc }

  TXMLPaymentIDType_cbc = class(TXMLNode, IXMLPaymentIDType_cbc)
  protected
    { IXMLPaymentIDType_cbc }
  end;

{ TXMLPaymentIDType_cbcList }

  TXMLPaymentIDType_cbcList = class(TXMLNodeCollection, IXMLPaymentIDType_cbcList)
  protected
    { IXMLPaymentIDType_cbcList }
    function Add: IXMLPaymentIDType_cbc;
    function Insert(const Index: Integer): IXMLPaymentIDType_cbc;

    function Get_Item(const Index: Integer): IXMLPaymentIDType_cbc;
  end;

{ TXMLCardAccountType_cac }

  TXMLCardAccountType_cac = class(TXMLNode, IXMLCardAccountType_cac)
  protected
    { IXMLCardAccountType_cac }
    function Get_PrimaryAccountNumberID: IXMLPrimaryAccountNumberIDType_cbc;
    function Get_NetworkID: IXMLNetworkIDType_cbc;
    function Get_CardTypeCode: IXMLCardTypeCodeType_cbc;
    function Get_ValidityStartDate: IXMLValidityStartDateType_cbc;
    function Get_ExpiryDate: IXMLExpiryDateType_cbc;
    function Get_IssuerID: IXMLIssuerIDType_cbc;
    function Get_IssueNumberID: IXMLIssueNumberIDType_cbc;
    function Get_CV2ID: IXMLCV2IDType_cbc;
    function Get_CardChipCode: IXMLCardChipCodeType_cbc;
    function Get_ChipApplicationID: IXMLChipApplicationIDType_cbc;
    function Get_HolderName: IXMLHolderNameType_cbc;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPrimaryAccountNumberIDType_cbc }

  TXMLPrimaryAccountNumberIDType_cbc = class(TXMLNode, IXMLPrimaryAccountNumberIDType_cbc)
  protected
    { IXMLPrimaryAccountNumberIDType_cbc }
  end;

{ TXMLNetworkIDType_cbc }

  TXMLNetworkIDType_cbc = class(TXMLNode, IXMLNetworkIDType_cbc)
  protected
    { IXMLNetworkIDType_cbc }
  end;

{ TXMLCardTypeCodeType_cbc }

  TXMLCardTypeCodeType_cbc = class(TXMLNode, IXMLCardTypeCodeType_cbc)
  protected
    { IXMLCardTypeCodeType_cbc }
  end;

{ TXMLValidityStartDateType_cbc }

  TXMLValidityStartDateType_cbc = class(TXMLNode, IXMLValidityStartDateType_cbc)
  protected
    { IXMLValidityStartDateType_cbc }
  end;

{ TXMLIssuerIDType_cbc }

  TXMLIssuerIDType_cbc = class(TXMLNode, IXMLIssuerIDType_cbc)
  protected
    { IXMLIssuerIDType_cbc }
  end;

{ TXMLIssueNumberIDType_cbc }

  TXMLIssueNumberIDType_cbc = class(TXMLNode, IXMLIssueNumberIDType_cbc)
  protected
    { IXMLIssueNumberIDType_cbc }
  end;

{ TXMLCV2IDType_cbc }

  TXMLCV2IDType_cbc = class(TXMLNode, IXMLCV2IDType_cbc)
  protected
    { IXMLCV2IDType_cbc }
  end;

{ TXMLCardChipCodeType_cbc }

  TXMLCardChipCodeType_cbc = class(TXMLNode, IXMLCardChipCodeType_cbc)
  protected
    { IXMLCardChipCodeType_cbc }
  end;

{ TXMLChipApplicationIDType_cbc }

  TXMLChipApplicationIDType_cbc = class(TXMLNode, IXMLChipApplicationIDType_cbc)
  protected
    { IXMLChipApplicationIDType_cbc }
  end;

{ TXMLHolderNameType_cbc }

  TXMLHolderNameType_cbc = class(TXMLNode, IXMLHolderNameType_cbc)
  protected
    { IXMLHolderNameType_cbc }
  end;

{ TXMLCreditAccountType_cac }

  TXMLCreditAccountType_cac = class(TXMLNode, IXMLCreditAccountType_cac)
  protected
    { IXMLCreditAccountType_cac }
    function Get_AccountID: IXMLAccountIDType_cbc;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLAccountIDType_cbc }

  TXMLAccountIDType_cbc = class(TXMLNode, IXMLAccountIDType_cbc)
  protected
    { IXMLAccountIDType_cbc }
  end;

{ TXMLPaymentMandateType_cac }

  TXMLPaymentMandateType_cac = class(TXMLNode, IXMLPaymentMandateType_cac)
  private
    FClause: IXMLClauseType_cacList;
  protected
    { IXMLPaymentMandateType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_MandateTypeCode: IXMLMandateTypeCodeType_cbc;
    function Get_MaximumPaymentInstructionsNumeric: IXMLMaximumPaymentInstructionsNumericType_cbc;
    function Get_MaximumPaidAmount: IXMLMaximumPaidAmountType_cbc;
    function Get_SignatureID: IXMLSignatureIDType_cbc;
    function Get_PayerParty: IXMLPartyType_cac;
    function Get_PayerFinancialAccount: IXMLFinancialAccountType_cac;
    function Get_ValidityPeriod: IXMLPeriodType_cac;
    function Get_PaymentReversalPeriod: IXMLPeriodType_cac;
    function Get_Clause: IXMLClauseType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMandateTypeCodeType_cbc }

  TXMLMandateTypeCodeType_cbc = class(TXMLNode, IXMLMandateTypeCodeType_cbc)
  protected
    { IXMLMandateTypeCodeType_cbc }
  end;

{ TXMLMaximumPaymentInstructionsNumericType_cbc }

  TXMLMaximumPaymentInstructionsNumericType_cbc = class(TXMLNode, IXMLMaximumPaymentInstructionsNumericType_cbc)
  protected
    { IXMLMaximumPaymentInstructionsNumericType_cbc }
  end;

{ TXMLMaximumPaidAmountType_cbc }

  TXMLMaximumPaidAmountType_cbc = class(TXMLNode, IXMLMaximumPaidAmountType_cbc)
  protected
    { IXMLMaximumPaidAmountType_cbc }
  end;

{ TXMLSignatureIDType_cbc }

  TXMLSignatureIDType_cbc = class(TXMLNode, IXMLSignatureIDType_cbc)
  protected
    { IXMLSignatureIDType_cbc }
  end;

{ TXMLClauseType_cac }

  TXMLClauseType_cac = class(TXMLNode, IXMLClauseType_cac)
  private
    FContent: IXMLContentType_cbcList;
  protected
    { IXMLClauseType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_Content: IXMLContentType_cbcList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLClauseType_cacList }

  TXMLClauseType_cacList = class(TXMLNodeCollection, IXMLClauseType_cacList)
  protected
    { IXMLClauseType_cacList }
    function Add: IXMLClauseType_cac;
    function Insert(const Index: Integer): IXMLClauseType_cac;

    function Get_Item(const Index: Integer): IXMLClauseType_cac;
  end;

{ TXMLContentType_cbc }

  TXMLContentType_cbc = class(TXMLNode, IXMLContentType_cbc)
  protected
    { IXMLContentType_cbc }
  end;

{ TXMLContentType_cbcList }

  TXMLContentType_cbcList = class(TXMLNodeCollection, IXMLContentType_cbcList)
  protected
    { IXMLContentType_cbcList }
    function Add: IXMLContentType_cbc;
    function Insert(const Index: Integer): IXMLContentType_cbc;

    function Get_Item(const Index: Integer): IXMLContentType_cbc;
  end;

{ TXMLTradeFinancingType_cac }

  TXMLTradeFinancingType_cac = class(TXMLNode, IXMLTradeFinancingType_cac)
  private
    FDocumentReference: IXMLDocumentReferenceType_cacList;
    FClause: IXMLClauseType_cacList;
  protected
    { IXMLTradeFinancingType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_FinancingInstrumentCode: IXMLFinancingInstrumentCodeType_cbc;
    function Get_ContractDocumentReference: IXMLDocumentReferenceType_cac;
    function Get_DocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_FinancingParty: IXMLPartyType_cac;
    function Get_FinancingFinancialAccount: IXMLFinancialAccountType_cac;
    function Get_Clause: IXMLClauseType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLFinancingInstrumentCodeType_cbc }

  TXMLFinancingInstrumentCodeType_cbc = class(TXMLNode, IXMLFinancingInstrumentCodeType_cbc)
  protected
    { IXMLFinancingInstrumentCodeType_cbc }
  end;

{ TXMLProjectReferenceType_cac }

  TXMLProjectReferenceType_cac = class(TXMLNode, IXMLProjectReferenceType_cac)
  private
    FWorkPhaseReference: IXMLWorkPhaseReferenceType_cacList;
  protected
    { IXMLProjectReferenceType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_UUID: IXMLUUIDType_cbc;
    function Get_IssueDate: IXMLIssueDateType_cbc;
    function Get_WorkPhaseReference: IXMLWorkPhaseReferenceType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLProjectReferenceType_cacList }

  TXMLProjectReferenceType_cacList = class(TXMLNodeCollection, IXMLProjectReferenceType_cacList)
  protected
    { IXMLProjectReferenceType_cacList }
    function Add: IXMLProjectReferenceType_cac;
    function Insert(const Index: Integer): IXMLProjectReferenceType_cac;

    function Get_Item(const Index: Integer): IXMLProjectReferenceType_cac;
  end;

{ TXMLWorkPhaseReferenceType_cac }

  TXMLWorkPhaseReferenceType_cac = class(TXMLNode, IXMLWorkPhaseReferenceType_cac)
  private
    FWorkPhase: IXMLWorkPhaseType_cbcList;
    FWorkOrderDocumentReference: IXMLDocumentReferenceType_cacList;
  protected
    { IXMLWorkPhaseReferenceType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_WorkPhaseCode: IXMLWorkPhaseCodeType_cbc;
    function Get_WorkPhase: IXMLWorkPhaseType_cbcList;
    function Get_ProgressPercent: IXMLProgressPercentType_cbc;
    function Get_StartDate: IXMLStartDateType_cbc;
    function Get_EndDate: IXMLEndDateType_cbc;
    function Get_WorkOrderDocumentReference: IXMLDocumentReferenceType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLWorkPhaseReferenceType_cacList }

  TXMLWorkPhaseReferenceType_cacList = class(TXMLNodeCollection, IXMLWorkPhaseReferenceType_cacList)
  protected
    { IXMLWorkPhaseReferenceType_cacList }
    function Add: IXMLWorkPhaseReferenceType_cac;
    function Insert(const Index: Integer): IXMLWorkPhaseReferenceType_cac;

    function Get_Item(const Index: Integer): IXMLWorkPhaseReferenceType_cac;
  end;

{ TXMLWorkPhaseCodeType_cbc }

  TXMLWorkPhaseCodeType_cbc = class(TXMLNode, IXMLWorkPhaseCodeType_cbc)
  protected
    { IXMLWorkPhaseCodeType_cbc }
  end;

{ TXMLWorkPhaseType_cbc }

  TXMLWorkPhaseType_cbc = class(TXMLNode, IXMLWorkPhaseType_cbc)
  protected
    { IXMLWorkPhaseType_cbc }
  end;

{ TXMLWorkPhaseType_cbcList }

  TXMLWorkPhaseType_cbcList = class(TXMLNodeCollection, IXMLWorkPhaseType_cbcList)
  protected
    { IXMLWorkPhaseType_cbcList }
    function Add: IXMLWorkPhaseType_cbc;
    function Insert(const Index: Integer): IXMLWorkPhaseType_cbc;

    function Get_Item(const Index: Integer): IXMLWorkPhaseType_cbc;
  end;

{ TXMLProgressPercentType_cbc }

  TXMLProgressPercentType_cbc = class(TXMLNode, IXMLProgressPercentType_cbc)
  protected
    { IXMLProgressPercentType_cbc }
  end;

{ TXMLSignatureType_cac }

  TXMLSignatureType_cac = class(TXMLNode, IXMLSignatureType_cac)
  private
    FNote: IXMLNoteType_cbcList;
  protected
    { IXMLSignatureType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_Note: IXMLNoteType_cbcList;
    function Get_ValidationDate: IXMLValidationDateType_cbc;
    function Get_ValidationTime: IXMLValidationTimeType_cbc;
    function Get_ValidatorID: IXMLValidatorIDType_cbc;
    function Get_CanonicalizationMethod: IXMLCanonicalizationMethodType_cbc;
    function Get_SignatureMethod: IXMLSignatureMethodType_cbc;
    function Get_SignatoryParty: IXMLPartyType_cac;
    function Get_DigitalSignatureAttachment: IXMLAttachmentType_cac;
    function Get_OriginalDocumentReference: IXMLDocumentReferenceType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSignatureType_cacList }

  TXMLSignatureType_cacList = class(TXMLNodeCollection, IXMLSignatureType_cacList)
  protected
    { IXMLSignatureType_cacList }
    function Add: IXMLSignatureType_cac;
    function Insert(const Index: Integer): IXMLSignatureType_cac;

    function Get_Item(const Index: Integer): IXMLSignatureType_cac;
  end;

{ TXMLCanonicalizationMethodType_cbc }

  TXMLCanonicalizationMethodType_cbc = class(TXMLNode, IXMLCanonicalizationMethodType_cbc)
  protected
    { IXMLCanonicalizationMethodType_cbc }
  end;

{ TXMLSignatureMethodType_cbc }

  TXMLSignatureMethodType_cbc = class(TXMLNode, IXMLSignatureMethodType_cbc)
  protected
    { IXMLSignatureMethodType_cbc }
  end;

{ TXMLSupplierPartyType_cac }

  TXMLSupplierPartyType_cac = class(TXMLNode, IXMLSupplierPartyType_cac)
  private
    FAdditionalAccountID: IXMLAdditionalAccountIDType_cbcList;
  protected
    { IXMLSupplierPartyType_cac }
    function Get_CustomerAssignedAccountID: IXMLCustomerAssignedAccountIDType_cbc;
    function Get_AdditionalAccountID: IXMLAdditionalAccountIDType_cbcList;
    function Get_DataSendingCapability: IXMLDataSendingCapabilityType_cbc;
    function Get_Party: IXMLPartyType_cac;
    function Get_DespatchContact: IXMLContactType_cac;
    function Get_AccountingContact: IXMLContactType_cac;
    function Get_SellerContact: IXMLContactType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCustomerAssignedAccountIDType_cbc }

  TXMLCustomerAssignedAccountIDType_cbc = class(TXMLNode, IXMLCustomerAssignedAccountIDType_cbc)
  protected
    { IXMLCustomerAssignedAccountIDType_cbc }
  end;

{ TXMLAdditionalAccountIDType_cbc }

  TXMLAdditionalAccountIDType_cbc = class(TXMLNode, IXMLAdditionalAccountIDType_cbc)
  protected
    { IXMLAdditionalAccountIDType_cbc }
  end;

{ TXMLAdditionalAccountIDType_cbcList }

  TXMLAdditionalAccountIDType_cbcList = class(TXMLNodeCollection, IXMLAdditionalAccountIDType_cbcList)
  protected
    { IXMLAdditionalAccountIDType_cbcList }
    function Add: IXMLAdditionalAccountIDType_cbc;
    function Insert(const Index: Integer): IXMLAdditionalAccountIDType_cbc;

    function Get_Item(const Index: Integer): IXMLAdditionalAccountIDType_cbc;
  end;

{ TXMLDataSendingCapabilityType_cbc }

  TXMLDataSendingCapabilityType_cbc = class(TXMLNode, IXMLDataSendingCapabilityType_cbc)
  protected
    { IXMLDataSendingCapabilityType_cbc }
  end;

{ TXMLCustomerPartyType_cac }

  TXMLCustomerPartyType_cac = class(TXMLNode, IXMLCustomerPartyType_cac)
  private
    FAdditionalAccountID: IXMLAdditionalAccountIDType_cbcList;
  protected
    { IXMLCustomerPartyType_cac }
    function Get_CustomerAssignedAccountID: IXMLCustomerAssignedAccountIDType_cbc;
    function Get_SupplierAssignedAccountID: IXMLSupplierAssignedAccountIDType_cbc;
    function Get_AdditionalAccountID: IXMLAdditionalAccountIDType_cbcList;
    function Get_Party: IXMLPartyType_cac;
    function Get_DeliveryContact: IXMLContactType_cac;
    function Get_AccountingContact: IXMLContactType_cac;
    function Get_BuyerContact: IXMLContactType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSupplierAssignedAccountIDType_cbc }

  TXMLSupplierAssignedAccountIDType_cbc = class(TXMLNode, IXMLSupplierAssignedAccountIDType_cbc)
  protected
    { IXMLSupplierAssignedAccountIDType_cbc }
  end;

{ TXMLDeliveryType_cac }

  TXMLDeliveryType_cac = class(TXMLNode, IXMLDeliveryType_cac)
  private
    FNotifyParty: IXMLPartyType_cacList;
    FDeliveryTerms: IXMLDeliveryTermsType_cacList;
  protected
    { IXMLDeliveryType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_Quantity: IXMLQuantityType_cbc;
    function Get_MinimumQuantity: IXMLMinimumQuantityType_cbc;
    function Get_MaximumQuantity: IXMLMaximumQuantityType_cbc;
    function Get_ActualDeliveryDate: IXMLActualDeliveryDateType_cbc;
    function Get_ActualDeliveryTime: IXMLActualDeliveryTimeType_cbc;
    function Get_LatestDeliveryDate: IXMLLatestDeliveryDateType_cbc;
    function Get_LatestDeliveryTime: IXMLLatestDeliveryTimeType_cbc;
    function Get_ReleaseID: IXMLReleaseIDType_cbc;
    function Get_TrackingID: IXMLTrackingIDType_cbc;
    function Get_DeliveryAddress: IXMLAddressType_cac;
    function Get_DeliveryLocation: IXMLLocationType_cac;
    function Get_AlternativeDeliveryLocation: IXMLLocationType_cac;
    function Get_RequestedDeliveryPeriod: IXMLPeriodType_cac;
    function Get_PromisedDeliveryPeriod: IXMLPeriodType_cac;
    function Get_EstimatedDeliveryPeriod: IXMLPeriodType_cac;
    function Get_CarrierParty: IXMLPartyType_cac;
    function Get_DeliveryParty: IXMLPartyType_cac;
    function Get_NotifyParty: IXMLPartyType_cacList;
    function Get_Despatch: IXMLDespatchType_cac;
    function Get_DeliveryTerms: IXMLDeliveryTermsType_cacList;
    function Get_MinimumDeliveryUnit: IXMLDeliveryUnitType_cac;
    function Get_MaximumDeliveryUnit: IXMLDeliveryUnitType_cac;
    function Get_Shipment: IXMLShipmentType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryType_cacList }

  TXMLDeliveryType_cacList = class(TXMLNodeCollection, IXMLDeliveryType_cacList)
  protected
    { IXMLDeliveryType_cacList }
    function Add: IXMLDeliveryType_cac;
    function Insert(const Index: Integer): IXMLDeliveryType_cac;

    function Get_Item(const Index: Integer): IXMLDeliveryType_cac;
  end;

{ TXMLQuantityType_cbc }

  TXMLQuantityType_cbc = class(TXMLNode, IXMLQuantityType_cbc)
  protected
    { IXMLQuantityType_cbc }
  end;

{ TXMLMinimumQuantityType_cbc }

  TXMLMinimumQuantityType_cbc = class(TXMLNode, IXMLMinimumQuantityType_cbc)
  protected
    { IXMLMinimumQuantityType_cbc }
  end;

{ TXMLMaximumQuantityType_cbc }

  TXMLMaximumQuantityType_cbc = class(TXMLNode, IXMLMaximumQuantityType_cbc)
  protected
    { IXMLMaximumQuantityType_cbc }
  end;

{ TXMLActualDeliveryDateType_cbc }

  TXMLActualDeliveryDateType_cbc = class(TXMLNode, IXMLActualDeliveryDateType_cbc)
  protected
    { IXMLActualDeliveryDateType_cbc }
  end;

{ TXMLActualDeliveryTimeType_cbc }

  TXMLActualDeliveryTimeType_cbc = class(TXMLNode, IXMLActualDeliveryTimeType_cbc)
  protected
    { IXMLActualDeliveryTimeType_cbc }
  end;

{ TXMLLatestDeliveryDateType_cbc }

  TXMLLatestDeliveryDateType_cbc = class(TXMLNode, IXMLLatestDeliveryDateType_cbc)
  protected
    { IXMLLatestDeliveryDateType_cbc }
  end;

{ TXMLLatestDeliveryTimeType_cbc }

  TXMLLatestDeliveryTimeType_cbc = class(TXMLNode, IXMLLatestDeliveryTimeType_cbc)
  protected
    { IXMLLatestDeliveryTimeType_cbc }
  end;

{ TXMLReleaseIDType_cbc }

  TXMLReleaseIDType_cbc = class(TXMLNode, IXMLReleaseIDType_cbc)
  protected
    { IXMLReleaseIDType_cbc }
  end;

{ TXMLTrackingIDType_cbc }

  TXMLTrackingIDType_cbc = class(TXMLNode, IXMLTrackingIDType_cbc)
  protected
    { IXMLTrackingIDType_cbc }
  end;

{ TXMLDespatchType_cac }

  TXMLDespatchType_cac = class(TXMLNode, IXMLDespatchType_cac)
  private
    FInstructions: IXMLInstructionsType_cbcList;
    FNotifyParty: IXMLPartyType_cacList;
  protected
    { IXMLDespatchType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_RequestedDespatchDate: IXMLRequestedDespatchDateType_cbc;
    function Get_RequestedDespatchTime: IXMLRequestedDespatchTimeType_cbc;
    function Get_EstimatedDespatchDate: IXMLEstimatedDespatchDateType_cbc;
    function Get_EstimatedDespatchTime: IXMLEstimatedDespatchTimeType_cbc;
    function Get_ActualDespatchDate: IXMLActualDespatchDateType_cbc;
    function Get_ActualDespatchTime: IXMLActualDespatchTimeType_cbc;
    function Get_GuaranteedDespatchDate: IXMLGuaranteedDespatchDateType_cbc;
    function Get_GuaranteedDespatchTime: IXMLGuaranteedDespatchTimeType_cbc;
    function Get_ReleaseID: IXMLReleaseIDType_cbc;
    function Get_Instructions: IXMLInstructionsType_cbcList;
    function Get_DespatchAddress: IXMLAddressType_cac;
    function Get_DespatchLocation: IXMLLocationType_cac;
    function Get_DespatchParty: IXMLPartyType_cac;
    function Get_CarrierParty: IXMLPartyType_cac;
    function Get_NotifyParty: IXMLPartyType_cacList;
    function Get_Contact: IXMLContactType_cac;
    function Get_EstimatedDespatchPeriod: IXMLPeriodType_cac;
    function Get_RequestedDespatchPeriod: IXMLPeriodType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLRequestedDespatchDateType_cbc }

  TXMLRequestedDespatchDateType_cbc = class(TXMLNode, IXMLRequestedDespatchDateType_cbc)
  protected
    { IXMLRequestedDespatchDateType_cbc }
  end;

{ TXMLRequestedDespatchTimeType_cbc }

  TXMLRequestedDespatchTimeType_cbc = class(TXMLNode, IXMLRequestedDespatchTimeType_cbc)
  protected
    { IXMLRequestedDespatchTimeType_cbc }
  end;

{ TXMLEstimatedDespatchDateType_cbc }

  TXMLEstimatedDespatchDateType_cbc = class(TXMLNode, IXMLEstimatedDespatchDateType_cbc)
  protected
    { IXMLEstimatedDespatchDateType_cbc }
  end;

{ TXMLEstimatedDespatchTimeType_cbc }

  TXMLEstimatedDespatchTimeType_cbc = class(TXMLNode, IXMLEstimatedDespatchTimeType_cbc)
  protected
    { IXMLEstimatedDespatchTimeType_cbc }
  end;

{ TXMLActualDespatchDateType_cbc }

  TXMLActualDespatchDateType_cbc = class(TXMLNode, IXMLActualDespatchDateType_cbc)
  protected
    { IXMLActualDespatchDateType_cbc }
  end;

{ TXMLActualDespatchTimeType_cbc }

  TXMLActualDespatchTimeType_cbc = class(TXMLNode, IXMLActualDespatchTimeType_cbc)
  protected
    { IXMLActualDespatchTimeType_cbc }
  end;

{ TXMLGuaranteedDespatchDateType_cbc }

  TXMLGuaranteedDespatchDateType_cbc = class(TXMLNode, IXMLGuaranteedDespatchDateType_cbc)
  protected
    { IXMLGuaranteedDespatchDateType_cbc }
  end;

{ TXMLGuaranteedDespatchTimeType_cbc }

  TXMLGuaranteedDespatchTimeType_cbc = class(TXMLNode, IXMLGuaranteedDespatchTimeType_cbc)
  protected
    { IXMLGuaranteedDespatchTimeType_cbc }
  end;

{ TXMLInstructionsType_cbc }

  TXMLInstructionsType_cbc = class(TXMLNode, IXMLInstructionsType_cbc)
  protected
    { IXMLInstructionsType_cbc }
  end;

{ TXMLInstructionsType_cbcList }

  TXMLInstructionsType_cbcList = class(TXMLNodeCollection, IXMLInstructionsType_cbcList)
  protected
    { IXMLInstructionsType_cbcList }
    function Add: IXMLInstructionsType_cbc;
    function Insert(const Index: Integer): IXMLInstructionsType_cbc;

    function Get_Item(const Index: Integer): IXMLInstructionsType_cbc;
  end;

{ TXMLDeliveryTermsType_cac }

  TXMLDeliveryTermsType_cac = class(TXMLNode, IXMLDeliveryTermsType_cac)
  private
    FSpecialTerms: IXMLSpecialTermsType_cbcList;
    FLossRisk: IXMLLossRiskType_cbcList;
  protected
    { IXMLDeliveryTermsType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_SpecialTerms: IXMLSpecialTermsType_cbcList;
    function Get_LossRiskResponsibilityCode: IXMLLossRiskResponsibilityCodeType_cbc;
    function Get_LossRisk: IXMLLossRiskType_cbcList;
    function Get_Amount: IXMLAmountType_cbc;
    function Get_DeliveryLocation: IXMLLocationType_cac;
    function Get_AllowanceCharge: IXMLAllowanceChargeType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryTermsType_cacList }

  TXMLDeliveryTermsType_cacList = class(TXMLNodeCollection, IXMLDeliveryTermsType_cacList)
  protected
    { IXMLDeliveryTermsType_cacList }
    function Add: IXMLDeliveryTermsType_cac;
    function Insert(const Index: Integer): IXMLDeliveryTermsType_cac;

    function Get_Item(const Index: Integer): IXMLDeliveryTermsType_cac;
  end;

{ TXMLSpecialTermsType_cbc }

  TXMLSpecialTermsType_cbc = class(TXMLNode, IXMLSpecialTermsType_cbc)
  protected
    { IXMLSpecialTermsType_cbc }
  end;

{ TXMLSpecialTermsType_cbcList }

  TXMLSpecialTermsType_cbcList = class(TXMLNodeCollection, IXMLSpecialTermsType_cbcList)
  protected
    { IXMLSpecialTermsType_cbcList }
    function Add: IXMLSpecialTermsType_cbc;
    function Insert(const Index: Integer): IXMLSpecialTermsType_cbc;

    function Get_Item(const Index: Integer): IXMLSpecialTermsType_cbc;
  end;

{ TXMLLossRiskResponsibilityCodeType_cbc }

  TXMLLossRiskResponsibilityCodeType_cbc = class(TXMLNode, IXMLLossRiskResponsibilityCodeType_cbc)
  protected
    { IXMLLossRiskResponsibilityCodeType_cbc }
  end;

{ TXMLLossRiskType_cbc }

  TXMLLossRiskType_cbc = class(TXMLNode, IXMLLossRiskType_cbc)
  protected
    { IXMLLossRiskType_cbc }
  end;

{ TXMLLossRiskType_cbcList }

  TXMLLossRiskType_cbcList = class(TXMLNodeCollection, IXMLLossRiskType_cbcList)
  protected
    { IXMLLossRiskType_cbcList }
    function Add: IXMLLossRiskType_cbc;
    function Insert(const Index: Integer): IXMLLossRiskType_cbc;

    function Get_Item(const Index: Integer): IXMLLossRiskType_cbc;
  end;

{ TXMLDeliveryUnitType_cac }

  TXMLDeliveryUnitType_cac = class(TXMLNode, IXMLDeliveryUnitType_cac)
  protected
    { IXMLDeliveryUnitType_cac }
    function Get_BatchQuantity: IXMLBatchQuantityType_cbc;
    function Get_ConsumerUnitQuantity: IXMLConsumerUnitQuantityType_cbc;
    function Get_HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryUnitType_cacList }

  TXMLDeliveryUnitType_cacList = class(TXMLNodeCollection, IXMLDeliveryUnitType_cacList)
  protected
    { IXMLDeliveryUnitType_cacList }
    function Add: IXMLDeliveryUnitType_cac;
    function Insert(const Index: Integer): IXMLDeliveryUnitType_cac;

    function Get_Item(const Index: Integer): IXMLDeliveryUnitType_cac;
  end;

{ TXMLBatchQuantityType_cbc }

  TXMLBatchQuantityType_cbc = class(TXMLNode, IXMLBatchQuantityType_cbc)
  protected
    { IXMLBatchQuantityType_cbc }
  end;

{ TXMLConsumerUnitQuantityType_cbc }

  TXMLConsumerUnitQuantityType_cbc = class(TXMLNode, IXMLConsumerUnitQuantityType_cbc)
  protected
    { IXMLConsumerUnitQuantityType_cbc }
  end;

{ TXMLHazardousRiskIndicatorType_cbc }

  TXMLHazardousRiskIndicatorType_cbc = class(TXMLNode, IXMLHazardousRiskIndicatorType_cbc)
  protected
    { IXMLHazardousRiskIndicatorType_cbc }
  end;

{ TXMLShipmentType_cac }

  TXMLShipmentType_cac = class(TXMLNode, IXMLShipmentType_cac)
  private
    FHandlingInstructions: IXMLHandlingInstructionsType_cbcList;
    FInformation: IXMLInformationType_cbcList;
    FSpecialInstructions: IXMLSpecialInstructionsType_cbcList;
    FDeliveryInstructions: IXMLDeliveryInstructionsType_cbcList;
    FConsignment: IXMLConsignmentType_cacList;
    FGoodsItem: IXMLGoodsItemType_cacList;
    FShipmentStage: IXMLShipmentStageType_cacList;
    FTransportHandlingUnit: IXMLTransportHandlingUnitType_cacList;
    FFreightAllowanceCharge: IXMLAllowanceChargeType_cacList;
  protected
    { IXMLShipmentType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_ShippingPriorityLevelCode: IXMLShippingPriorityLevelCodeType_cbc;
    function Get_HandlingCode: IXMLHandlingCodeType_cbc;
    function Get_HandlingInstructions: IXMLHandlingInstructionsType_cbcList;
    function Get_Information: IXMLInformationType_cbcList;
    function Get_GrossWeightMeasure: IXMLGrossWeightMeasureType_cbc;
    function Get_NetWeightMeasure: IXMLNetWeightMeasureType_cbc;
    function Get_NetNetWeightMeasure: IXMLNetNetWeightMeasureType_cbc;
    function Get_GrossVolumeMeasure: IXMLGrossVolumeMeasureType_cbc;
    function Get_NetVolumeMeasure: IXMLNetVolumeMeasureType_cbc;
    function Get_TotalGoodsItemQuantity: IXMLTotalGoodsItemQuantityType_cbc;
    function Get_TotalTransportHandlingUnitQuantity: IXMLTotalTransportHandlingUnitQuantityType_cbc;
    function Get_InsuranceValueAmount: IXMLInsuranceValueAmountType_cbc;
    function Get_DeclaredCustomsValueAmount: IXMLDeclaredCustomsValueAmountType_cbc;
    function Get_DeclaredForCarriageValueAmount: IXMLDeclaredForCarriageValueAmountType_cbc;
    function Get_DeclaredStatisticsValueAmount: IXMLDeclaredStatisticsValueAmountType_cbc;
    function Get_FreeOnBoardValueAmount: IXMLFreeOnBoardValueAmountType_cbc;
    function Get_SpecialInstructions: IXMLSpecialInstructionsType_cbcList;
    function Get_DeliveryInstructions: IXMLDeliveryInstructionsType_cbcList;
    function Get_SplitConsignmentIndicator: IXMLSplitConsignmentIndicatorType_cbc;
    function Get_ConsignmentQuantity: IXMLConsignmentQuantityType_cbc;
    function Get_Consignment: IXMLConsignmentType_cacList;
    function Get_GoodsItem: IXMLGoodsItemType_cacList;
    function Get_ShipmentStage: IXMLShipmentStageType_cacList;
    function Get_Delivery: IXMLDeliveryType_cac;
    function Get_TransportHandlingUnit: IXMLTransportHandlingUnitType_cacList;
    function Get_ReturnAddress: IXMLAddressType_cac;
    function Get_OriginAddress: IXMLAddressType_cac;
    function Get_FirstArrivalPortLocation: IXMLLocationType_cac;
    function Get_LastExitPortLocation: IXMLLocationType_cac;
    function Get_ExportCountry: IXMLCountryType_cac;
    function Get_FreightAllowanceCharge: IXMLAllowanceChargeType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLShipmentType_cacList }

  TXMLShipmentType_cacList = class(TXMLNodeCollection, IXMLShipmentType_cacList)
  protected
    { IXMLShipmentType_cacList }
    function Add: IXMLShipmentType_cac;
    function Insert(const Index: Integer): IXMLShipmentType_cac;

    function Get_Item(const Index: Integer): IXMLShipmentType_cac;
  end;

{ TXMLShippingPriorityLevelCodeType_cbc }

  TXMLShippingPriorityLevelCodeType_cbc = class(TXMLNode, IXMLShippingPriorityLevelCodeType_cbc)
  protected
    { IXMLShippingPriorityLevelCodeType_cbc }
  end;

{ TXMLHandlingCodeType_cbc }

  TXMLHandlingCodeType_cbc = class(TXMLNode, IXMLHandlingCodeType_cbc)
  protected
    { IXMLHandlingCodeType_cbc }
  end;

{ TXMLHandlingInstructionsType_cbc }

  TXMLHandlingInstructionsType_cbc = class(TXMLNode, IXMLHandlingInstructionsType_cbc)
  protected
    { IXMLHandlingInstructionsType_cbc }
  end;

{ TXMLHandlingInstructionsType_cbcList }

  TXMLHandlingInstructionsType_cbcList = class(TXMLNodeCollection, IXMLHandlingInstructionsType_cbcList)
  protected
    { IXMLHandlingInstructionsType_cbcList }
    function Add: IXMLHandlingInstructionsType_cbc;
    function Insert(const Index: Integer): IXMLHandlingInstructionsType_cbc;

    function Get_Item(const Index: Integer): IXMLHandlingInstructionsType_cbc;
  end;

{ TXMLInformationType_cbc }

  TXMLInformationType_cbc = class(TXMLNode, IXMLInformationType_cbc)
  protected
    { IXMLInformationType_cbc }
  end;

{ TXMLInformationType_cbcList }

  TXMLInformationType_cbcList = class(TXMLNodeCollection, IXMLInformationType_cbcList)
  protected
    { IXMLInformationType_cbcList }
    function Add: IXMLInformationType_cbc;
    function Insert(const Index: Integer): IXMLInformationType_cbc;

    function Get_Item(const Index: Integer): IXMLInformationType_cbc;
  end;

{ TXMLGrossWeightMeasureType_cbc }

  TXMLGrossWeightMeasureType_cbc = class(TXMLNode, IXMLGrossWeightMeasureType_cbc)
  protected
    { IXMLGrossWeightMeasureType_cbc }
  end;

{ TXMLNetWeightMeasureType_cbc }

  TXMLNetWeightMeasureType_cbc = class(TXMLNode, IXMLNetWeightMeasureType_cbc)
  protected
    { IXMLNetWeightMeasureType_cbc }
  end;

{ TXMLNetNetWeightMeasureType_cbc }

  TXMLNetNetWeightMeasureType_cbc = class(TXMLNode, IXMLNetNetWeightMeasureType_cbc)
  protected
    { IXMLNetNetWeightMeasureType_cbc }
  end;

{ TXMLGrossVolumeMeasureType_cbc }

  TXMLGrossVolumeMeasureType_cbc = class(TXMLNode, IXMLGrossVolumeMeasureType_cbc)
  protected
    { IXMLGrossVolumeMeasureType_cbc }
  end;

{ TXMLNetVolumeMeasureType_cbc }

  TXMLNetVolumeMeasureType_cbc = class(TXMLNode, IXMLNetVolumeMeasureType_cbc)
  protected
    { IXMLNetVolumeMeasureType_cbc }
  end;

{ TXMLTotalGoodsItemQuantityType_cbc }

  TXMLTotalGoodsItemQuantityType_cbc = class(TXMLNode, IXMLTotalGoodsItemQuantityType_cbc)
  protected
    { IXMLTotalGoodsItemQuantityType_cbc }
  end;

{ TXMLTotalTransportHandlingUnitQuantityType_cbc }

  TXMLTotalTransportHandlingUnitQuantityType_cbc = class(TXMLNode, IXMLTotalTransportHandlingUnitQuantityType_cbc)
  protected
    { IXMLTotalTransportHandlingUnitQuantityType_cbc }
  end;

{ TXMLInsuranceValueAmountType_cbc }

  TXMLInsuranceValueAmountType_cbc = class(TXMLNode, IXMLInsuranceValueAmountType_cbc)
  protected
    { IXMLInsuranceValueAmountType_cbc }
  end;

{ TXMLDeclaredCustomsValueAmountType_cbc }

  TXMLDeclaredCustomsValueAmountType_cbc = class(TXMLNode, IXMLDeclaredCustomsValueAmountType_cbc)
  protected
    { IXMLDeclaredCustomsValueAmountType_cbc }
  end;

{ TXMLDeclaredForCarriageValueAmountType_cbc }

  TXMLDeclaredForCarriageValueAmountType_cbc = class(TXMLNode, IXMLDeclaredForCarriageValueAmountType_cbc)
  protected
    { IXMLDeclaredForCarriageValueAmountType_cbc }
  end;

{ TXMLDeclaredStatisticsValueAmountType_cbc }

  TXMLDeclaredStatisticsValueAmountType_cbc = class(TXMLNode, IXMLDeclaredStatisticsValueAmountType_cbc)
  protected
    { IXMLDeclaredStatisticsValueAmountType_cbc }
  end;

{ TXMLFreeOnBoardValueAmountType_cbc }

  TXMLFreeOnBoardValueAmountType_cbc = class(TXMLNode, IXMLFreeOnBoardValueAmountType_cbc)
  protected
    { IXMLFreeOnBoardValueAmountType_cbc }
  end;

{ TXMLSpecialInstructionsType_cbc }

  TXMLSpecialInstructionsType_cbc = class(TXMLNode, IXMLSpecialInstructionsType_cbc)
  protected
    { IXMLSpecialInstructionsType_cbc }
  end;

{ TXMLSpecialInstructionsType_cbcList }

  TXMLSpecialInstructionsType_cbcList = class(TXMLNodeCollection, IXMLSpecialInstructionsType_cbcList)
  protected
    { IXMLSpecialInstructionsType_cbcList }
    function Add: IXMLSpecialInstructionsType_cbc;
    function Insert(const Index: Integer): IXMLSpecialInstructionsType_cbc;

    function Get_Item(const Index: Integer): IXMLSpecialInstructionsType_cbc;
  end;

{ TXMLDeliveryInstructionsType_cbc }

  TXMLDeliveryInstructionsType_cbc = class(TXMLNode, IXMLDeliveryInstructionsType_cbc)
  protected
    { IXMLDeliveryInstructionsType_cbc }
  end;

{ TXMLDeliveryInstructionsType_cbcList }

  TXMLDeliveryInstructionsType_cbcList = class(TXMLNodeCollection, IXMLDeliveryInstructionsType_cbcList)
  protected
    { IXMLDeliveryInstructionsType_cbcList }
    function Add: IXMLDeliveryInstructionsType_cbc;
    function Insert(const Index: Integer): IXMLDeliveryInstructionsType_cbc;

    function Get_Item(const Index: Integer): IXMLDeliveryInstructionsType_cbc;
  end;

{ TXMLSplitConsignmentIndicatorType_cbc }

  TXMLSplitConsignmentIndicatorType_cbc = class(TXMLNode, IXMLSplitConsignmentIndicatorType_cbc)
  protected
    { IXMLSplitConsignmentIndicatorType_cbc }
  end;

{ TXMLConsignmentQuantityType_cbc }

  TXMLConsignmentQuantityType_cbc = class(TXMLNode, IXMLConsignmentQuantityType_cbc)
  protected
    { IXMLConsignmentQuantityType_cbc }
  end;

{ TXMLConsignmentType_cac }

  TXMLConsignmentType_cac = class(TXMLNode, IXMLConsignmentType_cac)
  private
    FSummaryDescription: IXMLSummaryDescriptionType_cbcList;
    FTariffDescription: IXMLTariffDescriptionType_cbcList;
    FRemarks: IXMLRemarksType_cbcList;
    FCarrierServiceInstructions: IXMLCarrierServiceInstructionsType_cbcList;
    FCustomsClearanceServiceInstructions: IXMLCustomsClearanceServiceInstructionsType_cbcList;
    FForwarderServiceInstructions: IXMLForwarderServiceInstructionsType_cbcList;
    FSpecialServiceInstructions: IXMLSpecialServiceInstructionsType_cbcList;
    FHandlingInstructions: IXMLHandlingInstructionsType_cbcList;
    FInformation: IXMLInformationType_cbcList;
    FSpecialInstructions: IXMLSpecialInstructionsType_cbcList;
    FDeliveryInstructions: IXMLDeliveryInstructionsType_cbcList;
    FHaulageInstructions: IXMLHaulageInstructionsType_cbcList;
    FConsolidatedShipment: IXMLShipmentType_cacList;
    FCustomsDeclaration: IXMLCustomsDeclarationType_cacList;
    FStatus: IXMLStatusType_cacList;
    FChildConsignment: IXMLConsignmentType_cacList;
    FTransitCountry: IXMLCountryType_cacList;
    FTransportEvent: IXMLTransportEventType_cacList;
    FFreightAllowanceCharge: IXMLAllowanceChargeType_cacList;
    FExtraAllowanceCharge: IXMLAllowanceChargeType_cacList;
    FMainCarriageShipmentStage: IXMLShipmentStageType_cacList;
    FPreCarriageShipmentStage: IXMLShipmentStageType_cacList;
    FOnCarriageShipmentStage: IXMLShipmentStageType_cacList;
    FTransportHandlingUnit: IXMLTransportHandlingUnitType_cacList;
  protected
    { IXMLConsignmentType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_CarrierAssignedID: IXMLCarrierAssignedIDType_cbc;
    function Get_ConsigneeAssignedID: IXMLConsigneeAssignedIDType_cbc;
    function Get_ConsignorAssignedID: IXMLConsignorAssignedIDType_cbc;
    function Get_FreightForwarderAssignedID: IXMLFreightForwarderAssignedIDType_cbc;
    function Get_BrokerAssignedID: IXMLBrokerAssignedIDType_cbc;
    function Get_ContractedCarrierAssignedID: IXMLContractedCarrierAssignedIDType_cbc;
    function Get_PerformingCarrierAssignedID: IXMLPerformingCarrierAssignedIDType_cbc;
    function Get_SummaryDescription: IXMLSummaryDescriptionType_cbcList;
    function Get_TotalInvoiceAmount: IXMLTotalInvoiceAmountType_cbc;
    function Get_DeclaredCustomsValueAmount: IXMLDeclaredCustomsValueAmountType_cbc;
    function Get_TariffDescription: IXMLTariffDescriptionType_cbcList;
    function Get_TariffCode: IXMLTariffCodeType_cbc;
    function Get_InsurancePremiumAmount: IXMLInsurancePremiumAmountType_cbc;
    function Get_GrossWeightMeasure: IXMLGrossWeightMeasureType_cbc;
    function Get_NetWeightMeasure: IXMLNetWeightMeasureType_cbc;
    function Get_NetNetWeightMeasure: IXMLNetNetWeightMeasureType_cbc;
    function Get_ChargeableWeightMeasure: IXMLChargeableWeightMeasureType_cbc;
    function Get_GrossVolumeMeasure: IXMLGrossVolumeMeasureType_cbc;
    function Get_NetVolumeMeasure: IXMLNetVolumeMeasureType_cbc;
    function Get_LoadingLengthMeasure: IXMLLoadingLengthMeasureType_cbc;
    function Get_Remarks: IXMLRemarksType_cbcList;
    function Get_HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc;
    function Get_AnimalFoodIndicator: IXMLAnimalFoodIndicatorType_cbc;
    function Get_HumanFoodIndicator: IXMLHumanFoodIndicatorType_cbc;
    function Get_LivestockIndicator: IXMLLivestockIndicatorType_cbc;
    function Get_BulkCargoIndicator: IXMLBulkCargoIndicatorType_cbc;
    function Get_ContainerizedIndicator: IXMLContainerizedIndicatorType_cbc;
    function Get_GeneralCargoIndicator: IXMLGeneralCargoIndicatorType_cbc;
    function Get_SpecialSecurityIndicator: IXMLSpecialSecurityIndicatorType_cbc;
    function Get_ThirdPartyPayerIndicator: IXMLThirdPartyPayerIndicatorType_cbc;
    function Get_CarrierServiceInstructions: IXMLCarrierServiceInstructionsType_cbcList;
    function Get_CustomsClearanceServiceInstructions: IXMLCustomsClearanceServiceInstructionsType_cbcList;
    function Get_ForwarderServiceInstructions: IXMLForwarderServiceInstructionsType_cbcList;
    function Get_SpecialServiceInstructions: IXMLSpecialServiceInstructionsType_cbcList;
    function Get_SequenceID: IXMLSequenceIDType_cbc;
    function Get_ShippingPriorityLevelCode: IXMLShippingPriorityLevelCodeType_cbc;
    function Get_HandlingCode: IXMLHandlingCodeType_cbc;
    function Get_HandlingInstructions: IXMLHandlingInstructionsType_cbcList;
    function Get_Information: IXMLInformationType_cbcList;
    function Get_TotalGoodsItemQuantity: IXMLTotalGoodsItemQuantityType_cbc;
    function Get_TotalTransportHandlingUnitQuantity: IXMLTotalTransportHandlingUnitQuantityType_cbc;
    function Get_InsuranceValueAmount: IXMLInsuranceValueAmountType_cbc;
    function Get_DeclaredForCarriageValueAmount: IXMLDeclaredForCarriageValueAmountType_cbc;
    function Get_DeclaredStatisticsValueAmount: IXMLDeclaredStatisticsValueAmountType_cbc;
    function Get_FreeOnBoardValueAmount: IXMLFreeOnBoardValueAmountType_cbc;
    function Get_SpecialInstructions: IXMLSpecialInstructionsType_cbcList;
    function Get_SplitConsignmentIndicator: IXMLSplitConsignmentIndicatorType_cbc;
    function Get_DeliveryInstructions: IXMLDeliveryInstructionsType_cbcList;
    function Get_ConsignmentQuantity: IXMLConsignmentQuantityType_cbc;
    function Get_ConsolidatableIndicator: IXMLConsolidatableIndicatorType_cbc;
    function Get_HaulageInstructions: IXMLHaulageInstructionsType_cbcList;
    function Get_LoadingSequenceID: IXMLLoadingSequenceIDType_cbc;
    function Get_ChildConsignmentQuantity: IXMLChildConsignmentQuantityType_cbc;
    function Get_TotalPackagesQuantity: IXMLTotalPackagesQuantityType_cbc;
    function Get_ConsolidatedShipment: IXMLShipmentType_cacList;
    function Get_CustomsDeclaration: IXMLCustomsDeclarationType_cacList;
    function Get_RequestedPickupTransportEvent: IXMLTransportEventType_cac;
    function Get_RequestedDeliveryTransportEvent: IXMLTransportEventType_cac;
    function Get_PlannedPickupTransportEvent: IXMLTransportEventType_cac;
    function Get_PlannedDeliveryTransportEvent: IXMLTransportEventType_cac;
    function Get_Status: IXMLStatusType_cacList;
    function Get_ChildConsignment: IXMLConsignmentType_cacList;
    function Get_ConsigneeParty: IXMLPartyType_cac;
    function Get_ExporterParty: IXMLPartyType_cac;
    function Get_ConsignorParty: IXMLPartyType_cac;
    function Get_ImporterParty: IXMLPartyType_cac;
    function Get_CarrierParty: IXMLPartyType_cac;
    function Get_FreightForwarderParty: IXMLPartyType_cac;
    function Get_NotifyParty: IXMLPartyType_cac;
    function Get_OriginalDespatchParty: IXMLPartyType_cac;
    function Get_FinalDeliveryParty: IXMLPartyType_cac;
    function Get_PerformingCarrierParty: IXMLPartyType_cac;
    function Get_SubstituteCarrierParty: IXMLPartyType_cac;
    function Get_LogisticsOperatorParty: IXMLPartyType_cac;
    function Get_TransportAdvisorParty: IXMLPartyType_cac;
    function Get_HazardousItemNotificationParty: IXMLPartyType_cac;
    function Get_InsuranceParty: IXMLPartyType_cac;
    function Get_MortgageHolderParty: IXMLPartyType_cac;
    function Get_BillOfLadingHolderParty: IXMLPartyType_cac;
    function Get_OriginalDepartureCountry: IXMLCountryType_cac;
    function Get_FinalDestinationCountry: IXMLCountryType_cac;
    function Get_TransitCountry: IXMLCountryType_cacList;
    function Get_TransportContract: IXMLContractType_cac;
    function Get_TransportEvent: IXMLTransportEventType_cacList;
    function Get_OriginalDespatchTransportationService: IXMLTransportationServiceType_cac;
    function Get_FinalDeliveryTransportationService: IXMLTransportationServiceType_cac;
    function Get_DeliveryTerms: IXMLDeliveryTermsType_cac;
    function Get_PaymentTerms: IXMLPaymentTermsType_cac;
    function Get_CollectPaymentTerms: IXMLPaymentTermsType_cac;
    function Get_DisbursementPaymentTerms: IXMLPaymentTermsType_cac;
    function Get_PrepaidPaymentTerms: IXMLPaymentTermsType_cac;
    function Get_FreightAllowanceCharge: IXMLAllowanceChargeType_cacList;
    function Get_ExtraAllowanceCharge: IXMLAllowanceChargeType_cacList;
    function Get_MainCarriageShipmentStage: IXMLShipmentStageType_cacList;
    function Get_PreCarriageShipmentStage: IXMLShipmentStageType_cacList;
    function Get_OnCarriageShipmentStage: IXMLShipmentStageType_cacList;
    function Get_TransportHandlingUnit: IXMLTransportHandlingUnitType_cacList;
    function Get_FirstArrivalPortLocation: IXMLLocationType_cac;
    function Get_LastExitPortLocation: IXMLLocationType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLConsignmentType_cacList }

  TXMLConsignmentType_cacList = class(TXMLNodeCollection, IXMLConsignmentType_cacList)
  protected
    { IXMLConsignmentType_cacList }
    function Add: IXMLConsignmentType_cac;
    function Insert(const Index: Integer): IXMLConsignmentType_cac;

    function Get_Item(const Index: Integer): IXMLConsignmentType_cac;
  end;

{ TXMLCarrierAssignedIDType_cbc }

  TXMLCarrierAssignedIDType_cbc = class(TXMLNode, IXMLCarrierAssignedIDType_cbc)
  protected
    { IXMLCarrierAssignedIDType_cbc }
  end;

{ TXMLConsigneeAssignedIDType_cbc }

  TXMLConsigneeAssignedIDType_cbc = class(TXMLNode, IXMLConsigneeAssignedIDType_cbc)
  protected
    { IXMLConsigneeAssignedIDType_cbc }
  end;

{ TXMLConsignorAssignedIDType_cbc }

  TXMLConsignorAssignedIDType_cbc = class(TXMLNode, IXMLConsignorAssignedIDType_cbc)
  protected
    { IXMLConsignorAssignedIDType_cbc }
  end;

{ TXMLFreightForwarderAssignedIDType_cbc }

  TXMLFreightForwarderAssignedIDType_cbc = class(TXMLNode, IXMLFreightForwarderAssignedIDType_cbc)
  protected
    { IXMLFreightForwarderAssignedIDType_cbc }
  end;

{ TXMLBrokerAssignedIDType_cbc }

  TXMLBrokerAssignedIDType_cbc = class(TXMLNode, IXMLBrokerAssignedIDType_cbc)
  protected
    { IXMLBrokerAssignedIDType_cbc }
  end;

{ TXMLContractedCarrierAssignedIDType_cbc }

  TXMLContractedCarrierAssignedIDType_cbc = class(TXMLNode, IXMLContractedCarrierAssignedIDType_cbc)
  protected
    { IXMLContractedCarrierAssignedIDType_cbc }
  end;

{ TXMLPerformingCarrierAssignedIDType_cbc }

  TXMLPerformingCarrierAssignedIDType_cbc = class(TXMLNode, IXMLPerformingCarrierAssignedIDType_cbc)
  protected
    { IXMLPerformingCarrierAssignedIDType_cbc }
  end;

{ TXMLSummaryDescriptionType_cbc }

  TXMLSummaryDescriptionType_cbc = class(TXMLNode, IXMLSummaryDescriptionType_cbc)
  protected
    { IXMLSummaryDescriptionType_cbc }
  end;

{ TXMLSummaryDescriptionType_cbcList }

  TXMLSummaryDescriptionType_cbcList = class(TXMLNodeCollection, IXMLSummaryDescriptionType_cbcList)
  protected
    { IXMLSummaryDescriptionType_cbcList }
    function Add: IXMLSummaryDescriptionType_cbc;
    function Insert(const Index: Integer): IXMLSummaryDescriptionType_cbc;

    function Get_Item(const Index: Integer): IXMLSummaryDescriptionType_cbc;
  end;

{ TXMLTotalInvoiceAmountType_cbc }

  TXMLTotalInvoiceAmountType_cbc = class(TXMLNode, IXMLTotalInvoiceAmountType_cbc)
  protected
    { IXMLTotalInvoiceAmountType_cbc }
  end;

{ TXMLTariffDescriptionType_cbc }

  TXMLTariffDescriptionType_cbc = class(TXMLNode, IXMLTariffDescriptionType_cbc)
  protected
    { IXMLTariffDescriptionType_cbc }
  end;

{ TXMLTariffDescriptionType_cbcList }

  TXMLTariffDescriptionType_cbcList = class(TXMLNodeCollection, IXMLTariffDescriptionType_cbcList)
  protected
    { IXMLTariffDescriptionType_cbcList }
    function Add: IXMLTariffDescriptionType_cbc;
    function Insert(const Index: Integer): IXMLTariffDescriptionType_cbc;

    function Get_Item(const Index: Integer): IXMLTariffDescriptionType_cbc;
  end;

{ TXMLTariffCodeType_cbc }

  TXMLTariffCodeType_cbc = class(TXMLNode, IXMLTariffCodeType_cbc)
  protected
    { IXMLTariffCodeType_cbc }
  end;

{ TXMLInsurancePremiumAmountType_cbc }

  TXMLInsurancePremiumAmountType_cbc = class(TXMLNode, IXMLInsurancePremiumAmountType_cbc)
  protected
    { IXMLInsurancePremiumAmountType_cbc }
  end;

{ TXMLChargeableWeightMeasureType_cbc }

  TXMLChargeableWeightMeasureType_cbc = class(TXMLNode, IXMLChargeableWeightMeasureType_cbc)
  protected
    { IXMLChargeableWeightMeasureType_cbc }
  end;

{ TXMLLoadingLengthMeasureType_cbc }

  TXMLLoadingLengthMeasureType_cbc = class(TXMLNode, IXMLLoadingLengthMeasureType_cbc)
  protected
    { IXMLLoadingLengthMeasureType_cbc }
  end;

{ TXMLRemarksType_cbc }

  TXMLRemarksType_cbc = class(TXMLNode, IXMLRemarksType_cbc)
  protected
    { IXMLRemarksType_cbc }
  end;

{ TXMLRemarksType_cbcList }

  TXMLRemarksType_cbcList = class(TXMLNodeCollection, IXMLRemarksType_cbcList)
  protected
    { IXMLRemarksType_cbcList }
    function Add: IXMLRemarksType_cbc;
    function Insert(const Index: Integer): IXMLRemarksType_cbc;

    function Get_Item(const Index: Integer): IXMLRemarksType_cbc;
  end;

{ TXMLAnimalFoodIndicatorType_cbc }

  TXMLAnimalFoodIndicatorType_cbc = class(TXMLNode, IXMLAnimalFoodIndicatorType_cbc)
  protected
    { IXMLAnimalFoodIndicatorType_cbc }
  end;

{ TXMLHumanFoodIndicatorType_cbc }

  TXMLHumanFoodIndicatorType_cbc = class(TXMLNode, IXMLHumanFoodIndicatorType_cbc)
  protected
    { IXMLHumanFoodIndicatorType_cbc }
  end;

{ TXMLLivestockIndicatorType_cbc }

  TXMLLivestockIndicatorType_cbc = class(TXMLNode, IXMLLivestockIndicatorType_cbc)
  protected
    { IXMLLivestockIndicatorType_cbc }
  end;

{ TXMLBulkCargoIndicatorType_cbc }

  TXMLBulkCargoIndicatorType_cbc = class(TXMLNode, IXMLBulkCargoIndicatorType_cbc)
  protected
    { IXMLBulkCargoIndicatorType_cbc }
  end;

{ TXMLContainerizedIndicatorType_cbc }

  TXMLContainerizedIndicatorType_cbc = class(TXMLNode, IXMLContainerizedIndicatorType_cbc)
  protected
    { IXMLContainerizedIndicatorType_cbc }
  end;

{ TXMLGeneralCargoIndicatorType_cbc }

  TXMLGeneralCargoIndicatorType_cbc = class(TXMLNode, IXMLGeneralCargoIndicatorType_cbc)
  protected
    { IXMLGeneralCargoIndicatorType_cbc }
  end;

{ TXMLSpecialSecurityIndicatorType_cbc }

  TXMLSpecialSecurityIndicatorType_cbc = class(TXMLNode, IXMLSpecialSecurityIndicatorType_cbc)
  protected
    { IXMLSpecialSecurityIndicatorType_cbc }
  end;

{ TXMLThirdPartyPayerIndicatorType_cbc }

  TXMLThirdPartyPayerIndicatorType_cbc = class(TXMLNode, IXMLThirdPartyPayerIndicatorType_cbc)
  protected
    { IXMLThirdPartyPayerIndicatorType_cbc }
  end;

{ TXMLCarrierServiceInstructionsType_cbc }

  TXMLCarrierServiceInstructionsType_cbc = class(TXMLNode, IXMLCarrierServiceInstructionsType_cbc)
  protected
    { IXMLCarrierServiceInstructionsType_cbc }
  end;

{ TXMLCarrierServiceInstructionsType_cbcList }

  TXMLCarrierServiceInstructionsType_cbcList = class(TXMLNodeCollection, IXMLCarrierServiceInstructionsType_cbcList)
  protected
    { IXMLCarrierServiceInstructionsType_cbcList }
    function Add: IXMLCarrierServiceInstructionsType_cbc;
    function Insert(const Index: Integer): IXMLCarrierServiceInstructionsType_cbc;

    function Get_Item(const Index: Integer): IXMLCarrierServiceInstructionsType_cbc;
  end;

{ TXMLCustomsClearanceServiceInstructionsType_cbc }

  TXMLCustomsClearanceServiceInstructionsType_cbc = class(TXMLNode, IXMLCustomsClearanceServiceInstructionsType_cbc)
  protected
    { IXMLCustomsClearanceServiceInstructionsType_cbc }
  end;

{ TXMLCustomsClearanceServiceInstructionsType_cbcList }

  TXMLCustomsClearanceServiceInstructionsType_cbcList = class(TXMLNodeCollection, IXMLCustomsClearanceServiceInstructionsType_cbcList)
  protected
    { IXMLCustomsClearanceServiceInstructionsType_cbcList }
    function Add: IXMLCustomsClearanceServiceInstructionsType_cbc;
    function Insert(const Index: Integer): IXMLCustomsClearanceServiceInstructionsType_cbc;

    function Get_Item(const Index: Integer): IXMLCustomsClearanceServiceInstructionsType_cbc;
  end;

{ TXMLForwarderServiceInstructionsType_cbc }

  TXMLForwarderServiceInstructionsType_cbc = class(TXMLNode, IXMLForwarderServiceInstructionsType_cbc)
  protected
    { IXMLForwarderServiceInstructionsType_cbc }
  end;

{ TXMLForwarderServiceInstructionsType_cbcList }

  TXMLForwarderServiceInstructionsType_cbcList = class(TXMLNodeCollection, IXMLForwarderServiceInstructionsType_cbcList)
  protected
    { IXMLForwarderServiceInstructionsType_cbcList }
    function Add: IXMLForwarderServiceInstructionsType_cbc;
    function Insert(const Index: Integer): IXMLForwarderServiceInstructionsType_cbc;

    function Get_Item(const Index: Integer): IXMLForwarderServiceInstructionsType_cbc;
  end;

{ TXMLSpecialServiceInstructionsType_cbc }

  TXMLSpecialServiceInstructionsType_cbc = class(TXMLNode, IXMLSpecialServiceInstructionsType_cbc)
  protected
    { IXMLSpecialServiceInstructionsType_cbc }
  end;

{ TXMLSpecialServiceInstructionsType_cbcList }

  TXMLSpecialServiceInstructionsType_cbcList = class(TXMLNodeCollection, IXMLSpecialServiceInstructionsType_cbcList)
  protected
    { IXMLSpecialServiceInstructionsType_cbcList }
    function Add: IXMLSpecialServiceInstructionsType_cbc;
    function Insert(const Index: Integer): IXMLSpecialServiceInstructionsType_cbc;

    function Get_Item(const Index: Integer): IXMLSpecialServiceInstructionsType_cbc;
  end;

{ TXMLSequenceIDType_cbc }

  TXMLSequenceIDType_cbc = class(TXMLNode, IXMLSequenceIDType_cbc)
  protected
    { IXMLSequenceIDType_cbc }
  end;

{ TXMLConsolidatableIndicatorType_cbc }

  TXMLConsolidatableIndicatorType_cbc = class(TXMLNode, IXMLConsolidatableIndicatorType_cbc)
  protected
    { IXMLConsolidatableIndicatorType_cbc }
  end;

{ TXMLHaulageInstructionsType_cbc }

  TXMLHaulageInstructionsType_cbc = class(TXMLNode, IXMLHaulageInstructionsType_cbc)
  protected
    { IXMLHaulageInstructionsType_cbc }
  end;

{ TXMLHaulageInstructionsType_cbcList }

  TXMLHaulageInstructionsType_cbcList = class(TXMLNodeCollection, IXMLHaulageInstructionsType_cbcList)
  protected
    { IXMLHaulageInstructionsType_cbcList }
    function Add: IXMLHaulageInstructionsType_cbc;
    function Insert(const Index: Integer): IXMLHaulageInstructionsType_cbc;

    function Get_Item(const Index: Integer): IXMLHaulageInstructionsType_cbc;
  end;

{ TXMLLoadingSequenceIDType_cbc }

  TXMLLoadingSequenceIDType_cbc = class(TXMLNode, IXMLLoadingSequenceIDType_cbc)
  protected
    { IXMLLoadingSequenceIDType_cbc }
  end;

{ TXMLChildConsignmentQuantityType_cbc }

  TXMLChildConsignmentQuantityType_cbc = class(TXMLNode, IXMLChildConsignmentQuantityType_cbc)
  protected
    { IXMLChildConsignmentQuantityType_cbc }
  end;

{ TXMLTotalPackagesQuantityType_cbc }

  TXMLTotalPackagesQuantityType_cbc = class(TXMLNode, IXMLTotalPackagesQuantityType_cbc)
  protected
    { IXMLTotalPackagesQuantityType_cbc }
  end;

{ TXMLCustomsDeclarationType_cac }

  TXMLCustomsDeclarationType_cac = class(TXMLNode, IXMLCustomsDeclarationType_cac)
  protected
    { IXMLCustomsDeclarationType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_IssuerParty: IXMLPartyType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCustomsDeclarationType_cacList }

  TXMLCustomsDeclarationType_cacList = class(TXMLNodeCollection, IXMLCustomsDeclarationType_cacList)
  protected
    { IXMLCustomsDeclarationType_cacList }
    function Add: IXMLCustomsDeclarationType_cac;
    function Insert(const Index: Integer): IXMLCustomsDeclarationType_cac;

    function Get_Item(const Index: Integer): IXMLCustomsDeclarationType_cac;
  end;

{ TXMLTransportEventType_cac }

  TXMLTransportEventType_cac = class(TXMLNode, IXMLTransportEventType_cac)
  private
    FDescription: IXMLDescriptionType_cbcList;
    FCurrentStatus: IXMLStatusType_cacList;
    FContact: IXMLContactType_cacList;
    FPeriod: IXMLPeriodType_cacList;
  protected
    { IXMLTransportEventType_cac }
    function Get_IdentificationID: IXMLIdentificationIDType_cbc;
    function Get_OccurrenceDate: IXMLOccurrenceDateType_cbc;
    function Get_OccurrenceTime: IXMLOccurrenceTimeType_cbc;
    function Get_TransportEventTypeCode: IXMLTransportEventTypeCodeType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_CompletionIndicator: IXMLCompletionIndicatorType_cbc;
    function Get_ReportedShipment: IXMLShipmentType_cac;
    function Get_CurrentStatus: IXMLStatusType_cacList;
    function Get_Contact: IXMLContactType_cacList;
    function Get_Location: IXMLLocationType_cac;
    function Get_Signature: IXMLSignatureType_cac;
    function Get_Period: IXMLPeriodType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportEventType_cacList }

  TXMLTransportEventType_cacList = class(TXMLNodeCollection, IXMLTransportEventType_cacList)
  protected
    { IXMLTransportEventType_cacList }
    function Add: IXMLTransportEventType_cac;
    function Insert(const Index: Integer): IXMLTransportEventType_cac;

    function Get_Item(const Index: Integer): IXMLTransportEventType_cac;
  end;

{ TXMLIdentificationIDType_cbc }

  TXMLIdentificationIDType_cbc = class(TXMLNode, IXMLIdentificationIDType_cbc)
  protected
    { IXMLIdentificationIDType_cbc }
  end;

{ TXMLOccurrenceDateType_cbc }

  TXMLOccurrenceDateType_cbc = class(TXMLNode, IXMLOccurrenceDateType_cbc)
  protected
    { IXMLOccurrenceDateType_cbc }
  end;

{ TXMLOccurrenceTimeType_cbc }

  TXMLOccurrenceTimeType_cbc = class(TXMLNode, IXMLOccurrenceTimeType_cbc)
  protected
    { IXMLOccurrenceTimeType_cbc }
  end;

{ TXMLTransportEventTypeCodeType_cbc }

  TXMLTransportEventTypeCodeType_cbc = class(TXMLNode, IXMLTransportEventTypeCodeType_cbc)
  protected
    { IXMLTransportEventTypeCodeType_cbc }
  end;

{ TXMLCompletionIndicatorType_cbc }

  TXMLCompletionIndicatorType_cbc = class(TXMLNode, IXMLCompletionIndicatorType_cbc)
  protected
    { IXMLCompletionIndicatorType_cbc }
  end;

{ TXMLStatusType_cac }

  TXMLStatusType_cac = class(TXMLNode, IXMLStatusType_cac)
  private
    FDescription: IXMLDescriptionType_cbcList;
    FStatusReason: IXMLStatusReasonType_cbcList;
    FText: IXMLTextType_cbcList;
    FCondition: IXMLConditionType_cacList;
  protected
    { IXMLStatusType_cac }
    function Get_ConditionCode: IXMLConditionCodeType_cbc;
    function Get_ReferenceDate: IXMLReferenceDateType_cbc;
    function Get_ReferenceTime: IXMLReferenceTimeType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_StatusReasonCode: IXMLStatusReasonCodeType_cbc;
    function Get_StatusReason: IXMLStatusReasonType_cbcList;
    function Get_SequenceID: IXMLSequenceIDType_cbc;
    function Get_Text: IXMLTextType_cbcList;
    function Get_IndicationIndicator: IXMLIndicationIndicatorType_cbc;
    function Get_Percent: IXMLPercentType_cbc;
    function Get_ReliabilityPercent: IXMLReliabilityPercentType_cbc;
    function Get_Condition: IXMLConditionType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLStatusType_cacList }

  TXMLStatusType_cacList = class(TXMLNodeCollection, IXMLStatusType_cacList)
  protected
    { IXMLStatusType_cacList }
    function Add: IXMLStatusType_cac;
    function Insert(const Index: Integer): IXMLStatusType_cac;

    function Get_Item(const Index: Integer): IXMLStatusType_cac;
  end;

{ TXMLConditionCodeType_cbc }

  TXMLConditionCodeType_cbc = class(TXMLNode, IXMLConditionCodeType_cbc)
  protected
    { IXMLConditionCodeType_cbc }
  end;

{ TXMLReferenceDateType_cbc }

  TXMLReferenceDateType_cbc = class(TXMLNode, IXMLReferenceDateType_cbc)
  protected
    { IXMLReferenceDateType_cbc }
  end;

{ TXMLReferenceTimeType_cbc }

  TXMLReferenceTimeType_cbc = class(TXMLNode, IXMLReferenceTimeType_cbc)
  protected
    { IXMLReferenceTimeType_cbc }
  end;

{ TXMLStatusReasonCodeType_cbc }

  TXMLStatusReasonCodeType_cbc = class(TXMLNode, IXMLStatusReasonCodeType_cbc)
  protected
    { IXMLStatusReasonCodeType_cbc }
  end;

{ TXMLStatusReasonType_cbc }

  TXMLStatusReasonType_cbc = class(TXMLNode, IXMLStatusReasonType_cbc)
  protected
    { IXMLStatusReasonType_cbc }
  end;

{ TXMLStatusReasonType_cbcList }

  TXMLStatusReasonType_cbcList = class(TXMLNodeCollection, IXMLStatusReasonType_cbcList)
  protected
    { IXMLStatusReasonType_cbcList }
    function Add: IXMLStatusReasonType_cbc;
    function Insert(const Index: Integer): IXMLStatusReasonType_cbc;

    function Get_Item(const Index: Integer): IXMLStatusReasonType_cbc;
  end;

{ TXMLTextType_cbc }

  TXMLTextType_cbc = class(TXMLNode, IXMLTextType_cbc)
  protected
    { IXMLTextType_cbc }
  end;

{ TXMLTextType_cbcList }

  TXMLTextType_cbcList = class(TXMLNodeCollection, IXMLTextType_cbcList)
  protected
    { IXMLTextType_cbcList }
    function Add: IXMLTextType_cbc;
    function Insert(const Index: Integer): IXMLTextType_cbc;

    function Get_Item(const Index: Integer): IXMLTextType_cbc;
  end;

{ TXMLIndicationIndicatorType_cbc }

  TXMLIndicationIndicatorType_cbc = class(TXMLNode, IXMLIndicationIndicatorType_cbc)
  protected
    { IXMLIndicationIndicatorType_cbc }
  end;

{ TXMLReliabilityPercentType_cbc }

  TXMLReliabilityPercentType_cbc = class(TXMLNode, IXMLReliabilityPercentType_cbc)
  protected
    { IXMLReliabilityPercentType_cbc }
  end;

{ TXMLConditionType_cac }

  TXMLConditionType_cac = class(TXMLNode, IXMLConditionType_cac)
  private
    FDescription: IXMLDescriptionType_cbcList;
  protected
    { IXMLConditionType_cac }
    function Get_AttributeID: IXMLAttributeIDType_cbc;
    function Get_Measure: IXMLMeasureType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_MinimumMeasure: IXMLMinimumMeasureType_cbc;
    function Get_MaximumMeasure: IXMLMaximumMeasureType_cbc;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLConditionType_cacList }

  TXMLConditionType_cacList = class(TXMLNodeCollection, IXMLConditionType_cacList)
  protected
    { IXMLConditionType_cacList }
    function Add: IXMLConditionType_cac;
    function Insert(const Index: Integer): IXMLConditionType_cac;

    function Get_Item(const Index: Integer): IXMLConditionType_cac;
  end;

{ TXMLAttributeIDType_cbc }

  TXMLAttributeIDType_cbc = class(TXMLNode, IXMLAttributeIDType_cbc)
  protected
    { IXMLAttributeIDType_cbc }
  end;

{ TXMLMeasureType_cbc }

  TXMLMeasureType_cbc = class(TXMLNode, IXMLMeasureType_cbc)
  protected
    { IXMLMeasureType_cbc }
  end;

{ TXMLMinimumMeasureType_cbc }

  TXMLMinimumMeasureType_cbc = class(TXMLNode, IXMLMinimumMeasureType_cbc)
  protected
    { IXMLMinimumMeasureType_cbc }
  end;

{ TXMLMaximumMeasureType_cbc }

  TXMLMaximumMeasureType_cbc = class(TXMLNode, IXMLMaximumMeasureType_cbc)
  protected
    { IXMLMaximumMeasureType_cbc }
  end;

{ TXMLContractType_cac }

  TXMLContractType_cac = class(TXMLNode, IXMLContractType_cac)
  private
    FNote: IXMLNoteType_cbcList;
    FDescription: IXMLDescriptionType_cbcList;
    FContractDocumentReference: IXMLDocumentReferenceType_cacList;
  protected
    { IXMLContractType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_IssueDate: IXMLIssueDateType_cbc;
    function Get_IssueTime: IXMLIssueTimeType_cbc;
    function Get_NominationDate: IXMLNominationDateType_cbc;
    function Get_NominationTime: IXMLNominationTimeType_cbc;
    function Get_ContractTypeCode: IXMLContractTypeCodeType_cbc;
    function Get_ContractType: IXMLContractTypeType_cbc;
    function Get_Note: IXMLNoteType_cbcList;
    function Get_VersionID: IXMLVersionIDType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_ValidityPeriod: IXMLPeriodType_cac;
    function Get_ContractDocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_NominationPeriod: IXMLPeriodType_cac;
    function Get_ContractualDelivery: IXMLDeliveryType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLNominationDateType_cbc }

  TXMLNominationDateType_cbc = class(TXMLNode, IXMLNominationDateType_cbc)
  protected
    { IXMLNominationDateType_cbc }
  end;

{ TXMLNominationTimeType_cbc }

  TXMLNominationTimeType_cbc = class(TXMLNode, IXMLNominationTimeType_cbc)
  protected
    { IXMLNominationTimeType_cbc }
  end;

{ TXMLContractTypeCodeType_cbc }

  TXMLContractTypeCodeType_cbc = class(TXMLNode, IXMLContractTypeCodeType_cbc)
  protected
    { IXMLContractTypeCodeType_cbc }
  end;

{ TXMLContractTypeType_cbc }

  TXMLContractTypeType_cbc = class(TXMLNode, IXMLContractTypeType_cbc)
  protected
    { IXMLContractTypeType_cbc }
  end;

{ TXMLTransportationServiceType_cac }

  TXMLTransportationServiceType_cac = class(TXMLNode, IXMLTransportationServiceType_cac)
  private
    FTransportationServiceDescription: IXMLTransportationServiceDescriptionType_cbcList;
    FTransportEquipment: IXMLTransportEquipmentType_cacList;
    FSupportedTransportEquipment: IXMLTransportEquipmentType_cacList;
    FUnsupportedTransportEquipment: IXMLTransportEquipmentType_cacList;
    FCommodityClassification: IXMLCommodityClassificationType_cacList;
    FSupportedCommodityClassification: IXMLCommodityClassificationType_cacList;
    FUnsupportedCommodityClassification: IXMLCommodityClassificationType_cacList;
    FShipmentStage: IXMLShipmentStageType_cacList;
    FTransportEvent: IXMLTransportEventType_cacList;
    FEnvironmentalEmission: IXMLEnvironmentalEmissionType_cacList;
    FScheduledServiceFrequency: IXMLServiceFrequencyType_cacList;
  protected
    { IXMLTransportationServiceType_cac }
    function Get_TransportServiceCode: IXMLTransportServiceCodeType_cbc;
    function Get_TariffClassCode: IXMLTariffClassCodeType_cbc;
    function Get_Priority: IXMLPriorityType_cbc;
    function Get_FreightRateClassCode: IXMLFreightRateClassCodeType_cbc;
    function Get_TransportationServiceDescription: IXMLTransportationServiceDescriptionType_cbcList;
    function Get_TransportationServiceDetailsURI: IXMLTransportationServiceDetailsURIType_cbc;
    function Get_NominationDate: IXMLNominationDateType_cbc;
    function Get_NominationTime: IXMLNominationTimeType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_SequenceNumeric: IXMLSequenceNumericType_cbc;
    function Get_TransportEquipment: IXMLTransportEquipmentType_cacList;
    function Get_SupportedTransportEquipment: IXMLTransportEquipmentType_cacList;
    function Get_UnsupportedTransportEquipment: IXMLTransportEquipmentType_cacList;
    function Get_CommodityClassification: IXMLCommodityClassificationType_cacList;
    function Get_SupportedCommodityClassification: IXMLCommodityClassificationType_cacList;
    function Get_UnsupportedCommodityClassification: IXMLCommodityClassificationType_cacList;
    function Get_TotalCapacityDimension: IXMLDimensionType_cac;
    function Get_ShipmentStage: IXMLShipmentStageType_cacList;
    function Get_TransportEvent: IXMLTransportEventType_cacList;
    function Get_ResponsibleTransportServiceProviderParty: IXMLPartyType_cac;
    function Get_EnvironmentalEmission: IXMLEnvironmentalEmissionType_cacList;
    function Get_EstimatedDurationPeriod: IXMLPeriodType_cac;
    function Get_ScheduledServiceFrequency: IXMLServiceFrequencyType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportServiceCodeType_cbc }

  TXMLTransportServiceCodeType_cbc = class(TXMLNode, IXMLTransportServiceCodeType_cbc)
  protected
    { IXMLTransportServiceCodeType_cbc }
  end;

{ TXMLTariffClassCodeType_cbc }

  TXMLTariffClassCodeType_cbc = class(TXMLNode, IXMLTariffClassCodeType_cbc)
  protected
    { IXMLTariffClassCodeType_cbc }
  end;

{ TXMLPriorityType_cbc }

  TXMLPriorityType_cbc = class(TXMLNode, IXMLPriorityType_cbc)
  protected
    { IXMLPriorityType_cbc }
  end;

{ TXMLFreightRateClassCodeType_cbc }

  TXMLFreightRateClassCodeType_cbc = class(TXMLNode, IXMLFreightRateClassCodeType_cbc)
  protected
    { IXMLFreightRateClassCodeType_cbc }
  end;

{ TXMLTransportationServiceDescriptionType_cbc }

  TXMLTransportationServiceDescriptionType_cbc = class(TXMLNode, IXMLTransportationServiceDescriptionType_cbc)
  protected
    { IXMLTransportationServiceDescriptionType_cbc }
  end;

{ TXMLTransportationServiceDescriptionType_cbcList }

  TXMLTransportationServiceDescriptionType_cbcList = class(TXMLNodeCollection, IXMLTransportationServiceDescriptionType_cbcList)
  protected
    { IXMLTransportationServiceDescriptionType_cbcList }
    function Add: IXMLTransportationServiceDescriptionType_cbc;
    function Insert(const Index: Integer): IXMLTransportationServiceDescriptionType_cbc;

    function Get_Item(const Index: Integer): IXMLTransportationServiceDescriptionType_cbc;
  end;

{ TXMLTransportationServiceDetailsURIType_cbc }

  TXMLTransportationServiceDetailsURIType_cbc = class(TXMLNode, IXMLTransportationServiceDetailsURIType_cbc)
  protected
    { IXMLTransportationServiceDetailsURIType_cbc }
  end;

{ TXMLTransportEquipmentType_cac }

  TXMLTransportEquipmentType_cac = class(TXMLNode, IXMLTransportEquipmentType_cac)
  private
    FReferencedConsignmentID: IXMLReferencedConsignmentIDType_cbcList;
    FInformation: IXMLInformationType_cbcList;
    FDamageRemarks: IXMLDamageRemarksType_cbcList;
    FDescription: IXMLDescriptionType_cbcList;
    FSpecialTransportRequirements: IXMLSpecialTransportRequirementsType_cbcList;
    FMeasurementDimension: IXMLDimensionType_cacList;
    FTransportEquipmentSeal: IXMLTransportEquipmentSealType_cacList;
    FPositioningTransportEvent: IXMLTransportEventType_cacList;
    FQuarantineTransportEvent: IXMLTransportEventType_cacList;
    FDeliveryTransportEvent: IXMLTransportEventType_cacList;
    FPickupTransportEvent: IXMLTransportEventType_cacList;
    FHandlingTransportEvent: IXMLTransportEventType_cacList;
    FLoadingTransportEvent: IXMLTransportEventType_cacList;
    FTransportEvent: IXMLTransportEventType_cacList;
    FHaulageTradingTerms: IXMLTradingTermsType_cacList;
    FHazardousGoodsTransit: IXMLHazardousGoodsTransitType_cacList;
    FPackagedTransportHandlingUnit: IXMLTransportHandlingUnitType_cacList;
    FServiceAllowanceCharge: IXMLAllowanceChargeType_cacList;
    FFreightAllowanceCharge: IXMLAllowanceChargeType_cacList;
    FAttachedTransportEquipment: IXMLTransportEquipmentType_cacList;
    FShipmentDocumentReference: IXMLDocumentReferenceType_cacList;
    FContainedInTransportEquipment: IXMLTransportEquipmentType_cacList;
    FPackage: IXMLPackageType_cacList;
    FGoodsItem: IXMLGoodsItemType_cacList;
  protected
    { IXMLTransportEquipmentType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_ReferencedConsignmentID: IXMLReferencedConsignmentIDType_cbcList;
    function Get_TransportEquipmentTypeCode: IXMLTransportEquipmentTypeCodeType_cbc;
    function Get_ProviderTypeCode: IXMLProviderTypeCodeType_cbc;
    function Get_OwnerTypeCode: IXMLOwnerTypeCodeType_cbc;
    function Get_SizeTypeCode: IXMLSizeTypeCodeType_cbc;
    function Get_DispositionCode: IXMLDispositionCodeType_cbc;
    function Get_FullnessIndicationCode: IXMLFullnessIndicationCodeType_cbc;
    function Get_RefrigerationOnIndicator: IXMLRefrigerationOnIndicatorType_cbc;
    function Get_Information: IXMLInformationType_cbcList;
    function Get_ReturnabilityIndicator: IXMLReturnabilityIndicatorType_cbc;
    function Get_LegalStatusIndicator: IXMLLegalStatusIndicatorType_cbc;
    function Get_AirFlowPercent: IXMLAirFlowPercentType_cbc;
    function Get_HumidityPercent: IXMLHumidityPercentType_cbc;
    function Get_AnimalFoodApprovedIndicator: IXMLAnimalFoodApprovedIndicatorType_cbc;
    function Get_HumanFoodApprovedIndicator: IXMLHumanFoodApprovedIndicatorType_cbc;
    function Get_DangerousGoodsApprovedIndicator: IXMLDangerousGoodsApprovedIndicatorType_cbc;
    function Get_RefrigeratedIndicator: IXMLRefrigeratedIndicatorType_cbc;
    function Get_Characteristics: IXMLCharacteristicsType_cbc;
    function Get_DamageRemarks: IXMLDamageRemarksType_cbcList;
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_SpecialTransportRequirements: IXMLSpecialTransportRequirementsType_cbcList;
    function Get_GrossWeightMeasure: IXMLGrossWeightMeasureType_cbc;
    function Get_GrossVolumeMeasure: IXMLGrossVolumeMeasureType_cbc;
    function Get_TareWeightMeasure: IXMLTareWeightMeasureType_cbc;
    function Get_TrackingDeviceCode: IXMLTrackingDeviceCodeType_cbc;
    function Get_PowerIndicator: IXMLPowerIndicatorType_cbc;
    function Get_TraceID: IXMLTraceIDType_cbc;
    function Get_MeasurementDimension: IXMLDimensionType_cacList;
    function Get_TransportEquipmentSeal: IXMLTransportEquipmentSealType_cacList;
    function Get_MinimumTemperature: IXMLTemperatureType_cac;
    function Get_MaximumTemperature: IXMLTemperatureType_cac;
    function Get_ProviderParty: IXMLPartyType_cac;
    function Get_LoadingProofParty: IXMLPartyType_cac;
    function Get_SupplierParty: IXMLSupplierPartyType_cac;
    function Get_OwnerParty: IXMLPartyType_cac;
    function Get_OperatingParty: IXMLPartyType_cac;
    function Get_LoadingLocation: IXMLLocationType_cac;
    function Get_UnloadingLocation: IXMLLocationType_cac;
    function Get_StorageLocation: IXMLLocationType_cac;
    function Get_PositioningTransportEvent: IXMLTransportEventType_cacList;
    function Get_QuarantineTransportEvent: IXMLTransportEventType_cacList;
    function Get_DeliveryTransportEvent: IXMLTransportEventType_cacList;
    function Get_PickupTransportEvent: IXMLTransportEventType_cacList;
    function Get_HandlingTransportEvent: IXMLTransportEventType_cacList;
    function Get_LoadingTransportEvent: IXMLTransportEventType_cacList;
    function Get_TransportEvent: IXMLTransportEventType_cacList;
    function Get_ApplicableTransportMeans: IXMLTransportMeansType_cac;
    function Get_HaulageTradingTerms: IXMLTradingTermsType_cacList;
    function Get_HazardousGoodsTransit: IXMLHazardousGoodsTransitType_cacList;
    function Get_PackagedTransportHandlingUnit: IXMLTransportHandlingUnitType_cacList;
    function Get_ServiceAllowanceCharge: IXMLAllowanceChargeType_cacList;
    function Get_FreightAllowanceCharge: IXMLAllowanceChargeType_cacList;
    function Get_AttachedTransportEquipment: IXMLTransportEquipmentType_cacList;
    function Get_Delivery: IXMLDeliveryType_cac;
    function Get_Pickup: IXMLPickupType_cac;
    function Get_Despatch: IXMLDespatchType_cac;
    function Get_ShipmentDocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_ContainedInTransportEquipment: IXMLTransportEquipmentType_cacList;
    function Get_Package: IXMLPackageType_cacList;
    function Get_GoodsItem: IXMLGoodsItemType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportEquipmentType_cacList }

  TXMLTransportEquipmentType_cacList = class(TXMLNodeCollection, IXMLTransportEquipmentType_cacList)
  protected
    { IXMLTransportEquipmentType_cacList }
    function Add: IXMLTransportEquipmentType_cac;
    function Insert(const Index: Integer): IXMLTransportEquipmentType_cac;

    function Get_Item(const Index: Integer): IXMLTransportEquipmentType_cac;
  end;

{ TXMLReferencedConsignmentIDType_cbc }

  TXMLReferencedConsignmentIDType_cbc = class(TXMLNode, IXMLReferencedConsignmentIDType_cbc)
  protected
    { IXMLReferencedConsignmentIDType_cbc }
  end;

{ TXMLReferencedConsignmentIDType_cbcList }

  TXMLReferencedConsignmentIDType_cbcList = class(TXMLNodeCollection, IXMLReferencedConsignmentIDType_cbcList)
  protected
    { IXMLReferencedConsignmentIDType_cbcList }
    function Add: IXMLReferencedConsignmentIDType_cbc;
    function Insert(const Index: Integer): IXMLReferencedConsignmentIDType_cbc;

    function Get_Item(const Index: Integer): IXMLReferencedConsignmentIDType_cbc;
  end;

{ TXMLTransportEquipmentTypeCodeType_cbc }

  TXMLTransportEquipmentTypeCodeType_cbc = class(TXMLNode, IXMLTransportEquipmentTypeCodeType_cbc)
  protected
    { IXMLTransportEquipmentTypeCodeType_cbc }
  end;

{ TXMLProviderTypeCodeType_cbc }

  TXMLProviderTypeCodeType_cbc = class(TXMLNode, IXMLProviderTypeCodeType_cbc)
  protected
    { IXMLProviderTypeCodeType_cbc }
  end;

{ TXMLOwnerTypeCodeType_cbc }

  TXMLOwnerTypeCodeType_cbc = class(TXMLNode, IXMLOwnerTypeCodeType_cbc)
  protected
    { IXMLOwnerTypeCodeType_cbc }
  end;

{ TXMLSizeTypeCodeType_cbc }

  TXMLSizeTypeCodeType_cbc = class(TXMLNode, IXMLSizeTypeCodeType_cbc)
  protected
    { IXMLSizeTypeCodeType_cbc }
  end;

{ TXMLDispositionCodeType_cbc }

  TXMLDispositionCodeType_cbc = class(TXMLNode, IXMLDispositionCodeType_cbc)
  protected
    { IXMLDispositionCodeType_cbc }
  end;

{ TXMLFullnessIndicationCodeType_cbc }

  TXMLFullnessIndicationCodeType_cbc = class(TXMLNode, IXMLFullnessIndicationCodeType_cbc)
  protected
    { IXMLFullnessIndicationCodeType_cbc }
  end;

{ TXMLRefrigerationOnIndicatorType_cbc }

  TXMLRefrigerationOnIndicatorType_cbc = class(TXMLNode, IXMLRefrigerationOnIndicatorType_cbc)
  protected
    { IXMLRefrigerationOnIndicatorType_cbc }
  end;

{ TXMLReturnabilityIndicatorType_cbc }

  TXMLReturnabilityIndicatorType_cbc = class(TXMLNode, IXMLReturnabilityIndicatorType_cbc)
  protected
    { IXMLReturnabilityIndicatorType_cbc }
  end;

{ TXMLLegalStatusIndicatorType_cbc }

  TXMLLegalStatusIndicatorType_cbc = class(TXMLNode, IXMLLegalStatusIndicatorType_cbc)
  protected
    { IXMLLegalStatusIndicatorType_cbc }
  end;

{ TXMLAirFlowPercentType_cbc }

  TXMLAirFlowPercentType_cbc = class(TXMLNode, IXMLAirFlowPercentType_cbc)
  protected
    { IXMLAirFlowPercentType_cbc }
  end;

{ TXMLHumidityPercentType_cbc }

  TXMLHumidityPercentType_cbc = class(TXMLNode, IXMLHumidityPercentType_cbc)
  protected
    { IXMLHumidityPercentType_cbc }
  end;

{ TXMLAnimalFoodApprovedIndicatorType_cbc }

  TXMLAnimalFoodApprovedIndicatorType_cbc = class(TXMLNode, IXMLAnimalFoodApprovedIndicatorType_cbc)
  protected
    { IXMLAnimalFoodApprovedIndicatorType_cbc }
  end;

{ TXMLHumanFoodApprovedIndicatorType_cbc }

  TXMLHumanFoodApprovedIndicatorType_cbc = class(TXMLNode, IXMLHumanFoodApprovedIndicatorType_cbc)
  protected
    { IXMLHumanFoodApprovedIndicatorType_cbc }
  end;

{ TXMLDangerousGoodsApprovedIndicatorType_cbc }

  TXMLDangerousGoodsApprovedIndicatorType_cbc = class(TXMLNode, IXMLDangerousGoodsApprovedIndicatorType_cbc)
  protected
    { IXMLDangerousGoodsApprovedIndicatorType_cbc }
  end;

{ TXMLRefrigeratedIndicatorType_cbc }

  TXMLRefrigeratedIndicatorType_cbc = class(TXMLNode, IXMLRefrigeratedIndicatorType_cbc)
  protected
    { IXMLRefrigeratedIndicatorType_cbc }
  end;

{ TXMLCharacteristicsType_cbc }

  TXMLCharacteristicsType_cbc = class(TXMLNode, IXMLCharacteristicsType_cbc)
  protected
    { IXMLCharacteristicsType_cbc }
  end;

{ TXMLDamageRemarksType_cbc }

  TXMLDamageRemarksType_cbc = class(TXMLNode, IXMLDamageRemarksType_cbc)
  protected
    { IXMLDamageRemarksType_cbc }
  end;

{ TXMLDamageRemarksType_cbcList }

  TXMLDamageRemarksType_cbcList = class(TXMLNodeCollection, IXMLDamageRemarksType_cbcList)
  protected
    { IXMLDamageRemarksType_cbcList }
    function Add: IXMLDamageRemarksType_cbc;
    function Insert(const Index: Integer): IXMLDamageRemarksType_cbc;

    function Get_Item(const Index: Integer): IXMLDamageRemarksType_cbc;
  end;

{ TXMLSpecialTransportRequirementsType_cbc }

  TXMLSpecialTransportRequirementsType_cbc = class(TXMLNode, IXMLSpecialTransportRequirementsType_cbc)
  protected
    { IXMLSpecialTransportRequirementsType_cbc }
  end;

{ TXMLSpecialTransportRequirementsType_cbcList }

  TXMLSpecialTransportRequirementsType_cbcList = class(TXMLNodeCollection, IXMLSpecialTransportRequirementsType_cbcList)
  protected
    { IXMLSpecialTransportRequirementsType_cbcList }
    function Add: IXMLSpecialTransportRequirementsType_cbc;
    function Insert(const Index: Integer): IXMLSpecialTransportRequirementsType_cbc;

    function Get_Item(const Index: Integer): IXMLSpecialTransportRequirementsType_cbc;
  end;

{ TXMLTareWeightMeasureType_cbc }

  TXMLTareWeightMeasureType_cbc = class(TXMLNode, IXMLTareWeightMeasureType_cbc)
  protected
    { IXMLTareWeightMeasureType_cbc }
  end;

{ TXMLTrackingDeviceCodeType_cbc }

  TXMLTrackingDeviceCodeType_cbc = class(TXMLNode, IXMLTrackingDeviceCodeType_cbc)
  protected
    { IXMLTrackingDeviceCodeType_cbc }
  end;

{ TXMLPowerIndicatorType_cbc }

  TXMLPowerIndicatorType_cbc = class(TXMLNode, IXMLPowerIndicatorType_cbc)
  protected
    { IXMLPowerIndicatorType_cbc }
  end;

{ TXMLTraceIDType_cbc }

  TXMLTraceIDType_cbc = class(TXMLNode, IXMLTraceIDType_cbc)
  protected
    { IXMLTraceIDType_cbc }
  end;

{ TXMLDimensionType_cac }

  TXMLDimensionType_cac = class(TXMLNode, IXMLDimensionType_cac)
  private
    FDescription: IXMLDescriptionType_cbcList;
  protected
    { IXMLDimensionType_cac }
    function Get_AttributeID: IXMLAttributeIDType_cbc;
    function Get_Measure: IXMLMeasureType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_MinimumMeasure: IXMLMinimumMeasureType_cbc;
    function Get_MaximumMeasure: IXMLMaximumMeasureType_cbc;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDimensionType_cacList }

  TXMLDimensionType_cacList = class(TXMLNodeCollection, IXMLDimensionType_cacList)
  protected
    { IXMLDimensionType_cacList }
    function Add: IXMLDimensionType_cac;
    function Insert(const Index: Integer): IXMLDimensionType_cac;

    function Get_Item(const Index: Integer): IXMLDimensionType_cac;
  end;

{ TXMLTransportEquipmentSealType_cac }

  TXMLTransportEquipmentSealType_cac = class(TXMLNode, IXMLTransportEquipmentSealType_cac)
  protected
    { IXMLTransportEquipmentSealType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_SealIssuerTypeCode: IXMLSealIssuerTypeCodeType_cbc;
    function Get_Condition: IXMLConditionType_cbc;
    function Get_SealStatusCode: IXMLSealStatusCodeType_cbc;
    function Get_SealingPartyType: IXMLSealingPartyTypeType_cbc;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportEquipmentSealType_cacList }

  TXMLTransportEquipmentSealType_cacList = class(TXMLNodeCollection, IXMLTransportEquipmentSealType_cacList)
  protected
    { IXMLTransportEquipmentSealType_cacList }
    function Add: IXMLTransportEquipmentSealType_cac;
    function Insert(const Index: Integer): IXMLTransportEquipmentSealType_cac;

    function Get_Item(const Index: Integer): IXMLTransportEquipmentSealType_cac;
  end;

{ TXMLSealIssuerTypeCodeType_cbc }

  TXMLSealIssuerTypeCodeType_cbc = class(TXMLNode, IXMLSealIssuerTypeCodeType_cbc)
  protected
    { IXMLSealIssuerTypeCodeType_cbc }
  end;

{ TXMLConditionType_cbc }

  TXMLConditionType_cbc = class(TXMLNode, IXMLConditionType_cbc)
  protected
    { IXMLConditionType_cbc }
  end;

{ TXMLSealStatusCodeType_cbc }

  TXMLSealStatusCodeType_cbc = class(TXMLNode, IXMLSealStatusCodeType_cbc)
  protected
    { IXMLSealStatusCodeType_cbc }
  end;

{ TXMLSealingPartyTypeType_cbc }

  TXMLSealingPartyTypeType_cbc = class(TXMLNode, IXMLSealingPartyTypeType_cbc)
  protected
    { IXMLSealingPartyTypeType_cbc }
  end;

{ TXMLTemperatureType_cac }

  TXMLTemperatureType_cac = class(TXMLNode, IXMLTemperatureType_cac)
  private
    FDescription: IXMLDescriptionType_cbcList;
  protected
    { IXMLTemperatureType_cac }
    function Get_AttributeID: IXMLAttributeIDType_cbc;
    function Get_Measure: IXMLMeasureType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTemperatureType_cacList }

  TXMLTemperatureType_cacList = class(TXMLNodeCollection, IXMLTemperatureType_cacList)
  protected
    { IXMLTemperatureType_cacList }
    function Add: IXMLTemperatureType_cac;
    function Insert(const Index: Integer): IXMLTemperatureType_cac;

    function Get_Item(const Index: Integer): IXMLTemperatureType_cac;
  end;

{ TXMLTransportMeansType_cac }

  TXMLTransportMeansType_cac = class(TXMLNode, IXMLTransportMeansType_cac)
  private
    FRegistrationNationality: IXMLRegistrationNationalityType_cbcList;
    FMeasurementDimension: IXMLDimensionType_cacList;
  protected
    { IXMLTransportMeansType_cac }
    function Get_JourneyID: IXMLJourneyIDType_cbc;
    function Get_RegistrationNationalityID: IXMLRegistrationNationalityIDType_cbc;
    function Get_RegistrationNationality: IXMLRegistrationNationalityType_cbcList;
    function Get_DirectionCode: IXMLDirectionCodeType_cbc;
    function Get_TransportMeansTypeCode: IXMLTransportMeansTypeCodeType_cbc;
    function Get_TradeServiceCode: IXMLTradeServiceCodeType_cbc;
    function Get_Stowage: IXMLStowageType_cac;
    function Get_AirTransport: IXMLAirTransportType_cac;
    function Get_RoadTransport: IXMLRoadTransportType_cac;
    function Get_RailTransport: IXMLRailTransportType_cac;
    function Get_MaritimeTransport: IXMLMaritimeTransportType_cac;
    function Get_OwnerParty: IXMLPartyType_cac;
    function Get_MeasurementDimension: IXMLDimensionType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportMeansType_cacList }

  TXMLTransportMeansType_cacList = class(TXMLNodeCollection, IXMLTransportMeansType_cacList)
  protected
    { IXMLTransportMeansType_cacList }
    function Add: IXMLTransportMeansType_cac;
    function Insert(const Index: Integer): IXMLTransportMeansType_cac;

    function Get_Item(const Index: Integer): IXMLTransportMeansType_cac;
  end;

{ TXMLJourneyIDType_cbc }

  TXMLJourneyIDType_cbc = class(TXMLNode, IXMLJourneyIDType_cbc)
  protected
    { IXMLJourneyIDType_cbc }
  end;

{ TXMLRegistrationNationalityIDType_cbc }

  TXMLRegistrationNationalityIDType_cbc = class(TXMLNode, IXMLRegistrationNationalityIDType_cbc)
  protected
    { IXMLRegistrationNationalityIDType_cbc }
  end;

{ TXMLRegistrationNationalityType_cbc }

  TXMLRegistrationNationalityType_cbc = class(TXMLNode, IXMLRegistrationNationalityType_cbc)
  protected
    { IXMLRegistrationNationalityType_cbc }
  end;

{ TXMLRegistrationNationalityType_cbcList }

  TXMLRegistrationNationalityType_cbcList = class(TXMLNodeCollection, IXMLRegistrationNationalityType_cbcList)
  protected
    { IXMLRegistrationNationalityType_cbcList }
    function Add: IXMLRegistrationNationalityType_cbc;
    function Insert(const Index: Integer): IXMLRegistrationNationalityType_cbc;

    function Get_Item(const Index: Integer): IXMLRegistrationNationalityType_cbc;
  end;

{ TXMLDirectionCodeType_cbc }

  TXMLDirectionCodeType_cbc = class(TXMLNode, IXMLDirectionCodeType_cbc)
  protected
    { IXMLDirectionCodeType_cbc }
  end;

{ TXMLTransportMeansTypeCodeType_cbc }

  TXMLTransportMeansTypeCodeType_cbc = class(TXMLNode, IXMLTransportMeansTypeCodeType_cbc)
  protected
    { IXMLTransportMeansTypeCodeType_cbc }
  end;

{ TXMLTradeServiceCodeType_cbc }

  TXMLTradeServiceCodeType_cbc = class(TXMLNode, IXMLTradeServiceCodeType_cbc)
  protected
    { IXMLTradeServiceCodeType_cbc }
  end;

{ TXMLStowageType_cac }

  TXMLStowageType_cac = class(TXMLNode, IXMLStowageType_cac)
  private
    FLocation: IXMLLocationType_cbcList;
    FMeasurementDimension: IXMLDimensionType_cacList;
  protected
    { IXMLStowageType_cac }
    function Get_LocationID: IXMLLocationIDType_cbc;
    function Get_Location: IXMLLocationType_cbcList;
    function Get_MeasurementDimension: IXMLDimensionType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLocationIDType_cbc }

  TXMLLocationIDType_cbc = class(TXMLNode, IXMLLocationIDType_cbc)
  protected
    { IXMLLocationIDType_cbc }
  end;

{ TXMLLocationType_cbc }

  TXMLLocationType_cbc = class(TXMLNode, IXMLLocationType_cbc)
  protected
    { IXMLLocationType_cbc }
  end;

{ TXMLLocationType_cbcList }

  TXMLLocationType_cbcList = class(TXMLNodeCollection, IXMLLocationType_cbcList)
  protected
    { IXMLLocationType_cbcList }
    function Add: IXMLLocationType_cbc;
    function Insert(const Index: Integer): IXMLLocationType_cbc;

    function Get_Item(const Index: Integer): IXMLLocationType_cbc;
  end;

{ TXMLAirTransportType_cac }

  TXMLAirTransportType_cac = class(TXMLNode, IXMLAirTransportType_cac)
  protected
    { IXMLAirTransportType_cac }
    function Get_AircraftID: IXMLAircraftIDType_cbc;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLAircraftIDType_cbc }

  TXMLAircraftIDType_cbc = class(TXMLNode, IXMLAircraftIDType_cbc)
  protected
    { IXMLAircraftIDType_cbc }
  end;

{ TXMLRoadTransportType_cac }

  TXMLRoadTransportType_cac = class(TXMLNode, IXMLRoadTransportType_cac)
  protected
    { IXMLRoadTransportType_cac }
    function Get_LicensePlateID: IXMLLicensePlateIDType_cbc;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLicensePlateIDType_cbc }

  TXMLLicensePlateIDType_cbc = class(TXMLNode, IXMLLicensePlateIDType_cbc)
  protected
    { IXMLLicensePlateIDType_cbc }
  end;

{ TXMLRailTransportType_cac }

  TXMLRailTransportType_cac = class(TXMLNode, IXMLRailTransportType_cac)
  protected
    { IXMLRailTransportType_cac }
    function Get_TrainID: IXMLTrainIDType_cbc;
    function Get_RailCarID: IXMLRailCarIDType_cbc;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTrainIDType_cbc }

  TXMLTrainIDType_cbc = class(TXMLNode, IXMLTrainIDType_cbc)
  protected
    { IXMLTrainIDType_cbc }
  end;

{ TXMLRailCarIDType_cbc }

  TXMLRailCarIDType_cbc = class(TXMLNode, IXMLRailCarIDType_cbc)
  protected
    { IXMLRailCarIDType_cbc }
  end;

{ TXMLMaritimeTransportType_cac }

  TXMLMaritimeTransportType_cac = class(TXMLNode, IXMLMaritimeTransportType_cac)
  private
    FShipsRequirements: IXMLShipsRequirementsType_cbcList;
  protected
    { IXMLMaritimeTransportType_cac }
    function Get_VesselID: IXMLVesselIDType_cbc;
    function Get_VesselName: IXMLVesselNameType_cbc;
    function Get_RadioCallSignID: IXMLRadioCallSignIDType_cbc;
    function Get_ShipsRequirements: IXMLShipsRequirementsType_cbcList;
    function Get_GrossTonnageMeasure: IXMLGrossTonnageMeasureType_cbc;
    function Get_NetTonnageMeasure: IXMLNetTonnageMeasureType_cbc;
    function Get_RegistryCertificateDocumentReference: IXMLDocumentReferenceType_cac;
    function Get_RegistryPortLocation: IXMLLocationType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLVesselIDType_cbc }

  TXMLVesselIDType_cbc = class(TXMLNode, IXMLVesselIDType_cbc)
  protected
    { IXMLVesselIDType_cbc }
  end;

{ TXMLVesselNameType_cbc }

  TXMLVesselNameType_cbc = class(TXMLNode, IXMLVesselNameType_cbc)
  protected
    { IXMLVesselNameType_cbc }
  end;

{ TXMLRadioCallSignIDType_cbc }

  TXMLRadioCallSignIDType_cbc = class(TXMLNode, IXMLRadioCallSignIDType_cbc)
  protected
    { IXMLRadioCallSignIDType_cbc }
  end;

{ TXMLShipsRequirementsType_cbc }

  TXMLShipsRequirementsType_cbc = class(TXMLNode, IXMLShipsRequirementsType_cbc)
  protected
    { IXMLShipsRequirementsType_cbc }
  end;

{ TXMLShipsRequirementsType_cbcList }

  TXMLShipsRequirementsType_cbcList = class(TXMLNodeCollection, IXMLShipsRequirementsType_cbcList)
  protected
    { IXMLShipsRequirementsType_cbcList }
    function Add: IXMLShipsRequirementsType_cbc;
    function Insert(const Index: Integer): IXMLShipsRequirementsType_cbc;

    function Get_Item(const Index: Integer): IXMLShipsRequirementsType_cbc;
  end;

{ TXMLGrossTonnageMeasureType_cbc }

  TXMLGrossTonnageMeasureType_cbc = class(TXMLNode, IXMLGrossTonnageMeasureType_cbc)
  protected
    { IXMLGrossTonnageMeasureType_cbc }
  end;

{ TXMLNetTonnageMeasureType_cbc }

  TXMLNetTonnageMeasureType_cbc = class(TXMLNode, IXMLNetTonnageMeasureType_cbc)
  protected
    { IXMLNetTonnageMeasureType_cbc }
  end;

{ TXMLTradingTermsType_cac }

  TXMLTradingTermsType_cac = class(TXMLNode, IXMLTradingTermsType_cac)
  private
    FInformation: IXMLInformationType_cbcList;
  protected
    { IXMLTradingTermsType_cac }
    function Get_Information: IXMLInformationType_cbcList;
    function Get_Reference: IXMLReferenceType_cbc;
    function Get_ApplicableAddress: IXMLAddressType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTradingTermsType_cacList }

  TXMLTradingTermsType_cacList = class(TXMLNodeCollection, IXMLTradingTermsType_cacList)
  protected
    { IXMLTradingTermsType_cacList }
    function Add: IXMLTradingTermsType_cac;
    function Insert(const Index: Integer): IXMLTradingTermsType_cac;

    function Get_Item(const Index: Integer): IXMLTradingTermsType_cac;
  end;

{ TXMLReferenceType_cbc }

  TXMLReferenceType_cbc = class(TXMLNode, IXMLReferenceType_cbc)
  protected
    { IXMLReferenceType_cbc }
  end;

{ TXMLHazardousGoodsTransitType_cac }

  TXMLHazardousGoodsTransitType_cac = class(TXMLNode, IXMLHazardousGoodsTransitType_cac)
  protected
    { IXMLHazardousGoodsTransitType_cac }
    function Get_TransportEmergencyCardCode: IXMLTransportEmergencyCardCodeType_cbc;
    function Get_PackingCriteriaCode: IXMLPackingCriteriaCodeType_cbc;
    function Get_HazardousRegulationCode: IXMLHazardousRegulationCodeType_cbc;
    function Get_InhalationToxicityZoneCode: IXMLInhalationToxicityZoneCodeType_cbc;
    function Get_TransportAuthorizationCode: IXMLTransportAuthorizationCodeType_cbc;
    function Get_MaximumTemperature: IXMLTemperatureType_cac;
    function Get_MinimumTemperature: IXMLTemperatureType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLHazardousGoodsTransitType_cacList }

  TXMLHazardousGoodsTransitType_cacList = class(TXMLNodeCollection, IXMLHazardousGoodsTransitType_cacList)
  protected
    { IXMLHazardousGoodsTransitType_cacList }
    function Add: IXMLHazardousGoodsTransitType_cac;
    function Insert(const Index: Integer): IXMLHazardousGoodsTransitType_cac;

    function Get_Item(const Index: Integer): IXMLHazardousGoodsTransitType_cac;
  end;

{ TXMLTransportEmergencyCardCodeType_cbc }

  TXMLTransportEmergencyCardCodeType_cbc = class(TXMLNode, IXMLTransportEmergencyCardCodeType_cbc)
  protected
    { IXMLTransportEmergencyCardCodeType_cbc }
  end;

{ TXMLPackingCriteriaCodeType_cbc }

  TXMLPackingCriteriaCodeType_cbc = class(TXMLNode, IXMLPackingCriteriaCodeType_cbc)
  protected
    { IXMLPackingCriteriaCodeType_cbc }
  end;

{ TXMLHazardousRegulationCodeType_cbc }

  TXMLHazardousRegulationCodeType_cbc = class(TXMLNode, IXMLHazardousRegulationCodeType_cbc)
  protected
    { IXMLHazardousRegulationCodeType_cbc }
  end;

{ TXMLInhalationToxicityZoneCodeType_cbc }

  TXMLInhalationToxicityZoneCodeType_cbc = class(TXMLNode, IXMLInhalationToxicityZoneCodeType_cbc)
  protected
    { IXMLInhalationToxicityZoneCodeType_cbc }
  end;

{ TXMLTransportAuthorizationCodeType_cbc }

  TXMLTransportAuthorizationCodeType_cbc = class(TXMLNode, IXMLTransportAuthorizationCodeType_cbc)
  protected
    { IXMLTransportAuthorizationCodeType_cbc }
  end;

{ TXMLTransportHandlingUnitType_cac }

  TXMLTransportHandlingUnitType_cac = class(TXMLNode, IXMLTransportHandlingUnitType_cac)
  private
    FHandlingInstructions: IXMLHandlingInstructionsType_cbcList;
    FDamageRemarks: IXMLDamageRemarksType_cbcList;
    FShippingMarks: IXMLShippingMarksType_cbcList;
    FHandlingUnitDespatchLine: IXMLDespatchLineType_cacList;
    FActualPackage: IXMLPackageType_cacList;
    FReceivedHandlingUnitReceiptLine: IXMLReceiptLineType_cacList;
    FTransportEquipment: IXMLTransportEquipmentType_cacList;
    FTransportMeans: IXMLTransportMeansType_cacList;
    FHazardousGoodsTransit: IXMLHazardousGoodsTransitType_cacList;
    FMeasurementDimension: IXMLDimensionType_cacList;
    FGoodsItem: IXMLGoodsItemType_cacList;
    FShipmentDocumentReference: IXMLDocumentReferenceType_cacList;
    FStatus: IXMLStatusType_cacList;
    FCustomsDeclaration: IXMLCustomsDeclarationType_cacList;
    FReferencedShipment: IXMLShipmentType_cacList;
    FPackage: IXMLPackageType_cacList;
  protected
    { IXMLTransportHandlingUnitType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_TransportHandlingUnitTypeCode: IXMLTransportHandlingUnitTypeCodeType_cbc;
    function Get_HandlingCode: IXMLHandlingCodeType_cbc;
    function Get_HandlingInstructions: IXMLHandlingInstructionsType_cbcList;
    function Get_HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc;
    function Get_TotalGoodsItemQuantity: IXMLTotalGoodsItemQuantityType_cbc;
    function Get_TotalPackageQuantity: IXMLTotalPackageQuantityType_cbc;
    function Get_DamageRemarks: IXMLDamageRemarksType_cbcList;
    function Get_ShippingMarks: IXMLShippingMarksType_cbcList;
    function Get_TraceID: IXMLTraceIDType_cbc;
    function Get_HandlingUnitDespatchLine: IXMLDespatchLineType_cacList;
    function Get_ActualPackage: IXMLPackageType_cacList;
    function Get_ReceivedHandlingUnitReceiptLine: IXMLReceiptLineType_cacList;
    function Get_TransportEquipment: IXMLTransportEquipmentType_cacList;
    function Get_TransportMeans: IXMLTransportMeansType_cacList;
    function Get_HazardousGoodsTransit: IXMLHazardousGoodsTransitType_cacList;
    function Get_MeasurementDimension: IXMLDimensionType_cacList;
    function Get_MinimumTemperature: IXMLTemperatureType_cac;
    function Get_MaximumTemperature: IXMLTemperatureType_cac;
    function Get_GoodsItem: IXMLGoodsItemType_cacList;
    function Get_FloorSpaceMeasurementDimension: IXMLDimensionType_cac;
    function Get_PalletSpaceMeasurementDimension: IXMLDimensionType_cac;
    function Get_ShipmentDocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_Status: IXMLStatusType_cacList;
    function Get_CustomsDeclaration: IXMLCustomsDeclarationType_cacList;
    function Get_ReferencedShipment: IXMLShipmentType_cacList;
    function Get_Package: IXMLPackageType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportHandlingUnitType_cacList }

  TXMLTransportHandlingUnitType_cacList = class(TXMLNodeCollection, IXMLTransportHandlingUnitType_cacList)
  protected
    { IXMLTransportHandlingUnitType_cacList }
    function Add: IXMLTransportHandlingUnitType_cac;
    function Insert(const Index: Integer): IXMLTransportHandlingUnitType_cac;

    function Get_Item(const Index: Integer): IXMLTransportHandlingUnitType_cac;
  end;

{ TXMLTransportHandlingUnitTypeCodeType_cbc }

  TXMLTransportHandlingUnitTypeCodeType_cbc = class(TXMLNode, IXMLTransportHandlingUnitTypeCodeType_cbc)
  protected
    { IXMLTransportHandlingUnitTypeCodeType_cbc }
  end;

{ TXMLTotalPackageQuantityType_cbc }

  TXMLTotalPackageQuantityType_cbc = class(TXMLNode, IXMLTotalPackageQuantityType_cbc)
  protected
    { IXMLTotalPackageQuantityType_cbc }
  end;

{ TXMLShippingMarksType_cbc }

  TXMLShippingMarksType_cbc = class(TXMLNode, IXMLShippingMarksType_cbc)
  protected
    { IXMLShippingMarksType_cbc }
  end;

{ TXMLShippingMarksType_cbcList }

  TXMLShippingMarksType_cbcList = class(TXMLNodeCollection, IXMLShippingMarksType_cbcList)
  protected
    { IXMLShippingMarksType_cbcList }
    function Add: IXMLShippingMarksType_cbc;
    function Insert(const Index: Integer): IXMLShippingMarksType_cbc;

    function Get_Item(const Index: Integer): IXMLShippingMarksType_cbc;
  end;

{ TXMLDespatchLineType_cac }

  TXMLDespatchLineType_cac = class(TXMLNode, IXMLDespatchLineType_cac)
  private
    FNote: IXMLNoteType_cbcList;
    FBackorderReason: IXMLBackorderReasonType_cbcList;
    FOutstandingReason: IXMLOutstandingReasonType_cbcList;
    FOrderLineReference: IXMLOrderLineReferenceType_cacList;
    FDocumentReference: IXMLDocumentReferenceType_cacList;
    FShipment: IXMLShipmentType_cacList;
  protected
    { IXMLDespatchLineType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_UUID: IXMLUUIDType_cbc;
    function Get_Note: IXMLNoteType_cbcList;
    function Get_LineStatusCode: IXMLLineStatusCodeType_cbc;
    function Get_DeliveredQuantity: IXMLDeliveredQuantityType_cbc;
    function Get_BackorderQuantity: IXMLBackorderQuantityType_cbc;
    function Get_BackorderReason: IXMLBackorderReasonType_cbcList;
    function Get_OutstandingQuantity: IXMLOutstandingQuantityType_cbc;
    function Get_OutstandingReason: IXMLOutstandingReasonType_cbcList;
    function Get_OversupplyQuantity: IXMLOversupplyQuantityType_cbc;
    function Get_OrderLineReference: IXMLOrderLineReferenceType_cacList;
    function Get_DocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_Item: IXMLItemType_cac;
    function Get_Shipment: IXMLShipmentType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDespatchLineType_cacList }

  TXMLDespatchLineType_cacList = class(TXMLNodeCollection, IXMLDespatchLineType_cacList)
  protected
    { IXMLDespatchLineType_cacList }
    function Add: IXMLDespatchLineType_cac;
    function Insert(const Index: Integer): IXMLDespatchLineType_cac;

    function Get_Item(const Index: Integer): IXMLDespatchLineType_cac;
  end;

{ TXMLLineStatusCodeType_cbc }

  TXMLLineStatusCodeType_cbc = class(TXMLNode, IXMLLineStatusCodeType_cbc)
  protected
    { IXMLLineStatusCodeType_cbc }
  end;

{ TXMLDeliveredQuantityType_cbc }

  TXMLDeliveredQuantityType_cbc = class(TXMLNode, IXMLDeliveredQuantityType_cbc)
  protected
    { IXMLDeliveredQuantityType_cbc }
  end;

{ TXMLBackorderQuantityType_cbc }

  TXMLBackorderQuantityType_cbc = class(TXMLNode, IXMLBackorderQuantityType_cbc)
  protected
    { IXMLBackorderQuantityType_cbc }
  end;

{ TXMLBackorderReasonType_cbc }

  TXMLBackorderReasonType_cbc = class(TXMLNode, IXMLBackorderReasonType_cbc)
  protected
    { IXMLBackorderReasonType_cbc }
  end;

{ TXMLBackorderReasonType_cbcList }

  TXMLBackorderReasonType_cbcList = class(TXMLNodeCollection, IXMLBackorderReasonType_cbcList)
  protected
    { IXMLBackorderReasonType_cbcList }
    function Add: IXMLBackorderReasonType_cbc;
    function Insert(const Index: Integer): IXMLBackorderReasonType_cbc;

    function Get_Item(const Index: Integer): IXMLBackorderReasonType_cbc;
  end;

{ TXMLOutstandingQuantityType_cbc }

  TXMLOutstandingQuantityType_cbc = class(TXMLNode, IXMLOutstandingQuantityType_cbc)
  protected
    { IXMLOutstandingQuantityType_cbc }
  end;

{ TXMLOutstandingReasonType_cbc }

  TXMLOutstandingReasonType_cbc = class(TXMLNode, IXMLOutstandingReasonType_cbc)
  protected
    { IXMLOutstandingReasonType_cbc }
  end;

{ TXMLOutstandingReasonType_cbcList }

  TXMLOutstandingReasonType_cbcList = class(TXMLNodeCollection, IXMLOutstandingReasonType_cbcList)
  protected
    { IXMLOutstandingReasonType_cbcList }
    function Add: IXMLOutstandingReasonType_cbc;
    function Insert(const Index: Integer): IXMLOutstandingReasonType_cbc;

    function Get_Item(const Index: Integer): IXMLOutstandingReasonType_cbc;
  end;

{ TXMLOversupplyQuantityType_cbc }

  TXMLOversupplyQuantityType_cbc = class(TXMLNode, IXMLOversupplyQuantityType_cbc)
  protected
    { IXMLOversupplyQuantityType_cbc }
  end;

{ TXMLOrderLineReferenceType_cac }

  TXMLOrderLineReferenceType_cac = class(TXMLNode, IXMLOrderLineReferenceType_cac)
  protected
    { IXMLOrderLineReferenceType_cac }
    function Get_LineID: IXMLLineIDType_cbc;
    function Get_SalesOrderLineID: IXMLSalesOrderLineIDType_cbc;
    function Get_UUID: IXMLUUIDType_cbc;
    function Get_LineStatusCode: IXMLLineStatusCodeType_cbc;
    function Get_OrderReference: IXMLOrderReferenceType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLOrderLineReferenceType_cacList }

  TXMLOrderLineReferenceType_cacList = class(TXMLNodeCollection, IXMLOrderLineReferenceType_cacList)
  protected
    { IXMLOrderLineReferenceType_cacList }
    function Add: IXMLOrderLineReferenceType_cac;
    function Insert(const Index: Integer): IXMLOrderLineReferenceType_cac;

    function Get_Item(const Index: Integer): IXMLOrderLineReferenceType_cac;
  end;

{ TXMLLineIDType_cbc }

  TXMLLineIDType_cbc = class(TXMLNode, IXMLLineIDType_cbc)
  protected
    { IXMLLineIDType_cbc }
  end;

{ TXMLSalesOrderLineIDType_cbc }

  TXMLSalesOrderLineIDType_cbc = class(TXMLNode, IXMLSalesOrderLineIDType_cbc)
  protected
    { IXMLSalesOrderLineIDType_cbc }
  end;

{ TXMLItemType_cac }

  TXMLItemType_cac = class(TXMLNode, IXMLItemType_cac)
  private
    FDescription: IXMLDescriptionType_cbcList;
    FAdditionalInformation: IXMLAdditionalInformationType_cbcList;
    FKeyword: IXMLKeywordType_cbcList;
    FBrandName: IXMLBrandNameType_cbcList;
    FModelName: IXMLModelNameType_cbcList;
    FManufacturersItemIdentification: IXMLItemIdentificationType_cacList;
    FAdditionalItemIdentification: IXMLItemIdentificationType_cacList;
    FItemSpecificationDocumentReference: IXMLDocumentReferenceType_cacList;
    FCommodityClassification: IXMLCommodityClassificationType_cacList;
    FTransactionConditions: IXMLTransactionConditionsType_cacList;
    FHazardousItem: IXMLHazardousItemType_cacList;
    FClassifiedTaxCategory: IXMLTaxCategoryType_cacList;
    FAdditionalItemProperty: IXMLItemPropertyType_cacList;
    FManufacturerParty: IXMLPartyType_cacList;
    FOriginAddress: IXMLAddressType_cacList;
    FItemInstance: IXMLItemInstanceType_cacList;
    FCertificate: IXMLCertificateType_cacList;
    FDimension: IXMLDimensionType_cacList;
  protected
    { IXMLItemType_cac }
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_PackQuantity: IXMLPackQuantityType_cbc;
    function Get_PackSizeNumeric: IXMLPackSizeNumericType_cbc;
    function Get_CatalogueIndicator: IXMLCatalogueIndicatorType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc;
    function Get_AdditionalInformation: IXMLAdditionalInformationType_cbcList;
    function Get_Keyword: IXMLKeywordType_cbcList;
    function Get_BrandName: IXMLBrandNameType_cbcList;
    function Get_ModelName: IXMLModelNameType_cbcList;
    function Get_BuyersItemIdentification: IXMLItemIdentificationType_cac;
    function Get_SellersItemIdentification: IXMLItemIdentificationType_cac;
    function Get_ManufacturersItemIdentification: IXMLItemIdentificationType_cacList;
    function Get_StandardItemIdentification: IXMLItemIdentificationType_cac;
    function Get_CatalogueItemIdentification: IXMLItemIdentificationType_cac;
    function Get_AdditionalItemIdentification: IXMLItemIdentificationType_cacList;
    function Get_CatalogueDocumentReference: IXMLDocumentReferenceType_cac;
    function Get_ItemSpecificationDocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_OriginCountry: IXMLCountryType_cac;
    function Get_CommodityClassification: IXMLCommodityClassificationType_cacList;
    function Get_TransactionConditions: IXMLTransactionConditionsType_cacList;
    function Get_HazardousItem: IXMLHazardousItemType_cacList;
    function Get_ClassifiedTaxCategory: IXMLTaxCategoryType_cacList;
    function Get_AdditionalItemProperty: IXMLItemPropertyType_cacList;
    function Get_ManufacturerParty: IXMLPartyType_cacList;
    function Get_InformationContentProviderParty: IXMLPartyType_cac;
    function Get_OriginAddress: IXMLAddressType_cacList;
    function Get_ItemInstance: IXMLItemInstanceType_cacList;
    function Get_Certificate: IXMLCertificateType_cacList;
    function Get_Dimension: IXMLDimensionType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLItemType_cacList }

  TXMLItemType_cacList = class(TXMLNodeCollection, IXMLItemType_cacList)
  protected
    { IXMLItemType_cacList }
    function Add: IXMLItemType_cac;
    function Insert(const Index: Integer): IXMLItemType_cac;

    function Get_Item(const Index: Integer): IXMLItemType_cac;
  end;

{ TXMLPackQuantityType_cbc }

  TXMLPackQuantityType_cbc = class(TXMLNode, IXMLPackQuantityType_cbc)
  protected
    { IXMLPackQuantityType_cbc }
  end;

{ TXMLPackSizeNumericType_cbc }

  TXMLPackSizeNumericType_cbc = class(TXMLNode, IXMLPackSizeNumericType_cbc)
  protected
    { IXMLPackSizeNumericType_cbc }
  end;

{ TXMLCatalogueIndicatorType_cbc }

  TXMLCatalogueIndicatorType_cbc = class(TXMLNode, IXMLCatalogueIndicatorType_cbc)
  protected
    { IXMLCatalogueIndicatorType_cbc }
  end;

{ TXMLAdditionalInformationType_cbc }

  TXMLAdditionalInformationType_cbc = class(TXMLNode, IXMLAdditionalInformationType_cbc)
  protected
    { IXMLAdditionalInformationType_cbc }
  end;

{ TXMLAdditionalInformationType_cbcList }

  TXMLAdditionalInformationType_cbcList = class(TXMLNodeCollection, IXMLAdditionalInformationType_cbcList)
  protected
    { IXMLAdditionalInformationType_cbcList }
    function Add: IXMLAdditionalInformationType_cbc;
    function Insert(const Index: Integer): IXMLAdditionalInformationType_cbc;

    function Get_Item(const Index: Integer): IXMLAdditionalInformationType_cbc;
  end;

{ TXMLKeywordType_cbc }

  TXMLKeywordType_cbc = class(TXMLNode, IXMLKeywordType_cbc)
  protected
    { IXMLKeywordType_cbc }
  end;

{ TXMLKeywordType_cbcList }

  TXMLKeywordType_cbcList = class(TXMLNodeCollection, IXMLKeywordType_cbcList)
  protected
    { IXMLKeywordType_cbcList }
    function Add: IXMLKeywordType_cbc;
    function Insert(const Index: Integer): IXMLKeywordType_cbc;

    function Get_Item(const Index: Integer): IXMLKeywordType_cbc;
  end;

{ TXMLBrandNameType_cbc }

  TXMLBrandNameType_cbc = class(TXMLNode, IXMLBrandNameType_cbc)
  protected
    { IXMLBrandNameType_cbc }
  end;

{ TXMLBrandNameType_cbcList }

  TXMLBrandNameType_cbcList = class(TXMLNodeCollection, IXMLBrandNameType_cbcList)
  protected
    { IXMLBrandNameType_cbcList }
    function Add: IXMLBrandNameType_cbc;
    function Insert(const Index: Integer): IXMLBrandNameType_cbc;

    function Get_Item(const Index: Integer): IXMLBrandNameType_cbc;
  end;

{ TXMLModelNameType_cbc }

  TXMLModelNameType_cbc = class(TXMLNode, IXMLModelNameType_cbc)
  protected
    { IXMLModelNameType_cbc }
  end;

{ TXMLModelNameType_cbcList }

  TXMLModelNameType_cbcList = class(TXMLNodeCollection, IXMLModelNameType_cbcList)
  protected
    { IXMLModelNameType_cbcList }
    function Add: IXMLModelNameType_cbc;
    function Insert(const Index: Integer): IXMLModelNameType_cbc;

    function Get_Item(const Index: Integer): IXMLModelNameType_cbc;
  end;

{ TXMLItemIdentificationType_cac }

  TXMLItemIdentificationType_cac = class(TXMLNode, IXMLItemIdentificationType_cac)
  private
    FPhysicalAttribute: IXMLPhysicalAttributeType_cacList;
    FMeasurementDimension: IXMLDimensionType_cacList;
  protected
    { IXMLItemIdentificationType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_ExtendedID: IXMLExtendedIDType_cbc;
    function Get_BarcodeSymbologyID: IXMLBarcodeSymbologyIDType_cbc;
    function Get_PhysicalAttribute: IXMLPhysicalAttributeType_cacList;
    function Get_MeasurementDimension: IXMLDimensionType_cacList;
    function Get_IssuerParty: IXMLPartyType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLItemIdentificationType_cacList }

  TXMLItemIdentificationType_cacList = class(TXMLNodeCollection, IXMLItemIdentificationType_cacList)
  protected
    { IXMLItemIdentificationType_cacList }
    function Add: IXMLItemIdentificationType_cac;
    function Insert(const Index: Integer): IXMLItemIdentificationType_cac;

    function Get_Item(const Index: Integer): IXMLItemIdentificationType_cac;
  end;

{ TXMLExtendedIDType_cbc }

  TXMLExtendedIDType_cbc = class(TXMLNode, IXMLExtendedIDType_cbc)
  protected
    { IXMLExtendedIDType_cbc }
  end;

{ TXMLBarcodeSymbologyIDType_cbc }

  TXMLBarcodeSymbologyIDType_cbc = class(TXMLNode, IXMLBarcodeSymbologyIDType_cbc)
  protected
    { IXMLBarcodeSymbologyIDType_cbc }
  end;

{ TXMLPhysicalAttributeType_cac }

  TXMLPhysicalAttributeType_cac = class(TXMLNode, IXMLPhysicalAttributeType_cac)
  private
    FDescription: IXMLDescriptionType_cbcList;
  protected
    { IXMLPhysicalAttributeType_cac }
    function Get_AttributeID: IXMLAttributeIDType_cbc;
    function Get_PositionCode: IXMLPositionCodeType_cbc;
    function Get_DescriptionCode: IXMLDescriptionCodeType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPhysicalAttributeType_cacList }

  TXMLPhysicalAttributeType_cacList = class(TXMLNodeCollection, IXMLPhysicalAttributeType_cacList)
  protected
    { IXMLPhysicalAttributeType_cacList }
    function Add: IXMLPhysicalAttributeType_cac;
    function Insert(const Index: Integer): IXMLPhysicalAttributeType_cac;

    function Get_Item(const Index: Integer): IXMLPhysicalAttributeType_cac;
  end;

{ TXMLPositionCodeType_cbc }

  TXMLPositionCodeType_cbc = class(TXMLNode, IXMLPositionCodeType_cbc)
  protected
    { IXMLPositionCodeType_cbc }
  end;

{ TXMLCommodityClassificationType_cac }

  TXMLCommodityClassificationType_cac = class(TXMLNode, IXMLCommodityClassificationType_cac)
  protected
    { IXMLCommodityClassificationType_cac }
    function Get_NatureCode: IXMLNatureCodeType_cbc;
    function Get_CargoTypeCode: IXMLCargoTypeCodeType_cbc;
    function Get_CommodityCode: IXMLCommodityCodeType_cbc;
    function Get_ItemClassificationCode: IXMLItemClassificationCodeType_cbc;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCommodityClassificationType_cacList }

  TXMLCommodityClassificationType_cacList = class(TXMLNodeCollection, IXMLCommodityClassificationType_cacList)
  protected
    { IXMLCommodityClassificationType_cacList }
    function Add: IXMLCommodityClassificationType_cac;
    function Insert(const Index: Integer): IXMLCommodityClassificationType_cac;

    function Get_Item(const Index: Integer): IXMLCommodityClassificationType_cac;
  end;

{ TXMLNatureCodeType_cbc }

  TXMLNatureCodeType_cbc = class(TXMLNode, IXMLNatureCodeType_cbc)
  protected
    { IXMLNatureCodeType_cbc }
  end;

{ TXMLCargoTypeCodeType_cbc }

  TXMLCargoTypeCodeType_cbc = class(TXMLNode, IXMLCargoTypeCodeType_cbc)
  protected
    { IXMLCargoTypeCodeType_cbc }
  end;

{ TXMLCommodityCodeType_cbc }

  TXMLCommodityCodeType_cbc = class(TXMLNode, IXMLCommodityCodeType_cbc)
  protected
    { IXMLCommodityCodeType_cbc }
  end;

{ TXMLItemClassificationCodeType_cbc }

  TXMLItemClassificationCodeType_cbc = class(TXMLNode, IXMLItemClassificationCodeType_cbc)
  protected
    { IXMLItemClassificationCodeType_cbc }
  end;

{ TXMLTransactionConditionsType_cac }

  TXMLTransactionConditionsType_cac = class(TXMLNode, IXMLTransactionConditionsType_cac)
  private
    FDescription: IXMLDescriptionType_cbcList;
    FDocumentReference: IXMLDocumentReferenceType_cacList;
  protected
    { IXMLTransactionConditionsType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_ActionCode: IXMLActionCodeType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_DocumentReference: IXMLDocumentReferenceType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransactionConditionsType_cacList }

  TXMLTransactionConditionsType_cacList = class(TXMLNodeCollection, IXMLTransactionConditionsType_cacList)
  protected
    { IXMLTransactionConditionsType_cacList }
    function Add: IXMLTransactionConditionsType_cac;
    function Insert(const Index: Integer): IXMLTransactionConditionsType_cac;

    function Get_Item(const Index: Integer): IXMLTransactionConditionsType_cac;
  end;

{ TXMLActionCodeType_cbc }

  TXMLActionCodeType_cbc = class(TXMLNode, IXMLActionCodeType_cbc)
  protected
    { IXMLActionCodeType_cbc }
  end;

{ TXMLHazardousItemType_cac }

  TXMLHazardousItemType_cac = class(TXMLNode, IXMLHazardousItemType_cac)
  private
    FAdditionalInformation: IXMLAdditionalInformationType_cbcList;
    FSecondaryHazard: IXMLSecondaryHazardType_cacList;
    FHazardousGoodsTransit: IXMLHazardousGoodsTransitType_cacList;
    FAdditionalTemperature: IXMLTemperatureType_cacList;
  protected
    { IXMLHazardousItemType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_PlacardNotation: IXMLPlacardNotationType_cbc;
    function Get_PlacardEndorsement: IXMLPlacardEndorsementType_cbc;
    function Get_AdditionalInformation: IXMLAdditionalInformationType_cbcList;
    function Get_UNDGCode: IXMLUNDGCodeType_cbc;
    function Get_EmergencyProceduresCode: IXMLEmergencyProceduresCodeType_cbc;
    function Get_MedicalFirstAidGuideCode: IXMLMedicalFirstAidGuideCodeType_cbc;
    function Get_TechnicalName: IXMLTechnicalNameType_cbc;
    function Get_CategoryName: IXMLCategoryNameType_cbc;
    function Get_HazardousCategoryCode: IXMLHazardousCategoryCodeType_cbc;
    function Get_UpperOrangeHazardPlacardID: IXMLUpperOrangeHazardPlacardIDType_cbc;
    function Get_LowerOrangeHazardPlacardID: IXMLLowerOrangeHazardPlacardIDType_cbc;
    function Get_MarkingID: IXMLMarkingIDType_cbc;
    function Get_HazardClassID: IXMLHazardClassIDType_cbc;
    function Get_NetWeightMeasure: IXMLNetWeightMeasureType_cbc;
    function Get_NetVolumeMeasure: IXMLNetVolumeMeasureType_cbc;
    function Get_Quantity: IXMLQuantityType_cbc;
    function Get_ContactParty: IXMLPartyType_cac;
    function Get_SecondaryHazard: IXMLSecondaryHazardType_cacList;
    function Get_HazardousGoodsTransit: IXMLHazardousGoodsTransitType_cacList;
    function Get_EmergencyTemperature: IXMLTemperatureType_cac;
    function Get_FlashpointTemperature: IXMLTemperatureType_cac;
    function Get_AdditionalTemperature: IXMLTemperatureType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLHazardousItemType_cacList }

  TXMLHazardousItemType_cacList = class(TXMLNodeCollection, IXMLHazardousItemType_cacList)
  protected
    { IXMLHazardousItemType_cacList }
    function Add: IXMLHazardousItemType_cac;
    function Insert(const Index: Integer): IXMLHazardousItemType_cac;

    function Get_Item(const Index: Integer): IXMLHazardousItemType_cac;
  end;

{ TXMLPlacardNotationType_cbc }

  TXMLPlacardNotationType_cbc = class(TXMLNode, IXMLPlacardNotationType_cbc)
  protected
    { IXMLPlacardNotationType_cbc }
  end;

{ TXMLPlacardEndorsementType_cbc }

  TXMLPlacardEndorsementType_cbc = class(TXMLNode, IXMLPlacardEndorsementType_cbc)
  protected
    { IXMLPlacardEndorsementType_cbc }
  end;

{ TXMLUNDGCodeType_cbc }

  TXMLUNDGCodeType_cbc = class(TXMLNode, IXMLUNDGCodeType_cbc)
  protected
    { IXMLUNDGCodeType_cbc }
  end;

{ TXMLEmergencyProceduresCodeType_cbc }

  TXMLEmergencyProceduresCodeType_cbc = class(TXMLNode, IXMLEmergencyProceduresCodeType_cbc)
  protected
    { IXMLEmergencyProceduresCodeType_cbc }
  end;

{ TXMLMedicalFirstAidGuideCodeType_cbc }

  TXMLMedicalFirstAidGuideCodeType_cbc = class(TXMLNode, IXMLMedicalFirstAidGuideCodeType_cbc)
  protected
    { IXMLMedicalFirstAidGuideCodeType_cbc }
  end;

{ TXMLTechnicalNameType_cbc }

  TXMLTechnicalNameType_cbc = class(TXMLNode, IXMLTechnicalNameType_cbc)
  protected
    { IXMLTechnicalNameType_cbc }
  end;

{ TXMLCategoryNameType_cbc }

  TXMLCategoryNameType_cbc = class(TXMLNode, IXMLCategoryNameType_cbc)
  protected
    { IXMLCategoryNameType_cbc }
  end;

{ TXMLHazardousCategoryCodeType_cbc }

  TXMLHazardousCategoryCodeType_cbc = class(TXMLNode, IXMLHazardousCategoryCodeType_cbc)
  protected
    { IXMLHazardousCategoryCodeType_cbc }
  end;

{ TXMLUpperOrangeHazardPlacardIDType_cbc }

  TXMLUpperOrangeHazardPlacardIDType_cbc = class(TXMLNode, IXMLUpperOrangeHazardPlacardIDType_cbc)
  protected
    { IXMLUpperOrangeHazardPlacardIDType_cbc }
  end;

{ TXMLLowerOrangeHazardPlacardIDType_cbc }

  TXMLLowerOrangeHazardPlacardIDType_cbc = class(TXMLNode, IXMLLowerOrangeHazardPlacardIDType_cbc)
  protected
    { IXMLLowerOrangeHazardPlacardIDType_cbc }
  end;

{ TXMLMarkingIDType_cbc }

  TXMLMarkingIDType_cbc = class(TXMLNode, IXMLMarkingIDType_cbc)
  protected
    { IXMLMarkingIDType_cbc }
  end;

{ TXMLHazardClassIDType_cbc }

  TXMLHazardClassIDType_cbc = class(TXMLNode, IXMLHazardClassIDType_cbc)
  protected
    { IXMLHazardClassIDType_cbc }
  end;

{ TXMLSecondaryHazardType_cac }

  TXMLSecondaryHazardType_cac = class(TXMLNode, IXMLSecondaryHazardType_cac)
  private
    FExtension: IXMLExtensionType_cbcList;
  protected
    { IXMLSecondaryHazardType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_PlacardNotation: IXMLPlacardNotationType_cbc;
    function Get_PlacardEndorsement: IXMLPlacardEndorsementType_cbc;
    function Get_EmergencyProceduresCode: IXMLEmergencyProceduresCodeType_cbc;
    function Get_Extension: IXMLExtensionType_cbcList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSecondaryHazardType_cacList }

  TXMLSecondaryHazardType_cacList = class(TXMLNodeCollection, IXMLSecondaryHazardType_cacList)
  protected
    { IXMLSecondaryHazardType_cacList }
    function Add: IXMLSecondaryHazardType_cac;
    function Insert(const Index: Integer): IXMLSecondaryHazardType_cac;

    function Get_Item(const Index: Integer): IXMLSecondaryHazardType_cac;
  end;

{ TXMLExtensionType_cbc }

  TXMLExtensionType_cbc = class(TXMLNode, IXMLExtensionType_cbc)
  protected
    { IXMLExtensionType_cbc }
  end;

{ TXMLExtensionType_cbcList }

  TXMLExtensionType_cbcList = class(TXMLNodeCollection, IXMLExtensionType_cbcList)
  protected
    { IXMLExtensionType_cbcList }
    function Add: IXMLExtensionType_cbc;
    function Insert(const Index: Integer): IXMLExtensionType_cbc;

    function Get_Item(const Index: Integer): IXMLExtensionType_cbc;
  end;

{ TXMLItemPropertyType_cac }

  TXMLItemPropertyType_cac = class(TXMLNode, IXMLItemPropertyType_cac)
  private
    FValueQualifier: IXMLValueQualifierType_cbcList;
    FListValue: IXMLListValueType_cbcList;
    FItemPropertyGroup: IXMLItemPropertyGroupType_cacList;
  protected
    { IXMLItemPropertyType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_NameCode: IXMLNameCodeType_cbc;
    function Get_TestMethod: IXMLTestMethodType_cbc;
    function Get_Value: IXMLValueType_cbc;
    function Get_ValueQuantity: IXMLValueQuantityType_cbc;
    function Get_ValueQualifier: IXMLValueQualifierType_cbcList;
    function Get_ImportanceCode: IXMLImportanceCodeType_cbc;
    function Get_ListValue: IXMLListValueType_cbcList;
    function Get_UsabilityPeriod: IXMLPeriodType_cac;
    function Get_ItemPropertyGroup: IXMLItemPropertyGroupType_cacList;
    function Get_RangeDimension: IXMLDimensionType_cac;
    function Get_ItemPropertyRange: IXMLItemPropertyRangeType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLItemPropertyType_cacList }

  TXMLItemPropertyType_cacList = class(TXMLNodeCollection, IXMLItemPropertyType_cacList)
  protected
    { IXMLItemPropertyType_cacList }
    function Add: IXMLItemPropertyType_cac;
    function Insert(const Index: Integer): IXMLItemPropertyType_cac;

    function Get_Item(const Index: Integer): IXMLItemPropertyType_cac;
  end;

{ TXMLNameCodeType_cbc }

  TXMLNameCodeType_cbc = class(TXMLNode, IXMLNameCodeType_cbc)
  protected
    { IXMLNameCodeType_cbc }
  end;

{ TXMLTestMethodType_cbc }

  TXMLTestMethodType_cbc = class(TXMLNode, IXMLTestMethodType_cbc)
  protected
    { IXMLTestMethodType_cbc }
  end;

{ TXMLValueQuantityType_cbc }

  TXMLValueQuantityType_cbc = class(TXMLNode, IXMLValueQuantityType_cbc)
  protected
    { IXMLValueQuantityType_cbc }
  end;

{ TXMLValueQualifierType_cbc }

  TXMLValueQualifierType_cbc = class(TXMLNode, IXMLValueQualifierType_cbc)
  protected
    { IXMLValueQualifierType_cbc }
  end;

{ TXMLValueQualifierType_cbcList }

  TXMLValueQualifierType_cbcList = class(TXMLNodeCollection, IXMLValueQualifierType_cbcList)
  protected
    { IXMLValueQualifierType_cbcList }
    function Add: IXMLValueQualifierType_cbc;
    function Insert(const Index: Integer): IXMLValueQualifierType_cbc;

    function Get_Item(const Index: Integer): IXMLValueQualifierType_cbc;
  end;

{ TXMLImportanceCodeType_cbc }

  TXMLImportanceCodeType_cbc = class(TXMLNode, IXMLImportanceCodeType_cbc)
  protected
    { IXMLImportanceCodeType_cbc }
  end;

{ TXMLListValueType_cbc }

  TXMLListValueType_cbc = class(TXMLNode, IXMLListValueType_cbc)
  protected
    { IXMLListValueType_cbc }
  end;

{ TXMLListValueType_cbcList }

  TXMLListValueType_cbcList = class(TXMLNodeCollection, IXMLListValueType_cbcList)
  protected
    { IXMLListValueType_cbcList }
    function Add: IXMLListValueType_cbc;
    function Insert(const Index: Integer): IXMLListValueType_cbc;

    function Get_Item(const Index: Integer): IXMLListValueType_cbc;
  end;

{ TXMLItemPropertyGroupType_cac }

  TXMLItemPropertyGroupType_cac = class(TXMLNode, IXMLItemPropertyGroupType_cac)
  protected
    { IXMLItemPropertyGroupType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_Name: IXMLNameType_cbc;
    function Get_ImportanceCode: IXMLImportanceCodeType_cbc;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLItemPropertyGroupType_cacList }

  TXMLItemPropertyGroupType_cacList = class(TXMLNodeCollection, IXMLItemPropertyGroupType_cacList)
  protected
    { IXMLItemPropertyGroupType_cacList }
    function Add: IXMLItemPropertyGroupType_cac;
    function Insert(const Index: Integer): IXMLItemPropertyGroupType_cac;

    function Get_Item(const Index: Integer): IXMLItemPropertyGroupType_cac;
  end;

{ TXMLItemPropertyRangeType_cac }

  TXMLItemPropertyRangeType_cac = class(TXMLNode, IXMLItemPropertyRangeType_cac)
  protected
    { IXMLItemPropertyRangeType_cac }
    function Get_MinimumValue: IXMLMinimumValueType_cbc;
    function Get_MaximumValue: IXMLMaximumValueType_cbc;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMinimumValueType_cbc }

  TXMLMinimumValueType_cbc = class(TXMLNode, IXMLMinimumValueType_cbc)
  protected
    { IXMLMinimumValueType_cbc }
  end;

{ TXMLMaximumValueType_cbc }

  TXMLMaximumValueType_cbc = class(TXMLNode, IXMLMaximumValueType_cbc)
  protected
    { IXMLMaximumValueType_cbc }
  end;

{ TXMLItemInstanceType_cac }

  TXMLItemInstanceType_cac = class(TXMLNode, IXMLItemInstanceType_cac)
  private
    FAdditionalItemProperty: IXMLItemPropertyType_cacList;
  protected
    { IXMLItemInstanceType_cac }
    function Get_ProductTraceID: IXMLProductTraceIDType_cbc;
    function Get_ManufactureDate: IXMLManufactureDateType_cbc;
    function Get_ManufactureTime: IXMLManufactureTimeType_cbc;
    function Get_BestBeforeDate: IXMLBestBeforeDateType_cbc;
    function Get_RegistrationID: IXMLRegistrationIDType_cbc;
    function Get_SerialID: IXMLSerialIDType_cbc;
    function Get_AdditionalItemProperty: IXMLItemPropertyType_cacList;
    function Get_LotIdentification: IXMLLotIdentificationType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLItemInstanceType_cacList }

  TXMLItemInstanceType_cacList = class(TXMLNodeCollection, IXMLItemInstanceType_cacList)
  protected
    { IXMLItemInstanceType_cacList }
    function Add: IXMLItemInstanceType_cac;
    function Insert(const Index: Integer): IXMLItemInstanceType_cac;

    function Get_Item(const Index: Integer): IXMLItemInstanceType_cac;
  end;

{ TXMLProductTraceIDType_cbc }

  TXMLProductTraceIDType_cbc = class(TXMLNode, IXMLProductTraceIDType_cbc)
  protected
    { IXMLProductTraceIDType_cbc }
  end;

{ TXMLManufactureDateType_cbc }

  TXMLManufactureDateType_cbc = class(TXMLNode, IXMLManufactureDateType_cbc)
  protected
    { IXMLManufactureDateType_cbc }
  end;

{ TXMLManufactureTimeType_cbc }

  TXMLManufactureTimeType_cbc = class(TXMLNode, IXMLManufactureTimeType_cbc)
  protected
    { IXMLManufactureTimeType_cbc }
  end;

{ TXMLBestBeforeDateType_cbc }

  TXMLBestBeforeDateType_cbc = class(TXMLNode, IXMLBestBeforeDateType_cbc)
  protected
    { IXMLBestBeforeDateType_cbc }
  end;

{ TXMLRegistrationIDType_cbc }

  TXMLRegistrationIDType_cbc = class(TXMLNode, IXMLRegistrationIDType_cbc)
  protected
    { IXMLRegistrationIDType_cbc }
  end;

{ TXMLSerialIDType_cbc }

  TXMLSerialIDType_cbc = class(TXMLNode, IXMLSerialIDType_cbc)
  protected
    { IXMLSerialIDType_cbc }
  end;

{ TXMLLotIdentificationType_cac }

  TXMLLotIdentificationType_cac = class(TXMLNode, IXMLLotIdentificationType_cac)
  private
    FAdditionalItemProperty: IXMLItemPropertyType_cacList;
  protected
    { IXMLLotIdentificationType_cac }
    function Get_LotNumberID: IXMLLotNumberIDType_cbc;
    function Get_ExpiryDate: IXMLExpiryDateType_cbc;
    function Get_AdditionalItemProperty: IXMLItemPropertyType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLotNumberIDType_cbc }

  TXMLLotNumberIDType_cbc = class(TXMLNode, IXMLLotNumberIDType_cbc)
  protected
    { IXMLLotNumberIDType_cbc }
  end;

{ TXMLCertificateType_cac }

  TXMLCertificateType_cac = class(TXMLNode, IXMLCertificateType_cac)
  private
    FRemarks: IXMLRemarksType_cbcList;
    FDocumentReference: IXMLDocumentReferenceType_cacList;
    FSignature: IXMLSignatureType_cacList;
  protected
    { IXMLCertificateType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_CertificateTypeCode: IXMLCertificateTypeCodeType_cbc;
    function Get_CertificateType: IXMLCertificateTypeType_cbc;
    function Get_Remarks: IXMLRemarksType_cbcList;
    function Get_IssuerParty: IXMLPartyType_cac;
    function Get_DocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_Signature: IXMLSignatureType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCertificateType_cacList }

  TXMLCertificateType_cacList = class(TXMLNodeCollection, IXMLCertificateType_cacList)
  protected
    { IXMLCertificateType_cacList }
    function Add: IXMLCertificateType_cac;
    function Insert(const Index: Integer): IXMLCertificateType_cac;

    function Get_Item(const Index: Integer): IXMLCertificateType_cac;
  end;

{ TXMLCertificateTypeCodeType_cbc }

  TXMLCertificateTypeCodeType_cbc = class(TXMLNode, IXMLCertificateTypeCodeType_cbc)
  protected
    { IXMLCertificateTypeCodeType_cbc }
  end;

{ TXMLCertificateTypeType_cbc }

  TXMLCertificateTypeType_cbc = class(TXMLNode, IXMLCertificateTypeType_cbc)
  protected
    { IXMLCertificateTypeType_cbc }
  end;

{ TXMLPackageType_cac }

  TXMLPackageType_cac = class(TXMLNode, IXMLPackageType_cac)
  private
    FPackingMaterial: IXMLPackingMaterialType_cbcList;
    FContainedPackage: IXMLPackageType_cacList;
    FGoodsItem: IXMLGoodsItemType_cacList;
    FMeasurementDimension: IXMLDimensionType_cacList;
    FDeliveryUnit: IXMLDeliveryUnitType_cacList;
  protected
    { IXMLPackageType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_Quantity: IXMLQuantityType_cbc;
    function Get_ReturnableMaterialIndicator: IXMLReturnableMaterialIndicatorType_cbc;
    function Get_PackageLevelCode: IXMLPackageLevelCodeType_cbc;
    function Get_PackagingTypeCode: IXMLPackagingTypeCodeType_cbc;
    function Get_PackingMaterial: IXMLPackingMaterialType_cbcList;
    function Get_TraceID: IXMLTraceIDType_cbc;
    function Get_ContainedPackage: IXMLPackageType_cacList;
    function Get_ContainingTransportEquipment: IXMLTransportEquipmentType_cac;
    function Get_GoodsItem: IXMLGoodsItemType_cacList;
    function Get_MeasurementDimension: IXMLDimensionType_cacList;
    function Get_DeliveryUnit: IXMLDeliveryUnitType_cacList;
    function Get_Delivery: IXMLDeliveryType_cac;
    function Get_Pickup: IXMLPickupType_cac;
    function Get_Despatch: IXMLDespatchType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPackageType_cacList }

  TXMLPackageType_cacList = class(TXMLNodeCollection, IXMLPackageType_cacList)
  protected
    { IXMLPackageType_cacList }
    function Add: IXMLPackageType_cac;
    function Insert(const Index: Integer): IXMLPackageType_cac;

    function Get_Item(const Index: Integer): IXMLPackageType_cac;
  end;

{ TXMLReturnableMaterialIndicatorType_cbc }

  TXMLReturnableMaterialIndicatorType_cbc = class(TXMLNode, IXMLReturnableMaterialIndicatorType_cbc)
  protected
    { IXMLReturnableMaterialIndicatorType_cbc }
  end;

{ TXMLPackageLevelCodeType_cbc }

  TXMLPackageLevelCodeType_cbc = class(TXMLNode, IXMLPackageLevelCodeType_cbc)
  protected
    { IXMLPackageLevelCodeType_cbc }
  end;

{ TXMLPackagingTypeCodeType_cbc }

  TXMLPackagingTypeCodeType_cbc = class(TXMLNode, IXMLPackagingTypeCodeType_cbc)
  protected
    { IXMLPackagingTypeCodeType_cbc }
  end;

{ TXMLPackingMaterialType_cbc }

  TXMLPackingMaterialType_cbc = class(TXMLNode, IXMLPackingMaterialType_cbc)
  protected
    { IXMLPackingMaterialType_cbc }
  end;

{ TXMLPackingMaterialType_cbcList }

  TXMLPackingMaterialType_cbcList = class(TXMLNodeCollection, IXMLPackingMaterialType_cbcList)
  protected
    { IXMLPackingMaterialType_cbcList }
    function Add: IXMLPackingMaterialType_cbc;
    function Insert(const Index: Integer): IXMLPackingMaterialType_cbc;

    function Get_Item(const Index: Integer): IXMLPackingMaterialType_cbc;
  end;

{ TXMLGoodsItemType_cac }

  TXMLGoodsItemType_cac = class(TXMLNode, IXMLGoodsItemType_cac)
  private
    FDescription: IXMLDescriptionType_cbcList;
    FItem: IXMLItemType_cacList;
    FGoodsItemContainer: IXMLGoodsItemContainerType_cacList;
    FFreightAllowanceCharge: IXMLAllowanceChargeType_cacList;
    FInvoiceLine: IXMLInvoiceLineType_cacList;
    FTemperature: IXMLTemperatureType_cacList;
    FContainedGoodsItem: IXMLGoodsItemType_cacList;
    FMeasurementDimension: IXMLDimensionType_cacList;
    FContainingPackage: IXMLPackageType_cacList;
  protected
    { IXMLGoodsItemType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_SequenceNumberID: IXMLSequenceNumberIDType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc;
    function Get_DeclaredCustomsValueAmount: IXMLDeclaredCustomsValueAmountType_cbc;
    function Get_DeclaredForCarriageValueAmount: IXMLDeclaredForCarriageValueAmountType_cbc;
    function Get_DeclaredStatisticsValueAmount: IXMLDeclaredStatisticsValueAmountType_cbc;
    function Get_FreeOnBoardValueAmount: IXMLFreeOnBoardValueAmountType_cbc;
    function Get_InsuranceValueAmount: IXMLInsuranceValueAmountType_cbc;
    function Get_ValueAmount: IXMLValueAmountType_cbc;
    function Get_GrossWeightMeasure: IXMLGrossWeightMeasureType_cbc;
    function Get_NetWeightMeasure: IXMLNetWeightMeasureType_cbc;
    function Get_NetNetWeightMeasure: IXMLNetNetWeightMeasureType_cbc;
    function Get_ChargeableWeightMeasure: IXMLChargeableWeightMeasureType_cbc;
    function Get_GrossVolumeMeasure: IXMLGrossVolumeMeasureType_cbc;
    function Get_NetVolumeMeasure: IXMLNetVolumeMeasureType_cbc;
    function Get_Quantity: IXMLQuantityType_cbc;
    function Get_PreferenceCriterionCode: IXMLPreferenceCriterionCodeType_cbc;
    function Get_RequiredCustomsID: IXMLRequiredCustomsIDType_cbc;
    function Get_CustomsStatusCode: IXMLCustomsStatusCodeType_cbc;
    function Get_CustomsTariffQuantity: IXMLCustomsTariffQuantityType_cbc;
    function Get_CustomsImportClassifiedIndicator: IXMLCustomsImportClassifiedIndicatorType_cbc;
    function Get_ChargeableQuantity: IXMLChargeableQuantityType_cbc;
    function Get_ReturnableQuantity: IXMLReturnableQuantityType_cbc;
    function Get_TraceID: IXMLTraceIDType_cbc;
    function Get_Item: IXMLItemType_cacList;
    function Get_GoodsItemContainer: IXMLGoodsItemContainerType_cacList;
    function Get_FreightAllowanceCharge: IXMLAllowanceChargeType_cacList;
    function Get_InvoiceLine: IXMLInvoiceLineType_cacList;
    function Get_Temperature: IXMLTemperatureType_cacList;
    function Get_ContainedGoodsItem: IXMLGoodsItemType_cacList;
    function Get_OriginAddress: IXMLAddressType_cac;
    function Get_Delivery: IXMLDeliveryType_cac;
    function Get_Pickup: IXMLPickupType_cac;
    function Get_Despatch: IXMLDespatchType_cac;
    function Get_MeasurementDimension: IXMLDimensionType_cacList;
    function Get_ContainingPackage: IXMLPackageType_cacList;
    function Get_ShipmentDocumentReference: IXMLDocumentReferenceType_cac;
    function Get_MinimumTemperature: IXMLTemperatureType_cac;
    function Get_MaximumTemperature: IXMLTemperatureType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLGoodsItemType_cacList }

  TXMLGoodsItemType_cacList = class(TXMLNodeCollection, IXMLGoodsItemType_cacList)
  protected
    { IXMLGoodsItemType_cacList }
    function Add: IXMLGoodsItemType_cac;
    function Insert(const Index: Integer): IXMLGoodsItemType_cac;

    function Get_Item(const Index: Integer): IXMLGoodsItemType_cac;
  end;

{ TXMLSequenceNumberIDType_cbc }

  TXMLSequenceNumberIDType_cbc = class(TXMLNode, IXMLSequenceNumberIDType_cbc)
  protected
    { IXMLSequenceNumberIDType_cbc }
  end;

{ TXMLValueAmountType_cbc }

  TXMLValueAmountType_cbc = class(TXMLNode, IXMLValueAmountType_cbc)
  protected
    { IXMLValueAmountType_cbc }
  end;

{ TXMLPreferenceCriterionCodeType_cbc }

  TXMLPreferenceCriterionCodeType_cbc = class(TXMLNode, IXMLPreferenceCriterionCodeType_cbc)
  protected
    { IXMLPreferenceCriterionCodeType_cbc }
  end;

{ TXMLRequiredCustomsIDType_cbc }

  TXMLRequiredCustomsIDType_cbc = class(TXMLNode, IXMLRequiredCustomsIDType_cbc)
  protected
    { IXMLRequiredCustomsIDType_cbc }
  end;

{ TXMLCustomsStatusCodeType_cbc }

  TXMLCustomsStatusCodeType_cbc = class(TXMLNode, IXMLCustomsStatusCodeType_cbc)
  protected
    { IXMLCustomsStatusCodeType_cbc }
  end;

{ TXMLCustomsTariffQuantityType_cbc }

  TXMLCustomsTariffQuantityType_cbc = class(TXMLNode, IXMLCustomsTariffQuantityType_cbc)
  protected
    { IXMLCustomsTariffQuantityType_cbc }
  end;

{ TXMLCustomsImportClassifiedIndicatorType_cbc }

  TXMLCustomsImportClassifiedIndicatorType_cbc = class(TXMLNode, IXMLCustomsImportClassifiedIndicatorType_cbc)
  protected
    { IXMLCustomsImportClassifiedIndicatorType_cbc }
  end;

{ TXMLChargeableQuantityType_cbc }

  TXMLChargeableQuantityType_cbc = class(TXMLNode, IXMLChargeableQuantityType_cbc)
  protected
    { IXMLChargeableQuantityType_cbc }
  end;

{ TXMLReturnableQuantityType_cbc }

  TXMLReturnableQuantityType_cbc = class(TXMLNode, IXMLReturnableQuantityType_cbc)
  protected
    { IXMLReturnableQuantityType_cbc }
  end;

{ TXMLGoodsItemContainerType_cac }

  TXMLGoodsItemContainerType_cac = class(TXMLNode, IXMLGoodsItemContainerType_cac)
  private
    FTransportEquipment: IXMLTransportEquipmentType_cacList;
  protected
    { IXMLGoodsItemContainerType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_Quantity: IXMLQuantityType_cbc;
    function Get_TransportEquipment: IXMLTransportEquipmentType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLGoodsItemContainerType_cacList }

  TXMLGoodsItemContainerType_cacList = class(TXMLNodeCollection, IXMLGoodsItemContainerType_cacList)
  protected
    { IXMLGoodsItemContainerType_cacList }
    function Add: IXMLGoodsItemContainerType_cac;
    function Insert(const Index: Integer): IXMLGoodsItemContainerType_cac;

    function Get_Item(const Index: Integer): IXMLGoodsItemContainerType_cac;
  end;

{ TXMLInvoiceLineType_cac }

  TXMLInvoiceLineType_cac = class(TXMLNode, IXMLInvoiceLineType_cac)
  private
    FNote: IXMLNoteType_cbcList;
    FInvoicePeriod: IXMLPeriodType_cacList;
    FOrderLineReference: IXMLOrderLineReferenceType_cacList;
    FDespatchLineReference: IXMLLineReferenceType_cacList;
    FReceiptLineReference: IXMLLineReferenceType_cacList;
    FBillingReference: IXMLBillingReferenceType_cacList;
    FDocumentReference: IXMLDocumentReferenceType_cacList;
    FDelivery: IXMLDeliveryType_cacList;
    FPaymentTerms: IXMLPaymentTermsType_cacList;
    FAllowanceCharge: IXMLAllowanceChargeType_cacList;
    FTaxTotal: IXMLTaxTotalType_cacList;
    FWithholdingTaxTotal: IXMLTaxTotalType_cacList;
    FSubInvoiceLine: IXMLInvoiceLineType_cacList;
  protected
    { IXMLInvoiceLineType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_UUID: IXMLUUIDType_cbc;
    function Get_Note: IXMLNoteType_cbcList;
    function Get_InvoicedQuantity: IXMLInvoicedQuantityType_cbc;
    function Get_LineExtensionAmount: IXMLLineExtensionAmountType_cbc;
    function Get_TaxPointDate: IXMLTaxPointDateType_cbc;
    function Get_AccountingCostCode: IXMLAccountingCostCodeType_cbc;
    function Get_AccountingCost: IXMLAccountingCostType_cbc;
    function Get_PaymentPurposeCode: IXMLPaymentPurposeCodeType_cbc;
    function Get_FreeOfChargeIndicator: IXMLFreeOfChargeIndicatorType_cbc;
    function Get_InvoicePeriod: IXMLPeriodType_cacList;
    function Get_OrderLineReference: IXMLOrderLineReferenceType_cacList;
    function Get_DespatchLineReference: IXMLLineReferenceType_cacList;
    function Get_ReceiptLineReference: IXMLLineReferenceType_cacList;
    function Get_BillingReference: IXMLBillingReferenceType_cacList;
    function Get_DocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_PricingReference: IXMLPricingReferenceType_cac;
    function Get_OriginatorParty: IXMLPartyType_cac;
    function Get_Delivery: IXMLDeliveryType_cacList;
    function Get_PaymentTerms: IXMLPaymentTermsType_cacList;
    function Get_AllowanceCharge: IXMLAllowanceChargeType_cacList;
    function Get_TaxTotal: IXMLTaxTotalType_cacList;
    function Get_WithholdingTaxTotal: IXMLTaxTotalType_cacList;
    function Get_Item: IXMLItemType_cac;
    function Get_Price: IXMLPriceType_cac;
    function Get_DeliveryTerms: IXMLDeliveryTermsType_cac;
    function Get_SubInvoiceLine: IXMLInvoiceLineType_cacList;
    function Get_ItemPriceExtension: IXMLPriceExtensionType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInvoiceLineType_cacList }

  TXMLInvoiceLineType_cacList = class(TXMLNodeCollection, IXMLInvoiceLineType_cacList)
  protected
    { IXMLInvoiceLineType_cacList }
    function Add: IXMLInvoiceLineType_cac;
    function Insert(const Index: Integer): IXMLInvoiceLineType_cac;

    function Get_Item(const Index: Integer): IXMLInvoiceLineType_cac;
  end;

{ TXMLInvoicedQuantityType_cbc }

  TXMLInvoicedQuantityType_cbc = class(TXMLNode, IXMLInvoicedQuantityType_cbc)
  protected
    { IXMLInvoicedQuantityType_cbc }
  end;

{ TXMLLineExtensionAmountType_cbc }

  TXMLLineExtensionAmountType_cbc = class(TXMLNode, IXMLLineExtensionAmountType_cbc)
  protected
    { IXMLLineExtensionAmountType_cbc }
  end;

{ TXMLPaymentPurposeCodeType_cbc }

  TXMLPaymentPurposeCodeType_cbc = class(TXMLNode, IXMLPaymentPurposeCodeType_cbc)
  protected
    { IXMLPaymentPurposeCodeType_cbc }
  end;

{ TXMLFreeOfChargeIndicatorType_cbc }

  TXMLFreeOfChargeIndicatorType_cbc = class(TXMLNode, IXMLFreeOfChargeIndicatorType_cbc)
  protected
    { IXMLFreeOfChargeIndicatorType_cbc }
  end;

{ TXMLLineReferenceType_cac }

  TXMLLineReferenceType_cac = class(TXMLNode, IXMLLineReferenceType_cac)
  protected
    { IXMLLineReferenceType_cac }
    function Get_LineID: IXMLLineIDType_cbc;
    function Get_UUID: IXMLUUIDType_cbc;
    function Get_LineStatusCode: IXMLLineStatusCodeType_cbc;
    function Get_DocumentReference: IXMLDocumentReferenceType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLineReferenceType_cacList }

  TXMLLineReferenceType_cacList = class(TXMLNodeCollection, IXMLLineReferenceType_cacList)
  protected
    { IXMLLineReferenceType_cacList }
    function Add: IXMLLineReferenceType_cac;
    function Insert(const Index: Integer): IXMLLineReferenceType_cac;

    function Get_Item(const Index: Integer): IXMLLineReferenceType_cac;
  end;

{ TXMLPricingReferenceType_cac }

  TXMLPricingReferenceType_cac = class(TXMLNode, IXMLPricingReferenceType_cac)
  private
    FAlternativeConditionPrice: IXMLPriceType_cacList;
  protected
    { IXMLPricingReferenceType_cac }
    function Get_OriginalItemLocationQuantity: IXMLItemLocationQuantityType_cac;
    function Get_AlternativeConditionPrice: IXMLPriceType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLItemLocationQuantityType_cac }

  TXMLItemLocationQuantityType_cac = class(TXMLNode, IXMLItemLocationQuantityType_cac)
  private
    FTradingRestrictions: IXMLTradingRestrictionsType_cbcList;
    FApplicableTerritoryAddress: IXMLAddressType_cacList;
    FDeliveryUnit: IXMLDeliveryUnitType_cacList;
    FApplicableTaxCategory: IXMLTaxCategoryType_cacList;
    FAllowanceCharge: IXMLAllowanceChargeType_cacList;
  protected
    { IXMLItemLocationQuantityType_cac }
    function Get_LeadTimeMeasure: IXMLLeadTimeMeasureType_cbc;
    function Get_MinimumQuantity: IXMLMinimumQuantityType_cbc;
    function Get_MaximumQuantity: IXMLMaximumQuantityType_cbc;
    function Get_HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc;
    function Get_TradingRestrictions: IXMLTradingRestrictionsType_cbcList;
    function Get_ApplicableTerritoryAddress: IXMLAddressType_cacList;
    function Get_Price: IXMLPriceType_cac;
    function Get_DeliveryUnit: IXMLDeliveryUnitType_cacList;
    function Get_ApplicableTaxCategory: IXMLTaxCategoryType_cacList;
    function Get_Package: IXMLPackageType_cac;
    function Get_AllowanceCharge: IXMLAllowanceChargeType_cacList;
    function Get_DependentPriceReference: IXMLDependentPriceReferenceType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLeadTimeMeasureType_cbc }

  TXMLLeadTimeMeasureType_cbc = class(TXMLNode, IXMLLeadTimeMeasureType_cbc)
  protected
    { IXMLLeadTimeMeasureType_cbc }
  end;

{ TXMLTradingRestrictionsType_cbc }

  TXMLTradingRestrictionsType_cbc = class(TXMLNode, IXMLTradingRestrictionsType_cbc)
  protected
    { IXMLTradingRestrictionsType_cbc }
  end;

{ TXMLTradingRestrictionsType_cbcList }

  TXMLTradingRestrictionsType_cbcList = class(TXMLNodeCollection, IXMLTradingRestrictionsType_cbcList)
  protected
    { IXMLTradingRestrictionsType_cbcList }
    function Add: IXMLTradingRestrictionsType_cbc;
    function Insert(const Index: Integer): IXMLTradingRestrictionsType_cbc;

    function Get_Item(const Index: Integer): IXMLTradingRestrictionsType_cbc;
  end;

{ TXMLPriceType_cac }

  TXMLPriceType_cac = class(TXMLNode, IXMLPriceType_cac)
  private
    FPriceChangeReason: IXMLPriceChangeReasonType_cbcList;
    FValidityPeriod: IXMLPeriodType_cacList;
    FAllowanceCharge: IXMLAllowanceChargeType_cacList;
  protected
    { IXMLPriceType_cac }
    function Get_PriceAmount: IXMLPriceAmountType_cbc;
    function Get_BaseQuantity: IXMLBaseQuantityType_cbc;
    function Get_PriceChangeReason: IXMLPriceChangeReasonType_cbcList;
    function Get_PriceTypeCode: IXMLPriceTypeCodeType_cbc;
    function Get_PriceType: IXMLPriceTypeType_cbc;
    function Get_OrderableUnitFactorRate: IXMLOrderableUnitFactorRateType_cbc;
    function Get_ValidityPeriod: IXMLPeriodType_cacList;
    function Get_PriceList: IXMLPriceListType_cac;
    function Get_AllowanceCharge: IXMLAllowanceChargeType_cacList;
    function Get_PricingExchangeRate: IXMLExchangeRateType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPriceType_cacList }

  TXMLPriceType_cacList = class(TXMLNodeCollection, IXMLPriceType_cacList)
  protected
    { IXMLPriceType_cacList }
    function Add: IXMLPriceType_cac;
    function Insert(const Index: Integer): IXMLPriceType_cac;

    function Get_Item(const Index: Integer): IXMLPriceType_cac;
  end;

{ TXMLPriceAmountType_cbc }

  TXMLPriceAmountType_cbc = class(TXMLNode, IXMLPriceAmountType_cbc)
  protected
    { IXMLPriceAmountType_cbc }
  end;

{ TXMLBaseQuantityType_cbc }

  TXMLBaseQuantityType_cbc = class(TXMLNode, IXMLBaseQuantityType_cbc)
  protected
    { IXMLBaseQuantityType_cbc }
  end;

{ TXMLPriceChangeReasonType_cbc }

  TXMLPriceChangeReasonType_cbc = class(TXMLNode, IXMLPriceChangeReasonType_cbc)
  protected
    { IXMLPriceChangeReasonType_cbc }
  end;

{ TXMLPriceChangeReasonType_cbcList }

  TXMLPriceChangeReasonType_cbcList = class(TXMLNodeCollection, IXMLPriceChangeReasonType_cbcList)
  protected
    { IXMLPriceChangeReasonType_cbcList }
    function Add: IXMLPriceChangeReasonType_cbc;
    function Insert(const Index: Integer): IXMLPriceChangeReasonType_cbc;

    function Get_Item(const Index: Integer): IXMLPriceChangeReasonType_cbc;
  end;

{ TXMLPriceTypeCodeType_cbc }

  TXMLPriceTypeCodeType_cbc = class(TXMLNode, IXMLPriceTypeCodeType_cbc)
  protected
    { IXMLPriceTypeCodeType_cbc }
  end;

{ TXMLPriceTypeType_cbc }

  TXMLPriceTypeType_cbc = class(TXMLNode, IXMLPriceTypeType_cbc)
  protected
    { IXMLPriceTypeType_cbc }
  end;

{ TXMLOrderableUnitFactorRateType_cbc }

  TXMLOrderableUnitFactorRateType_cbc = class(TXMLNode, IXMLOrderableUnitFactorRateType_cbc)
  protected
    { IXMLOrderableUnitFactorRateType_cbc }
  end;

{ TXMLPriceListType_cac }

  TXMLPriceListType_cac = class(TXMLNode, IXMLPriceListType_cac)
  private
    FValidityPeriod: IXMLPeriodType_cacList;
  protected
    { IXMLPriceListType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_StatusCode: IXMLStatusCodeType_cbc;
    function Get_ValidityPeriod: IXMLPeriodType_cacList;
    function Get_PreviousPriceList: IXMLPriceListType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLStatusCodeType_cbc }

  TXMLStatusCodeType_cbc = class(TXMLNode, IXMLStatusCodeType_cbc)
  protected
    { IXMLStatusCodeType_cbc }
  end;

{ TXMLExchangeRateType_cac }

  TXMLExchangeRateType_cac = class(TXMLNode, IXMLExchangeRateType_cac)
  protected
    { IXMLExchangeRateType_cac }
    function Get_SourceCurrencyCode: IXMLSourceCurrencyCodeType_cbc;
    function Get_SourceCurrencyBaseRate: IXMLSourceCurrencyBaseRateType_cbc;
    function Get_TargetCurrencyCode: IXMLTargetCurrencyCodeType_cbc;
    function Get_TargetCurrencyBaseRate: IXMLTargetCurrencyBaseRateType_cbc;
    function Get_ExchangeMarketID: IXMLExchangeMarketIDType_cbc;
    function Get_CalculationRate: IXMLCalculationRateType_cbc;
    function Get_MathematicOperatorCode: IXMLMathematicOperatorCodeType_cbc;
    function Get_Date: IXMLDateType_cbc;
    function Get_ForeignExchangeContract: IXMLContractType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSourceCurrencyCodeType_cbc }

  TXMLSourceCurrencyCodeType_cbc = class(TXMLNode, IXMLSourceCurrencyCodeType_cbc)
  protected
    { IXMLSourceCurrencyCodeType_cbc }
  end;

{ TXMLSourceCurrencyBaseRateType_cbc }

  TXMLSourceCurrencyBaseRateType_cbc = class(TXMLNode, IXMLSourceCurrencyBaseRateType_cbc)
  protected
    { IXMLSourceCurrencyBaseRateType_cbc }
  end;

{ TXMLTargetCurrencyCodeType_cbc }

  TXMLTargetCurrencyCodeType_cbc = class(TXMLNode, IXMLTargetCurrencyCodeType_cbc)
  protected
    { IXMLTargetCurrencyCodeType_cbc }
  end;

{ TXMLTargetCurrencyBaseRateType_cbc }

  TXMLTargetCurrencyBaseRateType_cbc = class(TXMLNode, IXMLTargetCurrencyBaseRateType_cbc)
  protected
    { IXMLTargetCurrencyBaseRateType_cbc }
  end;

{ TXMLExchangeMarketIDType_cbc }

  TXMLExchangeMarketIDType_cbc = class(TXMLNode, IXMLExchangeMarketIDType_cbc)
  protected
    { IXMLExchangeMarketIDType_cbc }
  end;

{ TXMLCalculationRateType_cbc }

  TXMLCalculationRateType_cbc = class(TXMLNode, IXMLCalculationRateType_cbc)
  protected
    { IXMLCalculationRateType_cbc }
  end;

{ TXMLMathematicOperatorCodeType_cbc }

  TXMLMathematicOperatorCodeType_cbc = class(TXMLNode, IXMLMathematicOperatorCodeType_cbc)
  protected
    { IXMLMathematicOperatorCodeType_cbc }
  end;

{ TXMLDateType_cbc }

  TXMLDateType_cbc = class(TXMLNode, IXMLDateType_cbc)
  protected
    { IXMLDateType_cbc }
  end;

{ TXMLDependentPriceReferenceType_cac }

  TXMLDependentPriceReferenceType_cac = class(TXMLNode, IXMLDependentPriceReferenceType_cac)
  protected
    { IXMLDependentPriceReferenceType_cac }
    function Get_Percent: IXMLPercentType_cbc;
    function Get_LocationAddress: IXMLAddressType_cac;
    function Get_DependentLineReference: IXMLLineReferenceType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPaymentTermsType_cac }

  TXMLPaymentTermsType_cac = class(TXMLNode, IXMLPaymentTermsType_cac)
  private
    FPaymentMeansID: IXMLPaymentMeansIDType_cbcList;
    FNote: IXMLNoteType_cbcList;
  protected
    { IXMLPaymentTermsType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_PaymentMeansID: IXMLPaymentMeansIDType_cbcList;
    function Get_PrepaidPaymentReferenceID: IXMLPrepaidPaymentReferenceIDType_cbc;
    function Get_Note: IXMLNoteType_cbcList;
    function Get_ReferenceEventCode: IXMLReferenceEventCodeType_cbc;
    function Get_SettlementDiscountPercent: IXMLSettlementDiscountPercentType_cbc;
    function Get_PenaltySurchargePercent: IXMLPenaltySurchargePercentType_cbc;
    function Get_PaymentPercent: IXMLPaymentPercentType_cbc;
    function Get_Amount: IXMLAmountType_cbc;
    function Get_SettlementDiscountAmount: IXMLSettlementDiscountAmountType_cbc;
    function Get_PenaltyAmount: IXMLPenaltyAmountType_cbc;
    function Get_PaymentTermsDetailsURI: IXMLPaymentTermsDetailsURIType_cbc;
    function Get_PaymentDueDate: IXMLPaymentDueDateType_cbc;
    function Get_InstallmentDueDate: IXMLInstallmentDueDateType_cbc;
    function Get_InvoicingPartyReference: IXMLInvoicingPartyReferenceType_cbc;
    function Get_SettlementPeriod: IXMLPeriodType_cac;
    function Get_PenaltyPeriod: IXMLPeriodType_cac;
    function Get_ExchangeRate: IXMLExchangeRateType_cac;
    function Get_ValidityPeriod: IXMLPeriodType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPaymentTermsType_cacList }

  TXMLPaymentTermsType_cacList = class(TXMLNodeCollection, IXMLPaymentTermsType_cacList)
  protected
    { IXMLPaymentTermsType_cacList }
    function Add: IXMLPaymentTermsType_cac;
    function Insert(const Index: Integer): IXMLPaymentTermsType_cac;

    function Get_Item(const Index: Integer): IXMLPaymentTermsType_cac;
  end;

{ TXMLPaymentMeansIDType_cbc }

  TXMLPaymentMeansIDType_cbc = class(TXMLNode, IXMLPaymentMeansIDType_cbc)
  protected
    { IXMLPaymentMeansIDType_cbc }
  end;

{ TXMLPaymentMeansIDType_cbcList }

  TXMLPaymentMeansIDType_cbcList = class(TXMLNodeCollection, IXMLPaymentMeansIDType_cbcList)
  protected
    { IXMLPaymentMeansIDType_cbcList }
    function Add: IXMLPaymentMeansIDType_cbc;
    function Insert(const Index: Integer): IXMLPaymentMeansIDType_cbc;

    function Get_Item(const Index: Integer): IXMLPaymentMeansIDType_cbc;
  end;

{ TXMLPrepaidPaymentReferenceIDType_cbc }

  TXMLPrepaidPaymentReferenceIDType_cbc = class(TXMLNode, IXMLPrepaidPaymentReferenceIDType_cbc)
  protected
    { IXMLPrepaidPaymentReferenceIDType_cbc }
  end;

{ TXMLReferenceEventCodeType_cbc }

  TXMLReferenceEventCodeType_cbc = class(TXMLNode, IXMLReferenceEventCodeType_cbc)
  protected
    { IXMLReferenceEventCodeType_cbc }
  end;

{ TXMLSettlementDiscountPercentType_cbc }

  TXMLSettlementDiscountPercentType_cbc = class(TXMLNode, IXMLSettlementDiscountPercentType_cbc)
  protected
    { IXMLSettlementDiscountPercentType_cbc }
  end;

{ TXMLPenaltySurchargePercentType_cbc }

  TXMLPenaltySurchargePercentType_cbc = class(TXMLNode, IXMLPenaltySurchargePercentType_cbc)
  protected
    { IXMLPenaltySurchargePercentType_cbc }
  end;

{ TXMLPaymentPercentType_cbc }

  TXMLPaymentPercentType_cbc = class(TXMLNode, IXMLPaymentPercentType_cbc)
  protected
    { IXMLPaymentPercentType_cbc }
  end;

{ TXMLSettlementDiscountAmountType_cbc }

  TXMLSettlementDiscountAmountType_cbc = class(TXMLNode, IXMLSettlementDiscountAmountType_cbc)
  protected
    { IXMLSettlementDiscountAmountType_cbc }
  end;

{ TXMLPenaltyAmountType_cbc }

  TXMLPenaltyAmountType_cbc = class(TXMLNode, IXMLPenaltyAmountType_cbc)
  protected
    { IXMLPenaltyAmountType_cbc }
  end;

{ TXMLPaymentTermsDetailsURIType_cbc }

  TXMLPaymentTermsDetailsURIType_cbc = class(TXMLNode, IXMLPaymentTermsDetailsURIType_cbc)
  protected
    { IXMLPaymentTermsDetailsURIType_cbc }
  end;

{ TXMLInstallmentDueDateType_cbc }

  TXMLInstallmentDueDateType_cbc = class(TXMLNode, IXMLInstallmentDueDateType_cbc)
  protected
    { IXMLInstallmentDueDateType_cbc }
  end;

{ TXMLInvoicingPartyReferenceType_cbc }

  TXMLInvoicingPartyReferenceType_cbc = class(TXMLNode, IXMLInvoicingPartyReferenceType_cbc)
  protected
    { IXMLInvoicingPartyReferenceType_cbc }
  end;

{ TXMLPriceExtensionType_cac }

  TXMLPriceExtensionType_cac = class(TXMLNode, IXMLPriceExtensionType_cac)
  private
    FTaxTotal: IXMLTaxTotalType_cacList;
  protected
    { IXMLPriceExtensionType_cac }
    function Get_Amount: IXMLAmountType_cbc;
    function Get_TaxTotal: IXMLTaxTotalType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPickupType_cac }

  TXMLPickupType_cac = class(TXMLNode, IXMLPickupType_cac)
  protected
    { IXMLPickupType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_ActualPickupDate: IXMLActualPickupDateType_cbc;
    function Get_ActualPickupTime: IXMLActualPickupTimeType_cbc;
    function Get_EarliestPickupDate: IXMLEarliestPickupDateType_cbc;
    function Get_EarliestPickupTime: IXMLEarliestPickupTimeType_cbc;
    function Get_LatestPickupDate: IXMLLatestPickupDateType_cbc;
    function Get_LatestPickupTime: IXMLLatestPickupTimeType_cbc;
    function Get_PickupLocation: IXMLLocationType_cac;
    function Get_PickupParty: IXMLPartyType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLActualPickupDateType_cbc }

  TXMLActualPickupDateType_cbc = class(TXMLNode, IXMLActualPickupDateType_cbc)
  protected
    { IXMLActualPickupDateType_cbc }
  end;

{ TXMLActualPickupTimeType_cbc }

  TXMLActualPickupTimeType_cbc = class(TXMLNode, IXMLActualPickupTimeType_cbc)
  protected
    { IXMLActualPickupTimeType_cbc }
  end;

{ TXMLEarliestPickupDateType_cbc }

  TXMLEarliestPickupDateType_cbc = class(TXMLNode, IXMLEarliestPickupDateType_cbc)
  protected
    { IXMLEarliestPickupDateType_cbc }
  end;

{ TXMLEarliestPickupTimeType_cbc }

  TXMLEarliestPickupTimeType_cbc = class(TXMLNode, IXMLEarliestPickupTimeType_cbc)
  protected
    { IXMLEarliestPickupTimeType_cbc }
  end;

{ TXMLLatestPickupDateType_cbc }

  TXMLLatestPickupDateType_cbc = class(TXMLNode, IXMLLatestPickupDateType_cbc)
  protected
    { IXMLLatestPickupDateType_cbc }
  end;

{ TXMLLatestPickupTimeType_cbc }

  TXMLLatestPickupTimeType_cbc = class(TXMLNode, IXMLLatestPickupTimeType_cbc)
  protected
    { IXMLLatestPickupTimeType_cbc }
  end;

{ TXMLReceiptLineType_cac }

  TXMLReceiptLineType_cac = class(TXMLNode, IXMLReceiptLineType_cac)
  private
    FNote: IXMLNoteType_cbcList;
    FRejectReason: IXMLRejectReasonType_cbcList;
    FDespatchLineReference: IXMLLineReferenceType_cacList;
    FDocumentReference: IXMLDocumentReferenceType_cacList;
    FItem: IXMLItemType_cacList;
    FShipment: IXMLShipmentType_cacList;
  protected
    { IXMLReceiptLineType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_UUID: IXMLUUIDType_cbc;
    function Get_Note: IXMLNoteType_cbcList;
    function Get_ReceivedQuantity: IXMLReceivedQuantityType_cbc;
    function Get_ShortQuantity: IXMLShortQuantityType_cbc;
    function Get_ShortageActionCode: IXMLShortageActionCodeType_cbc;
    function Get_RejectedQuantity: IXMLRejectedQuantityType_cbc;
    function Get_RejectReasonCode: IXMLRejectReasonCodeType_cbc;
    function Get_RejectReason: IXMLRejectReasonType_cbcList;
    function Get_RejectActionCode: IXMLRejectActionCodeType_cbc;
    function Get_QuantityDiscrepancyCode: IXMLQuantityDiscrepancyCodeType_cbc;
    function Get_OversupplyQuantity: IXMLOversupplyQuantityType_cbc;
    function Get_ReceivedDate: IXMLReceivedDateType_cbc;
    function Get_TimingComplaintCode: IXMLTimingComplaintCodeType_cbc;
    function Get_TimingComplaint: IXMLTimingComplaintType_cbc;
    function Get_OrderLineReference: IXMLOrderLineReferenceType_cac;
    function Get_DespatchLineReference: IXMLLineReferenceType_cacList;
    function Get_DocumentReference: IXMLDocumentReferenceType_cacList;
    function Get_Item: IXMLItemType_cacList;
    function Get_Shipment: IXMLShipmentType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLReceiptLineType_cacList }

  TXMLReceiptLineType_cacList = class(TXMLNodeCollection, IXMLReceiptLineType_cacList)
  protected
    { IXMLReceiptLineType_cacList }
    function Add: IXMLReceiptLineType_cac;
    function Insert(const Index: Integer): IXMLReceiptLineType_cac;

    function Get_Item(const Index: Integer): IXMLReceiptLineType_cac;
  end;

{ TXMLReceivedQuantityType_cbc }

  TXMLReceivedQuantityType_cbc = class(TXMLNode, IXMLReceivedQuantityType_cbc)
  protected
    { IXMLReceivedQuantityType_cbc }
  end;

{ TXMLShortQuantityType_cbc }

  TXMLShortQuantityType_cbc = class(TXMLNode, IXMLShortQuantityType_cbc)
  protected
    { IXMLShortQuantityType_cbc }
  end;

{ TXMLShortageActionCodeType_cbc }

  TXMLShortageActionCodeType_cbc = class(TXMLNode, IXMLShortageActionCodeType_cbc)
  protected
    { IXMLShortageActionCodeType_cbc }
  end;

{ TXMLRejectedQuantityType_cbc }

  TXMLRejectedQuantityType_cbc = class(TXMLNode, IXMLRejectedQuantityType_cbc)
  protected
    { IXMLRejectedQuantityType_cbc }
  end;

{ TXMLRejectReasonCodeType_cbc }

  TXMLRejectReasonCodeType_cbc = class(TXMLNode, IXMLRejectReasonCodeType_cbc)
  protected
    { IXMLRejectReasonCodeType_cbc }
  end;

{ TXMLRejectReasonType_cbc }

  TXMLRejectReasonType_cbc = class(TXMLNode, IXMLRejectReasonType_cbc)
  protected
    { IXMLRejectReasonType_cbc }
  end;

{ TXMLRejectReasonType_cbcList }

  TXMLRejectReasonType_cbcList = class(TXMLNodeCollection, IXMLRejectReasonType_cbcList)
  protected
    { IXMLRejectReasonType_cbcList }
    function Add: IXMLRejectReasonType_cbc;
    function Insert(const Index: Integer): IXMLRejectReasonType_cbc;

    function Get_Item(const Index: Integer): IXMLRejectReasonType_cbc;
  end;

{ TXMLRejectActionCodeType_cbc }

  TXMLRejectActionCodeType_cbc = class(TXMLNode, IXMLRejectActionCodeType_cbc)
  protected
    { IXMLRejectActionCodeType_cbc }
  end;

{ TXMLQuantityDiscrepancyCodeType_cbc }

  TXMLQuantityDiscrepancyCodeType_cbc = class(TXMLNode, IXMLQuantityDiscrepancyCodeType_cbc)
  protected
    { IXMLQuantityDiscrepancyCodeType_cbc }
  end;

{ TXMLReceivedDateType_cbc }

  TXMLReceivedDateType_cbc = class(TXMLNode, IXMLReceivedDateType_cbc)
  protected
    { IXMLReceivedDateType_cbc }
  end;

{ TXMLTimingComplaintCodeType_cbc }

  TXMLTimingComplaintCodeType_cbc = class(TXMLNode, IXMLTimingComplaintCodeType_cbc)
  protected
    { IXMLTimingComplaintCodeType_cbc }
  end;

{ TXMLTimingComplaintType_cbc }

  TXMLTimingComplaintType_cbc = class(TXMLNode, IXMLTimingComplaintType_cbc)
  protected
    { IXMLTimingComplaintType_cbc }
  end;

{ TXMLShipmentStageType_cac }

  TXMLShipmentStageType_cac = class(TXMLNode, IXMLShipmentStageType_cac)
  private
    FInstructions: IXMLInstructionsType_cbcList;
    FDemurrageInstructions: IXMLDemurrageInstructionsType_cbcList;
    FCarrierParty: IXMLPartyType_cacList;
    FFreightAllowanceCharge: IXMLAllowanceChargeType_cacList;
    FDetentionTransportEvent: IXMLTransportEventType_cacList;
    FRequestedWaypointTransportEvent: IXMLTransportEventType_cacList;
    FPlannedWaypointTransportEvent: IXMLTransportEventType_cacList;
    FTransportEvent: IXMLTransportEventType_cacList;
    FPassengerPerson: IXMLPersonType_cacList;
    FDriverPerson: IXMLPersonType_cacList;
    FCrewMemberPerson: IXMLPersonType_cacList;
  protected
    { IXMLShipmentStageType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_TransportModeCode: IXMLTransportModeCodeType_cbc;
    function Get_TransportMeansTypeCode: IXMLTransportMeansTypeCodeType_cbc;
    function Get_TransitDirectionCode: IXMLTransitDirectionCodeType_cbc;
    function Get_PreCarriageIndicator: IXMLPreCarriageIndicatorType_cbc;
    function Get_OnCarriageIndicator: IXMLOnCarriageIndicatorType_cbc;
    function Get_EstimatedDeliveryDate: IXMLEstimatedDeliveryDateType_cbc;
    function Get_EstimatedDeliveryTime: IXMLEstimatedDeliveryTimeType_cbc;
    function Get_RequiredDeliveryDate: IXMLRequiredDeliveryDateType_cbc;
    function Get_RequiredDeliveryTime: IXMLRequiredDeliveryTimeType_cbc;
    function Get_LoadingSequenceID: IXMLLoadingSequenceIDType_cbc;
    function Get_SuccessiveSequenceID: IXMLSuccessiveSequenceIDType_cbc;
    function Get_Instructions: IXMLInstructionsType_cbcList;
    function Get_DemurrageInstructions: IXMLDemurrageInstructionsType_cbcList;
    function Get_CrewQuantity: IXMLCrewQuantityType_cbc;
    function Get_PassengerQuantity: IXMLPassengerQuantityType_cbc;
    function Get_TransitPeriod: IXMLPeriodType_cac;
    function Get_CarrierParty: IXMLPartyType_cacList;
    function Get_TransportMeans: IXMLTransportMeansType_cac;
    function Get_LoadingPortLocation: IXMLLocationType_cac;
    function Get_UnloadingPortLocation: IXMLLocationType_cac;
    function Get_TransshipPortLocation: IXMLLocationType_cac;
    function Get_LoadingTransportEvent: IXMLTransportEventType_cac;
    function Get_ExaminationTransportEvent: IXMLTransportEventType_cac;
    function Get_AvailabilityTransportEvent: IXMLTransportEventType_cac;
    function Get_ExportationTransportEvent: IXMLTransportEventType_cac;
    function Get_DischargeTransportEvent: IXMLTransportEventType_cac;
    function Get_WarehousingTransportEvent: IXMLTransportEventType_cac;
    function Get_TakeoverTransportEvent: IXMLTransportEventType_cac;
    function Get_OptionalTakeoverTransportEvent: IXMLTransportEventType_cac;
    function Get_DropoffTransportEvent: IXMLTransportEventType_cac;
    function Get_ActualPickupTransportEvent: IXMLTransportEventType_cac;
    function Get_DeliveryTransportEvent: IXMLTransportEventType_cac;
    function Get_ReceiptTransportEvent: IXMLTransportEventType_cac;
    function Get_StorageTransportEvent: IXMLTransportEventType_cac;
    function Get_AcceptanceTransportEvent: IXMLTransportEventType_cac;
    function Get_TerminalOperatorParty: IXMLPartyType_cac;
    function Get_CustomsAgentParty: IXMLPartyType_cac;
    function Get_EstimatedTransitPeriod: IXMLPeriodType_cac;
    function Get_FreightAllowanceCharge: IXMLAllowanceChargeType_cacList;
    function Get_FreightChargeLocation: IXMLLocationType_cac;
    function Get_DetentionTransportEvent: IXMLTransportEventType_cacList;
    function Get_RequestedDepartureTransportEvent: IXMLTransportEventType_cac;
    function Get_RequestedArrivalTransportEvent: IXMLTransportEventType_cac;
    function Get_RequestedWaypointTransportEvent: IXMLTransportEventType_cacList;
    function Get_PlannedDepartureTransportEvent: IXMLTransportEventType_cac;
    function Get_PlannedArrivalTransportEvent: IXMLTransportEventType_cac;
    function Get_PlannedWaypointTransportEvent: IXMLTransportEventType_cacList;
    function Get_ActualDepartureTransportEvent: IXMLTransportEventType_cac;
    function Get_ActualWaypointTransportEvent: IXMLTransportEventType_cac;
    function Get_ActualArrivalTransportEvent: IXMLTransportEventType_cac;
    function Get_TransportEvent: IXMLTransportEventType_cacList;
    function Get_EstimatedDepartureTransportEvent: IXMLTransportEventType_cac;
    function Get_EstimatedArrivalTransportEvent: IXMLTransportEventType_cac;
    function Get_PassengerPerson: IXMLPersonType_cacList;
    function Get_DriverPerson: IXMLPersonType_cacList;
    function Get_ReportingPerson: IXMLPersonType_cac;
    function Get_CrewMemberPerson: IXMLPersonType_cacList;
    function Get_SecurityOfficerPerson: IXMLPersonType_cac;
    function Get_MasterPerson: IXMLPersonType_cac;
    function Get_ShipsSurgeonPerson: IXMLPersonType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLShipmentStageType_cacList }

  TXMLShipmentStageType_cacList = class(TXMLNodeCollection, IXMLShipmentStageType_cacList)
  protected
    { IXMLShipmentStageType_cacList }
    function Add: IXMLShipmentStageType_cac;
    function Insert(const Index: Integer): IXMLShipmentStageType_cac;

    function Get_Item(const Index: Integer): IXMLShipmentStageType_cac;
  end;

{ TXMLTransportModeCodeType_cbc }

  TXMLTransportModeCodeType_cbc = class(TXMLNode, IXMLTransportModeCodeType_cbc)
  protected
    { IXMLTransportModeCodeType_cbc }
  end;

{ TXMLTransitDirectionCodeType_cbc }

  TXMLTransitDirectionCodeType_cbc = class(TXMLNode, IXMLTransitDirectionCodeType_cbc)
  protected
    { IXMLTransitDirectionCodeType_cbc }
  end;

{ TXMLPreCarriageIndicatorType_cbc }

  TXMLPreCarriageIndicatorType_cbc = class(TXMLNode, IXMLPreCarriageIndicatorType_cbc)
  protected
    { IXMLPreCarriageIndicatorType_cbc }
  end;

{ TXMLOnCarriageIndicatorType_cbc }

  TXMLOnCarriageIndicatorType_cbc = class(TXMLNode, IXMLOnCarriageIndicatorType_cbc)
  protected
    { IXMLOnCarriageIndicatorType_cbc }
  end;

{ TXMLEstimatedDeliveryDateType_cbc }

  TXMLEstimatedDeliveryDateType_cbc = class(TXMLNode, IXMLEstimatedDeliveryDateType_cbc)
  protected
    { IXMLEstimatedDeliveryDateType_cbc }
  end;

{ TXMLEstimatedDeliveryTimeType_cbc }

  TXMLEstimatedDeliveryTimeType_cbc = class(TXMLNode, IXMLEstimatedDeliveryTimeType_cbc)
  protected
    { IXMLEstimatedDeliveryTimeType_cbc }
  end;

{ TXMLRequiredDeliveryDateType_cbc }

  TXMLRequiredDeliveryDateType_cbc = class(TXMLNode, IXMLRequiredDeliveryDateType_cbc)
  protected
    { IXMLRequiredDeliveryDateType_cbc }
  end;

{ TXMLRequiredDeliveryTimeType_cbc }

  TXMLRequiredDeliveryTimeType_cbc = class(TXMLNode, IXMLRequiredDeliveryTimeType_cbc)
  protected
    { IXMLRequiredDeliveryTimeType_cbc }
  end;

{ TXMLSuccessiveSequenceIDType_cbc }

  TXMLSuccessiveSequenceIDType_cbc = class(TXMLNode, IXMLSuccessiveSequenceIDType_cbc)
  protected
    { IXMLSuccessiveSequenceIDType_cbc }
  end;

{ TXMLDemurrageInstructionsType_cbc }

  TXMLDemurrageInstructionsType_cbc = class(TXMLNode, IXMLDemurrageInstructionsType_cbc)
  protected
    { IXMLDemurrageInstructionsType_cbc }
  end;

{ TXMLDemurrageInstructionsType_cbcList }

  TXMLDemurrageInstructionsType_cbcList = class(TXMLNodeCollection, IXMLDemurrageInstructionsType_cbcList)
  protected
    { IXMLDemurrageInstructionsType_cbcList }
    function Add: IXMLDemurrageInstructionsType_cbc;
    function Insert(const Index: Integer): IXMLDemurrageInstructionsType_cbc;

    function Get_Item(const Index: Integer): IXMLDemurrageInstructionsType_cbc;
  end;

{ TXMLCrewQuantityType_cbc }

  TXMLCrewQuantityType_cbc = class(TXMLNode, IXMLCrewQuantityType_cbc)
  protected
    { IXMLCrewQuantityType_cbc }
  end;

{ TXMLPassengerQuantityType_cbc }

  TXMLPassengerQuantityType_cbc = class(TXMLNode, IXMLPassengerQuantityType_cbc)
  protected
    { IXMLPassengerQuantityType_cbc }
  end;

{ TXMLEnvironmentalEmissionType_cac }

  TXMLEnvironmentalEmissionType_cac = class(TXMLNode, IXMLEnvironmentalEmissionType_cac)
  private
    FDescription: IXMLDescriptionType_cbcList;
    FEmissionCalculationMethod: IXMLEmissionCalculationMethodType_cacList;
  protected
    { IXMLEnvironmentalEmissionType_cac }
    function Get_EnvironmentalEmissionTypeCode: IXMLEnvironmentalEmissionTypeCodeType_cbc;
    function Get_ValueMeasure: IXMLValueMeasureType_cbc;
    function Get_Description: IXMLDescriptionType_cbcList;
    function Get_EmissionCalculationMethod: IXMLEmissionCalculationMethodType_cacList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLEnvironmentalEmissionType_cacList }

  TXMLEnvironmentalEmissionType_cacList = class(TXMLNodeCollection, IXMLEnvironmentalEmissionType_cacList)
  protected
    { IXMLEnvironmentalEmissionType_cacList }
    function Add: IXMLEnvironmentalEmissionType_cac;
    function Insert(const Index: Integer): IXMLEnvironmentalEmissionType_cac;

    function Get_Item(const Index: Integer): IXMLEnvironmentalEmissionType_cac;
  end;

{ TXMLEnvironmentalEmissionTypeCodeType_cbc }

  TXMLEnvironmentalEmissionTypeCodeType_cbc = class(TXMLNode, IXMLEnvironmentalEmissionTypeCodeType_cbc)
  protected
    { IXMLEnvironmentalEmissionTypeCodeType_cbc }
  end;

{ TXMLValueMeasureType_cbc }

  TXMLValueMeasureType_cbc = class(TXMLNode, IXMLValueMeasureType_cbc)
  protected
    { IXMLValueMeasureType_cbc }
  end;

{ TXMLEmissionCalculationMethodType_cac }

  TXMLEmissionCalculationMethodType_cac = class(TXMLNode, IXMLEmissionCalculationMethodType_cac)
  protected
    { IXMLEmissionCalculationMethodType_cac }
    function Get_CalculationMethodCode: IXMLCalculationMethodCodeType_cbc;
    function Get_FullnessIndicationCode: IXMLFullnessIndicationCodeType_cbc;
    function Get_MeasurementFromLocation: IXMLLocationType_cac;
    function Get_MeasurementToLocation: IXMLLocationType_cac;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLEmissionCalculationMethodType_cacList }

  TXMLEmissionCalculationMethodType_cacList = class(TXMLNodeCollection, IXMLEmissionCalculationMethodType_cacList)
  protected
    { IXMLEmissionCalculationMethodType_cacList }
    function Add: IXMLEmissionCalculationMethodType_cac;
    function Insert(const Index: Integer): IXMLEmissionCalculationMethodType_cac;

    function Get_Item(const Index: Integer): IXMLEmissionCalculationMethodType_cac;
  end;

{ TXMLCalculationMethodCodeType_cbc }

  TXMLCalculationMethodCodeType_cbc = class(TXMLNode, IXMLCalculationMethodCodeType_cbc)
  protected
    { IXMLCalculationMethodCodeType_cbc }
  end;

{ TXMLServiceFrequencyType_cac }

  TXMLServiceFrequencyType_cac = class(TXMLNode, IXMLServiceFrequencyType_cac)
  protected
    { IXMLServiceFrequencyType_cac }
    function Get_WeekDayCode: IXMLWeekDayCodeType_cbc;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLServiceFrequencyType_cacList }

  TXMLServiceFrequencyType_cacList = class(TXMLNodeCollection, IXMLServiceFrequencyType_cacList)
  protected
    { IXMLServiceFrequencyType_cacList }
    function Add: IXMLServiceFrequencyType_cac;
    function Insert(const Index: Integer): IXMLServiceFrequencyType_cac;

    function Get_Item(const Index: Integer): IXMLServiceFrequencyType_cac;
  end;

{ TXMLWeekDayCodeType_cbc }

  TXMLWeekDayCodeType_cbc = class(TXMLNode, IXMLWeekDayCodeType_cbc)
  protected
    { IXMLWeekDayCodeType_cbc }
  end;

{ TXMLPaymentType_cac }

  TXMLPaymentType_cac = class(TXMLNode, IXMLPaymentType_cac)
  protected
    { IXMLPaymentType_cac }
    function Get_ID: IXMLIDType_cbc;
    function Get_PaidAmount: IXMLPaidAmountType_cbc;
    function Get_ReceivedDate: IXMLReceivedDateType_cbc;
    function Get_PaidDate: IXMLPaidDateType_cbc;
    function Get_PaidTime: IXMLPaidTimeType_cbc;
    function Get_InstructionID: IXMLInstructionIDType_cbc;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPaymentType_cacList }

  TXMLPaymentType_cacList = class(TXMLNodeCollection, IXMLPaymentType_cacList)
  protected
    { IXMLPaymentType_cacList }
    function Add: IXMLPaymentType_cac;
    function Insert(const Index: Integer): IXMLPaymentType_cac;

    function Get_Item(const Index: Integer): IXMLPaymentType_cac;
  end;

{ TXMLPaidAmountType_cbc }

  TXMLPaidAmountType_cbc = class(TXMLNode, IXMLPaidAmountType_cbc)
  protected
    { IXMLPaidAmountType_cbc }
  end;

{ TXMLPaidDateType_cbc }

  TXMLPaidDateType_cbc = class(TXMLNode, IXMLPaidDateType_cbc)
  protected
    { IXMLPaidDateType_cbc }
  end;

{ TXMLPaidTimeType_cbc }

  TXMLPaidTimeType_cbc = class(TXMLNode, IXMLPaidTimeType_cbc)
  protected
    { IXMLPaidTimeType_cbc }
  end;

{ TXMLMonetaryTotalType_cac }

  TXMLMonetaryTotalType_cac = class(TXMLNode, IXMLMonetaryTotalType_cac)
  protected
    { IXMLMonetaryTotalType_cac }
    function Get_LineExtensionAmount: IXMLLineExtensionAmountType_cbc;
    function Get_TaxExclusiveAmount: IXMLTaxExclusiveAmountType_cbc;
    function Get_TaxInclusiveAmount: IXMLTaxInclusiveAmountType_cbc;
    function Get_AllowanceTotalAmount: IXMLAllowanceTotalAmountType_cbc;
    function Get_ChargeTotalAmount: IXMLChargeTotalAmountType_cbc;
    function Get_PrepaidAmount: IXMLPrepaidAmountType_cbc;
    function Get_PayableRoundingAmount: IXMLPayableRoundingAmountType_cbc;
    function Get_PayableAmount: IXMLPayableAmountType_cbc;
    function Get_PayableAlternativeAmount: IXMLPayableAlternativeAmountType_cbc;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTaxExclusiveAmountType_cbc }

  TXMLTaxExclusiveAmountType_cbc = class(TXMLNode, IXMLTaxExclusiveAmountType_cbc)
  protected
    { IXMLTaxExclusiveAmountType_cbc }
  end;

{ TXMLTaxInclusiveAmountType_cbc }

  TXMLTaxInclusiveAmountType_cbc = class(TXMLNode, IXMLTaxInclusiveAmountType_cbc)
  protected
    { IXMLTaxInclusiveAmountType_cbc }
  end;

{ TXMLAllowanceTotalAmountType_cbc }

  TXMLAllowanceTotalAmountType_cbc = class(TXMLNode, IXMLAllowanceTotalAmountType_cbc)
  protected
    { IXMLAllowanceTotalAmountType_cbc }
  end;

{ TXMLChargeTotalAmountType_cbc }

  TXMLChargeTotalAmountType_cbc = class(TXMLNode, IXMLChargeTotalAmountType_cbc)
  protected
    { IXMLChargeTotalAmountType_cbc }
  end;

{ TXMLPrepaidAmountType_cbc }

  TXMLPrepaidAmountType_cbc = class(TXMLNode, IXMLPrepaidAmountType_cbc)
  protected
    { IXMLPrepaidAmountType_cbc }
  end;

{ TXMLPayableRoundingAmountType_cbc }

  TXMLPayableRoundingAmountType_cbc = class(TXMLNode, IXMLPayableRoundingAmountType_cbc)
  protected
    { IXMLPayableRoundingAmountType_cbc }
  end;

{ TXMLPayableAmountType_cbc }

  TXMLPayableAmountType_cbc = class(TXMLNode, IXMLPayableAmountType_cbc)
  protected
    { IXMLPayableAmountType_cbc }
  end;

{ TXMLPayableAlternativeAmountType_cbc }

  TXMLPayableAlternativeAmountType_cbc = class(TXMLNode, IXMLPayableAlternativeAmountType_cbc)
  protected
    { IXMLPayableAlternativeAmountType_cbc }
  end;

{ Global Functions }

function GetInvoice(Doc: IXMLDocument): IXMLInvoiceType;
function LoadInvoice(const FileName: string): IXMLInvoiceType;
function NewInvoice: IXMLInvoiceType;

const
  TargetNamespace = 'urn:oasis:names:specification:ubl:schema:xsd:Invoice-2';

implementation

uses System.Variants, System.SysUtils, Xml.xmlutil;

{ Global Functions }

function GetInvoice(Doc: IXMLDocument): IXMLInvoiceType;
begin
  Result := Doc.GetDocBinding('Invoice', TXMLInvoiceType, TargetNamespace) as IXMLInvoiceType;
end;

function LoadInvoice(const FileName: string): IXMLInvoiceType;
begin
  Result := LoadXMLDocument(FileName).GetDocBinding('Invoice', TXMLInvoiceType, TargetNamespace) as IXMLInvoiceType;
end;

function NewInvoice: IXMLInvoiceType;
begin
  Result := NewXMLDocument.GetDocBinding('Invoice', TXMLInvoiceType, TargetNamespace) as IXMLInvoiceType;
end;

{ TXMLInvoiceType }

procedure TXMLInvoiceType.AfterConstruction;
begin
  RegisterChildNode('UBLExtensions', TXMLUBLExtensionsType_ext);
  RegisterChildNode('UBLVersionID', TXMLUBLVersionIDType_cbc);
  RegisterChildNode('CustomizationID', TXMLCustomizationIDType_cbc);
  RegisterChildNode('ProfileID', TXMLProfileIDType_cbc);
  RegisterChildNode('ProfileExecutionID', TXMLProfileExecutionIDType_cbc);
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('CopyIndicator', TXMLCopyIndicatorType_cbc);
  RegisterChildNode('UUID', TXMLUUIDType_cbc);
  RegisterChildNode('IssueDate', TXMLIssueDateType_cbc);
  RegisterChildNode('IssueTime', TXMLIssueTimeType_cbc);
  RegisterChildNode('DueDate', TXMLDueDateType_cbc);
  RegisterChildNode('InvoiceTypeCode', TXMLInvoiceTypeCodeType_cbc);
  RegisterChildNode('Note', TXMLNoteType_cbc);
  RegisterChildNode('TaxPointDate', TXMLTaxPointDateType_cbc);
  RegisterChildNode('DocumentCurrencyCode', TXMLDocumentCurrencyCodeType_cbc);
  RegisterChildNode('TaxCurrencyCode', TXMLTaxCurrencyCodeType_cbc);
  RegisterChildNode('PricingCurrencyCode', TXMLPricingCurrencyCodeType_cbc);
  RegisterChildNode('PaymentCurrencyCode', TXMLPaymentCurrencyCodeType_cbc);
  RegisterChildNode('PaymentAlternativeCurrencyCode', TXMLPaymentAlternativeCurrencyCodeType_cbc);
  RegisterChildNode('AccountingCostCode', TXMLAccountingCostCodeType_cbc);
  RegisterChildNode('AccountingCost', TXMLAccountingCostType_cbc);
  RegisterChildNode('LineCountNumeric', TXMLLineCountNumericType_cbc);
  RegisterChildNode('BuyerReference', TXMLBuyerReferenceType_cbc);
  RegisterChildNode('InvoicePeriod', TXMLPeriodType_cac);
  RegisterChildNode('OrderReference', TXMLOrderReferenceType_cac);
  RegisterChildNode('BillingReference', TXMLBillingReferenceType_cac);
  RegisterChildNode('DespatchDocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('ReceiptDocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('StatementDocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('OriginatorDocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('ContractDocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('AdditionalDocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('ProjectReference', TXMLProjectReferenceType_cac);
  RegisterChildNode('Signature', TXMLSignatureType_cac);
  RegisterChildNode('AccountingSupplierParty', TXMLSupplierPartyType_cac);
  RegisterChildNode('AccountingCustomerParty', TXMLCustomerPartyType_cac);
  RegisterChildNode('PayeeParty', TXMLPartyType_cac);
  RegisterChildNode('BuyerCustomerParty', TXMLCustomerPartyType_cac);
  RegisterChildNode('SellerSupplierParty', TXMLSupplierPartyType_cac);
  RegisterChildNode('TaxRepresentativeParty', TXMLPartyType_cac);
  RegisterChildNode('Delivery', TXMLDeliveryType_cac);
  RegisterChildNode('DeliveryTerms', TXMLDeliveryTermsType_cac);
  RegisterChildNode('PaymentMeans', TXMLPaymentMeansType_cac);
  RegisterChildNode('PaymentTerms', TXMLPaymentTermsType_cac);
  RegisterChildNode('PrepaidPayment', TXMLPaymentType_cac);
  RegisterChildNode('AllowanceCharge', TXMLAllowanceChargeType_cac);
  RegisterChildNode('TaxExchangeRate', TXMLExchangeRateType_cac);
  RegisterChildNode('PricingExchangeRate', TXMLExchangeRateType_cac);
  RegisterChildNode('PaymentExchangeRate', TXMLExchangeRateType_cac);
  RegisterChildNode('PaymentAlternativeExchangeRate', TXMLExchangeRateType_cac);
  RegisterChildNode('TaxTotal', TXMLTaxTotalType_cac);
  RegisterChildNode('WithholdingTaxTotal', TXMLTaxTotalType_cac);
  RegisterChildNode('LegalMonetaryTotal', TXMLMonetaryTotalType_cac);
  RegisterChildNode('InvoiceLine', TXMLInvoiceLineType_cac);
  FNote := CreateCollection(TXMLNoteType_cbcList, IXMLNoteType_cbc, 'Note') as IXMLNoteType_cbcList;
  FInvoicePeriod := CreateCollection(TXMLPeriodType_cacList, IXMLPeriodType_cac, 'InvoicePeriod') as IXMLPeriodType_cacList;
  FBillingReference := CreateCollection(TXMLBillingReferenceType_cacList, IXMLBillingReferenceType_cac, 'BillingReference') as IXMLBillingReferenceType_cacList;
  FDespatchDocumentReference := CreateCollection(TXMLDocumentReferenceType_cacList, IXMLDocumentReferenceType_cac, 'DespatchDocumentReference') as IXMLDocumentReferenceType_cacList;
  FReceiptDocumentReference := CreateCollection(TXMLDocumentReferenceType_cacList, IXMLDocumentReferenceType_cac, 'ReceiptDocumentReference') as IXMLDocumentReferenceType_cacList;
  FStatementDocumentReference := CreateCollection(TXMLDocumentReferenceType_cacList, IXMLDocumentReferenceType_cac, 'StatementDocumentReference') as IXMLDocumentReferenceType_cacList;
  FOriginatorDocumentReference := CreateCollection(TXMLDocumentReferenceType_cacList, IXMLDocumentReferenceType_cac, 'OriginatorDocumentReference') as IXMLDocumentReferenceType_cacList;
  FContractDocumentReference := CreateCollection(TXMLDocumentReferenceType_cacList, IXMLDocumentReferenceType_cac, 'ContractDocumentReference') as IXMLDocumentReferenceType_cacList;
  FAdditionalDocumentReference := CreateCollection(TXMLDocumentReferenceType_cacList, IXMLDocumentReferenceType_cac, 'AdditionalDocumentReference') as IXMLDocumentReferenceType_cacList;
  FProjectReference := CreateCollection(TXMLProjectReferenceType_cacList, IXMLProjectReferenceType_cac, 'ProjectReference') as IXMLProjectReferenceType_cacList;
  FSignature := CreateCollection(TXMLSignatureType_cacList, IXMLSignatureType_cac, 'Signature') as IXMLSignatureType_cacList;
  FDelivery := CreateCollection(TXMLDeliveryType_cacList, IXMLDeliveryType_cac, 'Delivery') as IXMLDeliveryType_cacList;
  FPaymentMeans := CreateCollection(TXMLPaymentMeansType_cacList, IXMLPaymentMeansType_cac, 'PaymentMeans') as IXMLPaymentMeansType_cacList;
  FPaymentTerms := CreateCollection(TXMLPaymentTermsType_cacList, IXMLPaymentTermsType_cac, 'PaymentTerms') as IXMLPaymentTermsType_cacList;
  FPrepaidPayment := CreateCollection(TXMLPaymentType_cacList, IXMLPaymentType_cac, 'PrepaidPayment') as IXMLPaymentType_cacList;
  FAllowanceCharge := CreateCollection(TXMLAllowanceChargeType_cacList, IXMLAllowanceChargeType_cac, 'AllowanceCharge') as IXMLAllowanceChargeType_cacList;
  FTaxTotal := CreateCollection(TXMLTaxTotalType_cacList, IXMLTaxTotalType_cac, 'TaxTotal') as IXMLTaxTotalType_cacList;
  FWithholdingTaxTotal := CreateCollection(TXMLTaxTotalType_cacList, IXMLTaxTotalType_cac, 'WithholdingTaxTotal') as IXMLTaxTotalType_cacList;
  FInvoiceLine := CreateCollection(TXMLInvoiceLineType_cacList, IXMLInvoiceLineType_cac, 'InvoiceLine') as IXMLInvoiceLineType_cacList;
  inherited;
end;

function TXMLInvoiceType.Get_UBLExtensions: IXMLUBLExtensionsType_ext;
begin
  Result := ChildNodes['UBLExtensions'] as IXMLUBLExtensionsType_ext;
end;

function TXMLInvoiceType.Get_UBLVersionID: IXMLUBLVersionIDType_cbc;
begin
  Result := ChildNodes['UBLVersionID'] as IXMLUBLVersionIDType_cbc;
end;

function TXMLInvoiceType.Get_CustomizationID: IXMLCustomizationIDType_cbc;
begin
  Result := ChildNodes['CustomizationID'] as IXMLCustomizationIDType_cbc;
end;

function TXMLInvoiceType.Get_ProfileID: IXMLProfileIDType_cbc;
begin
  Result := ChildNodes['ProfileID'] as IXMLProfileIDType_cbc;
end;

function TXMLInvoiceType.Get_ProfileExecutionID: IXMLProfileExecutionIDType_cbc;
begin
  Result := ChildNodes['ProfileExecutionID'] as IXMLProfileExecutionIDType_cbc;
end;

function TXMLInvoiceType.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLInvoiceType.Get_CopyIndicator: IXMLCopyIndicatorType_cbc;
begin
  Result := ChildNodes['CopyIndicator'] as IXMLCopyIndicatorType_cbc;
end;

function TXMLInvoiceType.Get_UUID: IXMLUUIDType_cbc;
begin
  Result := ChildNodes['UUID'] as IXMLUUIDType_cbc;
end;

function TXMLInvoiceType.Get_IssueDate: IXMLIssueDateType_cbc;
begin
  Result := ChildNodes['IssueDate'] as IXMLIssueDateType_cbc;
end;

function TXMLInvoiceType.Get_IssueTime: IXMLIssueTimeType_cbc;
begin
  Result := ChildNodes['IssueTime'] as IXMLIssueTimeType_cbc;
end;

function TXMLInvoiceType.Get_DueDate: IXMLDueDateType_cbc;
begin
  Result := ChildNodes['DueDate'] as IXMLDueDateType_cbc;
end;

function TXMLInvoiceType.Get_InvoiceTypeCode: IXMLInvoiceTypeCodeType_cbc;
begin
  Result := ChildNodes['InvoiceTypeCode'] as IXMLInvoiceTypeCodeType_cbc;
end;

function TXMLInvoiceType.Get_Note: IXMLNoteType_cbcList;
begin
  Result := FNote;
end;

function TXMLInvoiceType.Get_TaxPointDate: IXMLTaxPointDateType_cbc;
begin
  Result := ChildNodes['TaxPointDate'] as IXMLTaxPointDateType_cbc;
end;

function TXMLInvoiceType.Get_DocumentCurrencyCode: IXMLDocumentCurrencyCodeType_cbc;
begin
  Result := ChildNodes['DocumentCurrencyCode'] as IXMLDocumentCurrencyCodeType_cbc;
end;

function TXMLInvoiceType.Get_TaxCurrencyCode: IXMLTaxCurrencyCodeType_cbc;
begin
  Result := ChildNodes['TaxCurrencyCode'] as IXMLTaxCurrencyCodeType_cbc;
end;

function TXMLInvoiceType.Get_PricingCurrencyCode: IXMLPricingCurrencyCodeType_cbc;
begin
  Result := ChildNodes['PricingCurrencyCode'] as IXMLPricingCurrencyCodeType_cbc;
end;

function TXMLInvoiceType.Get_PaymentCurrencyCode: IXMLPaymentCurrencyCodeType_cbc;
begin
  Result := ChildNodes['PaymentCurrencyCode'] as IXMLPaymentCurrencyCodeType_cbc;
end;

function TXMLInvoiceType.Get_PaymentAlternativeCurrencyCode: IXMLPaymentAlternativeCurrencyCodeType_cbc;
begin
  Result := ChildNodes['PaymentAlternativeCurrencyCode'] as IXMLPaymentAlternativeCurrencyCodeType_cbc;
end;

function TXMLInvoiceType.Get_AccountingCostCode: IXMLAccountingCostCodeType_cbc;
begin
  Result := ChildNodes['AccountingCostCode'] as IXMLAccountingCostCodeType_cbc;
end;

function TXMLInvoiceType.Get_AccountingCost: IXMLAccountingCostType_cbc;
begin
  Result := ChildNodes['AccountingCost'] as IXMLAccountingCostType_cbc;
end;

function TXMLInvoiceType.Get_LineCountNumeric: IXMLLineCountNumericType_cbc;
begin
  Result := ChildNodes['LineCountNumeric'] as IXMLLineCountNumericType_cbc;
end;

function TXMLInvoiceType.Get_BuyerReference: IXMLBuyerReferenceType_cbc;
begin
  Result := ChildNodes['BuyerReference'] as IXMLBuyerReferenceType_cbc;
end;

function TXMLInvoiceType.Get_InvoicePeriod: IXMLPeriodType_cacList;
begin
  Result := FInvoicePeriod;
end;

function TXMLInvoiceType.Get_OrderReference: IXMLOrderReferenceType_cac;
begin
  Result := ChildNodes['OrderReference'] as IXMLOrderReferenceType_cac;
end;

function TXMLInvoiceType.Get_BillingReference: IXMLBillingReferenceType_cacList;
begin
  Result := FBillingReference;
end;

function TXMLInvoiceType.Get_DespatchDocumentReference: IXMLDocumentReferenceType_cacList;
begin
  Result := FDespatchDocumentReference;
end;

function TXMLInvoiceType.Get_ReceiptDocumentReference: IXMLDocumentReferenceType_cacList;
begin
  Result := FReceiptDocumentReference;
end;

function TXMLInvoiceType.Get_StatementDocumentReference: IXMLDocumentReferenceType_cacList;
begin
  Result := FStatementDocumentReference;
end;

function TXMLInvoiceType.Get_OriginatorDocumentReference: IXMLDocumentReferenceType_cacList;
begin
  Result := FOriginatorDocumentReference;
end;

function TXMLInvoiceType.Get_ContractDocumentReference: IXMLDocumentReferenceType_cacList;
begin
  Result := FContractDocumentReference;
end;

function TXMLInvoiceType.Get_AdditionalDocumentReference: IXMLDocumentReferenceType_cacList;
begin
  Result := FAdditionalDocumentReference;
end;

function TXMLInvoiceType.Get_ProjectReference: IXMLProjectReferenceType_cacList;
begin
  Result := FProjectReference;
end;

function TXMLInvoiceType.Get_Signature: IXMLSignatureType_cacList;
begin
  Result := FSignature;
end;

function TXMLInvoiceType.Get_AccountingSupplierParty: IXMLSupplierPartyType_cac;
begin
  Result := ChildNodes['AccountingSupplierParty'] as IXMLSupplierPartyType_cac;
end;

function TXMLInvoiceType.Get_AccountingCustomerParty: IXMLCustomerPartyType_cac;
begin
  Result := ChildNodes['AccountingCustomerParty'] as IXMLCustomerPartyType_cac;
end;

function TXMLInvoiceType.Get_PayeeParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['PayeeParty'] as IXMLPartyType_cac;
end;

function TXMLInvoiceType.Get_BuyerCustomerParty: IXMLCustomerPartyType_cac;
begin
  Result := ChildNodes['BuyerCustomerParty'] as IXMLCustomerPartyType_cac;
end;

function TXMLInvoiceType.Get_SellerSupplierParty: IXMLSupplierPartyType_cac;
begin
  Result := ChildNodes['SellerSupplierParty'] as IXMLSupplierPartyType_cac;
end;

function TXMLInvoiceType.Get_TaxRepresentativeParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['TaxRepresentativeParty'] as IXMLPartyType_cac;
end;

function TXMLInvoiceType.Get_Delivery: IXMLDeliveryType_cacList;
begin
  Result := FDelivery;
end;

function TXMLInvoiceType.Get_DeliveryTerms: IXMLDeliveryTermsType_cac;
begin
  Result := ChildNodes['DeliveryTerms'] as IXMLDeliveryTermsType_cac;
end;

function TXMLInvoiceType.Get_PaymentMeans: IXMLPaymentMeansType_cacList;
begin
  Result := FPaymentMeans;
end;

function TXMLInvoiceType.Get_PaymentTerms: IXMLPaymentTermsType_cacList;
begin
  Result := FPaymentTerms;
end;

function TXMLInvoiceType.Get_PrepaidPayment: IXMLPaymentType_cacList;
begin
  Result := FPrepaidPayment;
end;

function TXMLInvoiceType.Get_AllowanceCharge: IXMLAllowanceChargeType_cacList;
begin
  Result := FAllowanceCharge;
end;

function TXMLInvoiceType.Get_TaxExchangeRate: IXMLExchangeRateType_cac;
begin
  Result := ChildNodes['TaxExchangeRate'] as IXMLExchangeRateType_cac;
end;

function TXMLInvoiceType.Get_PricingExchangeRate: IXMLExchangeRateType_cac;
begin
  Result := ChildNodes['PricingExchangeRate'] as IXMLExchangeRateType_cac;
end;

function TXMLInvoiceType.Get_PaymentExchangeRate: IXMLExchangeRateType_cac;
begin
  Result := ChildNodes['PaymentExchangeRate'] as IXMLExchangeRateType_cac;
end;

function TXMLInvoiceType.Get_PaymentAlternativeExchangeRate: IXMLExchangeRateType_cac;
begin
  Result := ChildNodes['PaymentAlternativeExchangeRate'] as IXMLExchangeRateType_cac;
end;

function TXMLInvoiceType.Get_TaxTotal: IXMLTaxTotalType_cacList;
begin
  Result := FTaxTotal;
end;

function TXMLInvoiceType.Get_WithholdingTaxTotal: IXMLTaxTotalType_cacList;
begin
  Result := FWithholdingTaxTotal;
end;

function TXMLInvoiceType.Get_LegalMonetaryTotal: IXMLMonetaryTotalType_cac;
begin
  Result := ChildNodes['LegalMonetaryTotal'] as IXMLMonetaryTotalType_cac;
end;

function TXMLInvoiceType.Get_InvoiceLine: IXMLInvoiceLineType_cacList;
begin
  Result := FInvoiceLine;
end;

{ TXMLUBLExtensionsType_ext }

procedure TXMLUBLExtensionsType_ext.AfterConstruction;
begin
  RegisterChildNode('UBLExtension', TXMLUBLExtensionType_ext);
  ItemTag := 'UBLExtension';
  ItemInterface := IXMLUBLExtensionType_ext;
  inherited;
end;

function TXMLUBLExtensionsType_ext.Get_UBLExtension(const Index: Integer): IXMLUBLExtensionType_ext;
begin
  Result := List[Index] as IXMLUBLExtensionType_ext;
end;

function TXMLUBLExtensionsType_ext.Add: IXMLUBLExtensionType_ext;
begin
  Result := AddItem(-1) as IXMLUBLExtensionType_ext;
end;

function TXMLUBLExtensionsType_ext.Insert(const Index: Integer): IXMLUBLExtensionType_ext;
begin
  Result := AddItem(Index) as IXMLUBLExtensionType_ext;
end;

{ TXMLUBLExtensionType_ext }

procedure TXMLUBLExtensionType_ext.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('Name', TXMLNameType_cbc);
  RegisterChildNode('ExtensionAgencyID', TXMLExtensionAgencyIDType_ext);
  RegisterChildNode('ExtensionAgencyName', TXMLExtensionAgencyNameType_ext);
  RegisterChildNode('ExtensionVersionID', TXMLExtensionVersionIDType_ext);
  RegisterChildNode('ExtensionAgencyURI', TXMLExtensionAgencyURIType_ext);
  RegisterChildNode('ExtensionURI', TXMLExtensionURIType_ext);
  RegisterChildNode('ExtensionReasonCode', TXMLExtensionReasonCodeType_ext);
  RegisterChildNode('ExtensionReason', TXMLExtensionReasonType_ext);
  RegisterChildNode('ExtensionContent', TXMLExtensionContentType);
  inherited;
end;

function TXMLUBLExtensionType_ext.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLUBLExtensionType_ext.Get_Name: IXMLNameType_cbc;
begin
  Result := ChildNodes['Name'] as IXMLNameType_cbc;
end;

function TXMLUBLExtensionType_ext.Get_ExtensionAgencyID: IXMLExtensionAgencyIDType_ext;
begin
  Result := ChildNodes['ExtensionAgencyID'] as IXMLExtensionAgencyIDType_ext;
end;

function TXMLUBLExtensionType_ext.Get_ExtensionAgencyName: IXMLExtensionAgencyNameType_ext;
begin
  Result := ChildNodes['ExtensionAgencyName'] as IXMLExtensionAgencyNameType_ext;
end;

function TXMLUBLExtensionType_ext.Get_ExtensionVersionID: IXMLExtensionVersionIDType_ext;
begin
  Result := ChildNodes['ExtensionVersionID'] as IXMLExtensionVersionIDType_ext;
end;

function TXMLUBLExtensionType_ext.Get_ExtensionAgencyURI: IXMLExtensionAgencyURIType_ext;
begin
  Result := ChildNodes['ExtensionAgencyURI'] as IXMLExtensionAgencyURIType_ext;
end;

function TXMLUBLExtensionType_ext.Get_ExtensionURI: IXMLExtensionURIType_ext;
begin
  Result := ChildNodes['ExtensionURI'] as IXMLExtensionURIType_ext;
end;

function TXMLUBLExtensionType_ext.Get_ExtensionReasonCode: IXMLExtensionReasonCodeType_ext;
begin
  Result := ChildNodes['ExtensionReasonCode'] as IXMLExtensionReasonCodeType_ext;
end;

function TXMLUBLExtensionType_ext.Get_ExtensionReason: IXMLExtensionReasonType_ext;
begin
  Result := ChildNodes['ExtensionReason'] as IXMLExtensionReasonType_ext;
end;

function TXMLUBLExtensionType_ext.Get_ExtensionContent: IXMLExtensionContentType;
begin
  Result := ChildNodes['ExtensionContent'] as IXMLExtensionContentType;
end;

{ TXMLIDType_cbc }

{ TXMLNameType_cbc }

{ TXMLExtensionAgencyIDType_ext }

{ TXMLExtensionAgencyNameType_ext }

{ TXMLExtensionVersionIDType_ext }

{ TXMLExtensionAgencyURIType_ext }

{ TXMLExtensionURIType_ext }

{ TXMLExtensionReasonCodeType_ext }

{ TXMLExtensionReasonType_ext }

{ TXMLExtensionContentType }

{ TXMLUBLVersionIDType_cbc }

{ TXMLCustomizationIDType_cbc }

{ TXMLProfileIDType_cbc }

{ TXMLProfileExecutionIDType_cbc }

{ TXMLCopyIndicatorType_cbc }

{ TXMLUUIDType_cbc }

{ TXMLIssueDateType_cbc }

{ TXMLIssueTimeType_cbc }

{ TXMLDueDateType_cbc }

{ TXMLInvoiceTypeCodeType_cbc }

{ TXMLNoteType_cbc }

{ TXMLNoteType_cbcList }

function TXMLNoteType_cbcList.Add: IXMLNoteType_cbc;
begin
  Result := AddItem(-1) as IXMLNoteType_cbc;
end;

function TXMLNoteType_cbcList.Insert(const Index: Integer): IXMLNoteType_cbc;
begin
  Result := AddItem(Index) as IXMLNoteType_cbc;
end;

function TXMLNoteType_cbcList.Get_Item(const Index: Integer): IXMLNoteType_cbc;
begin
  Result := List[Index] as IXMLNoteType_cbc;
end;

{ TXMLTaxPointDateType_cbc }

{ TXMLDocumentCurrencyCodeType_cbc }

{ TXMLTaxCurrencyCodeType_cbc }

{ TXMLPricingCurrencyCodeType_cbc }

{ TXMLPaymentCurrencyCodeType_cbc }

{ TXMLPaymentAlternativeCurrencyCodeType_cbc }

{ TXMLAccountingCostCodeType_cbc }

{ TXMLAccountingCostType_cbc }

{ TXMLLineCountNumericType_cbc }

{ TXMLBuyerReferenceType_cbc }

{ TXMLPeriodType_cac }

procedure TXMLPeriodType_cac.AfterConstruction;
begin
  RegisterChildNode('StartDate', TXMLStartDateType_cbc);
  RegisterChildNode('StartTime', TXMLStartTimeType_cbc);
  RegisterChildNode('EndDate', TXMLEndDateType_cbc);
  RegisterChildNode('EndTime', TXMLEndTimeType_cbc);
  RegisterChildNode('DurationMeasure', TXMLDurationMeasureType_cbc);
  RegisterChildNode('DescriptionCode', TXMLDescriptionCodeType_cbc);
  RegisterChildNode('Description', TXMLDescriptionType_cbc);
  FDescriptionCode := CreateCollection(TXMLDescriptionCodeType_cbcList, IXMLDescriptionCodeType_cbc, 'DescriptionCode') as IXMLDescriptionCodeType_cbcList;
  FDescription := CreateCollection(TXMLDescriptionType_cbcList, IXMLDescriptionType_cbc, 'Description') as IXMLDescriptionType_cbcList;
  inherited;
end;

function TXMLPeriodType_cac.Get_StartDate: IXMLStartDateType_cbc;
begin
  Result := ChildNodes['StartDate'] as IXMLStartDateType_cbc;
end;

function TXMLPeriodType_cac.Get_StartTime: IXMLStartTimeType_cbc;
begin
  Result := ChildNodes['StartTime'] as IXMLStartTimeType_cbc;
end;

function TXMLPeriodType_cac.Get_EndDate: IXMLEndDateType_cbc;
begin
  Result := ChildNodes['EndDate'] as IXMLEndDateType_cbc;
end;

function TXMLPeriodType_cac.Get_EndTime: IXMLEndTimeType_cbc;
begin
  Result := ChildNodes['EndTime'] as IXMLEndTimeType_cbc;
end;

function TXMLPeriodType_cac.Get_DurationMeasure: IXMLDurationMeasureType_cbc;
begin
  Result := ChildNodes['DurationMeasure'] as IXMLDurationMeasureType_cbc;
end;

function TXMLPeriodType_cac.Get_DescriptionCode: IXMLDescriptionCodeType_cbcList;
begin
  Result := FDescriptionCode;
end;

function TXMLPeriodType_cac.Get_Description: IXMLDescriptionType_cbcList;
begin
  Result := FDescription;
end;

{ TXMLPeriodType_cacList }

function TXMLPeriodType_cacList.Add: IXMLPeriodType_cac;
begin
  Result := AddItem(-1) as IXMLPeriodType_cac;
end;

function TXMLPeriodType_cacList.Insert(const Index: Integer): IXMLPeriodType_cac;
begin
  Result := AddItem(Index) as IXMLPeriodType_cac;
end;

function TXMLPeriodType_cacList.Get_Item(const Index: Integer): IXMLPeriodType_cac;
begin
  Result := List[Index] as IXMLPeriodType_cac;
end;

{ TXMLStartDateType_cbc }

{ TXMLStartTimeType_cbc }

{ TXMLEndDateType_cbc }

{ TXMLEndTimeType_cbc }

{ TXMLDurationMeasureType_cbc }

{ TXMLDescriptionCodeType_cbc }

{ TXMLDescriptionCodeType_cbcList }

function TXMLDescriptionCodeType_cbcList.Add: IXMLDescriptionCodeType_cbc;
begin
  Result := AddItem(-1) as IXMLDescriptionCodeType_cbc;
end;

function TXMLDescriptionCodeType_cbcList.Insert(const Index: Integer): IXMLDescriptionCodeType_cbc;
begin
  Result := AddItem(Index) as IXMLDescriptionCodeType_cbc;
end;

function TXMLDescriptionCodeType_cbcList.Get_Item(const Index: Integer): IXMLDescriptionCodeType_cbc;
begin
  Result := List[Index] as IXMLDescriptionCodeType_cbc;
end;

{ TXMLDescriptionType_cbc }

{ TXMLDescriptionType_cbcList }

function TXMLDescriptionType_cbcList.Add: IXMLDescriptionType_cbc;
begin
  Result := AddItem(-1) as IXMLDescriptionType_cbc;
end;

function TXMLDescriptionType_cbcList.Insert(const Index: Integer): IXMLDescriptionType_cbc;
begin
  Result := AddItem(Index) as IXMLDescriptionType_cbc;
end;

function TXMLDescriptionType_cbcList.Get_Item(const Index: Integer): IXMLDescriptionType_cbc;
begin
  Result := List[Index] as IXMLDescriptionType_cbc;
end;

{ TXMLOrderReferenceType_cac }

procedure TXMLOrderReferenceType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('SalesOrderID', TXMLSalesOrderIDType_cbc);
  RegisterChildNode('CopyIndicator', TXMLCopyIndicatorType_cbc);
  RegisterChildNode('UUID', TXMLUUIDType_cbc);
  RegisterChildNode('IssueDate', TXMLIssueDateType_cbc);
  RegisterChildNode('IssueTime', TXMLIssueTimeType_cbc);
  RegisterChildNode('CustomerReference', TXMLCustomerReferenceType_cbc);
  RegisterChildNode('OrderTypeCode', TXMLOrderTypeCodeType_cbc);
  RegisterChildNode('DocumentReference', TXMLDocumentReferenceType_cac);
  inherited;
end;

function TXMLOrderReferenceType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLOrderReferenceType_cac.Get_SalesOrderID: IXMLSalesOrderIDType_cbc;
begin
  Result := ChildNodes['SalesOrderID'] as IXMLSalesOrderIDType_cbc;
end;

function TXMLOrderReferenceType_cac.Get_CopyIndicator: IXMLCopyIndicatorType_cbc;
begin
  Result := ChildNodes['CopyIndicator'] as IXMLCopyIndicatorType_cbc;
end;

function TXMLOrderReferenceType_cac.Get_UUID: IXMLUUIDType_cbc;
begin
  Result := ChildNodes['UUID'] as IXMLUUIDType_cbc;
end;

function TXMLOrderReferenceType_cac.Get_IssueDate: IXMLIssueDateType_cbc;
begin
  Result := ChildNodes['IssueDate'] as IXMLIssueDateType_cbc;
end;

function TXMLOrderReferenceType_cac.Get_IssueTime: IXMLIssueTimeType_cbc;
begin
  Result := ChildNodes['IssueTime'] as IXMLIssueTimeType_cbc;
end;

function TXMLOrderReferenceType_cac.Get_CustomerReference: IXMLCustomerReferenceType_cbc;
begin
  Result := ChildNodes['CustomerReference'] as IXMLCustomerReferenceType_cbc;
end;

function TXMLOrderReferenceType_cac.Get_OrderTypeCode: IXMLOrderTypeCodeType_cbc;
begin
  Result := ChildNodes['OrderTypeCode'] as IXMLOrderTypeCodeType_cbc;
end;

function TXMLOrderReferenceType_cac.Get_DocumentReference: IXMLDocumentReferenceType_cac;
begin
  Result := ChildNodes['DocumentReference'] as IXMLDocumentReferenceType_cac;
end;

{ TXMLSalesOrderIDType_cbc }

{ TXMLCustomerReferenceType_cbc }

{ TXMLOrderTypeCodeType_cbc }

{ TXMLDocumentReferenceType_cac }

procedure TXMLDocumentReferenceType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('CopyIndicator', TXMLCopyIndicatorType_cbc);
  RegisterChildNode('UUID', TXMLUUIDType_cbc);
  RegisterChildNode('IssueDate', TXMLIssueDateType_cbc);
  RegisterChildNode('IssueTime', TXMLIssueTimeType_cbc);
  RegisterChildNode('DocumentTypeCode', TXMLDocumentTypeCodeType_cbc);
  RegisterChildNode('DocumentType', TXMLDocumentTypeType_cbc);
  RegisterChildNode('XPath', TXMLXPathType_cbc);
  RegisterChildNode('LanguageID', TXMLLanguageIDType_cbc);
  RegisterChildNode('LocaleCode', TXMLLocaleCodeType_cbc);
  RegisterChildNode('VersionID', TXMLVersionIDType_cbc);
  RegisterChildNode('DocumentStatusCode', TXMLDocumentStatusCodeType_cbc);
  RegisterChildNode('DocumentDescription', TXMLDocumentDescriptionType_cbc);
  RegisterChildNode('Attachment', TXMLAttachmentType_cac);
  RegisterChildNode('ValidityPeriod', TXMLPeriodType_cac);
  RegisterChildNode('IssuerParty', TXMLPartyType_cac);
  RegisterChildNode('ResultOfVerification', TXMLResultOfVerificationType_cac);
  FXPath := CreateCollection(TXMLXPathType_cbcList, IXMLXPathType_cbc, 'XPath') as IXMLXPathType_cbcList;
  FDocumentDescription := CreateCollection(TXMLDocumentDescriptionType_cbcList, IXMLDocumentDescriptionType_cbc, 'DocumentDescription') as IXMLDocumentDescriptionType_cbcList;
  inherited;
end;

function TXMLDocumentReferenceType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLDocumentReferenceType_cac.Get_CopyIndicator: IXMLCopyIndicatorType_cbc;
begin
  Result := ChildNodes['CopyIndicator'] as IXMLCopyIndicatorType_cbc;
end;

function TXMLDocumentReferenceType_cac.Get_UUID: IXMLUUIDType_cbc;
begin
  Result := ChildNodes['UUID'] as IXMLUUIDType_cbc;
end;

function TXMLDocumentReferenceType_cac.Get_IssueDate: IXMLIssueDateType_cbc;
begin
  Result := ChildNodes['IssueDate'] as IXMLIssueDateType_cbc;
end;

function TXMLDocumentReferenceType_cac.Get_IssueTime: IXMLIssueTimeType_cbc;
begin
  Result := ChildNodes['IssueTime'] as IXMLIssueTimeType_cbc;
end;

function TXMLDocumentReferenceType_cac.Get_DocumentTypeCode: IXMLDocumentTypeCodeType_cbc;
begin
  Result := ChildNodes['DocumentTypeCode'] as IXMLDocumentTypeCodeType_cbc;
end;

function TXMLDocumentReferenceType_cac.Get_DocumentType: IXMLDocumentTypeType_cbc;
begin
  Result := ChildNodes['DocumentType'] as IXMLDocumentTypeType_cbc;
end;

function TXMLDocumentReferenceType_cac.Get_XPath: IXMLXPathType_cbcList;
begin
  Result := FXPath;
end;

function TXMLDocumentReferenceType_cac.Get_LanguageID: IXMLLanguageIDType_cbc;
begin
  Result := ChildNodes['LanguageID'] as IXMLLanguageIDType_cbc;
end;

function TXMLDocumentReferenceType_cac.Get_LocaleCode: IXMLLocaleCodeType_cbc;
begin
  Result := ChildNodes['LocaleCode'] as IXMLLocaleCodeType_cbc;
end;

function TXMLDocumentReferenceType_cac.Get_VersionID: IXMLVersionIDType_cbc;
begin
  Result := ChildNodes['VersionID'] as IXMLVersionIDType_cbc;
end;

function TXMLDocumentReferenceType_cac.Get_DocumentStatusCode: IXMLDocumentStatusCodeType_cbc;
begin
  Result := ChildNodes['DocumentStatusCode'] as IXMLDocumentStatusCodeType_cbc;
end;

function TXMLDocumentReferenceType_cac.Get_DocumentDescription: IXMLDocumentDescriptionType_cbcList;
begin
  Result := FDocumentDescription;
end;

function TXMLDocumentReferenceType_cac.Get_Attachment: IXMLAttachmentType_cac;
begin
  Result := ChildNodes['Attachment'] as IXMLAttachmentType_cac;
end;

function TXMLDocumentReferenceType_cac.Get_ValidityPeriod: IXMLPeriodType_cac;
begin
  Result := ChildNodes['ValidityPeriod'] as IXMLPeriodType_cac;
end;

function TXMLDocumentReferenceType_cac.Get_IssuerParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['IssuerParty'] as IXMLPartyType_cac;
end;

function TXMLDocumentReferenceType_cac.Get_ResultOfVerification: IXMLResultOfVerificationType_cac;
begin
  Result := ChildNodes['ResultOfVerification'] as IXMLResultOfVerificationType_cac;
end;

{ TXMLDocumentReferenceType_cacList }

function TXMLDocumentReferenceType_cacList.Add: IXMLDocumentReferenceType_cac;
begin
  Result := AddItem(-1) as IXMLDocumentReferenceType_cac;
end;

function TXMLDocumentReferenceType_cacList.Insert(const Index: Integer): IXMLDocumentReferenceType_cac;
begin
  Result := AddItem(Index) as IXMLDocumentReferenceType_cac;
end;

function TXMLDocumentReferenceType_cacList.Get_Item(const Index: Integer): IXMLDocumentReferenceType_cac;
begin
  Result := List[Index] as IXMLDocumentReferenceType_cac;
end;

{ TXMLDocumentTypeCodeType_cbc }

{ TXMLDocumentTypeType_cbc }

{ TXMLXPathType_cbc }

{ TXMLXPathType_cbcList }

function TXMLXPathType_cbcList.Add: IXMLXPathType_cbc;
begin
  Result := AddItem(-1) as IXMLXPathType_cbc;
end;

function TXMLXPathType_cbcList.Insert(const Index: Integer): IXMLXPathType_cbc;
begin
  Result := AddItem(Index) as IXMLXPathType_cbc;
end;

function TXMLXPathType_cbcList.Get_Item(const Index: Integer): IXMLXPathType_cbc;
begin
  Result := List[Index] as IXMLXPathType_cbc;
end;

{ TXMLLanguageIDType_cbc }

{ TXMLLocaleCodeType_cbc }

{ TXMLVersionIDType_cbc }

{ TXMLDocumentStatusCodeType_cbc }

{ TXMLDocumentDescriptionType_cbc }

{ TXMLDocumentDescriptionType_cbcList }

function TXMLDocumentDescriptionType_cbcList.Add: IXMLDocumentDescriptionType_cbc;
begin
  Result := AddItem(-1) as IXMLDocumentDescriptionType_cbc;
end;

function TXMLDocumentDescriptionType_cbcList.Insert(const Index: Integer): IXMLDocumentDescriptionType_cbc;
begin
  Result := AddItem(Index) as IXMLDocumentDescriptionType_cbc;
end;

function TXMLDocumentDescriptionType_cbcList.Get_Item(const Index: Integer): IXMLDocumentDescriptionType_cbc;
begin
  Result := List[Index] as IXMLDocumentDescriptionType_cbc;
end;

{ TXMLAttachmentType_cac }

procedure TXMLAttachmentType_cac.AfterConstruction;
begin
  RegisterChildNode('EmbeddedDocumentBinaryObject', TXMLEmbeddedDocumentBinaryObjectType_cbc);
  RegisterChildNode('ExternalReference', TXMLExternalReferenceType_cac);
  inherited;
end;

function TXMLAttachmentType_cac.Get_EmbeddedDocumentBinaryObject: IXMLEmbeddedDocumentBinaryObjectType_cbc;
begin
  Result := ChildNodes['EmbeddedDocumentBinaryObject'] as IXMLEmbeddedDocumentBinaryObjectType_cbc;
end;

function TXMLAttachmentType_cac.Get_ExternalReference: IXMLExternalReferenceType_cac;
begin
  Result := ChildNodes['ExternalReference'] as IXMLExternalReferenceType_cac;
end;

{ TXMLEmbeddedDocumentBinaryObjectType_cbc }

{ TXMLExternalReferenceType_cac }

procedure TXMLExternalReferenceType_cac.AfterConstruction;
begin
  RegisterChildNode('URI', TXMLURIType_cbc);
  RegisterChildNode('DocumentHash', TXMLDocumentHashType_cbc);
  RegisterChildNode('HashAlgorithmMethod', TXMLHashAlgorithmMethodType_cbc);
  RegisterChildNode('ExpiryDate', TXMLExpiryDateType_cbc);
  RegisterChildNode('ExpiryTime', TXMLExpiryTimeType_cbc);
  RegisterChildNode('MimeCode', TXMLMimeCodeType_cbc);
  RegisterChildNode('FormatCode', TXMLFormatCodeType_cbc);
  RegisterChildNode('EncodingCode', TXMLEncodingCodeType_cbc);
  RegisterChildNode('CharacterSetCode', TXMLCharacterSetCodeType_cbc);
  RegisterChildNode('FileName', TXMLFileNameType_cbc);
  RegisterChildNode('Description', TXMLDescriptionType_cbc);
  FDescription := CreateCollection(TXMLDescriptionType_cbcList, IXMLDescriptionType_cbc, 'Description') as IXMLDescriptionType_cbcList;
  inherited;
end;

function TXMLExternalReferenceType_cac.Get_URI: IXMLURIType_cbc;
begin
  Result := ChildNodes['URI'] as IXMLURIType_cbc;
end;

function TXMLExternalReferenceType_cac.Get_DocumentHash: IXMLDocumentHashType_cbc;
begin
  Result := ChildNodes['DocumentHash'] as IXMLDocumentHashType_cbc;
end;

function TXMLExternalReferenceType_cac.Get_HashAlgorithmMethod: IXMLHashAlgorithmMethodType_cbc;
begin
  Result := ChildNodes['HashAlgorithmMethod'] as IXMLHashAlgorithmMethodType_cbc;
end;

function TXMLExternalReferenceType_cac.Get_ExpiryDate: IXMLExpiryDateType_cbc;
begin
  Result := ChildNodes['ExpiryDate'] as IXMLExpiryDateType_cbc;
end;

function TXMLExternalReferenceType_cac.Get_ExpiryTime: IXMLExpiryTimeType_cbc;
begin
  Result := ChildNodes['ExpiryTime'] as IXMLExpiryTimeType_cbc;
end;

function TXMLExternalReferenceType_cac.Get_MimeCode: IXMLMimeCodeType_cbc;
begin
  Result := ChildNodes['MimeCode'] as IXMLMimeCodeType_cbc;
end;

function TXMLExternalReferenceType_cac.Get_FormatCode: IXMLFormatCodeType_cbc;
begin
  Result := ChildNodes['FormatCode'] as IXMLFormatCodeType_cbc;
end;

function TXMLExternalReferenceType_cac.Get_EncodingCode: IXMLEncodingCodeType_cbc;
begin
  Result := ChildNodes['EncodingCode'] as IXMLEncodingCodeType_cbc;
end;

function TXMLExternalReferenceType_cac.Get_CharacterSetCode: IXMLCharacterSetCodeType_cbc;
begin
  Result := ChildNodes['CharacterSetCode'] as IXMLCharacterSetCodeType_cbc;
end;

function TXMLExternalReferenceType_cac.Get_FileName: IXMLFileNameType_cbc;
begin
  Result := ChildNodes['FileName'] as IXMLFileNameType_cbc;
end;

function TXMLExternalReferenceType_cac.Get_Description: IXMLDescriptionType_cbcList;
begin
  Result := FDescription;
end;

{ TXMLURIType_cbc }

{ TXMLDocumentHashType_cbc }

{ TXMLHashAlgorithmMethodType_cbc }

{ TXMLExpiryDateType_cbc }

{ TXMLExpiryTimeType_cbc }

{ TXMLMimeCodeType_cbc }

{ TXMLFormatCodeType_cbc }

{ TXMLEncodingCodeType_cbc }

{ TXMLCharacterSetCodeType_cbc }

{ TXMLFileNameType_cbc }

{ TXMLPartyType_cac }

procedure TXMLPartyType_cac.AfterConstruction;
begin
  RegisterChildNode('MarkCareIndicator', TXMLMarkCareIndicatorType_cbc);
  RegisterChildNode('MarkAttentionIndicator', TXMLMarkAttentionIndicatorType_cbc);
  RegisterChildNode('WebsiteURI', TXMLWebsiteURIType_cbc);
  RegisterChildNode('LogoReferenceID', TXMLLogoReferenceIDType_cbc);
  RegisterChildNode('EndpointID', TXMLEndpointIDType_cbc);
  RegisterChildNode('IndustryClassificationCode', TXMLIndustryClassificationCodeType_cbc);
  RegisterChildNode('PartyIdentification', TXMLPartyIdentificationType_cac);
  RegisterChildNode('PartyName', TXMLPartyNameType_cac);
  RegisterChildNode('Language', TXMLLanguageType_cac);
  RegisterChildNode('PostalAddress', TXMLAddressType_cac);
  RegisterChildNode('PhysicalLocation', TXMLLocationType_cac);
  RegisterChildNode('PartyTaxScheme', TXMLPartyTaxSchemeType_cac);
  RegisterChildNode('PartyLegalEntity', TXMLPartyLegalEntityType_cac);
  RegisterChildNode('Contact', TXMLContactType_cac);
  RegisterChildNode('Person', TXMLPersonType_cac);
  RegisterChildNode('AgentParty', TXMLPartyType_cac);
  RegisterChildNode('ServiceProviderParty', TXMLServiceProviderPartyType_cac);
  RegisterChildNode('PowerOfAttorney', TXMLPowerOfAttorneyType_cac);
  RegisterChildNode('FinancialAccount', TXMLFinancialAccountType_cac);
  FPartyIdentification := CreateCollection(TXMLPartyIdentificationType_cacList, IXMLPartyIdentificationType_cac, 'PartyIdentification') as IXMLPartyIdentificationType_cacList;
  FPartyName := CreateCollection(TXMLPartyNameType_cacList, IXMLPartyNameType_cac, 'PartyName') as IXMLPartyNameType_cacList;
  FPartyTaxScheme := CreateCollection(TXMLPartyTaxSchemeType_cacList, IXMLPartyTaxSchemeType_cac, 'PartyTaxScheme') as IXMLPartyTaxSchemeType_cacList;
  FPartyLegalEntity := CreateCollection(TXMLPartyLegalEntityType_cacList, IXMLPartyLegalEntityType_cac, 'PartyLegalEntity') as IXMLPartyLegalEntityType_cacList;
  FPerson := CreateCollection(TXMLPersonType_cacList, IXMLPersonType_cac, 'Person') as IXMLPersonType_cacList;
  FServiceProviderParty := CreateCollection(TXMLServiceProviderPartyType_cacList, IXMLServiceProviderPartyType_cac, 'ServiceProviderParty') as IXMLServiceProviderPartyType_cacList;
  FPowerOfAttorney := CreateCollection(TXMLPowerOfAttorneyType_cacList, IXMLPowerOfAttorneyType_cac, 'PowerOfAttorney') as IXMLPowerOfAttorneyType_cacList;
  inherited;
end;

function TXMLPartyType_cac.Get_MarkCareIndicator: IXMLMarkCareIndicatorType_cbc;
begin
  Result := ChildNodes['MarkCareIndicator'] as IXMLMarkCareIndicatorType_cbc;
end;

function TXMLPartyType_cac.Get_MarkAttentionIndicator: IXMLMarkAttentionIndicatorType_cbc;
begin
  Result := ChildNodes['MarkAttentionIndicator'] as IXMLMarkAttentionIndicatorType_cbc;
end;

function TXMLPartyType_cac.Get_WebsiteURI: IXMLWebsiteURIType_cbc;
begin
  Result := ChildNodes['WebsiteURI'] as IXMLWebsiteURIType_cbc;
end;

function TXMLPartyType_cac.Get_LogoReferenceID: IXMLLogoReferenceIDType_cbc;
begin
  Result := ChildNodes['LogoReferenceID'] as IXMLLogoReferenceIDType_cbc;
end;

function TXMLPartyType_cac.Get_EndpointID: IXMLEndpointIDType_cbc;
begin
  Result := ChildNodes['EndpointID'] as IXMLEndpointIDType_cbc;
end;

function TXMLPartyType_cac.Get_IndustryClassificationCode: IXMLIndustryClassificationCodeType_cbc;
begin
  Result := ChildNodes['IndustryClassificationCode'] as IXMLIndustryClassificationCodeType_cbc;
end;

function TXMLPartyType_cac.Get_PartyIdentification: IXMLPartyIdentificationType_cacList;
begin
  Result := FPartyIdentification;
end;

function TXMLPartyType_cac.Get_PartyName: IXMLPartyNameType_cacList;
begin
  Result := FPartyName;
end;

function TXMLPartyType_cac.Get_Language: IXMLLanguageType_cac;
begin
  Result := ChildNodes['Language'] as IXMLLanguageType_cac;
end;

function TXMLPartyType_cac.Get_PostalAddress: IXMLAddressType_cac;
begin
  Result := ChildNodes['PostalAddress'] as IXMLAddressType_cac;
end;

function TXMLPartyType_cac.Get_PhysicalLocation: IXMLLocationType_cac;
begin
  Result := ChildNodes['PhysicalLocation'] as IXMLLocationType_cac;
end;

function TXMLPartyType_cac.Get_PartyTaxScheme: IXMLPartyTaxSchemeType_cacList;
begin
  Result := FPartyTaxScheme;
end;

function TXMLPartyType_cac.Get_PartyLegalEntity: IXMLPartyLegalEntityType_cacList;
begin
  Result := FPartyLegalEntity;
end;

function TXMLPartyType_cac.Get_Contact: IXMLContactType_cac;
begin
  Result := ChildNodes['Contact'] as IXMLContactType_cac;
end;

function TXMLPartyType_cac.Get_Person: IXMLPersonType_cacList;
begin
  Result := FPerson;
end;

function TXMLPartyType_cac.Get_AgentParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['AgentParty'] as IXMLPartyType_cac;
end;

function TXMLPartyType_cac.Get_ServiceProviderParty: IXMLServiceProviderPartyType_cacList;
begin
  Result := FServiceProviderParty;
end;

function TXMLPartyType_cac.Get_PowerOfAttorney: IXMLPowerOfAttorneyType_cacList;
begin
  Result := FPowerOfAttorney;
end;

function TXMLPartyType_cac.Get_FinancialAccount: IXMLFinancialAccountType_cac;
begin
  Result := ChildNodes['FinancialAccount'] as IXMLFinancialAccountType_cac;
end;

{ TXMLPartyType_cacList }

function TXMLPartyType_cacList.Add: IXMLPartyType_cac;
begin
  Result := AddItem(-1) as IXMLPartyType_cac;
end;

function TXMLPartyType_cacList.Insert(const Index: Integer): IXMLPartyType_cac;
begin
  Result := AddItem(Index) as IXMLPartyType_cac;
end;

function TXMLPartyType_cacList.Get_Item(const Index: Integer): IXMLPartyType_cac;
begin
  Result := List[Index] as IXMLPartyType_cac;
end;

{ TXMLMarkCareIndicatorType_cbc }

{ TXMLMarkAttentionIndicatorType_cbc }

{ TXMLWebsiteURIType_cbc }

{ TXMLLogoReferenceIDType_cbc }

{ TXMLEndpointIDType_cbc }

{ TXMLIndustryClassificationCodeType_cbc }

{ TXMLPartyIdentificationType_cac }

procedure TXMLPartyIdentificationType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  inherited;
end;

function TXMLPartyIdentificationType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

{ TXMLPartyIdentificationType_cacList }

function TXMLPartyIdentificationType_cacList.Add: IXMLPartyIdentificationType_cac;
begin
  Result := AddItem(-1) as IXMLPartyIdentificationType_cac;
end;

function TXMLPartyIdentificationType_cacList.Insert(const Index: Integer): IXMLPartyIdentificationType_cac;
begin
  Result := AddItem(Index) as IXMLPartyIdentificationType_cac;
end;

function TXMLPartyIdentificationType_cacList.Get_Item(const Index: Integer): IXMLPartyIdentificationType_cac;
begin
  Result := List[Index] as IXMLPartyIdentificationType_cac;
end;

{ TXMLPartyNameType_cac }

procedure TXMLPartyNameType_cac.AfterConstruction;
begin
  RegisterChildNode('Name', TXMLNameType_cbc);
  inherited;
end;

function TXMLPartyNameType_cac.Get_Name: IXMLNameType_cbc;
begin
  Result := ChildNodes['Name'] as IXMLNameType_cbc;
end;

{ TXMLPartyNameType_cacList }

function TXMLPartyNameType_cacList.Add: IXMLPartyNameType_cac;
begin
  Result := AddItem(-1) as IXMLPartyNameType_cac;
end;

function TXMLPartyNameType_cacList.Insert(const Index: Integer): IXMLPartyNameType_cac;
begin
  Result := AddItem(Index) as IXMLPartyNameType_cac;
end;

function TXMLPartyNameType_cacList.Get_Item(const Index: Integer): IXMLPartyNameType_cac;
begin
  Result := List[Index] as IXMLPartyNameType_cac;
end;

{ TXMLLanguageType_cac }

procedure TXMLLanguageType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('Name', TXMLNameType_cbc);
  RegisterChildNode('LocaleCode', TXMLLocaleCodeType_cbc);
  inherited;
end;

function TXMLLanguageType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLLanguageType_cac.Get_Name: IXMLNameType_cbc;
begin
  Result := ChildNodes['Name'] as IXMLNameType_cbc;
end;

function TXMLLanguageType_cac.Get_LocaleCode: IXMLLocaleCodeType_cbc;
begin
  Result := ChildNodes['LocaleCode'] as IXMLLocaleCodeType_cbc;
end;

{ TXMLAddressType_cac }

procedure TXMLAddressType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('AddressTypeCode', TXMLAddressTypeCodeType_cbc);
  RegisterChildNode('AddressFormatCode', TXMLAddressFormatCodeType_cbc);
  RegisterChildNode('Postbox', TXMLPostboxType_cbc);
  RegisterChildNode('Floor', TXMLFloorType_cbc);
  RegisterChildNode('Room', TXMLRoomType_cbc);
  RegisterChildNode('StreetName', TXMLStreetNameType_cbc);
  RegisterChildNode('AdditionalStreetName', TXMLAdditionalStreetNameType_cbc);
  RegisterChildNode('BlockName', TXMLBlockNameType_cbc);
  RegisterChildNode('BuildingName', TXMLBuildingNameType_cbc);
  RegisterChildNode('BuildingNumber', TXMLBuildingNumberType_cbc);
  RegisterChildNode('InhouseMail', TXMLInhouseMailType_cbc);
  RegisterChildNode('Department', TXMLDepartmentType_cbc);
  RegisterChildNode('MarkAttention', TXMLMarkAttentionType_cbc);
  RegisterChildNode('MarkCare', TXMLMarkCareType_cbc);
  RegisterChildNode('PlotIdentification', TXMLPlotIdentificationType_cbc);
  RegisterChildNode('CitySubdivisionName', TXMLCitySubdivisionNameType_cbc);
  RegisterChildNode('CityName', TXMLCityNameType_cbc);
  RegisterChildNode('PostalZone', TXMLPostalZoneType_cbc);
  RegisterChildNode('CountrySubentity', TXMLCountrySubentityType_cbc);
  RegisterChildNode('CountrySubentityCode', TXMLCountrySubentityCodeType_cbc);
  RegisterChildNode('Region', TXMLRegionType_cbc);
  RegisterChildNode('District', TXMLDistrictType_cbc);
  RegisterChildNode('TimezoneOffset', TXMLTimezoneOffsetType_cbc);
  RegisterChildNode('AddressLine', TXMLAddressLineType_cac);
  RegisterChildNode('Country', TXMLCountryType_cac);
  RegisterChildNode('LocationCoordinate', TXMLLocationCoordinateType_cac);
  FAddressLine := CreateCollection(TXMLAddressLineType_cacList, IXMLAddressLineType_cac, 'AddressLine') as IXMLAddressLineType_cacList;
  FLocationCoordinate := CreateCollection(TXMLLocationCoordinateType_cacList, IXMLLocationCoordinateType_cac, 'LocationCoordinate') as IXMLLocationCoordinateType_cacList;
  inherited;
end;

function TXMLAddressType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLAddressType_cac.Get_AddressTypeCode: IXMLAddressTypeCodeType_cbc;
begin
  Result := ChildNodes['AddressTypeCode'] as IXMLAddressTypeCodeType_cbc;
end;

function TXMLAddressType_cac.Get_AddressFormatCode: IXMLAddressFormatCodeType_cbc;
begin
  Result := ChildNodes['AddressFormatCode'] as IXMLAddressFormatCodeType_cbc;
end;

function TXMLAddressType_cac.Get_Postbox: IXMLPostboxType_cbc;
begin
  Result := ChildNodes['Postbox'] as IXMLPostboxType_cbc;
end;

function TXMLAddressType_cac.Get_Floor: IXMLFloorType_cbc;
begin
  Result := ChildNodes['Floor'] as IXMLFloorType_cbc;
end;

function TXMLAddressType_cac.Get_Room: IXMLRoomType_cbc;
begin
  Result := ChildNodes['Room'] as IXMLRoomType_cbc;
end;

function TXMLAddressType_cac.Get_StreetName: IXMLStreetNameType_cbc;
begin
  Result := ChildNodes['StreetName'] as IXMLStreetNameType_cbc;
end;

function TXMLAddressType_cac.Get_AdditionalStreetName: IXMLAdditionalStreetNameType_cbc;
begin
  Result := ChildNodes['AdditionalStreetName'] as IXMLAdditionalStreetNameType_cbc;
end;

function TXMLAddressType_cac.Get_BlockName: IXMLBlockNameType_cbc;
begin
  Result := ChildNodes['BlockName'] as IXMLBlockNameType_cbc;
end;

function TXMLAddressType_cac.Get_BuildingName: IXMLBuildingNameType_cbc;
begin
  Result := ChildNodes['BuildingName'] as IXMLBuildingNameType_cbc;
end;

function TXMLAddressType_cac.Get_BuildingNumber: IXMLBuildingNumberType_cbc;
begin
  Result := ChildNodes['BuildingNumber'] as IXMLBuildingNumberType_cbc;
end;

function TXMLAddressType_cac.Get_InhouseMail: IXMLInhouseMailType_cbc;
begin
  Result := ChildNodes['InhouseMail'] as IXMLInhouseMailType_cbc;
end;

function TXMLAddressType_cac.Get_Department: IXMLDepartmentType_cbc;
begin
  Result := ChildNodes['Department'] as IXMLDepartmentType_cbc;
end;

function TXMLAddressType_cac.Get_MarkAttention: IXMLMarkAttentionType_cbc;
begin
  Result := ChildNodes['MarkAttention'] as IXMLMarkAttentionType_cbc;
end;

function TXMLAddressType_cac.Get_MarkCare: IXMLMarkCareType_cbc;
begin
  Result := ChildNodes['MarkCare'] as IXMLMarkCareType_cbc;
end;

function TXMLAddressType_cac.Get_PlotIdentification: IXMLPlotIdentificationType_cbc;
begin
  Result := ChildNodes['PlotIdentification'] as IXMLPlotIdentificationType_cbc;
end;

function TXMLAddressType_cac.Get_CitySubdivisionName: IXMLCitySubdivisionNameType_cbc;
begin
  Result := ChildNodes['CitySubdivisionName'] as IXMLCitySubdivisionNameType_cbc;
end;

function TXMLAddressType_cac.Get_CityName: IXMLCityNameType_cbc;
begin
  Result := ChildNodes['CityName'] as IXMLCityNameType_cbc;
end;

function TXMLAddressType_cac.Get_PostalZone: IXMLPostalZoneType_cbc;
begin
  Result := ChildNodes['PostalZone'] as IXMLPostalZoneType_cbc;
end;

function TXMLAddressType_cac.Get_CountrySubentity: IXMLCountrySubentityType_cbc;
begin
  Result := ChildNodes['CountrySubentity'] as IXMLCountrySubentityType_cbc;
end;

function TXMLAddressType_cac.Get_CountrySubentityCode: IXMLCountrySubentityCodeType_cbc;
begin
  Result := ChildNodes['CountrySubentityCode'] as IXMLCountrySubentityCodeType_cbc;
end;

function TXMLAddressType_cac.Get_Region: IXMLRegionType_cbc;
begin
  Result := ChildNodes['Region'] as IXMLRegionType_cbc;
end;

function TXMLAddressType_cac.Get_District: IXMLDistrictType_cbc;
begin
  Result := ChildNodes['District'] as IXMLDistrictType_cbc;
end;

function TXMLAddressType_cac.Get_TimezoneOffset: IXMLTimezoneOffsetType_cbc;
begin
  Result := ChildNodes['TimezoneOffset'] as IXMLTimezoneOffsetType_cbc;
end;

function TXMLAddressType_cac.Get_AddressLine: IXMLAddressLineType_cacList;
begin
  Result := FAddressLine;
end;

function TXMLAddressType_cac.Get_Country: IXMLCountryType_cac;
begin
  Result := ChildNodes['Country'] as IXMLCountryType_cac;
end;

function TXMLAddressType_cac.Get_LocationCoordinate: IXMLLocationCoordinateType_cacList;
begin
  Result := FLocationCoordinate;
end;

{ TXMLAddressType_cacList }

function TXMLAddressType_cacList.Add: IXMLAddressType_cac;
begin
  Result := AddItem(-1) as IXMLAddressType_cac;
end;

function TXMLAddressType_cacList.Insert(const Index: Integer): IXMLAddressType_cac;
begin
  Result := AddItem(Index) as IXMLAddressType_cac;
end;

function TXMLAddressType_cacList.Get_Item(const Index: Integer): IXMLAddressType_cac;
begin
  Result := List[Index] as IXMLAddressType_cac;
end;

{ TXMLAddressTypeCodeType_cbc }

{ TXMLAddressFormatCodeType_cbc }

{ TXMLPostboxType_cbc }

{ TXMLFloorType_cbc }

{ TXMLRoomType_cbc }

{ TXMLStreetNameType_cbc }

{ TXMLAdditionalStreetNameType_cbc }

{ TXMLBlockNameType_cbc }

{ TXMLBuildingNameType_cbc }

{ TXMLBuildingNumberType_cbc }

{ TXMLInhouseMailType_cbc }

{ TXMLDepartmentType_cbc }

{ TXMLMarkAttentionType_cbc }

{ TXMLMarkCareType_cbc }

{ TXMLPlotIdentificationType_cbc }

{ TXMLCitySubdivisionNameType_cbc }

{ TXMLCityNameType_cbc }

{ TXMLPostalZoneType_cbc }

{ TXMLCountrySubentityType_cbc }

{ TXMLCountrySubentityCodeType_cbc }

{ TXMLRegionType_cbc }

{ TXMLDistrictType_cbc }

{ TXMLTimezoneOffsetType_cbc }

{ TXMLAddressLineType_cac }

procedure TXMLAddressLineType_cac.AfterConstruction;
begin
  RegisterChildNode('Line', TXMLLineType_cbc);
  inherited;
end;

function TXMLAddressLineType_cac.Get_Line: IXMLLineType_cbc;
begin
  Result := ChildNodes['Line'] as IXMLLineType_cbc;
end;

{ TXMLAddressLineType_cacList }

function TXMLAddressLineType_cacList.Add: IXMLAddressLineType_cac;
begin
  Result := AddItem(-1) as IXMLAddressLineType_cac;
end;

function TXMLAddressLineType_cacList.Insert(const Index: Integer): IXMLAddressLineType_cac;
begin
  Result := AddItem(Index) as IXMLAddressLineType_cac;
end;

function TXMLAddressLineType_cacList.Get_Item(const Index: Integer): IXMLAddressLineType_cac;
begin
  Result := List[Index] as IXMLAddressLineType_cac;
end;

{ TXMLLineType_cbc }

{ TXMLCountryType_cac }

procedure TXMLCountryType_cac.AfterConstruction;
begin
  RegisterChildNode('IdentificationCode', TXMLIdentificationCodeType_cbc);
  RegisterChildNode('Name', TXMLNameType_cbc);
  inherited;
end;

function TXMLCountryType_cac.Get_IdentificationCode: IXMLIdentificationCodeType_cbc;
begin
  Result := ChildNodes['IdentificationCode'] as IXMLIdentificationCodeType_cbc;
end;

function TXMLCountryType_cac.Get_Name: IXMLNameType_cbc;
begin
  Result := ChildNodes['Name'] as IXMLNameType_cbc;
end;

{ TXMLCountryType_cacList }

function TXMLCountryType_cacList.Add: IXMLCountryType_cac;
begin
  Result := AddItem(-1) as IXMLCountryType_cac;
end;

function TXMLCountryType_cacList.Insert(const Index: Integer): IXMLCountryType_cac;
begin
  Result := AddItem(Index) as IXMLCountryType_cac;
end;

function TXMLCountryType_cacList.Get_Item(const Index: Integer): IXMLCountryType_cac;
begin
  Result := List[Index] as IXMLCountryType_cac;
end;

{ TXMLIdentificationCodeType_cbc }

{ TXMLLocationCoordinateType_cac }

procedure TXMLLocationCoordinateType_cac.AfterConstruction;
begin
  RegisterChildNode('CoordinateSystemCode', TXMLCoordinateSystemCodeType_cbc);
  RegisterChildNode('LatitudeDegreesMeasure', TXMLLatitudeDegreesMeasureType_cbc);
  RegisterChildNode('LatitudeMinutesMeasure', TXMLLatitudeMinutesMeasureType_cbc);
  RegisterChildNode('LatitudeDirectionCode', TXMLLatitudeDirectionCodeType_cbc);
  RegisterChildNode('LongitudeDegreesMeasure', TXMLLongitudeDegreesMeasureType_cbc);
  RegisterChildNode('LongitudeMinutesMeasure', TXMLLongitudeMinutesMeasureType_cbc);
  RegisterChildNode('LongitudeDirectionCode', TXMLLongitudeDirectionCodeType_cbc);
  RegisterChildNode('AltitudeMeasure', TXMLAltitudeMeasureType_cbc);
  inherited;
end;

function TXMLLocationCoordinateType_cac.Get_CoordinateSystemCode: IXMLCoordinateSystemCodeType_cbc;
begin
  Result := ChildNodes['CoordinateSystemCode'] as IXMLCoordinateSystemCodeType_cbc;
end;

function TXMLLocationCoordinateType_cac.Get_LatitudeDegreesMeasure: IXMLLatitudeDegreesMeasureType_cbc;
begin
  Result := ChildNodes['LatitudeDegreesMeasure'] as IXMLLatitudeDegreesMeasureType_cbc;
end;

function TXMLLocationCoordinateType_cac.Get_LatitudeMinutesMeasure: IXMLLatitudeMinutesMeasureType_cbc;
begin
  Result := ChildNodes['LatitudeMinutesMeasure'] as IXMLLatitudeMinutesMeasureType_cbc;
end;

function TXMLLocationCoordinateType_cac.Get_LatitudeDirectionCode: IXMLLatitudeDirectionCodeType_cbc;
begin
  Result := ChildNodes['LatitudeDirectionCode'] as IXMLLatitudeDirectionCodeType_cbc;
end;

function TXMLLocationCoordinateType_cac.Get_LongitudeDegreesMeasure: IXMLLongitudeDegreesMeasureType_cbc;
begin
  Result := ChildNodes['LongitudeDegreesMeasure'] as IXMLLongitudeDegreesMeasureType_cbc;
end;

function TXMLLocationCoordinateType_cac.Get_LongitudeMinutesMeasure: IXMLLongitudeMinutesMeasureType_cbc;
begin
  Result := ChildNodes['LongitudeMinutesMeasure'] as IXMLLongitudeMinutesMeasureType_cbc;
end;

function TXMLLocationCoordinateType_cac.Get_LongitudeDirectionCode: IXMLLongitudeDirectionCodeType_cbc;
begin
  Result := ChildNodes['LongitudeDirectionCode'] as IXMLLongitudeDirectionCodeType_cbc;
end;

function TXMLLocationCoordinateType_cac.Get_AltitudeMeasure: IXMLAltitudeMeasureType_cbc;
begin
  Result := ChildNodes['AltitudeMeasure'] as IXMLAltitudeMeasureType_cbc;
end;

{ TXMLLocationCoordinateType_cacList }

function TXMLLocationCoordinateType_cacList.Add: IXMLLocationCoordinateType_cac;
begin
  Result := AddItem(-1) as IXMLLocationCoordinateType_cac;
end;

function TXMLLocationCoordinateType_cacList.Insert(const Index: Integer): IXMLLocationCoordinateType_cac;
begin
  Result := AddItem(Index) as IXMLLocationCoordinateType_cac;
end;

function TXMLLocationCoordinateType_cacList.Get_Item(const Index: Integer): IXMLLocationCoordinateType_cac;
begin
  Result := List[Index] as IXMLLocationCoordinateType_cac;
end;

{ TXMLCoordinateSystemCodeType_cbc }

{ TXMLLatitudeDegreesMeasureType_cbc }

{ TXMLLatitudeMinutesMeasureType_cbc }

{ TXMLLatitudeDirectionCodeType_cbc }

{ TXMLLongitudeDegreesMeasureType_cbc }

{ TXMLLongitudeMinutesMeasureType_cbc }

{ TXMLLongitudeDirectionCodeType_cbc }

{ TXMLAltitudeMeasureType_cbc }

{ TXMLLocationType_cac }

procedure TXMLLocationType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('Description', TXMLDescriptionType_cbc);
  RegisterChildNode('Conditions', TXMLConditionsType_cbc);
  RegisterChildNode('CountrySubentity', TXMLCountrySubentityType_cbc);
  RegisterChildNode('CountrySubentityCode', TXMLCountrySubentityCodeType_cbc);
  RegisterChildNode('LocationTypeCode', TXMLLocationTypeCodeType_cbc);
  RegisterChildNode('InformationURI', TXMLInformationURIType_cbc);
  RegisterChildNode('Name', TXMLNameType_cbc);
  RegisterChildNode('ValidityPeriod', TXMLPeriodType_cac);
  RegisterChildNode('Address', TXMLAddressType_cac);
  RegisterChildNode('SubsidiaryLocation', TXMLLocationType_cac);
  RegisterChildNode('LocationCoordinate', TXMLLocationCoordinateType_cac);
  FDescription := CreateCollection(TXMLDescriptionType_cbcList, IXMLDescriptionType_cbc, 'Description') as IXMLDescriptionType_cbcList;
  FConditions := CreateCollection(TXMLConditionsType_cbcList, IXMLConditionsType_cbc, 'Conditions') as IXMLConditionsType_cbcList;
  FValidityPeriod := CreateCollection(TXMLPeriodType_cacList, IXMLPeriodType_cac, 'ValidityPeriod') as IXMLPeriodType_cacList;
  FSubsidiaryLocation := CreateCollection(TXMLLocationType_cacList, IXMLLocationType_cac, 'SubsidiaryLocation') as IXMLLocationType_cacList;
  FLocationCoordinate := CreateCollection(TXMLLocationCoordinateType_cacList, IXMLLocationCoordinateType_cac, 'LocationCoordinate') as IXMLLocationCoordinateType_cacList;
  inherited;
end;

function TXMLLocationType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLLocationType_cac.Get_Description: IXMLDescriptionType_cbcList;
begin
  Result := FDescription;
end;

function TXMLLocationType_cac.Get_Conditions: IXMLConditionsType_cbcList;
begin
  Result := FConditions;
end;

function TXMLLocationType_cac.Get_CountrySubentity: IXMLCountrySubentityType_cbc;
begin
  Result := ChildNodes['CountrySubentity'] as IXMLCountrySubentityType_cbc;
end;

function TXMLLocationType_cac.Get_CountrySubentityCode: IXMLCountrySubentityCodeType_cbc;
begin
  Result := ChildNodes['CountrySubentityCode'] as IXMLCountrySubentityCodeType_cbc;
end;

function TXMLLocationType_cac.Get_LocationTypeCode: IXMLLocationTypeCodeType_cbc;
begin
  Result := ChildNodes['LocationTypeCode'] as IXMLLocationTypeCodeType_cbc;
end;

function TXMLLocationType_cac.Get_InformationURI: IXMLInformationURIType_cbc;
begin
  Result := ChildNodes['InformationURI'] as IXMLInformationURIType_cbc;
end;

function TXMLLocationType_cac.Get_Name: IXMLNameType_cbc;
begin
  Result := ChildNodes['Name'] as IXMLNameType_cbc;
end;

function TXMLLocationType_cac.Get_ValidityPeriod: IXMLPeriodType_cacList;
begin
  Result := FValidityPeriod;
end;

function TXMLLocationType_cac.Get_Address: IXMLAddressType_cac;
begin
  Result := ChildNodes['Address'] as IXMLAddressType_cac;
end;

function TXMLLocationType_cac.Get_SubsidiaryLocation: IXMLLocationType_cacList;
begin
  Result := FSubsidiaryLocation;
end;

function TXMLLocationType_cac.Get_LocationCoordinate: IXMLLocationCoordinateType_cacList;
begin
  Result := FLocationCoordinate;
end;

{ TXMLLocationType_cacList }

function TXMLLocationType_cacList.Add: IXMLLocationType_cac;
begin
  Result := AddItem(-1) as IXMLLocationType_cac;
end;

function TXMLLocationType_cacList.Insert(const Index: Integer): IXMLLocationType_cac;
begin
  Result := AddItem(Index) as IXMLLocationType_cac;
end;

function TXMLLocationType_cacList.Get_Item(const Index: Integer): IXMLLocationType_cac;
begin
  Result := List[Index] as IXMLLocationType_cac;
end;

{ TXMLConditionsType_cbc }

{ TXMLConditionsType_cbcList }

function TXMLConditionsType_cbcList.Add: IXMLConditionsType_cbc;
begin
  Result := AddItem(-1) as IXMLConditionsType_cbc;
end;

function TXMLConditionsType_cbcList.Insert(const Index: Integer): IXMLConditionsType_cbc;
begin
  Result := AddItem(Index) as IXMLConditionsType_cbc;
end;

function TXMLConditionsType_cbcList.Get_Item(const Index: Integer): IXMLConditionsType_cbc;
begin
  Result := List[Index] as IXMLConditionsType_cbc;
end;

{ TXMLLocationTypeCodeType_cbc }

{ TXMLInformationURIType_cbc }

{ TXMLPartyTaxSchemeType_cac }

procedure TXMLPartyTaxSchemeType_cac.AfterConstruction;
begin
  RegisterChildNode('RegistrationName', TXMLRegistrationNameType_cbc);
  RegisterChildNode('CompanyID', TXMLCompanyIDType_cbc);
  RegisterChildNode('TaxLevelCode', TXMLTaxLevelCodeType_cbc);
  RegisterChildNode('ExemptionReasonCode', TXMLExemptionReasonCodeType_cbc);
  RegisterChildNode('ExemptionReason', TXMLExemptionReasonType_cbc);
  RegisterChildNode('RegistrationAddress', TXMLAddressType_cac);
  RegisterChildNode('TaxScheme', TXMLTaxSchemeType_cac);
  FExemptionReason := CreateCollection(TXMLExemptionReasonType_cbcList, IXMLExemptionReasonType_cbc, 'ExemptionReason') as IXMLExemptionReasonType_cbcList;
  inherited;
end;

function TXMLPartyTaxSchemeType_cac.Get_RegistrationName: IXMLRegistrationNameType_cbc;
begin
  Result := ChildNodes['RegistrationName'] as IXMLRegistrationNameType_cbc;
end;

function TXMLPartyTaxSchemeType_cac.Get_CompanyID: IXMLCompanyIDType_cbc;
begin
  Result := ChildNodes['CompanyID'] as IXMLCompanyIDType_cbc;
end;

function TXMLPartyTaxSchemeType_cac.Get_TaxLevelCode: IXMLTaxLevelCodeType_cbc;
begin
  Result := ChildNodes['TaxLevelCode'] as IXMLTaxLevelCodeType_cbc;
end;

function TXMLPartyTaxSchemeType_cac.Get_ExemptionReasonCode: IXMLExemptionReasonCodeType_cbc;
begin
  Result := ChildNodes['ExemptionReasonCode'] as IXMLExemptionReasonCodeType_cbc;
end;

function TXMLPartyTaxSchemeType_cac.Get_ExemptionReason: IXMLExemptionReasonType_cbcList;
begin
  Result := FExemptionReason;
end;

function TXMLPartyTaxSchemeType_cac.Get_RegistrationAddress: IXMLAddressType_cac;
begin
  Result := ChildNodes['RegistrationAddress'] as IXMLAddressType_cac;
end;

function TXMLPartyTaxSchemeType_cac.Get_TaxScheme: IXMLTaxSchemeType_cac;
begin
  Result := ChildNodes['TaxScheme'] as IXMLTaxSchemeType_cac;
end;

{ TXMLPartyTaxSchemeType_cacList }

function TXMLPartyTaxSchemeType_cacList.Add: IXMLPartyTaxSchemeType_cac;
begin
  Result := AddItem(-1) as IXMLPartyTaxSchemeType_cac;
end;

function TXMLPartyTaxSchemeType_cacList.Insert(const Index: Integer): IXMLPartyTaxSchemeType_cac;
begin
  Result := AddItem(Index) as IXMLPartyTaxSchemeType_cac;
end;

function TXMLPartyTaxSchemeType_cacList.Get_Item(const Index: Integer): IXMLPartyTaxSchemeType_cac;
begin
  Result := List[Index] as IXMLPartyTaxSchemeType_cac;
end;

{ TXMLRegistrationNameType_cbc }

{ TXMLCompanyIDType_cbc }

{ TXMLTaxLevelCodeType_cbc }

{ TXMLExemptionReasonCodeType_cbc }

{ TXMLExemptionReasonType_cbc }

{ TXMLExemptionReasonType_cbcList }

function TXMLExemptionReasonType_cbcList.Add: IXMLExemptionReasonType_cbc;
begin
  Result := AddItem(-1) as IXMLExemptionReasonType_cbc;
end;

function TXMLExemptionReasonType_cbcList.Insert(const Index: Integer): IXMLExemptionReasonType_cbc;
begin
  Result := AddItem(Index) as IXMLExemptionReasonType_cbc;
end;

function TXMLExemptionReasonType_cbcList.Get_Item(const Index: Integer): IXMLExemptionReasonType_cbc;
begin
  Result := List[Index] as IXMLExemptionReasonType_cbc;
end;

{ TXMLTaxSchemeType_cac }

procedure TXMLTaxSchemeType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('Name', TXMLNameType_cbc);
  RegisterChildNode('TaxTypeCode', TXMLTaxTypeCodeType_cbc);
  RegisterChildNode('CurrencyCode', TXMLCurrencyCodeType_cbc);
  RegisterChildNode('JurisdictionRegionAddress', TXMLAddressType_cac);
  FJurisdictionRegionAddress := CreateCollection(TXMLAddressType_cacList, IXMLAddressType_cac, 'JurisdictionRegionAddress') as IXMLAddressType_cacList;
  inherited;
end;

function TXMLTaxSchemeType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLTaxSchemeType_cac.Get_Name: IXMLNameType_cbc;
begin
  Result := ChildNodes['Name'] as IXMLNameType_cbc;
end;

function TXMLTaxSchemeType_cac.Get_TaxTypeCode: IXMLTaxTypeCodeType_cbc;
begin
  Result := ChildNodes['TaxTypeCode'] as IXMLTaxTypeCodeType_cbc;
end;

function TXMLTaxSchemeType_cac.Get_CurrencyCode: IXMLCurrencyCodeType_cbc;
begin
  Result := ChildNodes['CurrencyCode'] as IXMLCurrencyCodeType_cbc;
end;

function TXMLTaxSchemeType_cac.Get_JurisdictionRegionAddress: IXMLAddressType_cacList;
begin
  Result := FJurisdictionRegionAddress;
end;

{ TXMLTaxTypeCodeType_cbc }

{ TXMLCurrencyCodeType_cbc }

{ TXMLPartyLegalEntityType_cac }

procedure TXMLPartyLegalEntityType_cac.AfterConstruction;
begin
  RegisterChildNode('RegistrationName', TXMLRegistrationNameType_cbc);
  RegisterChildNode('CompanyID', TXMLCompanyIDType_cbc);
  RegisterChildNode('RegistrationDate', TXMLRegistrationDateType_cbc);
  RegisterChildNode('RegistrationExpirationDate', TXMLRegistrationExpirationDateType_cbc);
  RegisterChildNode('CompanyLegalFormCode', TXMLCompanyLegalFormCodeType_cbc);
  RegisterChildNode('CompanyLegalForm', TXMLCompanyLegalFormType_cbc);
  RegisterChildNode('SoleProprietorshipIndicator', TXMLSoleProprietorshipIndicatorType_cbc);
  RegisterChildNode('CompanyLiquidationStatusCode', TXMLCompanyLiquidationStatusCodeType_cbc);
  RegisterChildNode('CorporateStockAmount', TXMLCorporateStockAmountType_cbc);
  RegisterChildNode('FullyPaidSharesIndicator', TXMLFullyPaidSharesIndicatorType_cbc);
  RegisterChildNode('RegistrationAddress', TXMLAddressType_cac);
  RegisterChildNode('CorporateRegistrationScheme', TXMLCorporateRegistrationSchemeType_cac);
  RegisterChildNode('HeadOfficeParty', TXMLPartyType_cac);
  RegisterChildNode('ShareholderParty', TXMLShareholderPartyType_cac);
  FShareholderParty := CreateCollection(TXMLShareholderPartyType_cacList, IXMLShareholderPartyType_cac, 'ShareholderParty') as IXMLShareholderPartyType_cacList;
  inherited;
end;

function TXMLPartyLegalEntityType_cac.Get_RegistrationName: IXMLRegistrationNameType_cbc;
begin
  Result := ChildNodes['RegistrationName'] as IXMLRegistrationNameType_cbc;
end;

function TXMLPartyLegalEntityType_cac.Get_CompanyID: IXMLCompanyIDType_cbc;
begin
  Result := ChildNodes['CompanyID'] as IXMLCompanyIDType_cbc;
end;

function TXMLPartyLegalEntityType_cac.Get_RegistrationDate: IXMLRegistrationDateType_cbc;
begin
  Result := ChildNodes['RegistrationDate'] as IXMLRegistrationDateType_cbc;
end;

function TXMLPartyLegalEntityType_cac.Get_RegistrationExpirationDate: IXMLRegistrationExpirationDateType_cbc;
begin
  Result := ChildNodes['RegistrationExpirationDate'] as IXMLRegistrationExpirationDateType_cbc;
end;

function TXMLPartyLegalEntityType_cac.Get_CompanyLegalFormCode: IXMLCompanyLegalFormCodeType_cbc;
begin
  Result := ChildNodes['CompanyLegalFormCode'] as IXMLCompanyLegalFormCodeType_cbc;
end;

function TXMLPartyLegalEntityType_cac.Get_CompanyLegalForm: IXMLCompanyLegalFormType_cbc;
begin
  Result := ChildNodes['CompanyLegalForm'] as IXMLCompanyLegalFormType_cbc;
end;

function TXMLPartyLegalEntityType_cac.Get_SoleProprietorshipIndicator: IXMLSoleProprietorshipIndicatorType_cbc;
begin
  Result := ChildNodes['SoleProprietorshipIndicator'] as IXMLSoleProprietorshipIndicatorType_cbc;
end;

function TXMLPartyLegalEntityType_cac.Get_CompanyLiquidationStatusCode: IXMLCompanyLiquidationStatusCodeType_cbc;
begin
  Result := ChildNodes['CompanyLiquidationStatusCode'] as IXMLCompanyLiquidationStatusCodeType_cbc;
end;

function TXMLPartyLegalEntityType_cac.Get_CorporateStockAmount: IXMLCorporateStockAmountType_cbc;
begin
  Result := ChildNodes['CorporateStockAmount'] as IXMLCorporateStockAmountType_cbc;
end;

function TXMLPartyLegalEntityType_cac.Get_FullyPaidSharesIndicator: IXMLFullyPaidSharesIndicatorType_cbc;
begin
  Result := ChildNodes['FullyPaidSharesIndicator'] as IXMLFullyPaidSharesIndicatorType_cbc;
end;

function TXMLPartyLegalEntityType_cac.Get_RegistrationAddress: IXMLAddressType_cac;
begin
  Result := ChildNodes['RegistrationAddress'] as IXMLAddressType_cac;
end;

function TXMLPartyLegalEntityType_cac.Get_CorporateRegistrationScheme: IXMLCorporateRegistrationSchemeType_cac;
begin
  Result := ChildNodes['CorporateRegistrationScheme'] as IXMLCorporateRegistrationSchemeType_cac;
end;

function TXMLPartyLegalEntityType_cac.Get_HeadOfficeParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['HeadOfficeParty'] as IXMLPartyType_cac;
end;

function TXMLPartyLegalEntityType_cac.Get_ShareholderParty: IXMLShareholderPartyType_cacList;
begin
  Result := FShareholderParty;
end;

{ TXMLPartyLegalEntityType_cacList }

function TXMLPartyLegalEntityType_cacList.Add: IXMLPartyLegalEntityType_cac;
begin
  Result := AddItem(-1) as IXMLPartyLegalEntityType_cac;
end;

function TXMLPartyLegalEntityType_cacList.Insert(const Index: Integer): IXMLPartyLegalEntityType_cac;
begin
  Result := AddItem(Index) as IXMLPartyLegalEntityType_cac;
end;

function TXMLPartyLegalEntityType_cacList.Get_Item(const Index: Integer): IXMLPartyLegalEntityType_cac;
begin
  Result := List[Index] as IXMLPartyLegalEntityType_cac;
end;

{ TXMLRegistrationDateType_cbc }

{ TXMLRegistrationExpirationDateType_cbc }

{ TXMLCompanyLegalFormCodeType_cbc }

{ TXMLCompanyLegalFormType_cbc }

{ TXMLSoleProprietorshipIndicatorType_cbc }

{ TXMLCompanyLiquidationStatusCodeType_cbc }

{ TXMLCorporateStockAmountType_cbc }

{ TXMLFullyPaidSharesIndicatorType_cbc }

{ TXMLCorporateRegistrationSchemeType_cac }

procedure TXMLCorporateRegistrationSchemeType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('Name', TXMLNameType_cbc);
  RegisterChildNode('CorporateRegistrationTypeCode', TXMLCorporateRegistrationTypeCodeType_cbc);
  RegisterChildNode('JurisdictionRegionAddress', TXMLAddressType_cac);
  FJurisdictionRegionAddress := CreateCollection(TXMLAddressType_cacList, IXMLAddressType_cac, 'JurisdictionRegionAddress') as IXMLAddressType_cacList;
  inherited;
end;

function TXMLCorporateRegistrationSchemeType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLCorporateRegistrationSchemeType_cac.Get_Name: IXMLNameType_cbc;
begin
  Result := ChildNodes['Name'] as IXMLNameType_cbc;
end;

function TXMLCorporateRegistrationSchemeType_cac.Get_CorporateRegistrationTypeCode: IXMLCorporateRegistrationTypeCodeType_cbc;
begin
  Result := ChildNodes['CorporateRegistrationTypeCode'] as IXMLCorporateRegistrationTypeCodeType_cbc;
end;

function TXMLCorporateRegistrationSchemeType_cac.Get_JurisdictionRegionAddress: IXMLAddressType_cacList;
begin
  Result := FJurisdictionRegionAddress;
end;

{ TXMLCorporateRegistrationTypeCodeType_cbc }

{ TXMLShareholderPartyType_cac }

procedure TXMLShareholderPartyType_cac.AfterConstruction;
begin
  RegisterChildNode('PartecipationPercent', TXMLPartecipationPercentType_cbc);
  RegisterChildNode('Party', TXMLPartyType_cac);
  inherited;
end;

function TXMLShareholderPartyType_cac.Get_PartecipationPercent: IXMLPartecipationPercentType_cbc;
begin
  Result := ChildNodes['PartecipationPercent'] as IXMLPartecipationPercentType_cbc;
end;

function TXMLShareholderPartyType_cac.Get_Party: IXMLPartyType_cac;
begin
  Result := ChildNodes['Party'] as IXMLPartyType_cac;
end;

{ TXMLShareholderPartyType_cacList }

function TXMLShareholderPartyType_cacList.Add: IXMLShareholderPartyType_cac;
begin
  Result := AddItem(-1) as IXMLShareholderPartyType_cac;
end;

function TXMLShareholderPartyType_cacList.Insert(const Index: Integer): IXMLShareholderPartyType_cac;
begin
  Result := AddItem(Index) as IXMLShareholderPartyType_cac;
end;

function TXMLShareholderPartyType_cacList.Get_Item(const Index: Integer): IXMLShareholderPartyType_cac;
begin
  Result := List[Index] as IXMLShareholderPartyType_cac;
end;

{ TXMLPartecipationPercentType_cbc }

{ TXMLContactType_cac }

procedure TXMLContactType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('Name', TXMLNameType_cbc);
  RegisterChildNode('Telephone', TXMLTelephoneType_cbc);
  RegisterChildNode('Telefax', TXMLTelefaxType_cbc);
  RegisterChildNode('ElectronicMail', TXMLElectronicMailType_cbc);
  RegisterChildNode('Note', TXMLNoteType_cbc);
  RegisterChildNode('OtherCommunication', TXMLCommunicationType_cac);
  FNote := CreateCollection(TXMLNoteType_cbcList, IXMLNoteType_cbc, 'Note') as IXMLNoteType_cbcList;
  FOtherCommunication := CreateCollection(TXMLCommunicationType_cacList, IXMLCommunicationType_cac, 'OtherCommunication') as IXMLCommunicationType_cacList;
  inherited;
end;

function TXMLContactType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLContactType_cac.Get_Name: IXMLNameType_cbc;
begin
  Result := ChildNodes['Name'] as IXMLNameType_cbc;
end;

function TXMLContactType_cac.Get_Telephone: IXMLTelephoneType_cbc;
begin
  Result := ChildNodes['Telephone'] as IXMLTelephoneType_cbc;
end;

function TXMLContactType_cac.Get_Telefax: IXMLTelefaxType_cbc;
begin
  Result := ChildNodes['Telefax'] as IXMLTelefaxType_cbc;
end;

function TXMLContactType_cac.Get_ElectronicMail: IXMLElectronicMailType_cbc;
begin
  Result := ChildNodes['ElectronicMail'] as IXMLElectronicMailType_cbc;
end;

function TXMLContactType_cac.Get_Note: IXMLNoteType_cbcList;
begin
  Result := FNote;
end;

function TXMLContactType_cac.Get_OtherCommunication: IXMLCommunicationType_cacList;
begin
  Result := FOtherCommunication;
end;

{ TXMLContactType_cacList }

function TXMLContactType_cacList.Add: IXMLContactType_cac;
begin
  Result := AddItem(-1) as IXMLContactType_cac;
end;

function TXMLContactType_cacList.Insert(const Index: Integer): IXMLContactType_cac;
begin
  Result := AddItem(Index) as IXMLContactType_cac;
end;

function TXMLContactType_cacList.Get_Item(const Index: Integer): IXMLContactType_cac;
begin
  Result := List[Index] as IXMLContactType_cac;
end;

{ TXMLTelephoneType_cbc }

{ TXMLTelefaxType_cbc }

{ TXMLElectronicMailType_cbc }

{ TXMLCommunicationType_cac }

procedure TXMLCommunicationType_cac.AfterConstruction;
begin
  RegisterChildNode('ChannelCode', TXMLChannelCodeType_cbc);
  RegisterChildNode('Channel', TXMLChannelType_cbc);
  RegisterChildNode('Value', TXMLValueType_cbc);
  inherited;
end;

function TXMLCommunicationType_cac.Get_ChannelCode: IXMLChannelCodeType_cbc;
begin
  Result := ChildNodes['ChannelCode'] as IXMLChannelCodeType_cbc;
end;

function TXMLCommunicationType_cac.Get_Channel: IXMLChannelType_cbc;
begin
  Result := ChildNodes['Channel'] as IXMLChannelType_cbc;
end;

function TXMLCommunicationType_cac.Get_Value: IXMLValueType_cbc;
begin
  Result := ChildNodes['Value'] as IXMLValueType_cbc;
end;

{ TXMLCommunicationType_cacList }

function TXMLCommunicationType_cacList.Add: IXMLCommunicationType_cac;
begin
  Result := AddItem(-1) as IXMLCommunicationType_cac;
end;

function TXMLCommunicationType_cacList.Insert(const Index: Integer): IXMLCommunicationType_cac;
begin
  Result := AddItem(Index) as IXMLCommunicationType_cac;
end;

function TXMLCommunicationType_cacList.Get_Item(const Index: Integer): IXMLCommunicationType_cac;
begin
  Result := List[Index] as IXMLCommunicationType_cac;
end;

{ TXMLChannelCodeType_cbc }

{ TXMLChannelType_cbc }

{ TXMLValueType_cbc }

{ TXMLPersonType_cac }

procedure TXMLPersonType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('FirstName', TXMLFirstNameType_cbc);
  RegisterChildNode('FamilyName', TXMLFamilyNameType_cbc);
  RegisterChildNode('Title', TXMLTitleType_cbc);
  RegisterChildNode('MiddleName', TXMLMiddleNameType_cbc);
  RegisterChildNode('OtherName', TXMLOtherNameType_cbc);
  RegisterChildNode('NameSuffix', TXMLNameSuffixType_cbc);
  RegisterChildNode('JobTitle', TXMLJobTitleType_cbc);
  RegisterChildNode('NationalityID', TXMLNationalityIDType_cbc);
  RegisterChildNode('GenderCode', TXMLGenderCodeType_cbc);
  RegisterChildNode('BirthDate', TXMLBirthDateType_cbc);
  RegisterChildNode('BirthplaceName', TXMLBirthplaceNameType_cbc);
  RegisterChildNode('OrganizationDepartment', TXMLOrganizationDepartmentType_cbc);
  RegisterChildNode('Contact', TXMLContactType_cac);
  RegisterChildNode('FinancialAccount', TXMLFinancialAccountType_cac);
  RegisterChildNode('IdentityDocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('ResidenceAddress', TXMLAddressType_cac);
  FIdentityDocumentReference := CreateCollection(TXMLDocumentReferenceType_cacList, IXMLDocumentReferenceType_cac, 'IdentityDocumentReference') as IXMLDocumentReferenceType_cacList;
  inherited;
end;

function TXMLPersonType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLPersonType_cac.Get_FirstName: IXMLFirstNameType_cbc;
begin
  Result := ChildNodes['FirstName'] as IXMLFirstNameType_cbc;
end;

function TXMLPersonType_cac.Get_FamilyName: IXMLFamilyNameType_cbc;
begin
  Result := ChildNodes['FamilyName'] as IXMLFamilyNameType_cbc;
end;

function TXMLPersonType_cac.Get_Title: IXMLTitleType_cbc;
begin
  Result := ChildNodes['Title'] as IXMLTitleType_cbc;
end;

function TXMLPersonType_cac.Get_MiddleName: IXMLMiddleNameType_cbc;
begin
  Result := ChildNodes['MiddleName'] as IXMLMiddleNameType_cbc;
end;

function TXMLPersonType_cac.Get_OtherName: IXMLOtherNameType_cbc;
begin
  Result := ChildNodes['OtherName'] as IXMLOtherNameType_cbc;
end;

function TXMLPersonType_cac.Get_NameSuffix: IXMLNameSuffixType_cbc;
begin
  Result := ChildNodes['NameSuffix'] as IXMLNameSuffixType_cbc;
end;

function TXMLPersonType_cac.Get_JobTitle: IXMLJobTitleType_cbc;
begin
  Result := ChildNodes['JobTitle'] as IXMLJobTitleType_cbc;
end;

function TXMLPersonType_cac.Get_NationalityID: IXMLNationalityIDType_cbc;
begin
  Result := ChildNodes['NationalityID'] as IXMLNationalityIDType_cbc;
end;

function TXMLPersonType_cac.Get_GenderCode: IXMLGenderCodeType_cbc;
begin
  Result := ChildNodes['GenderCode'] as IXMLGenderCodeType_cbc;
end;

function TXMLPersonType_cac.Get_BirthDate: IXMLBirthDateType_cbc;
begin
  Result := ChildNodes['BirthDate'] as IXMLBirthDateType_cbc;
end;

function TXMLPersonType_cac.Get_BirthplaceName: IXMLBirthplaceNameType_cbc;
begin
  Result := ChildNodes['BirthplaceName'] as IXMLBirthplaceNameType_cbc;
end;

function TXMLPersonType_cac.Get_OrganizationDepartment: IXMLOrganizationDepartmentType_cbc;
begin
  Result := ChildNodes['OrganizationDepartment'] as IXMLOrganizationDepartmentType_cbc;
end;

function TXMLPersonType_cac.Get_Contact: IXMLContactType_cac;
begin
  Result := ChildNodes['Contact'] as IXMLContactType_cac;
end;

function TXMLPersonType_cac.Get_FinancialAccount: IXMLFinancialAccountType_cac;
begin
  Result := ChildNodes['FinancialAccount'] as IXMLFinancialAccountType_cac;
end;

function TXMLPersonType_cac.Get_IdentityDocumentReference: IXMLDocumentReferenceType_cacList;
begin
  Result := FIdentityDocumentReference;
end;

function TXMLPersonType_cac.Get_ResidenceAddress: IXMLAddressType_cac;
begin
  Result := ChildNodes['ResidenceAddress'] as IXMLAddressType_cac;
end;

{ TXMLPersonType_cacList }

function TXMLPersonType_cacList.Add: IXMLPersonType_cac;
begin
  Result := AddItem(-1) as IXMLPersonType_cac;
end;

function TXMLPersonType_cacList.Insert(const Index: Integer): IXMLPersonType_cac;
begin
  Result := AddItem(Index) as IXMLPersonType_cac;
end;

function TXMLPersonType_cacList.Get_Item(const Index: Integer): IXMLPersonType_cac;
begin
  Result := List[Index] as IXMLPersonType_cac;
end;

{ TXMLFirstNameType_cbc }

{ TXMLFamilyNameType_cbc }

{ TXMLTitleType_cbc }

{ TXMLMiddleNameType_cbc }

{ TXMLOtherNameType_cbc }

{ TXMLNameSuffixType_cbc }

{ TXMLJobTitleType_cbc }

{ TXMLNationalityIDType_cbc }

{ TXMLGenderCodeType_cbc }

{ TXMLBirthDateType_cbc }

{ TXMLBirthplaceNameType_cbc }

{ TXMLOrganizationDepartmentType_cbc }

{ TXMLFinancialAccountType_cac }

procedure TXMLFinancialAccountType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('Name', TXMLNameType_cbc);
  RegisterChildNode('AliasName', TXMLAliasNameType_cbc);
  RegisterChildNode('AccountTypeCode', TXMLAccountTypeCodeType_cbc);
  RegisterChildNode('AccountFormatCode', TXMLAccountFormatCodeType_cbc);
  RegisterChildNode('CurrencyCode', TXMLCurrencyCodeType_cbc);
  RegisterChildNode('PaymentNote', TXMLPaymentNoteType_cbc);
  RegisterChildNode('FinancialInstitutionBranch', TXMLBranchType_cac);
  RegisterChildNode('Country', TXMLCountryType_cac);
  FPaymentNote := CreateCollection(TXMLPaymentNoteType_cbcList, IXMLPaymentNoteType_cbc, 'PaymentNote') as IXMLPaymentNoteType_cbcList;
  inherited;
end;

function TXMLFinancialAccountType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLFinancialAccountType_cac.Get_Name: IXMLNameType_cbc;
begin
  Result := ChildNodes['Name'] as IXMLNameType_cbc;
end;

function TXMLFinancialAccountType_cac.Get_AliasName: IXMLAliasNameType_cbc;
begin
  Result := ChildNodes['AliasName'] as IXMLAliasNameType_cbc;
end;

function TXMLFinancialAccountType_cac.Get_AccountTypeCode: IXMLAccountTypeCodeType_cbc;
begin
  Result := ChildNodes['AccountTypeCode'] as IXMLAccountTypeCodeType_cbc;
end;

function TXMLFinancialAccountType_cac.Get_AccountFormatCode: IXMLAccountFormatCodeType_cbc;
begin
  Result := ChildNodes['AccountFormatCode'] as IXMLAccountFormatCodeType_cbc;
end;

function TXMLFinancialAccountType_cac.Get_CurrencyCode: IXMLCurrencyCodeType_cbc;
begin
  Result := ChildNodes['CurrencyCode'] as IXMLCurrencyCodeType_cbc;
end;

function TXMLFinancialAccountType_cac.Get_PaymentNote: IXMLPaymentNoteType_cbcList;
begin
  Result := FPaymentNote;
end;

function TXMLFinancialAccountType_cac.Get_FinancialInstitutionBranch: IXMLBranchType_cac;
begin
  Result := ChildNodes['FinancialInstitutionBranch'] as IXMLBranchType_cac;
end;

function TXMLFinancialAccountType_cac.Get_Country: IXMLCountryType_cac;
begin
  Result := ChildNodes['Country'] as IXMLCountryType_cac;
end;

{ TXMLAliasNameType_cbc }

{ TXMLAccountTypeCodeType_cbc }

{ TXMLAccountFormatCodeType_cbc }

{ TXMLPaymentNoteType_cbc }

{ TXMLPaymentNoteType_cbcList }

function TXMLPaymentNoteType_cbcList.Add: IXMLPaymentNoteType_cbc;
begin
  Result := AddItem(-1) as IXMLPaymentNoteType_cbc;
end;

function TXMLPaymentNoteType_cbcList.Insert(const Index: Integer): IXMLPaymentNoteType_cbc;
begin
  Result := AddItem(Index) as IXMLPaymentNoteType_cbc;
end;

function TXMLPaymentNoteType_cbcList.Get_Item(const Index: Integer): IXMLPaymentNoteType_cbc;
begin
  Result := List[Index] as IXMLPaymentNoteType_cbc;
end;

{ TXMLBranchType_cac }

procedure TXMLBranchType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('Name', TXMLNameType_cbc);
  RegisterChildNode('FinancialInstitution', TXMLFinancialInstitutionType_cac);
  RegisterChildNode('Address', TXMLAddressType_cac);
  inherited;
end;

function TXMLBranchType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLBranchType_cac.Get_Name: IXMLNameType_cbc;
begin
  Result := ChildNodes['Name'] as IXMLNameType_cbc;
end;

function TXMLBranchType_cac.Get_FinancialInstitution: IXMLFinancialInstitutionType_cac;
begin
  Result := ChildNodes['FinancialInstitution'] as IXMLFinancialInstitutionType_cac;
end;

function TXMLBranchType_cac.Get_Address: IXMLAddressType_cac;
begin
  Result := ChildNodes['Address'] as IXMLAddressType_cac;
end;

{ TXMLFinancialInstitutionType_cac }

procedure TXMLFinancialInstitutionType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('Name', TXMLNameType_cbc);
  RegisterChildNode('Address', TXMLAddressType_cac);
  inherited;
end;

function TXMLFinancialInstitutionType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLFinancialInstitutionType_cac.Get_Name: IXMLNameType_cbc;
begin
  Result := ChildNodes['Name'] as IXMLNameType_cbc;
end;

function TXMLFinancialInstitutionType_cac.Get_Address: IXMLAddressType_cac;
begin
  Result := ChildNodes['Address'] as IXMLAddressType_cac;
end;

{ TXMLServiceProviderPartyType_cac }

procedure TXMLServiceProviderPartyType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('ServiceTypeCode', TXMLServiceTypeCodeType_cbc);
  RegisterChildNode('ServiceType', TXMLServiceTypeType_cbc);
  RegisterChildNode('Party', TXMLPartyType_cac);
  RegisterChildNode('SellerContact', TXMLContactType_cac);
  FServiceType := CreateCollection(TXMLServiceTypeType_cbcList, IXMLServiceTypeType_cbc, 'ServiceType') as IXMLServiceTypeType_cbcList;
  inherited;
end;

function TXMLServiceProviderPartyType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLServiceProviderPartyType_cac.Get_ServiceTypeCode: IXMLServiceTypeCodeType_cbc;
begin
  Result := ChildNodes['ServiceTypeCode'] as IXMLServiceTypeCodeType_cbc;
end;

function TXMLServiceProviderPartyType_cac.Get_ServiceType: IXMLServiceTypeType_cbcList;
begin
  Result := FServiceType;
end;

function TXMLServiceProviderPartyType_cac.Get_Party: IXMLPartyType_cac;
begin
  Result := ChildNodes['Party'] as IXMLPartyType_cac;
end;

function TXMLServiceProviderPartyType_cac.Get_SellerContact: IXMLContactType_cac;
begin
  Result := ChildNodes['SellerContact'] as IXMLContactType_cac;
end;

{ TXMLServiceProviderPartyType_cacList }

function TXMLServiceProviderPartyType_cacList.Add: IXMLServiceProviderPartyType_cac;
begin
  Result := AddItem(-1) as IXMLServiceProviderPartyType_cac;
end;

function TXMLServiceProviderPartyType_cacList.Insert(const Index: Integer): IXMLServiceProviderPartyType_cac;
begin
  Result := AddItem(Index) as IXMLServiceProviderPartyType_cac;
end;

function TXMLServiceProviderPartyType_cacList.Get_Item(const Index: Integer): IXMLServiceProviderPartyType_cac;
begin
  Result := List[Index] as IXMLServiceProviderPartyType_cac;
end;

{ TXMLServiceTypeCodeType_cbc }

{ TXMLServiceTypeType_cbc }

{ TXMLServiceTypeType_cbcList }

function TXMLServiceTypeType_cbcList.Add: IXMLServiceTypeType_cbc;
begin
  Result := AddItem(-1) as IXMLServiceTypeType_cbc;
end;

function TXMLServiceTypeType_cbcList.Insert(const Index: Integer): IXMLServiceTypeType_cbc;
begin
  Result := AddItem(Index) as IXMLServiceTypeType_cbc;
end;

function TXMLServiceTypeType_cbcList.Get_Item(const Index: Integer): IXMLServiceTypeType_cbc;
begin
  Result := List[Index] as IXMLServiceTypeType_cbc;
end;

{ TXMLPowerOfAttorneyType_cac }

procedure TXMLPowerOfAttorneyType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('IssueDate', TXMLIssueDateType_cbc);
  RegisterChildNode('IssueTime', TXMLIssueTimeType_cbc);
  RegisterChildNode('Description', TXMLDescriptionType_cbc);
  RegisterChildNode('NotaryParty', TXMLPartyType_cac);
  RegisterChildNode('AgentParty', TXMLPartyType_cac);
  RegisterChildNode('WitnessParty', TXMLPartyType_cac);
  RegisterChildNode('MandateDocumentReference', TXMLDocumentReferenceType_cac);
  FDescription := CreateCollection(TXMLDescriptionType_cbcList, IXMLDescriptionType_cbc, 'Description') as IXMLDescriptionType_cbcList;
  FWitnessParty := CreateCollection(TXMLPartyType_cacList, IXMLPartyType_cac, 'WitnessParty') as IXMLPartyType_cacList;
  FMandateDocumentReference := CreateCollection(TXMLDocumentReferenceType_cacList, IXMLDocumentReferenceType_cac, 'MandateDocumentReference') as IXMLDocumentReferenceType_cacList;
  inherited;
end;

function TXMLPowerOfAttorneyType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLPowerOfAttorneyType_cac.Get_IssueDate: IXMLIssueDateType_cbc;
begin
  Result := ChildNodes['IssueDate'] as IXMLIssueDateType_cbc;
end;

function TXMLPowerOfAttorneyType_cac.Get_IssueTime: IXMLIssueTimeType_cbc;
begin
  Result := ChildNodes['IssueTime'] as IXMLIssueTimeType_cbc;
end;

function TXMLPowerOfAttorneyType_cac.Get_Description: IXMLDescriptionType_cbcList;
begin
  Result := FDescription;
end;

function TXMLPowerOfAttorneyType_cac.Get_NotaryParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['NotaryParty'] as IXMLPartyType_cac;
end;

function TXMLPowerOfAttorneyType_cac.Get_AgentParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['AgentParty'] as IXMLPartyType_cac;
end;

function TXMLPowerOfAttorneyType_cac.Get_WitnessParty: IXMLPartyType_cacList;
begin
  Result := FWitnessParty;
end;

function TXMLPowerOfAttorneyType_cac.Get_MandateDocumentReference: IXMLDocumentReferenceType_cacList;
begin
  Result := FMandateDocumentReference;
end;

{ TXMLPowerOfAttorneyType_cacList }

function TXMLPowerOfAttorneyType_cacList.Add: IXMLPowerOfAttorneyType_cac;
begin
  Result := AddItem(-1) as IXMLPowerOfAttorneyType_cac;
end;

function TXMLPowerOfAttorneyType_cacList.Insert(const Index: Integer): IXMLPowerOfAttorneyType_cac;
begin
  Result := AddItem(Index) as IXMLPowerOfAttorneyType_cac;
end;

function TXMLPowerOfAttorneyType_cacList.Get_Item(const Index: Integer): IXMLPowerOfAttorneyType_cac;
begin
  Result := List[Index] as IXMLPowerOfAttorneyType_cac;
end;

{ TXMLResultOfVerificationType_cac }

procedure TXMLResultOfVerificationType_cac.AfterConstruction;
begin
  RegisterChildNode('ValidatorID', TXMLValidatorIDType_cbc);
  RegisterChildNode('ValidationResultCode', TXMLValidationResultCodeType_cbc);
  RegisterChildNode('ValidationDate', TXMLValidationDateType_cbc);
  RegisterChildNode('ValidationTime', TXMLValidationTimeType_cbc);
  RegisterChildNode('ValidateProcess', TXMLValidateProcessType_cbc);
  RegisterChildNode('ValidateTool', TXMLValidateToolType_cbc);
  RegisterChildNode('ValidateToolVersion', TXMLValidateToolVersionType_cbc);
  RegisterChildNode('SignatoryParty', TXMLPartyType_cac);
  inherited;
end;

function TXMLResultOfVerificationType_cac.Get_ValidatorID: IXMLValidatorIDType_cbc;
begin
  Result := ChildNodes['ValidatorID'] as IXMLValidatorIDType_cbc;
end;

function TXMLResultOfVerificationType_cac.Get_ValidationResultCode: IXMLValidationResultCodeType_cbc;
begin
  Result := ChildNodes['ValidationResultCode'] as IXMLValidationResultCodeType_cbc;
end;

function TXMLResultOfVerificationType_cac.Get_ValidationDate: IXMLValidationDateType_cbc;
begin
  Result := ChildNodes['ValidationDate'] as IXMLValidationDateType_cbc;
end;

function TXMLResultOfVerificationType_cac.Get_ValidationTime: IXMLValidationTimeType_cbc;
begin
  Result := ChildNodes['ValidationTime'] as IXMLValidationTimeType_cbc;
end;

function TXMLResultOfVerificationType_cac.Get_ValidateProcess: IXMLValidateProcessType_cbc;
begin
  Result := ChildNodes['ValidateProcess'] as IXMLValidateProcessType_cbc;
end;

function TXMLResultOfVerificationType_cac.Get_ValidateTool: IXMLValidateToolType_cbc;
begin
  Result := ChildNodes['ValidateTool'] as IXMLValidateToolType_cbc;
end;

function TXMLResultOfVerificationType_cac.Get_ValidateToolVersion: IXMLValidateToolVersionType_cbc;
begin
  Result := ChildNodes['ValidateToolVersion'] as IXMLValidateToolVersionType_cbc;
end;

function TXMLResultOfVerificationType_cac.Get_SignatoryParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['SignatoryParty'] as IXMLPartyType_cac;
end;

{ TXMLValidatorIDType_cbc }

{ TXMLValidationResultCodeType_cbc }

{ TXMLValidationDateType_cbc }

{ TXMLValidationTimeType_cbc }

{ TXMLValidateProcessType_cbc }

{ TXMLValidateToolType_cbc }

{ TXMLValidateToolVersionType_cbc }

{ TXMLBillingReferenceType_cac }

procedure TXMLBillingReferenceType_cac.AfterConstruction;
begin
  RegisterChildNode('InvoiceDocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('SelfBilledInvoiceDocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('CreditNoteDocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('SelfBilledCreditNoteDocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('DebitNoteDocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('ReminderDocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('AdditionalDocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('BillingReferenceLine', TXMLBillingReferenceLineType_cac);
  FBillingReferenceLine := CreateCollection(TXMLBillingReferenceLineType_cacList, IXMLBillingReferenceLineType_cac, 'BillingReferenceLine') as IXMLBillingReferenceLineType_cacList;
  inherited;
end;

function TXMLBillingReferenceType_cac.Get_InvoiceDocumentReference: IXMLDocumentReferenceType_cac;
begin
  Result := ChildNodes['InvoiceDocumentReference'] as IXMLDocumentReferenceType_cac;
end;

function TXMLBillingReferenceType_cac.Get_SelfBilledInvoiceDocumentReference: IXMLDocumentReferenceType_cac;
begin
  Result := ChildNodes['SelfBilledInvoiceDocumentReference'] as IXMLDocumentReferenceType_cac;
end;

function TXMLBillingReferenceType_cac.Get_CreditNoteDocumentReference: IXMLDocumentReferenceType_cac;
begin
  Result := ChildNodes['CreditNoteDocumentReference'] as IXMLDocumentReferenceType_cac;
end;

function TXMLBillingReferenceType_cac.Get_SelfBilledCreditNoteDocumentReference: IXMLDocumentReferenceType_cac;
begin
  Result := ChildNodes['SelfBilledCreditNoteDocumentReference'] as IXMLDocumentReferenceType_cac;
end;

function TXMLBillingReferenceType_cac.Get_DebitNoteDocumentReference: IXMLDocumentReferenceType_cac;
begin
  Result := ChildNodes['DebitNoteDocumentReference'] as IXMLDocumentReferenceType_cac;
end;

function TXMLBillingReferenceType_cac.Get_ReminderDocumentReference: IXMLDocumentReferenceType_cac;
begin
  Result := ChildNodes['ReminderDocumentReference'] as IXMLDocumentReferenceType_cac;
end;

function TXMLBillingReferenceType_cac.Get_AdditionalDocumentReference: IXMLDocumentReferenceType_cac;
begin
  Result := ChildNodes['AdditionalDocumentReference'] as IXMLDocumentReferenceType_cac;
end;

function TXMLBillingReferenceType_cac.Get_BillingReferenceLine: IXMLBillingReferenceLineType_cacList;
begin
  Result := FBillingReferenceLine;
end;

{ TXMLBillingReferenceType_cacList }

function TXMLBillingReferenceType_cacList.Add: IXMLBillingReferenceType_cac;
begin
  Result := AddItem(-1) as IXMLBillingReferenceType_cac;
end;

function TXMLBillingReferenceType_cacList.Insert(const Index: Integer): IXMLBillingReferenceType_cac;
begin
  Result := AddItem(Index) as IXMLBillingReferenceType_cac;
end;

function TXMLBillingReferenceType_cacList.Get_Item(const Index: Integer): IXMLBillingReferenceType_cac;
begin
  Result := List[Index] as IXMLBillingReferenceType_cac;
end;

{ TXMLBillingReferenceLineType_cac }

procedure TXMLBillingReferenceLineType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('Amount', TXMLAmountType_cbc);
  RegisterChildNode('AllowanceCharge', TXMLAllowanceChargeType_cac);
  FAllowanceCharge := CreateCollection(TXMLAllowanceChargeType_cacList, IXMLAllowanceChargeType_cac, 'AllowanceCharge') as IXMLAllowanceChargeType_cacList;
  inherited;
end;

function TXMLBillingReferenceLineType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLBillingReferenceLineType_cac.Get_Amount: IXMLAmountType_cbc;
begin
  Result := ChildNodes['Amount'] as IXMLAmountType_cbc;
end;

function TXMLBillingReferenceLineType_cac.Get_AllowanceCharge: IXMLAllowanceChargeType_cacList;
begin
  Result := FAllowanceCharge;
end;

{ TXMLBillingReferenceLineType_cacList }

function TXMLBillingReferenceLineType_cacList.Add: IXMLBillingReferenceLineType_cac;
begin
  Result := AddItem(-1) as IXMLBillingReferenceLineType_cac;
end;

function TXMLBillingReferenceLineType_cacList.Insert(const Index: Integer): IXMLBillingReferenceLineType_cac;
begin
  Result := AddItem(Index) as IXMLBillingReferenceLineType_cac;
end;

function TXMLBillingReferenceLineType_cacList.Get_Item(const Index: Integer): IXMLBillingReferenceLineType_cac;
begin
  Result := List[Index] as IXMLBillingReferenceLineType_cac;
end;

{ TXMLAmountType_cbc }

{ TXMLAllowanceChargeType_cac }

procedure TXMLAllowanceChargeType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('ChargeIndicator', TXMLChargeIndicatorType_cbc);
  RegisterChildNode('AllowanceChargeReasonCode', TXMLAllowanceChargeReasonCodeType_cbc);
  RegisterChildNode('AllowanceChargeReason', TXMLAllowanceChargeReasonType_cbc);
  RegisterChildNode('MultiplierFactorNumeric', TXMLMultiplierFactorNumericType_cbc);
  RegisterChildNode('PrepaidIndicator', TXMLPrepaidIndicatorType_cbc);
  RegisterChildNode('SequenceNumeric', TXMLSequenceNumericType_cbc);
  RegisterChildNode('Amount', TXMLAmountType_cbc);
  RegisterChildNode('BaseAmount', TXMLBaseAmountType_cbc);
  RegisterChildNode('AccountingCostCode', TXMLAccountingCostCodeType_cbc);
  RegisterChildNode('AccountingCost', TXMLAccountingCostType_cbc);
  RegisterChildNode('PerUnitAmount', TXMLPerUnitAmountType_cbc);
  RegisterChildNode('TaxCategory', TXMLTaxCategoryType_cac);
  RegisterChildNode('TaxTotal', TXMLTaxTotalType_cac);
  RegisterChildNode('PaymentMeans', TXMLPaymentMeansType_cac);
  FAllowanceChargeReason := CreateCollection(TXMLAllowanceChargeReasonType_cbcList, IXMLAllowanceChargeReasonType_cbc, 'AllowanceChargeReason') as IXMLAllowanceChargeReasonType_cbcList;
  FTaxCategory := CreateCollection(TXMLTaxCategoryType_cacList, IXMLTaxCategoryType_cac, 'TaxCategory') as IXMLTaxCategoryType_cacList;
  FPaymentMeans := CreateCollection(TXMLPaymentMeansType_cacList, IXMLPaymentMeansType_cac, 'PaymentMeans') as IXMLPaymentMeansType_cacList;
  inherited;
end;

function TXMLAllowanceChargeType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLAllowanceChargeType_cac.Get_ChargeIndicator: IXMLChargeIndicatorType_cbc;
begin
  Result := ChildNodes['ChargeIndicator'] as IXMLChargeIndicatorType_cbc;
end;

function TXMLAllowanceChargeType_cac.Get_AllowanceChargeReasonCode: IXMLAllowanceChargeReasonCodeType_cbc;
begin
  Result := ChildNodes['AllowanceChargeReasonCode'] as IXMLAllowanceChargeReasonCodeType_cbc;
end;

function TXMLAllowanceChargeType_cac.Get_AllowanceChargeReason: IXMLAllowanceChargeReasonType_cbcList;
begin
  Result := FAllowanceChargeReason;
end;

function TXMLAllowanceChargeType_cac.Get_MultiplierFactorNumeric: IXMLMultiplierFactorNumericType_cbc;
begin
  Result := ChildNodes['MultiplierFactorNumeric'] as IXMLMultiplierFactorNumericType_cbc;
end;

function TXMLAllowanceChargeType_cac.Get_PrepaidIndicator: IXMLPrepaidIndicatorType_cbc;
begin
  Result := ChildNodes['PrepaidIndicator'] as IXMLPrepaidIndicatorType_cbc;
end;

function TXMLAllowanceChargeType_cac.Get_SequenceNumeric: IXMLSequenceNumericType_cbc;
begin
  Result := ChildNodes['SequenceNumeric'] as IXMLSequenceNumericType_cbc;
end;

function TXMLAllowanceChargeType_cac.Get_Amount: IXMLAmountType_cbc;
begin
  Result := ChildNodes['Amount'] as IXMLAmountType_cbc;
end;

function TXMLAllowanceChargeType_cac.Get_BaseAmount: IXMLBaseAmountType_cbc;
begin
  Result := ChildNodes['BaseAmount'] as IXMLBaseAmountType_cbc;
end;

function TXMLAllowanceChargeType_cac.Get_AccountingCostCode: IXMLAccountingCostCodeType_cbc;
begin
  Result := ChildNodes['AccountingCostCode'] as IXMLAccountingCostCodeType_cbc;
end;

function TXMLAllowanceChargeType_cac.Get_AccountingCost: IXMLAccountingCostType_cbc;
begin
  Result := ChildNodes['AccountingCost'] as IXMLAccountingCostType_cbc;
end;

function TXMLAllowanceChargeType_cac.Get_PerUnitAmount: IXMLPerUnitAmountType_cbc;
begin
  Result := ChildNodes['PerUnitAmount'] as IXMLPerUnitAmountType_cbc;
end;

function TXMLAllowanceChargeType_cac.Get_TaxCategory: IXMLTaxCategoryType_cacList;
begin
  Result := FTaxCategory;
end;

function TXMLAllowanceChargeType_cac.Get_TaxTotal: IXMLTaxTotalType_cac;
begin
  Result := ChildNodes['TaxTotal'] as IXMLTaxTotalType_cac;
end;

function TXMLAllowanceChargeType_cac.Get_PaymentMeans: IXMLPaymentMeansType_cacList;
begin
  Result := FPaymentMeans;
end;

{ TXMLAllowanceChargeType_cacList }

function TXMLAllowanceChargeType_cacList.Add: IXMLAllowanceChargeType_cac;
begin
  Result := AddItem(-1) as IXMLAllowanceChargeType_cac;
end;

function TXMLAllowanceChargeType_cacList.Insert(const Index: Integer): IXMLAllowanceChargeType_cac;
begin
  Result := AddItem(Index) as IXMLAllowanceChargeType_cac;
end;

function TXMLAllowanceChargeType_cacList.Get_Item(const Index: Integer): IXMLAllowanceChargeType_cac;
begin
  Result := List[Index] as IXMLAllowanceChargeType_cac;
end;

{ TXMLChargeIndicatorType_cbc }

{ TXMLAllowanceChargeReasonCodeType_cbc }

{ TXMLAllowanceChargeReasonType_cbc }

{ TXMLAllowanceChargeReasonType_cbcList }

function TXMLAllowanceChargeReasonType_cbcList.Add: IXMLAllowanceChargeReasonType_cbc;
begin
  Result := AddItem(-1) as IXMLAllowanceChargeReasonType_cbc;
end;

function TXMLAllowanceChargeReasonType_cbcList.Insert(const Index: Integer): IXMLAllowanceChargeReasonType_cbc;
begin
  Result := AddItem(Index) as IXMLAllowanceChargeReasonType_cbc;
end;

function TXMLAllowanceChargeReasonType_cbcList.Get_Item(const Index: Integer): IXMLAllowanceChargeReasonType_cbc;
begin
  Result := List[Index] as IXMLAllowanceChargeReasonType_cbc;
end;

{ TXMLMultiplierFactorNumericType_cbc }

{ TXMLPrepaidIndicatorType_cbc }

{ TXMLSequenceNumericType_cbc }

{ TXMLBaseAmountType_cbc }

{ TXMLPerUnitAmountType_cbc }

{ TXMLTaxCategoryType_cac }

procedure TXMLTaxCategoryType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('Name', TXMLNameType_cbc);
  RegisterChildNode('Percent', TXMLPercentType_cbc);
  RegisterChildNode('BaseUnitMeasure', TXMLBaseUnitMeasureType_cbc);
  RegisterChildNode('PerUnitAmount', TXMLPerUnitAmountType_cbc);
  RegisterChildNode('TaxExemptionReasonCode', TXMLTaxExemptionReasonCodeType_cbc);
  RegisterChildNode('TaxExemptionReason', TXMLTaxExemptionReasonType_cbc);
  RegisterChildNode('TierRange', TXMLTierRangeType_cbc);
  RegisterChildNode('TierRatePercent', TXMLTierRatePercentType_cbc);
  RegisterChildNode('TaxScheme', TXMLTaxSchemeType_cac);
  FTaxExemptionReason := CreateCollection(TXMLTaxExemptionReasonType_cbcList, IXMLTaxExemptionReasonType_cbc, 'TaxExemptionReason') as IXMLTaxExemptionReasonType_cbcList;
  inherited;
end;

function TXMLTaxCategoryType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLTaxCategoryType_cac.Get_Name: IXMLNameType_cbc;
begin
  Result := ChildNodes['Name'] as IXMLNameType_cbc;
end;

function TXMLTaxCategoryType_cac.Get_Percent: IXMLPercentType_cbc;
begin
  Result := ChildNodes['Percent'] as IXMLPercentType_cbc;
end;

function TXMLTaxCategoryType_cac.Get_BaseUnitMeasure: IXMLBaseUnitMeasureType_cbc;
begin
  Result := ChildNodes['BaseUnitMeasure'] as IXMLBaseUnitMeasureType_cbc;
end;

function TXMLTaxCategoryType_cac.Get_PerUnitAmount: IXMLPerUnitAmountType_cbc;
begin
  Result := ChildNodes['PerUnitAmount'] as IXMLPerUnitAmountType_cbc;
end;

function TXMLTaxCategoryType_cac.Get_TaxExemptionReasonCode: IXMLTaxExemptionReasonCodeType_cbc;
begin
  Result := ChildNodes['TaxExemptionReasonCode'] as IXMLTaxExemptionReasonCodeType_cbc;
end;

function TXMLTaxCategoryType_cac.Get_TaxExemptionReason: IXMLTaxExemptionReasonType_cbcList;
begin
  Result := FTaxExemptionReason;
end;

function TXMLTaxCategoryType_cac.Get_TierRange: IXMLTierRangeType_cbc;
begin
  Result := ChildNodes['TierRange'] as IXMLTierRangeType_cbc;
end;

function TXMLTaxCategoryType_cac.Get_TierRatePercent: IXMLTierRatePercentType_cbc;
begin
  Result := ChildNodes['TierRatePercent'] as IXMLTierRatePercentType_cbc;
end;

function TXMLTaxCategoryType_cac.Get_TaxScheme: IXMLTaxSchemeType_cac;
begin
  Result := ChildNodes['TaxScheme'] as IXMLTaxSchemeType_cac;
end;

{ TXMLTaxCategoryType_cacList }

function TXMLTaxCategoryType_cacList.Add: IXMLTaxCategoryType_cac;
begin
  Result := AddItem(-1) as IXMLTaxCategoryType_cac;
end;

function TXMLTaxCategoryType_cacList.Insert(const Index: Integer): IXMLTaxCategoryType_cac;
begin
  Result := AddItem(Index) as IXMLTaxCategoryType_cac;
end;

function TXMLTaxCategoryType_cacList.Get_Item(const Index: Integer): IXMLTaxCategoryType_cac;
begin
  Result := List[Index] as IXMLTaxCategoryType_cac;
end;

{ TXMLPercentType_cbc }

{ TXMLBaseUnitMeasureType_cbc }

{ TXMLTaxExemptionReasonCodeType_cbc }

{ TXMLTaxExemptionReasonType_cbc }

{ TXMLTaxExemptionReasonType_cbcList }

function TXMLTaxExemptionReasonType_cbcList.Add: IXMLTaxExemptionReasonType_cbc;
begin
  Result := AddItem(-1) as IXMLTaxExemptionReasonType_cbc;
end;

function TXMLTaxExemptionReasonType_cbcList.Insert(const Index: Integer): IXMLTaxExemptionReasonType_cbc;
begin
  Result := AddItem(Index) as IXMLTaxExemptionReasonType_cbc;
end;

function TXMLTaxExemptionReasonType_cbcList.Get_Item(const Index: Integer): IXMLTaxExemptionReasonType_cbc;
begin
  Result := List[Index] as IXMLTaxExemptionReasonType_cbc;
end;

{ TXMLTierRangeType_cbc }

{ TXMLTierRatePercentType_cbc }

{ TXMLTaxTotalType_cac }

procedure TXMLTaxTotalType_cac.AfterConstruction;
begin
  RegisterChildNode('TaxAmount', TXMLTaxAmountType_cbc);
  RegisterChildNode('RoundingAmount', TXMLRoundingAmountType_cbc);
  RegisterChildNode('TaxEvidenceIndicator', TXMLTaxEvidenceIndicatorType_cbc);
  RegisterChildNode('TaxIncludedIndicator', TXMLTaxIncludedIndicatorType_cbc);
  RegisterChildNode('TaxSubtotal', TXMLTaxSubtotalType_cac);
  FTaxSubtotal := CreateCollection(TXMLTaxSubtotalType_cacList, IXMLTaxSubtotalType_cac, 'TaxSubtotal') as IXMLTaxSubtotalType_cacList;
  inherited;
end;

function TXMLTaxTotalType_cac.Get_TaxAmount: IXMLTaxAmountType_cbc;
begin
  Result := ChildNodes['TaxAmount'] as IXMLTaxAmountType_cbc;
end;

function TXMLTaxTotalType_cac.Get_RoundingAmount: IXMLRoundingAmountType_cbc;
begin
  Result := ChildNodes['RoundingAmount'] as IXMLRoundingAmountType_cbc;
end;

function TXMLTaxTotalType_cac.Get_TaxEvidenceIndicator: IXMLTaxEvidenceIndicatorType_cbc;
begin
  Result := ChildNodes['TaxEvidenceIndicator'] as IXMLTaxEvidenceIndicatorType_cbc;
end;

function TXMLTaxTotalType_cac.Get_TaxIncludedIndicator: IXMLTaxIncludedIndicatorType_cbc;
begin
  Result := ChildNodes['TaxIncludedIndicator'] as IXMLTaxIncludedIndicatorType_cbc;
end;

function TXMLTaxTotalType_cac.Get_TaxSubtotal: IXMLTaxSubtotalType_cacList;
begin
  Result := FTaxSubtotal;
end;

{ TXMLTaxTotalType_cacList }

function TXMLTaxTotalType_cacList.Add: IXMLTaxTotalType_cac;
begin
  Result := AddItem(-1) as IXMLTaxTotalType_cac;
end;

function TXMLTaxTotalType_cacList.Insert(const Index: Integer): IXMLTaxTotalType_cac;
begin
  Result := AddItem(Index) as IXMLTaxTotalType_cac;
end;

function TXMLTaxTotalType_cacList.Get_Item(const Index: Integer): IXMLTaxTotalType_cac;
begin
  Result := List[Index] as IXMLTaxTotalType_cac;
end;

{ TXMLTaxAmountType_cbc }

{ TXMLRoundingAmountType_cbc }

{ TXMLTaxEvidenceIndicatorType_cbc }

{ TXMLTaxIncludedIndicatorType_cbc }

{ TXMLTaxSubtotalType_cac }

procedure TXMLTaxSubtotalType_cac.AfterConstruction;
begin
  RegisterChildNode('TaxableAmount', TXMLTaxableAmountType_cbc);
  RegisterChildNode('TaxAmount', TXMLTaxAmountType_cbc);
  RegisterChildNode('CalculationSequenceNumeric', TXMLCalculationSequenceNumericType_cbc);
  RegisterChildNode('TransactionCurrencyTaxAmount', TXMLTransactionCurrencyTaxAmountType_cbc);
  RegisterChildNode('Percent', TXMLPercentType_cbc);
  RegisterChildNode('BaseUnitMeasure', TXMLBaseUnitMeasureType_cbc);
  RegisterChildNode('PerUnitAmount', TXMLPerUnitAmountType_cbc);
  RegisterChildNode('TierRange', TXMLTierRangeType_cbc);
  RegisterChildNode('TierRatePercent', TXMLTierRatePercentType_cbc);
  RegisterChildNode('TaxCategory', TXMLTaxCategoryType_cac);
  inherited;
end;

function TXMLTaxSubtotalType_cac.Get_TaxableAmount: IXMLTaxableAmountType_cbc;
begin
  Result := ChildNodes['TaxableAmount'] as IXMLTaxableAmountType_cbc;
end;

function TXMLTaxSubtotalType_cac.Get_TaxAmount: IXMLTaxAmountType_cbc;
begin
  Result := ChildNodes['TaxAmount'] as IXMLTaxAmountType_cbc;
end;

function TXMLTaxSubtotalType_cac.Get_CalculationSequenceNumeric: IXMLCalculationSequenceNumericType_cbc;
begin
  Result := ChildNodes['CalculationSequenceNumeric'] as IXMLCalculationSequenceNumericType_cbc;
end;

function TXMLTaxSubtotalType_cac.Get_TransactionCurrencyTaxAmount: IXMLTransactionCurrencyTaxAmountType_cbc;
begin
  Result := ChildNodes['TransactionCurrencyTaxAmount'] as IXMLTransactionCurrencyTaxAmountType_cbc;
end;

function TXMLTaxSubtotalType_cac.Get_Percent: IXMLPercentType_cbc;
begin
  Result := ChildNodes['Percent'] as IXMLPercentType_cbc;
end;

function TXMLTaxSubtotalType_cac.Get_BaseUnitMeasure: IXMLBaseUnitMeasureType_cbc;
begin
  Result := ChildNodes['BaseUnitMeasure'] as IXMLBaseUnitMeasureType_cbc;
end;

function TXMLTaxSubtotalType_cac.Get_PerUnitAmount: IXMLPerUnitAmountType_cbc;
begin
  Result := ChildNodes['PerUnitAmount'] as IXMLPerUnitAmountType_cbc;
end;

function TXMLTaxSubtotalType_cac.Get_TierRange: IXMLTierRangeType_cbc;
begin
  Result := ChildNodes['TierRange'] as IXMLTierRangeType_cbc;
end;

function TXMLTaxSubtotalType_cac.Get_TierRatePercent: IXMLTierRatePercentType_cbc;
begin
  Result := ChildNodes['TierRatePercent'] as IXMLTierRatePercentType_cbc;
end;

function TXMLTaxSubtotalType_cac.Get_TaxCategory: IXMLTaxCategoryType_cac;
begin
  Result := ChildNodes['TaxCategory'] as IXMLTaxCategoryType_cac;
end;

{ TXMLTaxSubtotalType_cacList }

function TXMLTaxSubtotalType_cacList.Add: IXMLTaxSubtotalType_cac;
begin
  Result := AddItem(-1) as IXMLTaxSubtotalType_cac;
end;

function TXMLTaxSubtotalType_cacList.Insert(const Index: Integer): IXMLTaxSubtotalType_cac;
begin
  Result := AddItem(Index) as IXMLTaxSubtotalType_cac;
end;

function TXMLTaxSubtotalType_cacList.Get_Item(const Index: Integer): IXMLTaxSubtotalType_cac;
begin
  Result := List[Index] as IXMLTaxSubtotalType_cac;
end;

{ TXMLTaxableAmountType_cbc }

{ TXMLCalculationSequenceNumericType_cbc }

{ TXMLTransactionCurrencyTaxAmountType_cbc }

{ TXMLPaymentMeansType_cac }

procedure TXMLPaymentMeansType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('PaymentMeansCode', TXMLPaymentMeansCodeType_cbc);
  RegisterChildNode('PaymentDueDate', TXMLPaymentDueDateType_cbc);
  RegisterChildNode('PaymentChannelCode', TXMLPaymentChannelCodeType_cbc);
  RegisterChildNode('InstructionID', TXMLInstructionIDType_cbc);
  RegisterChildNode('InstructionNote', TXMLInstructionNoteType_cbc);
  RegisterChildNode('PaymentID', TXMLPaymentIDType_cbc);
  RegisterChildNode('CardAccount', TXMLCardAccountType_cac);
  RegisterChildNode('PayerFinancialAccount', TXMLFinancialAccountType_cac);
  RegisterChildNode('PayeeFinancialAccount', TXMLFinancialAccountType_cac);
  RegisterChildNode('CreditAccount', TXMLCreditAccountType_cac);
  RegisterChildNode('PaymentMandate', TXMLPaymentMandateType_cac);
  RegisterChildNode('TradeFinancing', TXMLTradeFinancingType_cac);
  FInstructionNote := CreateCollection(TXMLInstructionNoteType_cbcList, IXMLInstructionNoteType_cbc, 'InstructionNote') as IXMLInstructionNoteType_cbcList;
  FPaymentID := CreateCollection(TXMLPaymentIDType_cbcList, IXMLPaymentIDType_cbc, 'PaymentID') as IXMLPaymentIDType_cbcList;
  inherited;
end;

function TXMLPaymentMeansType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLPaymentMeansType_cac.Get_PaymentMeansCode: IXMLPaymentMeansCodeType_cbc;
begin
  Result := ChildNodes['PaymentMeansCode'] as IXMLPaymentMeansCodeType_cbc;
end;

function TXMLPaymentMeansType_cac.Get_PaymentDueDate: IXMLPaymentDueDateType_cbc;
begin
  Result := ChildNodes['PaymentDueDate'] as IXMLPaymentDueDateType_cbc;
end;

function TXMLPaymentMeansType_cac.Get_PaymentChannelCode: IXMLPaymentChannelCodeType_cbc;
begin
  Result := ChildNodes['PaymentChannelCode'] as IXMLPaymentChannelCodeType_cbc;
end;

function TXMLPaymentMeansType_cac.Get_InstructionID: IXMLInstructionIDType_cbc;
begin
  Result := ChildNodes['InstructionID'] as IXMLInstructionIDType_cbc;
end;

function TXMLPaymentMeansType_cac.Get_InstructionNote: IXMLInstructionNoteType_cbcList;
begin
  Result := FInstructionNote;
end;

function TXMLPaymentMeansType_cac.Get_PaymentID: IXMLPaymentIDType_cbcList;
begin
  Result := FPaymentID;
end;

function TXMLPaymentMeansType_cac.Get_CardAccount: IXMLCardAccountType_cac;
begin
  Result := ChildNodes['CardAccount'] as IXMLCardAccountType_cac;
end;

function TXMLPaymentMeansType_cac.Get_PayerFinancialAccount: IXMLFinancialAccountType_cac;
begin
  Result := ChildNodes['PayerFinancialAccount'] as IXMLFinancialAccountType_cac;
end;

function TXMLPaymentMeansType_cac.Get_PayeeFinancialAccount: IXMLFinancialAccountType_cac;
begin
  Result := ChildNodes['PayeeFinancialAccount'] as IXMLFinancialAccountType_cac;
end;

function TXMLPaymentMeansType_cac.Get_CreditAccount: IXMLCreditAccountType_cac;
begin
  Result := ChildNodes['CreditAccount'] as IXMLCreditAccountType_cac;
end;

function TXMLPaymentMeansType_cac.Get_PaymentMandate: IXMLPaymentMandateType_cac;
begin
  Result := ChildNodes['PaymentMandate'] as IXMLPaymentMandateType_cac;
end;

function TXMLPaymentMeansType_cac.Get_TradeFinancing: IXMLTradeFinancingType_cac;
begin
  Result := ChildNodes['TradeFinancing'] as IXMLTradeFinancingType_cac;
end;

{ TXMLPaymentMeansType_cacList }

function TXMLPaymentMeansType_cacList.Add: IXMLPaymentMeansType_cac;
begin
  Result := AddItem(-1) as IXMLPaymentMeansType_cac;
end;

function TXMLPaymentMeansType_cacList.Insert(const Index: Integer): IXMLPaymentMeansType_cac;
begin
  Result := AddItem(Index) as IXMLPaymentMeansType_cac;
end;

function TXMLPaymentMeansType_cacList.Get_Item(const Index: Integer): IXMLPaymentMeansType_cac;
begin
  Result := List[Index] as IXMLPaymentMeansType_cac;
end;

{ TXMLPaymentMeansCodeType_cbc }

{ TXMLPaymentDueDateType_cbc }

{ TXMLPaymentChannelCodeType_cbc }

{ TXMLInstructionIDType_cbc }

{ TXMLInstructionNoteType_cbc }

{ TXMLInstructionNoteType_cbcList }

function TXMLInstructionNoteType_cbcList.Add: IXMLInstructionNoteType_cbc;
begin
  Result := AddItem(-1) as IXMLInstructionNoteType_cbc;
end;

function TXMLInstructionNoteType_cbcList.Insert(const Index: Integer): IXMLInstructionNoteType_cbc;
begin
  Result := AddItem(Index) as IXMLInstructionNoteType_cbc;
end;

function TXMLInstructionNoteType_cbcList.Get_Item(const Index: Integer): IXMLInstructionNoteType_cbc;
begin
  Result := List[Index] as IXMLInstructionNoteType_cbc;
end;

{ TXMLPaymentIDType_cbc }

{ TXMLPaymentIDType_cbcList }

function TXMLPaymentIDType_cbcList.Add: IXMLPaymentIDType_cbc;
begin
  Result := AddItem(-1) as IXMLPaymentIDType_cbc;
end;

function TXMLPaymentIDType_cbcList.Insert(const Index: Integer): IXMLPaymentIDType_cbc;
begin
  Result := AddItem(Index) as IXMLPaymentIDType_cbc;
end;

function TXMLPaymentIDType_cbcList.Get_Item(const Index: Integer): IXMLPaymentIDType_cbc;
begin
  Result := List[Index] as IXMLPaymentIDType_cbc;
end;

{ TXMLCardAccountType_cac }

procedure TXMLCardAccountType_cac.AfterConstruction;
begin
  RegisterChildNode('PrimaryAccountNumberID', TXMLPrimaryAccountNumberIDType_cbc);
  RegisterChildNode('NetworkID', TXMLNetworkIDType_cbc);
  RegisterChildNode('CardTypeCode', TXMLCardTypeCodeType_cbc);
  RegisterChildNode('ValidityStartDate', TXMLValidityStartDateType_cbc);
  RegisterChildNode('ExpiryDate', TXMLExpiryDateType_cbc);
  RegisterChildNode('IssuerID', TXMLIssuerIDType_cbc);
  RegisterChildNode('IssueNumberID', TXMLIssueNumberIDType_cbc);
  RegisterChildNode('CV2ID', TXMLCV2IDType_cbc);
  RegisterChildNode('CardChipCode', TXMLCardChipCodeType_cbc);
  RegisterChildNode('ChipApplicationID', TXMLChipApplicationIDType_cbc);
  RegisterChildNode('HolderName', TXMLHolderNameType_cbc);
  inherited;
end;

function TXMLCardAccountType_cac.Get_PrimaryAccountNumberID: IXMLPrimaryAccountNumberIDType_cbc;
begin
  Result := ChildNodes['PrimaryAccountNumberID'] as IXMLPrimaryAccountNumberIDType_cbc;
end;

function TXMLCardAccountType_cac.Get_NetworkID: IXMLNetworkIDType_cbc;
begin
  Result := ChildNodes['NetworkID'] as IXMLNetworkIDType_cbc;
end;

function TXMLCardAccountType_cac.Get_CardTypeCode: IXMLCardTypeCodeType_cbc;
begin
  Result := ChildNodes['CardTypeCode'] as IXMLCardTypeCodeType_cbc;
end;

function TXMLCardAccountType_cac.Get_ValidityStartDate: IXMLValidityStartDateType_cbc;
begin
  Result := ChildNodes['ValidityStartDate'] as IXMLValidityStartDateType_cbc;
end;

function TXMLCardAccountType_cac.Get_ExpiryDate: IXMLExpiryDateType_cbc;
begin
  Result := ChildNodes['ExpiryDate'] as IXMLExpiryDateType_cbc;
end;

function TXMLCardAccountType_cac.Get_IssuerID: IXMLIssuerIDType_cbc;
begin
  Result := ChildNodes['IssuerID'] as IXMLIssuerIDType_cbc;
end;

function TXMLCardAccountType_cac.Get_IssueNumberID: IXMLIssueNumberIDType_cbc;
begin
  Result := ChildNodes['IssueNumberID'] as IXMLIssueNumberIDType_cbc;
end;

function TXMLCardAccountType_cac.Get_CV2ID: IXMLCV2IDType_cbc;
begin
  Result := ChildNodes['CV2ID'] as IXMLCV2IDType_cbc;
end;

function TXMLCardAccountType_cac.Get_CardChipCode: IXMLCardChipCodeType_cbc;
begin
  Result := ChildNodes['CardChipCode'] as IXMLCardChipCodeType_cbc;
end;

function TXMLCardAccountType_cac.Get_ChipApplicationID: IXMLChipApplicationIDType_cbc;
begin
  Result := ChildNodes['ChipApplicationID'] as IXMLChipApplicationIDType_cbc;
end;

function TXMLCardAccountType_cac.Get_HolderName: IXMLHolderNameType_cbc;
begin
  Result := ChildNodes['HolderName'] as IXMLHolderNameType_cbc;
end;

{ TXMLPrimaryAccountNumberIDType_cbc }

{ TXMLNetworkIDType_cbc }

{ TXMLCardTypeCodeType_cbc }

{ TXMLValidityStartDateType_cbc }

{ TXMLIssuerIDType_cbc }

{ TXMLIssueNumberIDType_cbc }

{ TXMLCV2IDType_cbc }

{ TXMLCardChipCodeType_cbc }

{ TXMLChipApplicationIDType_cbc }

{ TXMLHolderNameType_cbc }

{ TXMLCreditAccountType_cac }

procedure TXMLCreditAccountType_cac.AfterConstruction;
begin
  RegisterChildNode('AccountID', TXMLAccountIDType_cbc);
  inherited;
end;

function TXMLCreditAccountType_cac.Get_AccountID: IXMLAccountIDType_cbc;
begin
  Result := ChildNodes['AccountID'] as IXMLAccountIDType_cbc;
end;

{ TXMLAccountIDType_cbc }

{ TXMLPaymentMandateType_cac }

procedure TXMLPaymentMandateType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('MandateTypeCode', TXMLMandateTypeCodeType_cbc);
  RegisterChildNode('MaximumPaymentInstructionsNumeric', TXMLMaximumPaymentInstructionsNumericType_cbc);
  RegisterChildNode('MaximumPaidAmount', TXMLMaximumPaidAmountType_cbc);
  RegisterChildNode('SignatureID', TXMLSignatureIDType_cbc);
  RegisterChildNode('PayerParty', TXMLPartyType_cac);
  RegisterChildNode('PayerFinancialAccount', TXMLFinancialAccountType_cac);
  RegisterChildNode('ValidityPeriod', TXMLPeriodType_cac);
  RegisterChildNode('PaymentReversalPeriod', TXMLPeriodType_cac);
  RegisterChildNode('Clause', TXMLClauseType_cac);
  FClause := CreateCollection(TXMLClauseType_cacList, IXMLClauseType_cac, 'Clause') as IXMLClauseType_cacList;
  inherited;
end;

function TXMLPaymentMandateType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLPaymentMandateType_cac.Get_MandateTypeCode: IXMLMandateTypeCodeType_cbc;
begin
  Result := ChildNodes['MandateTypeCode'] as IXMLMandateTypeCodeType_cbc;
end;

function TXMLPaymentMandateType_cac.Get_MaximumPaymentInstructionsNumeric: IXMLMaximumPaymentInstructionsNumericType_cbc;
begin
  Result := ChildNodes['MaximumPaymentInstructionsNumeric'] as IXMLMaximumPaymentInstructionsNumericType_cbc;
end;

function TXMLPaymentMandateType_cac.Get_MaximumPaidAmount: IXMLMaximumPaidAmountType_cbc;
begin
  Result := ChildNodes['MaximumPaidAmount'] as IXMLMaximumPaidAmountType_cbc;
end;

function TXMLPaymentMandateType_cac.Get_SignatureID: IXMLSignatureIDType_cbc;
begin
  Result := ChildNodes['SignatureID'] as IXMLSignatureIDType_cbc;
end;

function TXMLPaymentMandateType_cac.Get_PayerParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['PayerParty'] as IXMLPartyType_cac;
end;

function TXMLPaymentMandateType_cac.Get_PayerFinancialAccount: IXMLFinancialAccountType_cac;
begin
  Result := ChildNodes['PayerFinancialAccount'] as IXMLFinancialAccountType_cac;
end;

function TXMLPaymentMandateType_cac.Get_ValidityPeriod: IXMLPeriodType_cac;
begin
  Result := ChildNodes['ValidityPeriod'] as IXMLPeriodType_cac;
end;

function TXMLPaymentMandateType_cac.Get_PaymentReversalPeriod: IXMLPeriodType_cac;
begin
  Result := ChildNodes['PaymentReversalPeriod'] as IXMLPeriodType_cac;
end;

function TXMLPaymentMandateType_cac.Get_Clause: IXMLClauseType_cacList;
begin
  Result := FClause;
end;

{ TXMLMandateTypeCodeType_cbc }

{ TXMLMaximumPaymentInstructionsNumericType_cbc }

{ TXMLMaximumPaidAmountType_cbc }

{ TXMLSignatureIDType_cbc }

{ TXMLClauseType_cac }

procedure TXMLClauseType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('Content', TXMLContentType_cbc);
  FContent := CreateCollection(TXMLContentType_cbcList, IXMLContentType_cbc, 'Content') as IXMLContentType_cbcList;
  inherited;
end;

function TXMLClauseType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLClauseType_cac.Get_Content: IXMLContentType_cbcList;
begin
  Result := FContent;
end;

{ TXMLClauseType_cacList }

function TXMLClauseType_cacList.Add: IXMLClauseType_cac;
begin
  Result := AddItem(-1) as IXMLClauseType_cac;
end;

function TXMLClauseType_cacList.Insert(const Index: Integer): IXMLClauseType_cac;
begin
  Result := AddItem(Index) as IXMLClauseType_cac;
end;

function TXMLClauseType_cacList.Get_Item(const Index: Integer): IXMLClauseType_cac;
begin
  Result := List[Index] as IXMLClauseType_cac;
end;

{ TXMLContentType_cbc }

{ TXMLContentType_cbcList }

function TXMLContentType_cbcList.Add: IXMLContentType_cbc;
begin
  Result := AddItem(-1) as IXMLContentType_cbc;
end;

function TXMLContentType_cbcList.Insert(const Index: Integer): IXMLContentType_cbc;
begin
  Result := AddItem(Index) as IXMLContentType_cbc;
end;

function TXMLContentType_cbcList.Get_Item(const Index: Integer): IXMLContentType_cbc;
begin
  Result := List[Index] as IXMLContentType_cbc;
end;

{ TXMLTradeFinancingType_cac }

procedure TXMLTradeFinancingType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('FinancingInstrumentCode', TXMLFinancingInstrumentCodeType_cbc);
  RegisterChildNode('ContractDocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('DocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('FinancingParty', TXMLPartyType_cac);
  RegisterChildNode('FinancingFinancialAccount', TXMLFinancialAccountType_cac);
  RegisterChildNode('Clause', TXMLClauseType_cac);
  FDocumentReference := CreateCollection(TXMLDocumentReferenceType_cacList, IXMLDocumentReferenceType_cac, 'DocumentReference') as IXMLDocumentReferenceType_cacList;
  FClause := CreateCollection(TXMLClauseType_cacList, IXMLClauseType_cac, 'Clause') as IXMLClauseType_cacList;
  inherited;
end;

function TXMLTradeFinancingType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLTradeFinancingType_cac.Get_FinancingInstrumentCode: IXMLFinancingInstrumentCodeType_cbc;
begin
  Result := ChildNodes['FinancingInstrumentCode'] as IXMLFinancingInstrumentCodeType_cbc;
end;

function TXMLTradeFinancingType_cac.Get_ContractDocumentReference: IXMLDocumentReferenceType_cac;
begin
  Result := ChildNodes['ContractDocumentReference'] as IXMLDocumentReferenceType_cac;
end;

function TXMLTradeFinancingType_cac.Get_DocumentReference: IXMLDocumentReferenceType_cacList;
begin
  Result := FDocumentReference;
end;

function TXMLTradeFinancingType_cac.Get_FinancingParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['FinancingParty'] as IXMLPartyType_cac;
end;

function TXMLTradeFinancingType_cac.Get_FinancingFinancialAccount: IXMLFinancialAccountType_cac;
begin
  Result := ChildNodes['FinancingFinancialAccount'] as IXMLFinancialAccountType_cac;
end;

function TXMLTradeFinancingType_cac.Get_Clause: IXMLClauseType_cacList;
begin
  Result := FClause;
end;

{ TXMLFinancingInstrumentCodeType_cbc }

{ TXMLProjectReferenceType_cac }

procedure TXMLProjectReferenceType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('UUID', TXMLUUIDType_cbc);
  RegisterChildNode('IssueDate', TXMLIssueDateType_cbc);
  RegisterChildNode('WorkPhaseReference', TXMLWorkPhaseReferenceType_cac);
  FWorkPhaseReference := CreateCollection(TXMLWorkPhaseReferenceType_cacList, IXMLWorkPhaseReferenceType_cac, 'WorkPhaseReference') as IXMLWorkPhaseReferenceType_cacList;
  inherited;
end;

function TXMLProjectReferenceType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLProjectReferenceType_cac.Get_UUID: IXMLUUIDType_cbc;
begin
  Result := ChildNodes['UUID'] as IXMLUUIDType_cbc;
end;

function TXMLProjectReferenceType_cac.Get_IssueDate: IXMLIssueDateType_cbc;
begin
  Result := ChildNodes['IssueDate'] as IXMLIssueDateType_cbc;
end;

function TXMLProjectReferenceType_cac.Get_WorkPhaseReference: IXMLWorkPhaseReferenceType_cacList;
begin
  Result := FWorkPhaseReference;
end;

{ TXMLProjectReferenceType_cacList }

function TXMLProjectReferenceType_cacList.Add: IXMLProjectReferenceType_cac;
begin
  Result := AddItem(-1) as IXMLProjectReferenceType_cac;
end;

function TXMLProjectReferenceType_cacList.Insert(const Index: Integer): IXMLProjectReferenceType_cac;
begin
  Result := AddItem(Index) as IXMLProjectReferenceType_cac;
end;

function TXMLProjectReferenceType_cacList.Get_Item(const Index: Integer): IXMLProjectReferenceType_cac;
begin
  Result := List[Index] as IXMLProjectReferenceType_cac;
end;

{ TXMLWorkPhaseReferenceType_cac }

procedure TXMLWorkPhaseReferenceType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('WorkPhaseCode', TXMLWorkPhaseCodeType_cbc);
  RegisterChildNode('WorkPhase', TXMLWorkPhaseType_cbc);
  RegisterChildNode('ProgressPercent', TXMLProgressPercentType_cbc);
  RegisterChildNode('StartDate', TXMLStartDateType_cbc);
  RegisterChildNode('EndDate', TXMLEndDateType_cbc);
  RegisterChildNode('WorkOrderDocumentReference', TXMLDocumentReferenceType_cac);
  FWorkPhase := CreateCollection(TXMLWorkPhaseType_cbcList, IXMLWorkPhaseType_cbc, 'WorkPhase') as IXMLWorkPhaseType_cbcList;
  FWorkOrderDocumentReference := CreateCollection(TXMLDocumentReferenceType_cacList, IXMLDocumentReferenceType_cac, 'WorkOrderDocumentReference') as IXMLDocumentReferenceType_cacList;
  inherited;
end;

function TXMLWorkPhaseReferenceType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLWorkPhaseReferenceType_cac.Get_WorkPhaseCode: IXMLWorkPhaseCodeType_cbc;
begin
  Result := ChildNodes['WorkPhaseCode'] as IXMLWorkPhaseCodeType_cbc;
end;

function TXMLWorkPhaseReferenceType_cac.Get_WorkPhase: IXMLWorkPhaseType_cbcList;
begin
  Result := FWorkPhase;
end;

function TXMLWorkPhaseReferenceType_cac.Get_ProgressPercent: IXMLProgressPercentType_cbc;
begin
  Result := ChildNodes['ProgressPercent'] as IXMLProgressPercentType_cbc;
end;

function TXMLWorkPhaseReferenceType_cac.Get_StartDate: IXMLStartDateType_cbc;
begin
  Result := ChildNodes['StartDate'] as IXMLStartDateType_cbc;
end;

function TXMLWorkPhaseReferenceType_cac.Get_EndDate: IXMLEndDateType_cbc;
begin
  Result := ChildNodes['EndDate'] as IXMLEndDateType_cbc;
end;

function TXMLWorkPhaseReferenceType_cac.Get_WorkOrderDocumentReference: IXMLDocumentReferenceType_cacList;
begin
  Result := FWorkOrderDocumentReference;
end;

{ TXMLWorkPhaseReferenceType_cacList }

function TXMLWorkPhaseReferenceType_cacList.Add: IXMLWorkPhaseReferenceType_cac;
begin
  Result := AddItem(-1) as IXMLWorkPhaseReferenceType_cac;
end;

function TXMLWorkPhaseReferenceType_cacList.Insert(const Index: Integer): IXMLWorkPhaseReferenceType_cac;
begin
  Result := AddItem(Index) as IXMLWorkPhaseReferenceType_cac;
end;

function TXMLWorkPhaseReferenceType_cacList.Get_Item(const Index: Integer): IXMLWorkPhaseReferenceType_cac;
begin
  Result := List[Index] as IXMLWorkPhaseReferenceType_cac;
end;

{ TXMLWorkPhaseCodeType_cbc }

{ TXMLWorkPhaseType_cbc }

{ TXMLWorkPhaseType_cbcList }

function TXMLWorkPhaseType_cbcList.Add: IXMLWorkPhaseType_cbc;
begin
  Result := AddItem(-1) as IXMLWorkPhaseType_cbc;
end;

function TXMLWorkPhaseType_cbcList.Insert(const Index: Integer): IXMLWorkPhaseType_cbc;
begin
  Result := AddItem(Index) as IXMLWorkPhaseType_cbc;
end;

function TXMLWorkPhaseType_cbcList.Get_Item(const Index: Integer): IXMLWorkPhaseType_cbc;
begin
  Result := List[Index] as IXMLWorkPhaseType_cbc;
end;

{ TXMLProgressPercentType_cbc }

{ TXMLSignatureType_cac }

procedure TXMLSignatureType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('Note', TXMLNoteType_cbc);
  RegisterChildNode('ValidationDate', TXMLValidationDateType_cbc);
  RegisterChildNode('ValidationTime', TXMLValidationTimeType_cbc);
  RegisterChildNode('ValidatorID', TXMLValidatorIDType_cbc);
  RegisterChildNode('CanonicalizationMethod', TXMLCanonicalizationMethodType_cbc);
  RegisterChildNode('SignatureMethod', TXMLSignatureMethodType_cbc);
  RegisterChildNode('SignatoryParty', TXMLPartyType_cac);
  RegisterChildNode('DigitalSignatureAttachment', TXMLAttachmentType_cac);
  RegisterChildNode('OriginalDocumentReference', TXMLDocumentReferenceType_cac);
  FNote := CreateCollection(TXMLNoteType_cbcList, IXMLNoteType_cbc, 'Note') as IXMLNoteType_cbcList;
  inherited;
end;

function TXMLSignatureType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLSignatureType_cac.Get_Note: IXMLNoteType_cbcList;
begin
  Result := FNote;
end;

function TXMLSignatureType_cac.Get_ValidationDate: IXMLValidationDateType_cbc;
begin
  Result := ChildNodes['ValidationDate'] as IXMLValidationDateType_cbc;
end;

function TXMLSignatureType_cac.Get_ValidationTime: IXMLValidationTimeType_cbc;
begin
  Result := ChildNodes['ValidationTime'] as IXMLValidationTimeType_cbc;
end;

function TXMLSignatureType_cac.Get_ValidatorID: IXMLValidatorIDType_cbc;
begin
  Result := ChildNodes['ValidatorID'] as IXMLValidatorIDType_cbc;
end;

function TXMLSignatureType_cac.Get_CanonicalizationMethod: IXMLCanonicalizationMethodType_cbc;
begin
  Result := ChildNodes['CanonicalizationMethod'] as IXMLCanonicalizationMethodType_cbc;
end;

function TXMLSignatureType_cac.Get_SignatureMethod: IXMLSignatureMethodType_cbc;
begin
  Result := ChildNodes['SignatureMethod'] as IXMLSignatureMethodType_cbc;
end;

function TXMLSignatureType_cac.Get_SignatoryParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['SignatoryParty'] as IXMLPartyType_cac;
end;

function TXMLSignatureType_cac.Get_DigitalSignatureAttachment: IXMLAttachmentType_cac;
begin
  Result := ChildNodes['DigitalSignatureAttachment'] as IXMLAttachmentType_cac;
end;

function TXMLSignatureType_cac.Get_OriginalDocumentReference: IXMLDocumentReferenceType_cac;
begin
  Result := ChildNodes['OriginalDocumentReference'] as IXMLDocumentReferenceType_cac;
end;

{ TXMLSignatureType_cacList }

function TXMLSignatureType_cacList.Add: IXMLSignatureType_cac;
begin
  Result := AddItem(-1) as IXMLSignatureType_cac;
end;

function TXMLSignatureType_cacList.Insert(const Index: Integer): IXMLSignatureType_cac;
begin
  Result := AddItem(Index) as IXMLSignatureType_cac;
end;

function TXMLSignatureType_cacList.Get_Item(const Index: Integer): IXMLSignatureType_cac;
begin
  Result := List[Index] as IXMLSignatureType_cac;
end;

{ TXMLCanonicalizationMethodType_cbc }

{ TXMLSignatureMethodType_cbc }

{ TXMLSupplierPartyType_cac }

procedure TXMLSupplierPartyType_cac.AfterConstruction;
begin
  RegisterChildNode('CustomerAssignedAccountID', TXMLCustomerAssignedAccountIDType_cbc);
  RegisterChildNode('AdditionalAccountID', TXMLAdditionalAccountIDType_cbc);
  RegisterChildNode('DataSendingCapability', TXMLDataSendingCapabilityType_cbc);
  RegisterChildNode('Party', TXMLPartyType_cac);
  RegisterChildNode('DespatchContact', TXMLContactType_cac);
  RegisterChildNode('AccountingContact', TXMLContactType_cac);
  RegisterChildNode('SellerContact', TXMLContactType_cac);
  FAdditionalAccountID := CreateCollection(TXMLAdditionalAccountIDType_cbcList, IXMLAdditionalAccountIDType_cbc, 'AdditionalAccountID') as IXMLAdditionalAccountIDType_cbcList;
  inherited;
end;

function TXMLSupplierPartyType_cac.Get_CustomerAssignedAccountID: IXMLCustomerAssignedAccountIDType_cbc;
begin
  Result := ChildNodes['CustomerAssignedAccountID'] as IXMLCustomerAssignedAccountIDType_cbc;
end;

function TXMLSupplierPartyType_cac.Get_AdditionalAccountID: IXMLAdditionalAccountIDType_cbcList;
begin
  Result := FAdditionalAccountID;
end;

function TXMLSupplierPartyType_cac.Get_DataSendingCapability: IXMLDataSendingCapabilityType_cbc;
begin
  Result := ChildNodes['DataSendingCapability'] as IXMLDataSendingCapabilityType_cbc;
end;

function TXMLSupplierPartyType_cac.Get_Party: IXMLPartyType_cac;
begin
  Result := ChildNodes['Party'] as IXMLPartyType_cac;
end;

function TXMLSupplierPartyType_cac.Get_DespatchContact: IXMLContactType_cac;
begin
  Result := ChildNodes['DespatchContact'] as IXMLContactType_cac;
end;

function TXMLSupplierPartyType_cac.Get_AccountingContact: IXMLContactType_cac;
begin
  Result := ChildNodes['AccountingContact'] as IXMLContactType_cac;
end;

function TXMLSupplierPartyType_cac.Get_SellerContact: IXMLContactType_cac;
begin
  Result := ChildNodes['SellerContact'] as IXMLContactType_cac;
end;

{ TXMLCustomerAssignedAccountIDType_cbc }

{ TXMLAdditionalAccountIDType_cbc }

{ TXMLAdditionalAccountIDType_cbcList }

function TXMLAdditionalAccountIDType_cbcList.Add: IXMLAdditionalAccountIDType_cbc;
begin
  Result := AddItem(-1) as IXMLAdditionalAccountIDType_cbc;
end;

function TXMLAdditionalAccountIDType_cbcList.Insert(const Index: Integer): IXMLAdditionalAccountIDType_cbc;
begin
  Result := AddItem(Index) as IXMLAdditionalAccountIDType_cbc;
end;

function TXMLAdditionalAccountIDType_cbcList.Get_Item(const Index: Integer): IXMLAdditionalAccountIDType_cbc;
begin
  Result := List[Index] as IXMLAdditionalAccountIDType_cbc;
end;

{ TXMLDataSendingCapabilityType_cbc }

{ TXMLCustomerPartyType_cac }

procedure TXMLCustomerPartyType_cac.AfterConstruction;
begin
  RegisterChildNode('CustomerAssignedAccountID', TXMLCustomerAssignedAccountIDType_cbc);
  RegisterChildNode('SupplierAssignedAccountID', TXMLSupplierAssignedAccountIDType_cbc);
  RegisterChildNode('AdditionalAccountID', TXMLAdditionalAccountIDType_cbc);
  RegisterChildNode('Party', TXMLPartyType_cac);
  RegisterChildNode('DeliveryContact', TXMLContactType_cac);
  RegisterChildNode('AccountingContact', TXMLContactType_cac);
  RegisterChildNode('BuyerContact', TXMLContactType_cac);
  FAdditionalAccountID := CreateCollection(TXMLAdditionalAccountIDType_cbcList, IXMLAdditionalAccountIDType_cbc, 'AdditionalAccountID') as IXMLAdditionalAccountIDType_cbcList;
  inherited;
end;

function TXMLCustomerPartyType_cac.Get_CustomerAssignedAccountID: IXMLCustomerAssignedAccountIDType_cbc;
begin
  Result := ChildNodes['CustomerAssignedAccountID'] as IXMLCustomerAssignedAccountIDType_cbc;
end;

function TXMLCustomerPartyType_cac.Get_SupplierAssignedAccountID: IXMLSupplierAssignedAccountIDType_cbc;
begin
  Result := ChildNodes['SupplierAssignedAccountID'] as IXMLSupplierAssignedAccountIDType_cbc;
end;

function TXMLCustomerPartyType_cac.Get_AdditionalAccountID: IXMLAdditionalAccountIDType_cbcList;
begin
  Result := FAdditionalAccountID;
end;

function TXMLCustomerPartyType_cac.Get_Party: IXMLPartyType_cac;
begin
  Result := ChildNodes['Party'] as IXMLPartyType_cac;
end;

function TXMLCustomerPartyType_cac.Get_DeliveryContact: IXMLContactType_cac;
begin
  Result := ChildNodes['DeliveryContact'] as IXMLContactType_cac;
end;

function TXMLCustomerPartyType_cac.Get_AccountingContact: IXMLContactType_cac;
begin
  Result := ChildNodes['AccountingContact'] as IXMLContactType_cac;
end;

function TXMLCustomerPartyType_cac.Get_BuyerContact: IXMLContactType_cac;
begin
  Result := ChildNodes['BuyerContact'] as IXMLContactType_cac;
end;

{ TXMLSupplierAssignedAccountIDType_cbc }

{ TXMLDeliveryType_cac }

procedure TXMLDeliveryType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('Quantity', TXMLQuantityType_cbc);
  RegisterChildNode('MinimumQuantity', TXMLMinimumQuantityType_cbc);
  RegisterChildNode('MaximumQuantity', TXMLMaximumQuantityType_cbc);
  RegisterChildNode('ActualDeliveryDate', TXMLActualDeliveryDateType_cbc);
  RegisterChildNode('ActualDeliveryTime', TXMLActualDeliveryTimeType_cbc);
  RegisterChildNode('LatestDeliveryDate', TXMLLatestDeliveryDateType_cbc);
  RegisterChildNode('LatestDeliveryTime', TXMLLatestDeliveryTimeType_cbc);
  RegisterChildNode('ReleaseID', TXMLReleaseIDType_cbc);
  RegisterChildNode('TrackingID', TXMLTrackingIDType_cbc);
  RegisterChildNode('DeliveryAddress', TXMLAddressType_cac);
  RegisterChildNode('DeliveryLocation', TXMLLocationType_cac);
  RegisterChildNode('AlternativeDeliveryLocation', TXMLLocationType_cac);
  RegisterChildNode('RequestedDeliveryPeriod', TXMLPeriodType_cac);
  RegisterChildNode('PromisedDeliveryPeriod', TXMLPeriodType_cac);
  RegisterChildNode('EstimatedDeliveryPeriod', TXMLPeriodType_cac);
  RegisterChildNode('CarrierParty', TXMLPartyType_cac);
  RegisterChildNode('DeliveryParty', TXMLPartyType_cac);
  RegisterChildNode('NotifyParty', TXMLPartyType_cac);
  RegisterChildNode('Despatch', TXMLDespatchType_cac);
  RegisterChildNode('DeliveryTerms', TXMLDeliveryTermsType_cac);
  RegisterChildNode('MinimumDeliveryUnit', TXMLDeliveryUnitType_cac);
  RegisterChildNode('MaximumDeliveryUnit', TXMLDeliveryUnitType_cac);
  RegisterChildNode('Shipment', TXMLShipmentType_cac);
  FNotifyParty := CreateCollection(TXMLPartyType_cacList, IXMLPartyType_cac, 'NotifyParty') as IXMLPartyType_cacList;
  FDeliveryTerms := CreateCollection(TXMLDeliveryTermsType_cacList, IXMLDeliveryTermsType_cac, 'DeliveryTerms') as IXMLDeliveryTermsType_cacList;
  inherited;
end;

function TXMLDeliveryType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLDeliveryType_cac.Get_Quantity: IXMLQuantityType_cbc;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantityType_cbc;
end;

function TXMLDeliveryType_cac.Get_MinimumQuantity: IXMLMinimumQuantityType_cbc;
begin
  Result := ChildNodes['MinimumQuantity'] as IXMLMinimumQuantityType_cbc;
end;

function TXMLDeliveryType_cac.Get_MaximumQuantity: IXMLMaximumQuantityType_cbc;
begin
  Result := ChildNodes['MaximumQuantity'] as IXMLMaximumQuantityType_cbc;
end;

function TXMLDeliveryType_cac.Get_ActualDeliveryDate: IXMLActualDeliveryDateType_cbc;
begin
  Result := ChildNodes['ActualDeliveryDate'] as IXMLActualDeliveryDateType_cbc;
end;

function TXMLDeliveryType_cac.Get_ActualDeliveryTime: IXMLActualDeliveryTimeType_cbc;
begin
  Result := ChildNodes['ActualDeliveryTime'] as IXMLActualDeliveryTimeType_cbc;
end;

function TXMLDeliveryType_cac.Get_LatestDeliveryDate: IXMLLatestDeliveryDateType_cbc;
begin
  Result := ChildNodes['LatestDeliveryDate'] as IXMLLatestDeliveryDateType_cbc;
end;

function TXMLDeliveryType_cac.Get_LatestDeliveryTime: IXMLLatestDeliveryTimeType_cbc;
begin
  Result := ChildNodes['LatestDeliveryTime'] as IXMLLatestDeliveryTimeType_cbc;
end;

function TXMLDeliveryType_cac.Get_ReleaseID: IXMLReleaseIDType_cbc;
begin
  Result := ChildNodes['ReleaseID'] as IXMLReleaseIDType_cbc;
end;

function TXMLDeliveryType_cac.Get_TrackingID: IXMLTrackingIDType_cbc;
begin
  Result := ChildNodes['TrackingID'] as IXMLTrackingIDType_cbc;
end;

function TXMLDeliveryType_cac.Get_DeliveryAddress: IXMLAddressType_cac;
begin
  Result := ChildNodes['DeliveryAddress'] as IXMLAddressType_cac;
end;

function TXMLDeliveryType_cac.Get_DeliveryLocation: IXMLLocationType_cac;
begin
  Result := ChildNodes['DeliveryLocation'] as IXMLLocationType_cac;
end;

function TXMLDeliveryType_cac.Get_AlternativeDeliveryLocation: IXMLLocationType_cac;
begin
  Result := ChildNodes['AlternativeDeliveryLocation'] as IXMLLocationType_cac;
end;

function TXMLDeliveryType_cac.Get_RequestedDeliveryPeriod: IXMLPeriodType_cac;
begin
  Result := ChildNodes['RequestedDeliveryPeriod'] as IXMLPeriodType_cac;
end;

function TXMLDeliveryType_cac.Get_PromisedDeliveryPeriod: IXMLPeriodType_cac;
begin
  Result := ChildNodes['PromisedDeliveryPeriod'] as IXMLPeriodType_cac;
end;

function TXMLDeliveryType_cac.Get_EstimatedDeliveryPeriod: IXMLPeriodType_cac;
begin
  Result := ChildNodes['EstimatedDeliveryPeriod'] as IXMLPeriodType_cac;
end;

function TXMLDeliveryType_cac.Get_CarrierParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['CarrierParty'] as IXMLPartyType_cac;
end;

function TXMLDeliveryType_cac.Get_DeliveryParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['DeliveryParty'] as IXMLPartyType_cac;
end;

function TXMLDeliveryType_cac.Get_NotifyParty: IXMLPartyType_cacList;
begin
  Result := FNotifyParty;
end;

function TXMLDeliveryType_cac.Get_Despatch: IXMLDespatchType_cac;
begin
  Result := ChildNodes['Despatch'] as IXMLDespatchType_cac;
end;

function TXMLDeliveryType_cac.Get_DeliveryTerms: IXMLDeliveryTermsType_cacList;
begin
  Result := FDeliveryTerms;
end;

function TXMLDeliveryType_cac.Get_MinimumDeliveryUnit: IXMLDeliveryUnitType_cac;
begin
  Result := ChildNodes['MinimumDeliveryUnit'] as IXMLDeliveryUnitType_cac;
end;

function TXMLDeliveryType_cac.Get_MaximumDeliveryUnit: IXMLDeliveryUnitType_cac;
begin
  Result := ChildNodes['MaximumDeliveryUnit'] as IXMLDeliveryUnitType_cac;
end;

function TXMLDeliveryType_cac.Get_Shipment: IXMLShipmentType_cac;
begin
  Result := ChildNodes['Shipment'] as IXMLShipmentType_cac;
end;

{ TXMLDeliveryType_cacList }

function TXMLDeliveryType_cacList.Add: IXMLDeliveryType_cac;
begin
  Result := AddItem(-1) as IXMLDeliveryType_cac;
end;

function TXMLDeliveryType_cacList.Insert(const Index: Integer): IXMLDeliveryType_cac;
begin
  Result := AddItem(Index) as IXMLDeliveryType_cac;
end;

function TXMLDeliveryType_cacList.Get_Item(const Index: Integer): IXMLDeliveryType_cac;
begin
  Result := List[Index] as IXMLDeliveryType_cac;
end;

{ TXMLQuantityType_cbc }

{ TXMLMinimumQuantityType_cbc }

{ TXMLMaximumQuantityType_cbc }

{ TXMLActualDeliveryDateType_cbc }

{ TXMLActualDeliveryTimeType_cbc }

{ TXMLLatestDeliveryDateType_cbc }

{ TXMLLatestDeliveryTimeType_cbc }

{ TXMLReleaseIDType_cbc }

{ TXMLTrackingIDType_cbc }

{ TXMLDespatchType_cac }

procedure TXMLDespatchType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('RequestedDespatchDate', TXMLRequestedDespatchDateType_cbc);
  RegisterChildNode('RequestedDespatchTime', TXMLRequestedDespatchTimeType_cbc);
  RegisterChildNode('EstimatedDespatchDate', TXMLEstimatedDespatchDateType_cbc);
  RegisterChildNode('EstimatedDespatchTime', TXMLEstimatedDespatchTimeType_cbc);
  RegisterChildNode('ActualDespatchDate', TXMLActualDespatchDateType_cbc);
  RegisterChildNode('ActualDespatchTime', TXMLActualDespatchTimeType_cbc);
  RegisterChildNode('GuaranteedDespatchDate', TXMLGuaranteedDespatchDateType_cbc);
  RegisterChildNode('GuaranteedDespatchTime', TXMLGuaranteedDespatchTimeType_cbc);
  RegisterChildNode('ReleaseID', TXMLReleaseIDType_cbc);
  RegisterChildNode('Instructions', TXMLInstructionsType_cbc);
  RegisterChildNode('DespatchAddress', TXMLAddressType_cac);
  RegisterChildNode('DespatchLocation', TXMLLocationType_cac);
  RegisterChildNode('DespatchParty', TXMLPartyType_cac);
  RegisterChildNode('CarrierParty', TXMLPartyType_cac);
  RegisterChildNode('NotifyParty', TXMLPartyType_cac);
  RegisterChildNode('Contact', TXMLContactType_cac);
  RegisterChildNode('EstimatedDespatchPeriod', TXMLPeriodType_cac);
  RegisterChildNode('RequestedDespatchPeriod', TXMLPeriodType_cac);
  FInstructions := CreateCollection(TXMLInstructionsType_cbcList, IXMLInstructionsType_cbc, 'Instructions') as IXMLInstructionsType_cbcList;
  FNotifyParty := CreateCollection(TXMLPartyType_cacList, IXMLPartyType_cac, 'NotifyParty') as IXMLPartyType_cacList;
  inherited;
end;

function TXMLDespatchType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLDespatchType_cac.Get_RequestedDespatchDate: IXMLRequestedDespatchDateType_cbc;
begin
  Result := ChildNodes['RequestedDespatchDate'] as IXMLRequestedDespatchDateType_cbc;
end;

function TXMLDespatchType_cac.Get_RequestedDespatchTime: IXMLRequestedDespatchTimeType_cbc;
begin
  Result := ChildNodes['RequestedDespatchTime'] as IXMLRequestedDespatchTimeType_cbc;
end;

function TXMLDespatchType_cac.Get_EstimatedDespatchDate: IXMLEstimatedDespatchDateType_cbc;
begin
  Result := ChildNodes['EstimatedDespatchDate'] as IXMLEstimatedDespatchDateType_cbc;
end;

function TXMLDespatchType_cac.Get_EstimatedDespatchTime: IXMLEstimatedDespatchTimeType_cbc;
begin
  Result := ChildNodes['EstimatedDespatchTime'] as IXMLEstimatedDespatchTimeType_cbc;
end;

function TXMLDespatchType_cac.Get_ActualDespatchDate: IXMLActualDespatchDateType_cbc;
begin
  Result := ChildNodes['ActualDespatchDate'] as IXMLActualDespatchDateType_cbc;
end;

function TXMLDespatchType_cac.Get_ActualDespatchTime: IXMLActualDespatchTimeType_cbc;
begin
  Result := ChildNodes['ActualDespatchTime'] as IXMLActualDespatchTimeType_cbc;
end;

function TXMLDespatchType_cac.Get_GuaranteedDespatchDate: IXMLGuaranteedDespatchDateType_cbc;
begin
  Result := ChildNodes['GuaranteedDespatchDate'] as IXMLGuaranteedDespatchDateType_cbc;
end;

function TXMLDespatchType_cac.Get_GuaranteedDespatchTime: IXMLGuaranteedDespatchTimeType_cbc;
begin
  Result := ChildNodes['GuaranteedDespatchTime'] as IXMLGuaranteedDespatchTimeType_cbc;
end;

function TXMLDespatchType_cac.Get_ReleaseID: IXMLReleaseIDType_cbc;
begin
  Result := ChildNodes['ReleaseID'] as IXMLReleaseIDType_cbc;
end;

function TXMLDespatchType_cac.Get_Instructions: IXMLInstructionsType_cbcList;
begin
  Result := FInstructions;
end;

function TXMLDespatchType_cac.Get_DespatchAddress: IXMLAddressType_cac;
begin
  Result := ChildNodes['DespatchAddress'] as IXMLAddressType_cac;
end;

function TXMLDespatchType_cac.Get_DespatchLocation: IXMLLocationType_cac;
begin
  Result := ChildNodes['DespatchLocation'] as IXMLLocationType_cac;
end;

function TXMLDespatchType_cac.Get_DespatchParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['DespatchParty'] as IXMLPartyType_cac;
end;

function TXMLDespatchType_cac.Get_CarrierParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['CarrierParty'] as IXMLPartyType_cac;
end;

function TXMLDespatchType_cac.Get_NotifyParty: IXMLPartyType_cacList;
begin
  Result := FNotifyParty;
end;

function TXMLDespatchType_cac.Get_Contact: IXMLContactType_cac;
begin
  Result := ChildNodes['Contact'] as IXMLContactType_cac;
end;

function TXMLDespatchType_cac.Get_EstimatedDespatchPeriod: IXMLPeriodType_cac;
begin
  Result := ChildNodes['EstimatedDespatchPeriod'] as IXMLPeriodType_cac;
end;

function TXMLDespatchType_cac.Get_RequestedDespatchPeriod: IXMLPeriodType_cac;
begin
  Result := ChildNodes['RequestedDespatchPeriod'] as IXMLPeriodType_cac;
end;

{ TXMLRequestedDespatchDateType_cbc }

{ TXMLRequestedDespatchTimeType_cbc }

{ TXMLEstimatedDespatchDateType_cbc }

{ TXMLEstimatedDespatchTimeType_cbc }

{ TXMLActualDespatchDateType_cbc }

{ TXMLActualDespatchTimeType_cbc }

{ TXMLGuaranteedDespatchDateType_cbc }

{ TXMLGuaranteedDespatchTimeType_cbc }

{ TXMLInstructionsType_cbc }

{ TXMLInstructionsType_cbcList }

function TXMLInstructionsType_cbcList.Add: IXMLInstructionsType_cbc;
begin
  Result := AddItem(-1) as IXMLInstructionsType_cbc;
end;

function TXMLInstructionsType_cbcList.Insert(const Index: Integer): IXMLInstructionsType_cbc;
begin
  Result := AddItem(Index) as IXMLInstructionsType_cbc;
end;

function TXMLInstructionsType_cbcList.Get_Item(const Index: Integer): IXMLInstructionsType_cbc;
begin
  Result := List[Index] as IXMLInstructionsType_cbc;
end;

{ TXMLDeliveryTermsType_cac }

procedure TXMLDeliveryTermsType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('SpecialTerms', TXMLSpecialTermsType_cbc);
  RegisterChildNode('LossRiskResponsibilityCode', TXMLLossRiskResponsibilityCodeType_cbc);
  RegisterChildNode('LossRisk', TXMLLossRiskType_cbc);
  RegisterChildNode('Amount', TXMLAmountType_cbc);
  RegisterChildNode('DeliveryLocation', TXMLLocationType_cac);
  RegisterChildNode('AllowanceCharge', TXMLAllowanceChargeType_cac);
  FSpecialTerms := CreateCollection(TXMLSpecialTermsType_cbcList, IXMLSpecialTermsType_cbc, 'SpecialTerms') as IXMLSpecialTermsType_cbcList;
  FLossRisk := CreateCollection(TXMLLossRiskType_cbcList, IXMLLossRiskType_cbc, 'LossRisk') as IXMLLossRiskType_cbcList;
  inherited;
end;

function TXMLDeliveryTermsType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLDeliveryTermsType_cac.Get_SpecialTerms: IXMLSpecialTermsType_cbcList;
begin
  Result := FSpecialTerms;
end;

function TXMLDeliveryTermsType_cac.Get_LossRiskResponsibilityCode: IXMLLossRiskResponsibilityCodeType_cbc;
begin
  Result := ChildNodes['LossRiskResponsibilityCode'] as IXMLLossRiskResponsibilityCodeType_cbc;
end;

function TXMLDeliveryTermsType_cac.Get_LossRisk: IXMLLossRiskType_cbcList;
begin
  Result := FLossRisk;
end;

function TXMLDeliveryTermsType_cac.Get_Amount: IXMLAmountType_cbc;
begin
  Result := ChildNodes['Amount'] as IXMLAmountType_cbc;
end;

function TXMLDeliveryTermsType_cac.Get_DeliveryLocation: IXMLLocationType_cac;
begin
  Result := ChildNodes['DeliveryLocation'] as IXMLLocationType_cac;
end;

function TXMLDeliveryTermsType_cac.Get_AllowanceCharge: IXMLAllowanceChargeType_cac;
begin
  Result := ChildNodes['AllowanceCharge'] as IXMLAllowanceChargeType_cac;
end;

{ TXMLDeliveryTermsType_cacList }

function TXMLDeliveryTermsType_cacList.Add: IXMLDeliveryTermsType_cac;
begin
  Result := AddItem(-1) as IXMLDeliveryTermsType_cac;
end;

function TXMLDeliveryTermsType_cacList.Insert(const Index: Integer): IXMLDeliveryTermsType_cac;
begin
  Result := AddItem(Index) as IXMLDeliveryTermsType_cac;
end;

function TXMLDeliveryTermsType_cacList.Get_Item(const Index: Integer): IXMLDeliveryTermsType_cac;
begin
  Result := List[Index] as IXMLDeliveryTermsType_cac;
end;

{ TXMLSpecialTermsType_cbc }

{ TXMLSpecialTermsType_cbcList }

function TXMLSpecialTermsType_cbcList.Add: IXMLSpecialTermsType_cbc;
begin
  Result := AddItem(-1) as IXMLSpecialTermsType_cbc;
end;

function TXMLSpecialTermsType_cbcList.Insert(const Index: Integer): IXMLSpecialTermsType_cbc;
begin
  Result := AddItem(Index) as IXMLSpecialTermsType_cbc;
end;

function TXMLSpecialTermsType_cbcList.Get_Item(const Index: Integer): IXMLSpecialTermsType_cbc;
begin
  Result := List[Index] as IXMLSpecialTermsType_cbc;
end;

{ TXMLLossRiskResponsibilityCodeType_cbc }

{ TXMLLossRiskType_cbc }

{ TXMLLossRiskType_cbcList }

function TXMLLossRiskType_cbcList.Add: IXMLLossRiskType_cbc;
begin
  Result := AddItem(-1) as IXMLLossRiskType_cbc;
end;

function TXMLLossRiskType_cbcList.Insert(const Index: Integer): IXMLLossRiskType_cbc;
begin
  Result := AddItem(Index) as IXMLLossRiskType_cbc;
end;

function TXMLLossRiskType_cbcList.Get_Item(const Index: Integer): IXMLLossRiskType_cbc;
begin
  Result := List[Index] as IXMLLossRiskType_cbc;
end;

{ TXMLDeliveryUnitType_cac }

procedure TXMLDeliveryUnitType_cac.AfterConstruction;
begin
  RegisterChildNode('BatchQuantity', TXMLBatchQuantityType_cbc);
  RegisterChildNode('ConsumerUnitQuantity', TXMLConsumerUnitQuantityType_cbc);
  RegisterChildNode('HazardousRiskIndicator', TXMLHazardousRiskIndicatorType_cbc);
  inherited;
end;

function TXMLDeliveryUnitType_cac.Get_BatchQuantity: IXMLBatchQuantityType_cbc;
begin
  Result := ChildNodes['BatchQuantity'] as IXMLBatchQuantityType_cbc;
end;

function TXMLDeliveryUnitType_cac.Get_ConsumerUnitQuantity: IXMLConsumerUnitQuantityType_cbc;
begin
  Result := ChildNodes['ConsumerUnitQuantity'] as IXMLConsumerUnitQuantityType_cbc;
end;

function TXMLDeliveryUnitType_cac.Get_HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc;
begin
  Result := ChildNodes['HazardousRiskIndicator'] as IXMLHazardousRiskIndicatorType_cbc;
end;

{ TXMLDeliveryUnitType_cacList }

function TXMLDeliveryUnitType_cacList.Add: IXMLDeliveryUnitType_cac;
begin
  Result := AddItem(-1) as IXMLDeliveryUnitType_cac;
end;

function TXMLDeliveryUnitType_cacList.Insert(const Index: Integer): IXMLDeliveryUnitType_cac;
begin
  Result := AddItem(Index) as IXMLDeliveryUnitType_cac;
end;

function TXMLDeliveryUnitType_cacList.Get_Item(const Index: Integer): IXMLDeliveryUnitType_cac;
begin
  Result := List[Index] as IXMLDeliveryUnitType_cac;
end;

{ TXMLBatchQuantityType_cbc }

{ TXMLConsumerUnitQuantityType_cbc }

{ TXMLHazardousRiskIndicatorType_cbc }

{ TXMLShipmentType_cac }

procedure TXMLShipmentType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('ShippingPriorityLevelCode', TXMLShippingPriorityLevelCodeType_cbc);
  RegisterChildNode('HandlingCode', TXMLHandlingCodeType_cbc);
  RegisterChildNode('HandlingInstructions', TXMLHandlingInstructionsType_cbc);
  RegisterChildNode('Information', TXMLInformationType_cbc);
  RegisterChildNode('GrossWeightMeasure', TXMLGrossWeightMeasureType_cbc);
  RegisterChildNode('NetWeightMeasure', TXMLNetWeightMeasureType_cbc);
  RegisterChildNode('NetNetWeightMeasure', TXMLNetNetWeightMeasureType_cbc);
  RegisterChildNode('GrossVolumeMeasure', TXMLGrossVolumeMeasureType_cbc);
  RegisterChildNode('NetVolumeMeasure', TXMLNetVolumeMeasureType_cbc);
  RegisterChildNode('TotalGoodsItemQuantity', TXMLTotalGoodsItemQuantityType_cbc);
  RegisterChildNode('TotalTransportHandlingUnitQuantity', TXMLTotalTransportHandlingUnitQuantityType_cbc);
  RegisterChildNode('InsuranceValueAmount', TXMLInsuranceValueAmountType_cbc);
  RegisterChildNode('DeclaredCustomsValueAmount', TXMLDeclaredCustomsValueAmountType_cbc);
  RegisterChildNode('DeclaredForCarriageValueAmount', TXMLDeclaredForCarriageValueAmountType_cbc);
  RegisterChildNode('DeclaredStatisticsValueAmount', TXMLDeclaredStatisticsValueAmountType_cbc);
  RegisterChildNode('FreeOnBoardValueAmount', TXMLFreeOnBoardValueAmountType_cbc);
  RegisterChildNode('SpecialInstructions', TXMLSpecialInstructionsType_cbc);
  RegisterChildNode('DeliveryInstructions', TXMLDeliveryInstructionsType_cbc);
  RegisterChildNode('SplitConsignmentIndicator', TXMLSplitConsignmentIndicatorType_cbc);
  RegisterChildNode('ConsignmentQuantity', TXMLConsignmentQuantityType_cbc);
  RegisterChildNode('Consignment', TXMLConsignmentType_cac);
  RegisterChildNode('GoodsItem', TXMLGoodsItemType_cac);
  RegisterChildNode('ShipmentStage', TXMLShipmentStageType_cac);
  RegisterChildNode('Delivery', TXMLDeliveryType_cac);
  RegisterChildNode('TransportHandlingUnit', TXMLTransportHandlingUnitType_cac);
  RegisterChildNode('ReturnAddress', TXMLAddressType_cac);
  RegisterChildNode('OriginAddress', TXMLAddressType_cac);
  RegisterChildNode('FirstArrivalPortLocation', TXMLLocationType_cac);
  RegisterChildNode('LastExitPortLocation', TXMLLocationType_cac);
  RegisterChildNode('ExportCountry', TXMLCountryType_cac);
  RegisterChildNode('FreightAllowanceCharge', TXMLAllowanceChargeType_cac);
  FHandlingInstructions := CreateCollection(TXMLHandlingInstructionsType_cbcList, IXMLHandlingInstructionsType_cbc, 'HandlingInstructions') as IXMLHandlingInstructionsType_cbcList;
  FInformation := CreateCollection(TXMLInformationType_cbcList, IXMLInformationType_cbc, 'Information') as IXMLInformationType_cbcList;
  FSpecialInstructions := CreateCollection(TXMLSpecialInstructionsType_cbcList, IXMLSpecialInstructionsType_cbc, 'SpecialInstructions') as IXMLSpecialInstructionsType_cbcList;
  FDeliveryInstructions := CreateCollection(TXMLDeliveryInstructionsType_cbcList, IXMLDeliveryInstructionsType_cbc, 'DeliveryInstructions') as IXMLDeliveryInstructionsType_cbcList;
  FConsignment := CreateCollection(TXMLConsignmentType_cacList, IXMLConsignmentType_cac, 'Consignment') as IXMLConsignmentType_cacList;
  FGoodsItem := CreateCollection(TXMLGoodsItemType_cacList, IXMLGoodsItemType_cac, 'GoodsItem') as IXMLGoodsItemType_cacList;
  FShipmentStage := CreateCollection(TXMLShipmentStageType_cacList, IXMLShipmentStageType_cac, 'ShipmentStage') as IXMLShipmentStageType_cacList;
  FTransportHandlingUnit := CreateCollection(TXMLTransportHandlingUnitType_cacList, IXMLTransportHandlingUnitType_cac, 'TransportHandlingUnit') as IXMLTransportHandlingUnitType_cacList;
  FFreightAllowanceCharge := CreateCollection(TXMLAllowanceChargeType_cacList, IXMLAllowanceChargeType_cac, 'FreightAllowanceCharge') as IXMLAllowanceChargeType_cacList;
  inherited;
end;

function TXMLShipmentType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLShipmentType_cac.Get_ShippingPriorityLevelCode: IXMLShippingPriorityLevelCodeType_cbc;
begin
  Result := ChildNodes['ShippingPriorityLevelCode'] as IXMLShippingPriorityLevelCodeType_cbc;
end;

function TXMLShipmentType_cac.Get_HandlingCode: IXMLHandlingCodeType_cbc;
begin
  Result := ChildNodes['HandlingCode'] as IXMLHandlingCodeType_cbc;
end;

function TXMLShipmentType_cac.Get_HandlingInstructions: IXMLHandlingInstructionsType_cbcList;
begin
  Result := FHandlingInstructions;
end;

function TXMLShipmentType_cac.Get_Information: IXMLInformationType_cbcList;
begin
  Result := FInformation;
end;

function TXMLShipmentType_cac.Get_GrossWeightMeasure: IXMLGrossWeightMeasureType_cbc;
begin
  Result := ChildNodes['GrossWeightMeasure'] as IXMLGrossWeightMeasureType_cbc;
end;

function TXMLShipmentType_cac.Get_NetWeightMeasure: IXMLNetWeightMeasureType_cbc;
begin
  Result := ChildNodes['NetWeightMeasure'] as IXMLNetWeightMeasureType_cbc;
end;

function TXMLShipmentType_cac.Get_NetNetWeightMeasure: IXMLNetNetWeightMeasureType_cbc;
begin
  Result := ChildNodes['NetNetWeightMeasure'] as IXMLNetNetWeightMeasureType_cbc;
end;

function TXMLShipmentType_cac.Get_GrossVolumeMeasure: IXMLGrossVolumeMeasureType_cbc;
begin
  Result := ChildNodes['GrossVolumeMeasure'] as IXMLGrossVolumeMeasureType_cbc;
end;

function TXMLShipmentType_cac.Get_NetVolumeMeasure: IXMLNetVolumeMeasureType_cbc;
begin
  Result := ChildNodes['NetVolumeMeasure'] as IXMLNetVolumeMeasureType_cbc;
end;

function TXMLShipmentType_cac.Get_TotalGoodsItemQuantity: IXMLTotalGoodsItemQuantityType_cbc;
begin
  Result := ChildNodes['TotalGoodsItemQuantity'] as IXMLTotalGoodsItemQuantityType_cbc;
end;

function TXMLShipmentType_cac.Get_TotalTransportHandlingUnitQuantity: IXMLTotalTransportHandlingUnitQuantityType_cbc;
begin
  Result := ChildNodes['TotalTransportHandlingUnitQuantity'] as IXMLTotalTransportHandlingUnitQuantityType_cbc;
end;

function TXMLShipmentType_cac.Get_InsuranceValueAmount: IXMLInsuranceValueAmountType_cbc;
begin
  Result := ChildNodes['InsuranceValueAmount'] as IXMLInsuranceValueAmountType_cbc;
end;

function TXMLShipmentType_cac.Get_DeclaredCustomsValueAmount: IXMLDeclaredCustomsValueAmountType_cbc;
begin
  Result := ChildNodes['DeclaredCustomsValueAmount'] as IXMLDeclaredCustomsValueAmountType_cbc;
end;

function TXMLShipmentType_cac.Get_DeclaredForCarriageValueAmount: IXMLDeclaredForCarriageValueAmountType_cbc;
begin
  Result := ChildNodes['DeclaredForCarriageValueAmount'] as IXMLDeclaredForCarriageValueAmountType_cbc;
end;

function TXMLShipmentType_cac.Get_DeclaredStatisticsValueAmount: IXMLDeclaredStatisticsValueAmountType_cbc;
begin
  Result := ChildNodes['DeclaredStatisticsValueAmount'] as IXMLDeclaredStatisticsValueAmountType_cbc;
end;

function TXMLShipmentType_cac.Get_FreeOnBoardValueAmount: IXMLFreeOnBoardValueAmountType_cbc;
begin
  Result := ChildNodes['FreeOnBoardValueAmount'] as IXMLFreeOnBoardValueAmountType_cbc;
end;

function TXMLShipmentType_cac.Get_SpecialInstructions: IXMLSpecialInstructionsType_cbcList;
begin
  Result := FSpecialInstructions;
end;

function TXMLShipmentType_cac.Get_DeliveryInstructions: IXMLDeliveryInstructionsType_cbcList;
begin
  Result := FDeliveryInstructions;
end;

function TXMLShipmentType_cac.Get_SplitConsignmentIndicator: IXMLSplitConsignmentIndicatorType_cbc;
begin
  Result := ChildNodes['SplitConsignmentIndicator'] as IXMLSplitConsignmentIndicatorType_cbc;
end;

function TXMLShipmentType_cac.Get_ConsignmentQuantity: IXMLConsignmentQuantityType_cbc;
begin
  Result := ChildNodes['ConsignmentQuantity'] as IXMLConsignmentQuantityType_cbc;
end;

function TXMLShipmentType_cac.Get_Consignment: IXMLConsignmentType_cacList;
begin
  Result := FConsignment;
end;

function TXMLShipmentType_cac.Get_GoodsItem: IXMLGoodsItemType_cacList;
begin
  Result := FGoodsItem;
end;

function TXMLShipmentType_cac.Get_ShipmentStage: IXMLShipmentStageType_cacList;
begin
  Result := FShipmentStage;
end;

function TXMLShipmentType_cac.Get_Delivery: IXMLDeliveryType_cac;
begin
  Result := ChildNodes['Delivery'] as IXMLDeliveryType_cac;
end;

function TXMLShipmentType_cac.Get_TransportHandlingUnit: IXMLTransportHandlingUnitType_cacList;
begin
  Result := FTransportHandlingUnit;
end;

function TXMLShipmentType_cac.Get_ReturnAddress: IXMLAddressType_cac;
begin
  Result := ChildNodes['ReturnAddress'] as IXMLAddressType_cac;
end;

function TXMLShipmentType_cac.Get_OriginAddress: IXMLAddressType_cac;
begin
  Result := ChildNodes['OriginAddress'] as IXMLAddressType_cac;
end;

function TXMLShipmentType_cac.Get_FirstArrivalPortLocation: IXMLLocationType_cac;
begin
  Result := ChildNodes['FirstArrivalPortLocation'] as IXMLLocationType_cac;
end;

function TXMLShipmentType_cac.Get_LastExitPortLocation: IXMLLocationType_cac;
begin
  Result := ChildNodes['LastExitPortLocation'] as IXMLLocationType_cac;
end;

function TXMLShipmentType_cac.Get_ExportCountry: IXMLCountryType_cac;
begin
  Result := ChildNodes['ExportCountry'] as IXMLCountryType_cac;
end;

function TXMLShipmentType_cac.Get_FreightAllowanceCharge: IXMLAllowanceChargeType_cacList;
begin
  Result := FFreightAllowanceCharge;
end;

{ TXMLShipmentType_cacList }

function TXMLShipmentType_cacList.Add: IXMLShipmentType_cac;
begin
  Result := AddItem(-1) as IXMLShipmentType_cac;
end;

function TXMLShipmentType_cacList.Insert(const Index: Integer): IXMLShipmentType_cac;
begin
  Result := AddItem(Index) as IXMLShipmentType_cac;
end;

function TXMLShipmentType_cacList.Get_Item(const Index: Integer): IXMLShipmentType_cac;
begin
  Result := List[Index] as IXMLShipmentType_cac;
end;

{ TXMLShippingPriorityLevelCodeType_cbc }

{ TXMLHandlingCodeType_cbc }

{ TXMLHandlingInstructionsType_cbc }

{ TXMLHandlingInstructionsType_cbcList }

function TXMLHandlingInstructionsType_cbcList.Add: IXMLHandlingInstructionsType_cbc;
begin
  Result := AddItem(-1) as IXMLHandlingInstructionsType_cbc;
end;

function TXMLHandlingInstructionsType_cbcList.Insert(const Index: Integer): IXMLHandlingInstructionsType_cbc;
begin
  Result := AddItem(Index) as IXMLHandlingInstructionsType_cbc;
end;

function TXMLHandlingInstructionsType_cbcList.Get_Item(const Index: Integer): IXMLHandlingInstructionsType_cbc;
begin
  Result := List[Index] as IXMLHandlingInstructionsType_cbc;
end;

{ TXMLInformationType_cbc }

{ TXMLInformationType_cbcList }

function TXMLInformationType_cbcList.Add: IXMLInformationType_cbc;
begin
  Result := AddItem(-1) as IXMLInformationType_cbc;
end;

function TXMLInformationType_cbcList.Insert(const Index: Integer): IXMLInformationType_cbc;
begin
  Result := AddItem(Index) as IXMLInformationType_cbc;
end;

function TXMLInformationType_cbcList.Get_Item(const Index: Integer): IXMLInformationType_cbc;
begin
  Result := List[Index] as IXMLInformationType_cbc;
end;

{ TXMLGrossWeightMeasureType_cbc }

{ TXMLNetWeightMeasureType_cbc }

{ TXMLNetNetWeightMeasureType_cbc }

{ TXMLGrossVolumeMeasureType_cbc }

{ TXMLNetVolumeMeasureType_cbc }

{ TXMLTotalGoodsItemQuantityType_cbc }

{ TXMLTotalTransportHandlingUnitQuantityType_cbc }

{ TXMLInsuranceValueAmountType_cbc }

{ TXMLDeclaredCustomsValueAmountType_cbc }

{ TXMLDeclaredForCarriageValueAmountType_cbc }

{ TXMLDeclaredStatisticsValueAmountType_cbc }

{ TXMLFreeOnBoardValueAmountType_cbc }

{ TXMLSpecialInstructionsType_cbc }

{ TXMLSpecialInstructionsType_cbcList }

function TXMLSpecialInstructionsType_cbcList.Add: IXMLSpecialInstructionsType_cbc;
begin
  Result := AddItem(-1) as IXMLSpecialInstructionsType_cbc;
end;

function TXMLSpecialInstructionsType_cbcList.Insert(const Index: Integer): IXMLSpecialInstructionsType_cbc;
begin
  Result := AddItem(Index) as IXMLSpecialInstructionsType_cbc;
end;

function TXMLSpecialInstructionsType_cbcList.Get_Item(const Index: Integer): IXMLSpecialInstructionsType_cbc;
begin
  Result := List[Index] as IXMLSpecialInstructionsType_cbc;
end;

{ TXMLDeliveryInstructionsType_cbc }

{ TXMLDeliveryInstructionsType_cbcList }

function TXMLDeliveryInstructionsType_cbcList.Add: IXMLDeliveryInstructionsType_cbc;
begin
  Result := AddItem(-1) as IXMLDeliveryInstructionsType_cbc;
end;

function TXMLDeliveryInstructionsType_cbcList.Insert(const Index: Integer): IXMLDeliveryInstructionsType_cbc;
begin
  Result := AddItem(Index) as IXMLDeliveryInstructionsType_cbc;
end;

function TXMLDeliveryInstructionsType_cbcList.Get_Item(const Index: Integer): IXMLDeliveryInstructionsType_cbc;
begin
  Result := List[Index] as IXMLDeliveryInstructionsType_cbc;
end;

{ TXMLSplitConsignmentIndicatorType_cbc }

{ TXMLConsignmentQuantityType_cbc }

{ TXMLConsignmentType_cac }

procedure TXMLConsignmentType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('CarrierAssignedID', TXMLCarrierAssignedIDType_cbc);
  RegisterChildNode('ConsigneeAssignedID', TXMLConsigneeAssignedIDType_cbc);
  RegisterChildNode('ConsignorAssignedID', TXMLConsignorAssignedIDType_cbc);
  RegisterChildNode('FreightForwarderAssignedID', TXMLFreightForwarderAssignedIDType_cbc);
  RegisterChildNode('BrokerAssignedID', TXMLBrokerAssignedIDType_cbc);
  RegisterChildNode('ContractedCarrierAssignedID', TXMLContractedCarrierAssignedIDType_cbc);
  RegisterChildNode('PerformingCarrierAssignedID', TXMLPerformingCarrierAssignedIDType_cbc);
  RegisterChildNode('SummaryDescription', TXMLSummaryDescriptionType_cbc);
  RegisterChildNode('TotalInvoiceAmount', TXMLTotalInvoiceAmountType_cbc);
  RegisterChildNode('DeclaredCustomsValueAmount', TXMLDeclaredCustomsValueAmountType_cbc);
  RegisterChildNode('TariffDescription', TXMLTariffDescriptionType_cbc);
  RegisterChildNode('TariffCode', TXMLTariffCodeType_cbc);
  RegisterChildNode('InsurancePremiumAmount', TXMLInsurancePremiumAmountType_cbc);
  RegisterChildNode('GrossWeightMeasure', TXMLGrossWeightMeasureType_cbc);
  RegisterChildNode('NetWeightMeasure', TXMLNetWeightMeasureType_cbc);
  RegisterChildNode('NetNetWeightMeasure', TXMLNetNetWeightMeasureType_cbc);
  RegisterChildNode('ChargeableWeightMeasure', TXMLChargeableWeightMeasureType_cbc);
  RegisterChildNode('GrossVolumeMeasure', TXMLGrossVolumeMeasureType_cbc);
  RegisterChildNode('NetVolumeMeasure', TXMLNetVolumeMeasureType_cbc);
  RegisterChildNode('LoadingLengthMeasure', TXMLLoadingLengthMeasureType_cbc);
  RegisterChildNode('Remarks', TXMLRemarksType_cbc);
  RegisterChildNode('HazardousRiskIndicator', TXMLHazardousRiskIndicatorType_cbc);
  RegisterChildNode('AnimalFoodIndicator', TXMLAnimalFoodIndicatorType_cbc);
  RegisterChildNode('HumanFoodIndicator', TXMLHumanFoodIndicatorType_cbc);
  RegisterChildNode('LivestockIndicator', TXMLLivestockIndicatorType_cbc);
  RegisterChildNode('BulkCargoIndicator', TXMLBulkCargoIndicatorType_cbc);
  RegisterChildNode('ContainerizedIndicator', TXMLContainerizedIndicatorType_cbc);
  RegisterChildNode('GeneralCargoIndicator', TXMLGeneralCargoIndicatorType_cbc);
  RegisterChildNode('SpecialSecurityIndicator', TXMLSpecialSecurityIndicatorType_cbc);
  RegisterChildNode('ThirdPartyPayerIndicator', TXMLThirdPartyPayerIndicatorType_cbc);
  RegisterChildNode('CarrierServiceInstructions', TXMLCarrierServiceInstructionsType_cbc);
  RegisterChildNode('CustomsClearanceServiceInstructions', TXMLCustomsClearanceServiceInstructionsType_cbc);
  RegisterChildNode('ForwarderServiceInstructions', TXMLForwarderServiceInstructionsType_cbc);
  RegisterChildNode('SpecialServiceInstructions', TXMLSpecialServiceInstructionsType_cbc);
  RegisterChildNode('SequenceID', TXMLSequenceIDType_cbc);
  RegisterChildNode('ShippingPriorityLevelCode', TXMLShippingPriorityLevelCodeType_cbc);
  RegisterChildNode('HandlingCode', TXMLHandlingCodeType_cbc);
  RegisterChildNode('HandlingInstructions', TXMLHandlingInstructionsType_cbc);
  RegisterChildNode('Information', TXMLInformationType_cbc);
  RegisterChildNode('TotalGoodsItemQuantity', TXMLTotalGoodsItemQuantityType_cbc);
  RegisterChildNode('TotalTransportHandlingUnitQuantity', TXMLTotalTransportHandlingUnitQuantityType_cbc);
  RegisterChildNode('InsuranceValueAmount', TXMLInsuranceValueAmountType_cbc);
  RegisterChildNode('DeclaredForCarriageValueAmount', TXMLDeclaredForCarriageValueAmountType_cbc);
  RegisterChildNode('DeclaredStatisticsValueAmount', TXMLDeclaredStatisticsValueAmountType_cbc);
  RegisterChildNode('FreeOnBoardValueAmount', TXMLFreeOnBoardValueAmountType_cbc);
  RegisterChildNode('SpecialInstructions', TXMLSpecialInstructionsType_cbc);
  RegisterChildNode('SplitConsignmentIndicator', TXMLSplitConsignmentIndicatorType_cbc);
  RegisterChildNode('DeliveryInstructions', TXMLDeliveryInstructionsType_cbc);
  RegisterChildNode('ConsignmentQuantity', TXMLConsignmentQuantityType_cbc);
  RegisterChildNode('ConsolidatableIndicator', TXMLConsolidatableIndicatorType_cbc);
  RegisterChildNode('HaulageInstructions', TXMLHaulageInstructionsType_cbc);
  RegisterChildNode('LoadingSequenceID', TXMLLoadingSequenceIDType_cbc);
  RegisterChildNode('ChildConsignmentQuantity', TXMLChildConsignmentQuantityType_cbc);
  RegisterChildNode('TotalPackagesQuantity', TXMLTotalPackagesQuantityType_cbc);
  RegisterChildNode('ConsolidatedShipment', TXMLShipmentType_cac);
  RegisterChildNode('CustomsDeclaration', TXMLCustomsDeclarationType_cac);
  RegisterChildNode('RequestedPickupTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('RequestedDeliveryTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('PlannedPickupTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('PlannedDeliveryTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('Status', TXMLStatusType_cac);
  RegisterChildNode('ChildConsignment', TXMLConsignmentType_cac);
  RegisterChildNode('ConsigneeParty', TXMLPartyType_cac);
  RegisterChildNode('ExporterParty', TXMLPartyType_cac);
  RegisterChildNode('ConsignorParty', TXMLPartyType_cac);
  RegisterChildNode('ImporterParty', TXMLPartyType_cac);
  RegisterChildNode('CarrierParty', TXMLPartyType_cac);
  RegisterChildNode('FreightForwarderParty', TXMLPartyType_cac);
  RegisterChildNode('NotifyParty', TXMLPartyType_cac);
  RegisterChildNode('OriginalDespatchParty', TXMLPartyType_cac);
  RegisterChildNode('FinalDeliveryParty', TXMLPartyType_cac);
  RegisterChildNode('PerformingCarrierParty', TXMLPartyType_cac);
  RegisterChildNode('SubstituteCarrierParty', TXMLPartyType_cac);
  RegisterChildNode('LogisticsOperatorParty', TXMLPartyType_cac);
  RegisterChildNode('TransportAdvisorParty', TXMLPartyType_cac);
  RegisterChildNode('HazardousItemNotificationParty', TXMLPartyType_cac);
  RegisterChildNode('InsuranceParty', TXMLPartyType_cac);
  RegisterChildNode('MortgageHolderParty', TXMLPartyType_cac);
  RegisterChildNode('BillOfLadingHolderParty', TXMLPartyType_cac);
  RegisterChildNode('OriginalDepartureCountry', TXMLCountryType_cac);
  RegisterChildNode('FinalDestinationCountry', TXMLCountryType_cac);
  RegisterChildNode('TransitCountry', TXMLCountryType_cac);
  RegisterChildNode('TransportContract', TXMLContractType_cac);
  RegisterChildNode('TransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('OriginalDespatchTransportationService', TXMLTransportationServiceType_cac);
  RegisterChildNode('FinalDeliveryTransportationService', TXMLTransportationServiceType_cac);
  RegisterChildNode('DeliveryTerms', TXMLDeliveryTermsType_cac);
  RegisterChildNode('PaymentTerms', TXMLPaymentTermsType_cac);
  RegisterChildNode('CollectPaymentTerms', TXMLPaymentTermsType_cac);
  RegisterChildNode('DisbursementPaymentTerms', TXMLPaymentTermsType_cac);
  RegisterChildNode('PrepaidPaymentTerms', TXMLPaymentTermsType_cac);
  RegisterChildNode('FreightAllowanceCharge', TXMLAllowanceChargeType_cac);
  RegisterChildNode('ExtraAllowanceCharge', TXMLAllowanceChargeType_cac);
  RegisterChildNode('MainCarriageShipmentStage', TXMLShipmentStageType_cac);
  RegisterChildNode('PreCarriageShipmentStage', TXMLShipmentStageType_cac);
  RegisterChildNode('OnCarriageShipmentStage', TXMLShipmentStageType_cac);
  RegisterChildNode('TransportHandlingUnit', TXMLTransportHandlingUnitType_cac);
  RegisterChildNode('FirstArrivalPortLocation', TXMLLocationType_cac);
  RegisterChildNode('LastExitPortLocation', TXMLLocationType_cac);
  FSummaryDescription := CreateCollection(TXMLSummaryDescriptionType_cbcList, IXMLSummaryDescriptionType_cbc, 'SummaryDescription') as IXMLSummaryDescriptionType_cbcList;
  FTariffDescription := CreateCollection(TXMLTariffDescriptionType_cbcList, IXMLTariffDescriptionType_cbc, 'TariffDescription') as IXMLTariffDescriptionType_cbcList;
  FRemarks := CreateCollection(TXMLRemarksType_cbcList, IXMLRemarksType_cbc, 'Remarks') as IXMLRemarksType_cbcList;
  FCarrierServiceInstructions := CreateCollection(TXMLCarrierServiceInstructionsType_cbcList, IXMLCarrierServiceInstructionsType_cbc, 'CarrierServiceInstructions') as IXMLCarrierServiceInstructionsType_cbcList;
  FCustomsClearanceServiceInstructions := CreateCollection(TXMLCustomsClearanceServiceInstructionsType_cbcList, IXMLCustomsClearanceServiceInstructionsType_cbc, 'CustomsClearanceServiceInstructions') as IXMLCustomsClearanceServiceInstructionsType_cbcList;
  FForwarderServiceInstructions := CreateCollection(TXMLForwarderServiceInstructionsType_cbcList, IXMLForwarderServiceInstructionsType_cbc, 'ForwarderServiceInstructions') as IXMLForwarderServiceInstructionsType_cbcList;
  FSpecialServiceInstructions := CreateCollection(TXMLSpecialServiceInstructionsType_cbcList, IXMLSpecialServiceInstructionsType_cbc, 'SpecialServiceInstructions') as IXMLSpecialServiceInstructionsType_cbcList;
  FHandlingInstructions := CreateCollection(TXMLHandlingInstructionsType_cbcList, IXMLHandlingInstructionsType_cbc, 'HandlingInstructions') as IXMLHandlingInstructionsType_cbcList;
  FInformation := CreateCollection(TXMLInformationType_cbcList, IXMLInformationType_cbc, 'Information') as IXMLInformationType_cbcList;
  FSpecialInstructions := CreateCollection(TXMLSpecialInstructionsType_cbcList, IXMLSpecialInstructionsType_cbc, 'SpecialInstructions') as IXMLSpecialInstructionsType_cbcList;
  FDeliveryInstructions := CreateCollection(TXMLDeliveryInstructionsType_cbcList, IXMLDeliveryInstructionsType_cbc, 'DeliveryInstructions') as IXMLDeliveryInstructionsType_cbcList;
  FHaulageInstructions := CreateCollection(TXMLHaulageInstructionsType_cbcList, IXMLHaulageInstructionsType_cbc, 'HaulageInstructions') as IXMLHaulageInstructionsType_cbcList;
  FConsolidatedShipment := CreateCollection(TXMLShipmentType_cacList, IXMLShipmentType_cac, 'ConsolidatedShipment') as IXMLShipmentType_cacList;
  FCustomsDeclaration := CreateCollection(TXMLCustomsDeclarationType_cacList, IXMLCustomsDeclarationType_cac, 'CustomsDeclaration') as IXMLCustomsDeclarationType_cacList;
  FStatus := CreateCollection(TXMLStatusType_cacList, IXMLStatusType_cac, 'Status') as IXMLStatusType_cacList;
  FChildConsignment := CreateCollection(TXMLConsignmentType_cacList, IXMLConsignmentType_cac, 'ChildConsignment') as IXMLConsignmentType_cacList;
  FTransitCountry := CreateCollection(TXMLCountryType_cacList, IXMLCountryType_cac, 'TransitCountry') as IXMLCountryType_cacList;
  FTransportEvent := CreateCollection(TXMLTransportEventType_cacList, IXMLTransportEventType_cac, 'TransportEvent') as IXMLTransportEventType_cacList;
  FFreightAllowanceCharge := CreateCollection(TXMLAllowanceChargeType_cacList, IXMLAllowanceChargeType_cac, 'FreightAllowanceCharge') as IXMLAllowanceChargeType_cacList;
  FExtraAllowanceCharge := CreateCollection(TXMLAllowanceChargeType_cacList, IXMLAllowanceChargeType_cac, 'ExtraAllowanceCharge') as IXMLAllowanceChargeType_cacList;
  FMainCarriageShipmentStage := CreateCollection(TXMLShipmentStageType_cacList, IXMLShipmentStageType_cac, 'MainCarriageShipmentStage') as IXMLShipmentStageType_cacList;
  FPreCarriageShipmentStage := CreateCollection(TXMLShipmentStageType_cacList, IXMLShipmentStageType_cac, 'PreCarriageShipmentStage') as IXMLShipmentStageType_cacList;
  FOnCarriageShipmentStage := CreateCollection(TXMLShipmentStageType_cacList, IXMLShipmentStageType_cac, 'OnCarriageShipmentStage') as IXMLShipmentStageType_cacList;
  FTransportHandlingUnit := CreateCollection(TXMLTransportHandlingUnitType_cacList, IXMLTransportHandlingUnitType_cac, 'TransportHandlingUnit') as IXMLTransportHandlingUnitType_cacList;
  inherited;
end;

function TXMLConsignmentType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLConsignmentType_cac.Get_CarrierAssignedID: IXMLCarrierAssignedIDType_cbc;
begin
  Result := ChildNodes['CarrierAssignedID'] as IXMLCarrierAssignedIDType_cbc;
end;

function TXMLConsignmentType_cac.Get_ConsigneeAssignedID: IXMLConsigneeAssignedIDType_cbc;
begin
  Result := ChildNodes['ConsigneeAssignedID'] as IXMLConsigneeAssignedIDType_cbc;
end;

function TXMLConsignmentType_cac.Get_ConsignorAssignedID: IXMLConsignorAssignedIDType_cbc;
begin
  Result := ChildNodes['ConsignorAssignedID'] as IXMLConsignorAssignedIDType_cbc;
end;

function TXMLConsignmentType_cac.Get_FreightForwarderAssignedID: IXMLFreightForwarderAssignedIDType_cbc;
begin
  Result := ChildNodes['FreightForwarderAssignedID'] as IXMLFreightForwarderAssignedIDType_cbc;
end;

function TXMLConsignmentType_cac.Get_BrokerAssignedID: IXMLBrokerAssignedIDType_cbc;
begin
  Result := ChildNodes['BrokerAssignedID'] as IXMLBrokerAssignedIDType_cbc;
end;

function TXMLConsignmentType_cac.Get_ContractedCarrierAssignedID: IXMLContractedCarrierAssignedIDType_cbc;
begin
  Result := ChildNodes['ContractedCarrierAssignedID'] as IXMLContractedCarrierAssignedIDType_cbc;
end;

function TXMLConsignmentType_cac.Get_PerformingCarrierAssignedID: IXMLPerformingCarrierAssignedIDType_cbc;
begin
  Result := ChildNodes['PerformingCarrierAssignedID'] as IXMLPerformingCarrierAssignedIDType_cbc;
end;

function TXMLConsignmentType_cac.Get_SummaryDescription: IXMLSummaryDescriptionType_cbcList;
begin
  Result := FSummaryDescription;
end;

function TXMLConsignmentType_cac.Get_TotalInvoiceAmount: IXMLTotalInvoiceAmountType_cbc;
begin
  Result := ChildNodes['TotalInvoiceAmount'] as IXMLTotalInvoiceAmountType_cbc;
end;

function TXMLConsignmentType_cac.Get_DeclaredCustomsValueAmount: IXMLDeclaredCustomsValueAmountType_cbc;
begin
  Result := ChildNodes['DeclaredCustomsValueAmount'] as IXMLDeclaredCustomsValueAmountType_cbc;
end;

function TXMLConsignmentType_cac.Get_TariffDescription: IXMLTariffDescriptionType_cbcList;
begin
  Result := FTariffDescription;
end;

function TXMLConsignmentType_cac.Get_TariffCode: IXMLTariffCodeType_cbc;
begin
  Result := ChildNodes['TariffCode'] as IXMLTariffCodeType_cbc;
end;

function TXMLConsignmentType_cac.Get_InsurancePremiumAmount: IXMLInsurancePremiumAmountType_cbc;
begin
  Result := ChildNodes['InsurancePremiumAmount'] as IXMLInsurancePremiumAmountType_cbc;
end;

function TXMLConsignmentType_cac.Get_GrossWeightMeasure: IXMLGrossWeightMeasureType_cbc;
begin
  Result := ChildNodes['GrossWeightMeasure'] as IXMLGrossWeightMeasureType_cbc;
end;

function TXMLConsignmentType_cac.Get_NetWeightMeasure: IXMLNetWeightMeasureType_cbc;
begin
  Result := ChildNodes['NetWeightMeasure'] as IXMLNetWeightMeasureType_cbc;
end;

function TXMLConsignmentType_cac.Get_NetNetWeightMeasure: IXMLNetNetWeightMeasureType_cbc;
begin
  Result := ChildNodes['NetNetWeightMeasure'] as IXMLNetNetWeightMeasureType_cbc;
end;

function TXMLConsignmentType_cac.Get_ChargeableWeightMeasure: IXMLChargeableWeightMeasureType_cbc;
begin
  Result := ChildNodes['ChargeableWeightMeasure'] as IXMLChargeableWeightMeasureType_cbc;
end;

function TXMLConsignmentType_cac.Get_GrossVolumeMeasure: IXMLGrossVolumeMeasureType_cbc;
begin
  Result := ChildNodes['GrossVolumeMeasure'] as IXMLGrossVolumeMeasureType_cbc;
end;

function TXMLConsignmentType_cac.Get_NetVolumeMeasure: IXMLNetVolumeMeasureType_cbc;
begin
  Result := ChildNodes['NetVolumeMeasure'] as IXMLNetVolumeMeasureType_cbc;
end;

function TXMLConsignmentType_cac.Get_LoadingLengthMeasure: IXMLLoadingLengthMeasureType_cbc;
begin
  Result := ChildNodes['LoadingLengthMeasure'] as IXMLLoadingLengthMeasureType_cbc;
end;

function TXMLConsignmentType_cac.Get_Remarks: IXMLRemarksType_cbcList;
begin
  Result := FRemarks;
end;

function TXMLConsignmentType_cac.Get_HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc;
begin
  Result := ChildNodes['HazardousRiskIndicator'] as IXMLHazardousRiskIndicatorType_cbc;
end;

function TXMLConsignmentType_cac.Get_AnimalFoodIndicator: IXMLAnimalFoodIndicatorType_cbc;
begin
  Result := ChildNodes['AnimalFoodIndicator'] as IXMLAnimalFoodIndicatorType_cbc;
end;

function TXMLConsignmentType_cac.Get_HumanFoodIndicator: IXMLHumanFoodIndicatorType_cbc;
begin
  Result := ChildNodes['HumanFoodIndicator'] as IXMLHumanFoodIndicatorType_cbc;
end;

function TXMLConsignmentType_cac.Get_LivestockIndicator: IXMLLivestockIndicatorType_cbc;
begin
  Result := ChildNodes['LivestockIndicator'] as IXMLLivestockIndicatorType_cbc;
end;

function TXMLConsignmentType_cac.Get_BulkCargoIndicator: IXMLBulkCargoIndicatorType_cbc;
begin
  Result := ChildNodes['BulkCargoIndicator'] as IXMLBulkCargoIndicatorType_cbc;
end;

function TXMLConsignmentType_cac.Get_ContainerizedIndicator: IXMLContainerizedIndicatorType_cbc;
begin
  Result := ChildNodes['ContainerizedIndicator'] as IXMLContainerizedIndicatorType_cbc;
end;

function TXMLConsignmentType_cac.Get_GeneralCargoIndicator: IXMLGeneralCargoIndicatorType_cbc;
begin
  Result := ChildNodes['GeneralCargoIndicator'] as IXMLGeneralCargoIndicatorType_cbc;
end;

function TXMLConsignmentType_cac.Get_SpecialSecurityIndicator: IXMLSpecialSecurityIndicatorType_cbc;
begin
  Result := ChildNodes['SpecialSecurityIndicator'] as IXMLSpecialSecurityIndicatorType_cbc;
end;

function TXMLConsignmentType_cac.Get_ThirdPartyPayerIndicator: IXMLThirdPartyPayerIndicatorType_cbc;
begin
  Result := ChildNodes['ThirdPartyPayerIndicator'] as IXMLThirdPartyPayerIndicatorType_cbc;
end;

function TXMLConsignmentType_cac.Get_CarrierServiceInstructions: IXMLCarrierServiceInstructionsType_cbcList;
begin
  Result := FCarrierServiceInstructions;
end;

function TXMLConsignmentType_cac.Get_CustomsClearanceServiceInstructions: IXMLCustomsClearanceServiceInstructionsType_cbcList;
begin
  Result := FCustomsClearanceServiceInstructions;
end;

function TXMLConsignmentType_cac.Get_ForwarderServiceInstructions: IXMLForwarderServiceInstructionsType_cbcList;
begin
  Result := FForwarderServiceInstructions;
end;

function TXMLConsignmentType_cac.Get_SpecialServiceInstructions: IXMLSpecialServiceInstructionsType_cbcList;
begin
  Result := FSpecialServiceInstructions;
end;

function TXMLConsignmentType_cac.Get_SequenceID: IXMLSequenceIDType_cbc;
begin
  Result := ChildNodes['SequenceID'] as IXMLSequenceIDType_cbc;
end;

function TXMLConsignmentType_cac.Get_ShippingPriorityLevelCode: IXMLShippingPriorityLevelCodeType_cbc;
begin
  Result := ChildNodes['ShippingPriorityLevelCode'] as IXMLShippingPriorityLevelCodeType_cbc;
end;

function TXMLConsignmentType_cac.Get_HandlingCode: IXMLHandlingCodeType_cbc;
begin
  Result := ChildNodes['HandlingCode'] as IXMLHandlingCodeType_cbc;
end;

function TXMLConsignmentType_cac.Get_HandlingInstructions: IXMLHandlingInstructionsType_cbcList;
begin
  Result := FHandlingInstructions;
end;

function TXMLConsignmentType_cac.Get_Information: IXMLInformationType_cbcList;
begin
  Result := FInformation;
end;

function TXMLConsignmentType_cac.Get_TotalGoodsItemQuantity: IXMLTotalGoodsItemQuantityType_cbc;
begin
  Result := ChildNodes['TotalGoodsItemQuantity'] as IXMLTotalGoodsItemQuantityType_cbc;
end;

function TXMLConsignmentType_cac.Get_TotalTransportHandlingUnitQuantity: IXMLTotalTransportHandlingUnitQuantityType_cbc;
begin
  Result := ChildNodes['TotalTransportHandlingUnitQuantity'] as IXMLTotalTransportHandlingUnitQuantityType_cbc;
end;

function TXMLConsignmentType_cac.Get_InsuranceValueAmount: IXMLInsuranceValueAmountType_cbc;
begin
  Result := ChildNodes['InsuranceValueAmount'] as IXMLInsuranceValueAmountType_cbc;
end;

function TXMLConsignmentType_cac.Get_DeclaredForCarriageValueAmount: IXMLDeclaredForCarriageValueAmountType_cbc;
begin
  Result := ChildNodes['DeclaredForCarriageValueAmount'] as IXMLDeclaredForCarriageValueAmountType_cbc;
end;

function TXMLConsignmentType_cac.Get_DeclaredStatisticsValueAmount: IXMLDeclaredStatisticsValueAmountType_cbc;
begin
  Result := ChildNodes['DeclaredStatisticsValueAmount'] as IXMLDeclaredStatisticsValueAmountType_cbc;
end;

function TXMLConsignmentType_cac.Get_FreeOnBoardValueAmount: IXMLFreeOnBoardValueAmountType_cbc;
begin
  Result := ChildNodes['FreeOnBoardValueAmount'] as IXMLFreeOnBoardValueAmountType_cbc;
end;

function TXMLConsignmentType_cac.Get_SpecialInstructions: IXMLSpecialInstructionsType_cbcList;
begin
  Result := FSpecialInstructions;
end;

function TXMLConsignmentType_cac.Get_SplitConsignmentIndicator: IXMLSplitConsignmentIndicatorType_cbc;
begin
  Result := ChildNodes['SplitConsignmentIndicator'] as IXMLSplitConsignmentIndicatorType_cbc;
end;

function TXMLConsignmentType_cac.Get_DeliveryInstructions: IXMLDeliveryInstructionsType_cbcList;
begin
  Result := FDeliveryInstructions;
end;

function TXMLConsignmentType_cac.Get_ConsignmentQuantity: IXMLConsignmentQuantityType_cbc;
begin
  Result := ChildNodes['ConsignmentQuantity'] as IXMLConsignmentQuantityType_cbc;
end;

function TXMLConsignmentType_cac.Get_ConsolidatableIndicator: IXMLConsolidatableIndicatorType_cbc;
begin
  Result := ChildNodes['ConsolidatableIndicator'] as IXMLConsolidatableIndicatorType_cbc;
end;

function TXMLConsignmentType_cac.Get_HaulageInstructions: IXMLHaulageInstructionsType_cbcList;
begin
  Result := FHaulageInstructions;
end;

function TXMLConsignmentType_cac.Get_LoadingSequenceID: IXMLLoadingSequenceIDType_cbc;
begin
  Result := ChildNodes['LoadingSequenceID'] as IXMLLoadingSequenceIDType_cbc;
end;

function TXMLConsignmentType_cac.Get_ChildConsignmentQuantity: IXMLChildConsignmentQuantityType_cbc;
begin
  Result := ChildNodes['ChildConsignmentQuantity'] as IXMLChildConsignmentQuantityType_cbc;
end;

function TXMLConsignmentType_cac.Get_TotalPackagesQuantity: IXMLTotalPackagesQuantityType_cbc;
begin
  Result := ChildNodes['TotalPackagesQuantity'] as IXMLTotalPackagesQuantityType_cbc;
end;

function TXMLConsignmentType_cac.Get_ConsolidatedShipment: IXMLShipmentType_cacList;
begin
  Result := FConsolidatedShipment;
end;

function TXMLConsignmentType_cac.Get_CustomsDeclaration: IXMLCustomsDeclarationType_cacList;
begin
  Result := FCustomsDeclaration;
end;

function TXMLConsignmentType_cac.Get_RequestedPickupTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['RequestedPickupTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLConsignmentType_cac.Get_RequestedDeliveryTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['RequestedDeliveryTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLConsignmentType_cac.Get_PlannedPickupTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['PlannedPickupTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLConsignmentType_cac.Get_PlannedDeliveryTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['PlannedDeliveryTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLConsignmentType_cac.Get_Status: IXMLStatusType_cacList;
begin
  Result := FStatus;
end;

function TXMLConsignmentType_cac.Get_ChildConsignment: IXMLConsignmentType_cacList;
begin
  Result := FChildConsignment;
end;

function TXMLConsignmentType_cac.Get_ConsigneeParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['ConsigneeParty'] as IXMLPartyType_cac;
end;

function TXMLConsignmentType_cac.Get_ExporterParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['ExporterParty'] as IXMLPartyType_cac;
end;

function TXMLConsignmentType_cac.Get_ConsignorParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['ConsignorParty'] as IXMLPartyType_cac;
end;

function TXMLConsignmentType_cac.Get_ImporterParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['ImporterParty'] as IXMLPartyType_cac;
end;

function TXMLConsignmentType_cac.Get_CarrierParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['CarrierParty'] as IXMLPartyType_cac;
end;

function TXMLConsignmentType_cac.Get_FreightForwarderParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['FreightForwarderParty'] as IXMLPartyType_cac;
end;

function TXMLConsignmentType_cac.Get_NotifyParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['NotifyParty'] as IXMLPartyType_cac;
end;

function TXMLConsignmentType_cac.Get_OriginalDespatchParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['OriginalDespatchParty'] as IXMLPartyType_cac;
end;

function TXMLConsignmentType_cac.Get_FinalDeliveryParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['FinalDeliveryParty'] as IXMLPartyType_cac;
end;

function TXMLConsignmentType_cac.Get_PerformingCarrierParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['PerformingCarrierParty'] as IXMLPartyType_cac;
end;

function TXMLConsignmentType_cac.Get_SubstituteCarrierParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['SubstituteCarrierParty'] as IXMLPartyType_cac;
end;

function TXMLConsignmentType_cac.Get_LogisticsOperatorParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['LogisticsOperatorParty'] as IXMLPartyType_cac;
end;

function TXMLConsignmentType_cac.Get_TransportAdvisorParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['TransportAdvisorParty'] as IXMLPartyType_cac;
end;

function TXMLConsignmentType_cac.Get_HazardousItemNotificationParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['HazardousItemNotificationParty'] as IXMLPartyType_cac;
end;

function TXMLConsignmentType_cac.Get_InsuranceParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['InsuranceParty'] as IXMLPartyType_cac;
end;

function TXMLConsignmentType_cac.Get_MortgageHolderParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['MortgageHolderParty'] as IXMLPartyType_cac;
end;

function TXMLConsignmentType_cac.Get_BillOfLadingHolderParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['BillOfLadingHolderParty'] as IXMLPartyType_cac;
end;

function TXMLConsignmentType_cac.Get_OriginalDepartureCountry: IXMLCountryType_cac;
begin
  Result := ChildNodes['OriginalDepartureCountry'] as IXMLCountryType_cac;
end;

function TXMLConsignmentType_cac.Get_FinalDestinationCountry: IXMLCountryType_cac;
begin
  Result := ChildNodes['FinalDestinationCountry'] as IXMLCountryType_cac;
end;

function TXMLConsignmentType_cac.Get_TransitCountry: IXMLCountryType_cacList;
begin
  Result := FTransitCountry;
end;

function TXMLConsignmentType_cac.Get_TransportContract: IXMLContractType_cac;
begin
  Result := ChildNodes['TransportContract'] as IXMLContractType_cac;
end;

function TXMLConsignmentType_cac.Get_TransportEvent: IXMLTransportEventType_cacList;
begin
  Result := FTransportEvent;
end;

function TXMLConsignmentType_cac.Get_OriginalDespatchTransportationService: IXMLTransportationServiceType_cac;
begin
  Result := ChildNodes['OriginalDespatchTransportationService'] as IXMLTransportationServiceType_cac;
end;

function TXMLConsignmentType_cac.Get_FinalDeliveryTransportationService: IXMLTransportationServiceType_cac;
begin
  Result := ChildNodes['FinalDeliveryTransportationService'] as IXMLTransportationServiceType_cac;
end;

function TXMLConsignmentType_cac.Get_DeliveryTerms: IXMLDeliveryTermsType_cac;
begin
  Result := ChildNodes['DeliveryTerms'] as IXMLDeliveryTermsType_cac;
end;

function TXMLConsignmentType_cac.Get_PaymentTerms: IXMLPaymentTermsType_cac;
begin
  Result := ChildNodes['PaymentTerms'] as IXMLPaymentTermsType_cac;
end;

function TXMLConsignmentType_cac.Get_CollectPaymentTerms: IXMLPaymentTermsType_cac;
begin
  Result := ChildNodes['CollectPaymentTerms'] as IXMLPaymentTermsType_cac;
end;

function TXMLConsignmentType_cac.Get_DisbursementPaymentTerms: IXMLPaymentTermsType_cac;
begin
  Result := ChildNodes['DisbursementPaymentTerms'] as IXMLPaymentTermsType_cac;
end;

function TXMLConsignmentType_cac.Get_PrepaidPaymentTerms: IXMLPaymentTermsType_cac;
begin
  Result := ChildNodes['PrepaidPaymentTerms'] as IXMLPaymentTermsType_cac;
end;

function TXMLConsignmentType_cac.Get_FreightAllowanceCharge: IXMLAllowanceChargeType_cacList;
begin
  Result := FFreightAllowanceCharge;
end;

function TXMLConsignmentType_cac.Get_ExtraAllowanceCharge: IXMLAllowanceChargeType_cacList;
begin
  Result := FExtraAllowanceCharge;
end;

function TXMLConsignmentType_cac.Get_MainCarriageShipmentStage: IXMLShipmentStageType_cacList;
begin
  Result := FMainCarriageShipmentStage;
end;

function TXMLConsignmentType_cac.Get_PreCarriageShipmentStage: IXMLShipmentStageType_cacList;
begin
  Result := FPreCarriageShipmentStage;
end;

function TXMLConsignmentType_cac.Get_OnCarriageShipmentStage: IXMLShipmentStageType_cacList;
begin
  Result := FOnCarriageShipmentStage;
end;

function TXMLConsignmentType_cac.Get_TransportHandlingUnit: IXMLTransportHandlingUnitType_cacList;
begin
  Result := FTransportHandlingUnit;
end;

function TXMLConsignmentType_cac.Get_FirstArrivalPortLocation: IXMLLocationType_cac;
begin
  Result := ChildNodes['FirstArrivalPortLocation'] as IXMLLocationType_cac;
end;

function TXMLConsignmentType_cac.Get_LastExitPortLocation: IXMLLocationType_cac;
begin
  Result := ChildNodes['LastExitPortLocation'] as IXMLLocationType_cac;
end;

{ TXMLConsignmentType_cacList }

function TXMLConsignmentType_cacList.Add: IXMLConsignmentType_cac;
begin
  Result := AddItem(-1) as IXMLConsignmentType_cac;
end;

function TXMLConsignmentType_cacList.Insert(const Index: Integer): IXMLConsignmentType_cac;
begin
  Result := AddItem(Index) as IXMLConsignmentType_cac;
end;

function TXMLConsignmentType_cacList.Get_Item(const Index: Integer): IXMLConsignmentType_cac;
begin
  Result := List[Index] as IXMLConsignmentType_cac;
end;

{ TXMLCarrierAssignedIDType_cbc }

{ TXMLConsigneeAssignedIDType_cbc }

{ TXMLConsignorAssignedIDType_cbc }

{ TXMLFreightForwarderAssignedIDType_cbc }

{ TXMLBrokerAssignedIDType_cbc }

{ TXMLContractedCarrierAssignedIDType_cbc }

{ TXMLPerformingCarrierAssignedIDType_cbc }

{ TXMLSummaryDescriptionType_cbc }

{ TXMLSummaryDescriptionType_cbcList }

function TXMLSummaryDescriptionType_cbcList.Add: IXMLSummaryDescriptionType_cbc;
begin
  Result := AddItem(-1) as IXMLSummaryDescriptionType_cbc;
end;

function TXMLSummaryDescriptionType_cbcList.Insert(const Index: Integer): IXMLSummaryDescriptionType_cbc;
begin
  Result := AddItem(Index) as IXMLSummaryDescriptionType_cbc;
end;

function TXMLSummaryDescriptionType_cbcList.Get_Item(const Index: Integer): IXMLSummaryDescriptionType_cbc;
begin
  Result := List[Index] as IXMLSummaryDescriptionType_cbc;
end;

{ TXMLTotalInvoiceAmountType_cbc }

{ TXMLTariffDescriptionType_cbc }

{ TXMLTariffDescriptionType_cbcList }

function TXMLTariffDescriptionType_cbcList.Add: IXMLTariffDescriptionType_cbc;
begin
  Result := AddItem(-1) as IXMLTariffDescriptionType_cbc;
end;

function TXMLTariffDescriptionType_cbcList.Insert(const Index: Integer): IXMLTariffDescriptionType_cbc;
begin
  Result := AddItem(Index) as IXMLTariffDescriptionType_cbc;
end;

function TXMLTariffDescriptionType_cbcList.Get_Item(const Index: Integer): IXMLTariffDescriptionType_cbc;
begin
  Result := List[Index] as IXMLTariffDescriptionType_cbc;
end;

{ TXMLTariffCodeType_cbc }

{ TXMLInsurancePremiumAmountType_cbc }

{ TXMLChargeableWeightMeasureType_cbc }

{ TXMLLoadingLengthMeasureType_cbc }

{ TXMLRemarksType_cbc }

{ TXMLRemarksType_cbcList }

function TXMLRemarksType_cbcList.Add: IXMLRemarksType_cbc;
begin
  Result := AddItem(-1) as IXMLRemarksType_cbc;
end;

function TXMLRemarksType_cbcList.Insert(const Index: Integer): IXMLRemarksType_cbc;
begin
  Result := AddItem(Index) as IXMLRemarksType_cbc;
end;

function TXMLRemarksType_cbcList.Get_Item(const Index: Integer): IXMLRemarksType_cbc;
begin
  Result := List[Index] as IXMLRemarksType_cbc;
end;

{ TXMLAnimalFoodIndicatorType_cbc }

{ TXMLHumanFoodIndicatorType_cbc }

{ TXMLLivestockIndicatorType_cbc }

{ TXMLBulkCargoIndicatorType_cbc }

{ TXMLContainerizedIndicatorType_cbc }

{ TXMLGeneralCargoIndicatorType_cbc }

{ TXMLSpecialSecurityIndicatorType_cbc }

{ TXMLThirdPartyPayerIndicatorType_cbc }

{ TXMLCarrierServiceInstructionsType_cbc }

{ TXMLCarrierServiceInstructionsType_cbcList }

function TXMLCarrierServiceInstructionsType_cbcList.Add: IXMLCarrierServiceInstructionsType_cbc;
begin
  Result := AddItem(-1) as IXMLCarrierServiceInstructionsType_cbc;
end;

function TXMLCarrierServiceInstructionsType_cbcList.Insert(const Index: Integer): IXMLCarrierServiceInstructionsType_cbc;
begin
  Result := AddItem(Index) as IXMLCarrierServiceInstructionsType_cbc;
end;

function TXMLCarrierServiceInstructionsType_cbcList.Get_Item(const Index: Integer): IXMLCarrierServiceInstructionsType_cbc;
begin
  Result := List[Index] as IXMLCarrierServiceInstructionsType_cbc;
end;

{ TXMLCustomsClearanceServiceInstructionsType_cbc }

{ TXMLCustomsClearanceServiceInstructionsType_cbcList }

function TXMLCustomsClearanceServiceInstructionsType_cbcList.Add: IXMLCustomsClearanceServiceInstructionsType_cbc;
begin
  Result := AddItem(-1) as IXMLCustomsClearanceServiceInstructionsType_cbc;
end;

function TXMLCustomsClearanceServiceInstructionsType_cbcList.Insert(const Index: Integer): IXMLCustomsClearanceServiceInstructionsType_cbc;
begin
  Result := AddItem(Index) as IXMLCustomsClearanceServiceInstructionsType_cbc;
end;

function TXMLCustomsClearanceServiceInstructionsType_cbcList.Get_Item(const Index: Integer): IXMLCustomsClearanceServiceInstructionsType_cbc;
begin
  Result := List[Index] as IXMLCustomsClearanceServiceInstructionsType_cbc;
end;

{ TXMLForwarderServiceInstructionsType_cbc }

{ TXMLForwarderServiceInstructionsType_cbcList }

function TXMLForwarderServiceInstructionsType_cbcList.Add: IXMLForwarderServiceInstructionsType_cbc;
begin
  Result := AddItem(-1) as IXMLForwarderServiceInstructionsType_cbc;
end;

function TXMLForwarderServiceInstructionsType_cbcList.Insert(const Index: Integer): IXMLForwarderServiceInstructionsType_cbc;
begin
  Result := AddItem(Index) as IXMLForwarderServiceInstructionsType_cbc;
end;

function TXMLForwarderServiceInstructionsType_cbcList.Get_Item(const Index: Integer): IXMLForwarderServiceInstructionsType_cbc;
begin
  Result := List[Index] as IXMLForwarderServiceInstructionsType_cbc;
end;

{ TXMLSpecialServiceInstructionsType_cbc }

{ TXMLSpecialServiceInstructionsType_cbcList }

function TXMLSpecialServiceInstructionsType_cbcList.Add: IXMLSpecialServiceInstructionsType_cbc;
begin
  Result := AddItem(-1) as IXMLSpecialServiceInstructionsType_cbc;
end;

function TXMLSpecialServiceInstructionsType_cbcList.Insert(const Index: Integer): IXMLSpecialServiceInstructionsType_cbc;
begin
  Result := AddItem(Index) as IXMLSpecialServiceInstructionsType_cbc;
end;

function TXMLSpecialServiceInstructionsType_cbcList.Get_Item(const Index: Integer): IXMLSpecialServiceInstructionsType_cbc;
begin
  Result := List[Index] as IXMLSpecialServiceInstructionsType_cbc;
end;

{ TXMLSequenceIDType_cbc }

{ TXMLConsolidatableIndicatorType_cbc }

{ TXMLHaulageInstructionsType_cbc }

{ TXMLHaulageInstructionsType_cbcList }

function TXMLHaulageInstructionsType_cbcList.Add: IXMLHaulageInstructionsType_cbc;
begin
  Result := AddItem(-1) as IXMLHaulageInstructionsType_cbc;
end;

function TXMLHaulageInstructionsType_cbcList.Insert(const Index: Integer): IXMLHaulageInstructionsType_cbc;
begin
  Result := AddItem(Index) as IXMLHaulageInstructionsType_cbc;
end;

function TXMLHaulageInstructionsType_cbcList.Get_Item(const Index: Integer): IXMLHaulageInstructionsType_cbc;
begin
  Result := List[Index] as IXMLHaulageInstructionsType_cbc;
end;

{ TXMLLoadingSequenceIDType_cbc }

{ TXMLChildConsignmentQuantityType_cbc }

{ TXMLTotalPackagesQuantityType_cbc }

{ TXMLCustomsDeclarationType_cac }

procedure TXMLCustomsDeclarationType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('IssuerParty', TXMLPartyType_cac);
  inherited;
end;

function TXMLCustomsDeclarationType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLCustomsDeclarationType_cac.Get_IssuerParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['IssuerParty'] as IXMLPartyType_cac;
end;

{ TXMLCustomsDeclarationType_cacList }

function TXMLCustomsDeclarationType_cacList.Add: IXMLCustomsDeclarationType_cac;
begin
  Result := AddItem(-1) as IXMLCustomsDeclarationType_cac;
end;

function TXMLCustomsDeclarationType_cacList.Insert(const Index: Integer): IXMLCustomsDeclarationType_cac;
begin
  Result := AddItem(Index) as IXMLCustomsDeclarationType_cac;
end;

function TXMLCustomsDeclarationType_cacList.Get_Item(const Index: Integer): IXMLCustomsDeclarationType_cac;
begin
  Result := List[Index] as IXMLCustomsDeclarationType_cac;
end;

{ TXMLTransportEventType_cac }

procedure TXMLTransportEventType_cac.AfterConstruction;
begin
  RegisterChildNode('IdentificationID', TXMLIdentificationIDType_cbc);
  RegisterChildNode('OccurrenceDate', TXMLOccurrenceDateType_cbc);
  RegisterChildNode('OccurrenceTime', TXMLOccurrenceTimeType_cbc);
  RegisterChildNode('TransportEventTypeCode', TXMLTransportEventTypeCodeType_cbc);
  RegisterChildNode('Description', TXMLDescriptionType_cbc);
  RegisterChildNode('CompletionIndicator', TXMLCompletionIndicatorType_cbc);
  RegisterChildNode('ReportedShipment', TXMLShipmentType_cac);
  RegisterChildNode('CurrentStatus', TXMLStatusType_cac);
  RegisterChildNode('Contact', TXMLContactType_cac);
  RegisterChildNode('Location', TXMLLocationType_cac);
  RegisterChildNode('Signature', TXMLSignatureType_cac);
  RegisterChildNode('Period', TXMLPeriodType_cac);
  FDescription := CreateCollection(TXMLDescriptionType_cbcList, IXMLDescriptionType_cbc, 'Description') as IXMLDescriptionType_cbcList;
  FCurrentStatus := CreateCollection(TXMLStatusType_cacList, IXMLStatusType_cac, 'CurrentStatus') as IXMLStatusType_cacList;
  FContact := CreateCollection(TXMLContactType_cacList, IXMLContactType_cac, 'Contact') as IXMLContactType_cacList;
  FPeriod := CreateCollection(TXMLPeriodType_cacList, IXMLPeriodType_cac, 'Period') as IXMLPeriodType_cacList;
  inherited;
end;

function TXMLTransportEventType_cac.Get_IdentificationID: IXMLIdentificationIDType_cbc;
begin
  Result := ChildNodes['IdentificationID'] as IXMLIdentificationIDType_cbc;
end;

function TXMLTransportEventType_cac.Get_OccurrenceDate: IXMLOccurrenceDateType_cbc;
begin
  Result := ChildNodes['OccurrenceDate'] as IXMLOccurrenceDateType_cbc;
end;

function TXMLTransportEventType_cac.Get_OccurrenceTime: IXMLOccurrenceTimeType_cbc;
begin
  Result := ChildNodes['OccurrenceTime'] as IXMLOccurrenceTimeType_cbc;
end;

function TXMLTransportEventType_cac.Get_TransportEventTypeCode: IXMLTransportEventTypeCodeType_cbc;
begin
  Result := ChildNodes['TransportEventTypeCode'] as IXMLTransportEventTypeCodeType_cbc;
end;

function TXMLTransportEventType_cac.Get_Description: IXMLDescriptionType_cbcList;
begin
  Result := FDescription;
end;

function TXMLTransportEventType_cac.Get_CompletionIndicator: IXMLCompletionIndicatorType_cbc;
begin
  Result := ChildNodes['CompletionIndicator'] as IXMLCompletionIndicatorType_cbc;
end;

function TXMLTransportEventType_cac.Get_ReportedShipment: IXMLShipmentType_cac;
begin
  Result := ChildNodes['ReportedShipment'] as IXMLShipmentType_cac;
end;

function TXMLTransportEventType_cac.Get_CurrentStatus: IXMLStatusType_cacList;
begin
  Result := FCurrentStatus;
end;

function TXMLTransportEventType_cac.Get_Contact: IXMLContactType_cacList;
begin
  Result := FContact;
end;

function TXMLTransportEventType_cac.Get_Location: IXMLLocationType_cac;
begin
  Result := ChildNodes['Location'] as IXMLLocationType_cac;
end;

function TXMLTransportEventType_cac.Get_Signature: IXMLSignatureType_cac;
begin
  Result := ChildNodes['Signature'] as IXMLSignatureType_cac;
end;

function TXMLTransportEventType_cac.Get_Period: IXMLPeriodType_cacList;
begin
  Result := FPeriod;
end;

{ TXMLTransportEventType_cacList }

function TXMLTransportEventType_cacList.Add: IXMLTransportEventType_cac;
begin
  Result := AddItem(-1) as IXMLTransportEventType_cac;
end;

function TXMLTransportEventType_cacList.Insert(const Index: Integer): IXMLTransportEventType_cac;
begin
  Result := AddItem(Index) as IXMLTransportEventType_cac;
end;

function TXMLTransportEventType_cacList.Get_Item(const Index: Integer): IXMLTransportEventType_cac;
begin
  Result := List[Index] as IXMLTransportEventType_cac;
end;

{ TXMLIdentificationIDType_cbc }

{ TXMLOccurrenceDateType_cbc }

{ TXMLOccurrenceTimeType_cbc }

{ TXMLTransportEventTypeCodeType_cbc }

{ TXMLCompletionIndicatorType_cbc }

{ TXMLStatusType_cac }

procedure TXMLStatusType_cac.AfterConstruction;
begin
  RegisterChildNode('ConditionCode', TXMLConditionCodeType_cbc);
  RegisterChildNode('ReferenceDate', TXMLReferenceDateType_cbc);
  RegisterChildNode('ReferenceTime', TXMLReferenceTimeType_cbc);
  RegisterChildNode('Description', TXMLDescriptionType_cbc);
  RegisterChildNode('StatusReasonCode', TXMLStatusReasonCodeType_cbc);
  RegisterChildNode('StatusReason', TXMLStatusReasonType_cbc);
  RegisterChildNode('SequenceID', TXMLSequenceIDType_cbc);
  RegisterChildNode('Text', TXMLTextType_cbc);
  RegisterChildNode('IndicationIndicator', TXMLIndicationIndicatorType_cbc);
  RegisterChildNode('Percent', TXMLPercentType_cbc);
  RegisterChildNode('ReliabilityPercent', TXMLReliabilityPercentType_cbc);
  RegisterChildNode('Condition', TXMLConditionType_cac);
  FDescription := CreateCollection(TXMLDescriptionType_cbcList, IXMLDescriptionType_cbc, 'Description') as IXMLDescriptionType_cbcList;
  FStatusReason := CreateCollection(TXMLStatusReasonType_cbcList, IXMLStatusReasonType_cbc, 'StatusReason') as IXMLStatusReasonType_cbcList;
  FText := CreateCollection(TXMLTextType_cbcList, IXMLTextType_cbc, 'Text') as IXMLTextType_cbcList;
  FCondition := CreateCollection(TXMLConditionType_cacList, IXMLConditionType_cac, 'Condition') as IXMLConditionType_cacList;
  inherited;
end;

function TXMLStatusType_cac.Get_ConditionCode: IXMLConditionCodeType_cbc;
begin
  Result := ChildNodes['ConditionCode'] as IXMLConditionCodeType_cbc;
end;

function TXMLStatusType_cac.Get_ReferenceDate: IXMLReferenceDateType_cbc;
begin
  Result := ChildNodes['ReferenceDate'] as IXMLReferenceDateType_cbc;
end;

function TXMLStatusType_cac.Get_ReferenceTime: IXMLReferenceTimeType_cbc;
begin
  Result := ChildNodes['ReferenceTime'] as IXMLReferenceTimeType_cbc;
end;

function TXMLStatusType_cac.Get_Description: IXMLDescriptionType_cbcList;
begin
  Result := FDescription;
end;

function TXMLStatusType_cac.Get_StatusReasonCode: IXMLStatusReasonCodeType_cbc;
begin
  Result := ChildNodes['StatusReasonCode'] as IXMLStatusReasonCodeType_cbc;
end;

function TXMLStatusType_cac.Get_StatusReason: IXMLStatusReasonType_cbcList;
begin
  Result := FStatusReason;
end;

function TXMLStatusType_cac.Get_SequenceID: IXMLSequenceIDType_cbc;
begin
  Result := ChildNodes['SequenceID'] as IXMLSequenceIDType_cbc;
end;

function TXMLStatusType_cac.Get_Text: IXMLTextType_cbcList;
begin
  Result := FText;
end;

function TXMLStatusType_cac.Get_IndicationIndicator: IXMLIndicationIndicatorType_cbc;
begin
  Result := ChildNodes['IndicationIndicator'] as IXMLIndicationIndicatorType_cbc;
end;

function TXMLStatusType_cac.Get_Percent: IXMLPercentType_cbc;
begin
  Result := ChildNodes['Percent'] as IXMLPercentType_cbc;
end;

function TXMLStatusType_cac.Get_ReliabilityPercent: IXMLReliabilityPercentType_cbc;
begin
  Result := ChildNodes['ReliabilityPercent'] as IXMLReliabilityPercentType_cbc;
end;

function TXMLStatusType_cac.Get_Condition: IXMLConditionType_cacList;
begin
  Result := FCondition;
end;

{ TXMLStatusType_cacList }

function TXMLStatusType_cacList.Add: IXMLStatusType_cac;
begin
  Result := AddItem(-1) as IXMLStatusType_cac;
end;

function TXMLStatusType_cacList.Insert(const Index: Integer): IXMLStatusType_cac;
begin
  Result := AddItem(Index) as IXMLStatusType_cac;
end;

function TXMLStatusType_cacList.Get_Item(const Index: Integer): IXMLStatusType_cac;
begin
  Result := List[Index] as IXMLStatusType_cac;
end;

{ TXMLConditionCodeType_cbc }

{ TXMLReferenceDateType_cbc }

{ TXMLReferenceTimeType_cbc }

{ TXMLStatusReasonCodeType_cbc }

{ TXMLStatusReasonType_cbc }

{ TXMLStatusReasonType_cbcList }

function TXMLStatusReasonType_cbcList.Add: IXMLStatusReasonType_cbc;
begin
  Result := AddItem(-1) as IXMLStatusReasonType_cbc;
end;

function TXMLStatusReasonType_cbcList.Insert(const Index: Integer): IXMLStatusReasonType_cbc;
begin
  Result := AddItem(Index) as IXMLStatusReasonType_cbc;
end;

function TXMLStatusReasonType_cbcList.Get_Item(const Index: Integer): IXMLStatusReasonType_cbc;
begin
  Result := List[Index] as IXMLStatusReasonType_cbc;
end;

{ TXMLTextType_cbc }

{ TXMLTextType_cbcList }

function TXMLTextType_cbcList.Add: IXMLTextType_cbc;
begin
  Result := AddItem(-1) as IXMLTextType_cbc;
end;

function TXMLTextType_cbcList.Insert(const Index: Integer): IXMLTextType_cbc;
begin
  Result := AddItem(Index) as IXMLTextType_cbc;
end;

function TXMLTextType_cbcList.Get_Item(const Index: Integer): IXMLTextType_cbc;
begin
  Result := List[Index] as IXMLTextType_cbc;
end;

{ TXMLIndicationIndicatorType_cbc }

{ TXMLReliabilityPercentType_cbc }

{ TXMLConditionType_cac }

procedure TXMLConditionType_cac.AfterConstruction;
begin
  RegisterChildNode('AttributeID', TXMLAttributeIDType_cbc);
  RegisterChildNode('Measure', TXMLMeasureType_cbc);
  RegisterChildNode('Description', TXMLDescriptionType_cbc);
  RegisterChildNode('MinimumMeasure', TXMLMinimumMeasureType_cbc);
  RegisterChildNode('MaximumMeasure', TXMLMaximumMeasureType_cbc);
  FDescription := CreateCollection(TXMLDescriptionType_cbcList, IXMLDescriptionType_cbc, 'Description') as IXMLDescriptionType_cbcList;
  inherited;
end;

function TXMLConditionType_cac.Get_AttributeID: IXMLAttributeIDType_cbc;
begin
  Result := ChildNodes['AttributeID'] as IXMLAttributeIDType_cbc;
end;

function TXMLConditionType_cac.Get_Measure: IXMLMeasureType_cbc;
begin
  Result := ChildNodes['Measure'] as IXMLMeasureType_cbc;
end;

function TXMLConditionType_cac.Get_Description: IXMLDescriptionType_cbcList;
begin
  Result := FDescription;
end;

function TXMLConditionType_cac.Get_MinimumMeasure: IXMLMinimumMeasureType_cbc;
begin
  Result := ChildNodes['MinimumMeasure'] as IXMLMinimumMeasureType_cbc;
end;

function TXMLConditionType_cac.Get_MaximumMeasure: IXMLMaximumMeasureType_cbc;
begin
  Result := ChildNodes['MaximumMeasure'] as IXMLMaximumMeasureType_cbc;
end;

{ TXMLConditionType_cacList }

function TXMLConditionType_cacList.Add: IXMLConditionType_cac;
begin
  Result := AddItem(-1) as IXMLConditionType_cac;
end;

function TXMLConditionType_cacList.Insert(const Index: Integer): IXMLConditionType_cac;
begin
  Result := AddItem(Index) as IXMLConditionType_cac;
end;

function TXMLConditionType_cacList.Get_Item(const Index: Integer): IXMLConditionType_cac;
begin
  Result := List[Index] as IXMLConditionType_cac;
end;

{ TXMLAttributeIDType_cbc }

{ TXMLMeasureType_cbc }

{ TXMLMinimumMeasureType_cbc }

{ TXMLMaximumMeasureType_cbc }

{ TXMLContractType_cac }

procedure TXMLContractType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('IssueDate', TXMLIssueDateType_cbc);
  RegisterChildNode('IssueTime', TXMLIssueTimeType_cbc);
  RegisterChildNode('NominationDate', TXMLNominationDateType_cbc);
  RegisterChildNode('NominationTime', TXMLNominationTimeType_cbc);
  RegisterChildNode('ContractTypeCode', TXMLContractTypeCodeType_cbc);
  RegisterChildNode('ContractType', TXMLContractTypeType_cbc);
  RegisterChildNode('Note', TXMLNoteType_cbc);
  RegisterChildNode('VersionID', TXMLVersionIDType_cbc);
  RegisterChildNode('Description', TXMLDescriptionType_cbc);
  RegisterChildNode('ValidityPeriod', TXMLPeriodType_cac);
  RegisterChildNode('ContractDocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('NominationPeriod', TXMLPeriodType_cac);
  RegisterChildNode('ContractualDelivery', TXMLDeliveryType_cac);
  FNote := CreateCollection(TXMLNoteType_cbcList, IXMLNoteType_cbc, 'Note') as IXMLNoteType_cbcList;
  FDescription := CreateCollection(TXMLDescriptionType_cbcList, IXMLDescriptionType_cbc, 'Description') as IXMLDescriptionType_cbcList;
  FContractDocumentReference := CreateCollection(TXMLDocumentReferenceType_cacList, IXMLDocumentReferenceType_cac, 'ContractDocumentReference') as IXMLDocumentReferenceType_cacList;
  inherited;
end;

function TXMLContractType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLContractType_cac.Get_IssueDate: IXMLIssueDateType_cbc;
begin
  Result := ChildNodes['IssueDate'] as IXMLIssueDateType_cbc;
end;

function TXMLContractType_cac.Get_IssueTime: IXMLIssueTimeType_cbc;
begin
  Result := ChildNodes['IssueTime'] as IXMLIssueTimeType_cbc;
end;

function TXMLContractType_cac.Get_NominationDate: IXMLNominationDateType_cbc;
begin
  Result := ChildNodes['NominationDate'] as IXMLNominationDateType_cbc;
end;

function TXMLContractType_cac.Get_NominationTime: IXMLNominationTimeType_cbc;
begin
  Result := ChildNodes['NominationTime'] as IXMLNominationTimeType_cbc;
end;

function TXMLContractType_cac.Get_ContractTypeCode: IXMLContractTypeCodeType_cbc;
begin
  Result := ChildNodes['ContractTypeCode'] as IXMLContractTypeCodeType_cbc;
end;

function TXMLContractType_cac.Get_ContractType: IXMLContractTypeType_cbc;
begin
  Result := ChildNodes['ContractType'] as IXMLContractTypeType_cbc;
end;

function TXMLContractType_cac.Get_Note: IXMLNoteType_cbcList;
begin
  Result := FNote;
end;

function TXMLContractType_cac.Get_VersionID: IXMLVersionIDType_cbc;
begin
  Result := ChildNodes['VersionID'] as IXMLVersionIDType_cbc;
end;

function TXMLContractType_cac.Get_Description: IXMLDescriptionType_cbcList;
begin
  Result := FDescription;
end;

function TXMLContractType_cac.Get_ValidityPeriod: IXMLPeriodType_cac;
begin
  Result := ChildNodes['ValidityPeriod'] as IXMLPeriodType_cac;
end;

function TXMLContractType_cac.Get_ContractDocumentReference: IXMLDocumentReferenceType_cacList;
begin
  Result := FContractDocumentReference;
end;

function TXMLContractType_cac.Get_NominationPeriod: IXMLPeriodType_cac;
begin
  Result := ChildNodes['NominationPeriod'] as IXMLPeriodType_cac;
end;

function TXMLContractType_cac.Get_ContractualDelivery: IXMLDeliveryType_cac;
begin
  Result := ChildNodes['ContractualDelivery'] as IXMLDeliveryType_cac;
end;

{ TXMLNominationDateType_cbc }

{ TXMLNominationTimeType_cbc }

{ TXMLContractTypeCodeType_cbc }

{ TXMLContractTypeType_cbc }

{ TXMLTransportationServiceType_cac }

procedure TXMLTransportationServiceType_cac.AfterConstruction;
begin
  RegisterChildNode('TransportServiceCode', TXMLTransportServiceCodeType_cbc);
  RegisterChildNode('TariffClassCode', TXMLTariffClassCodeType_cbc);
  RegisterChildNode('Priority', TXMLPriorityType_cbc);
  RegisterChildNode('FreightRateClassCode', TXMLFreightRateClassCodeType_cbc);
  RegisterChildNode('TransportationServiceDescription', TXMLTransportationServiceDescriptionType_cbc);
  RegisterChildNode('TransportationServiceDetailsURI', TXMLTransportationServiceDetailsURIType_cbc);
  RegisterChildNode('NominationDate', TXMLNominationDateType_cbc);
  RegisterChildNode('NominationTime', TXMLNominationTimeType_cbc);
  RegisterChildNode('Name', TXMLNameType_cbc);
  RegisterChildNode('SequenceNumeric', TXMLSequenceNumericType_cbc);
  RegisterChildNode('TransportEquipment', TXMLTransportEquipmentType_cac);
  RegisterChildNode('SupportedTransportEquipment', TXMLTransportEquipmentType_cac);
  RegisterChildNode('UnsupportedTransportEquipment', TXMLTransportEquipmentType_cac);
  RegisterChildNode('CommodityClassification', TXMLCommodityClassificationType_cac);
  RegisterChildNode('SupportedCommodityClassification', TXMLCommodityClassificationType_cac);
  RegisterChildNode('UnsupportedCommodityClassification', TXMLCommodityClassificationType_cac);
  RegisterChildNode('TotalCapacityDimension', TXMLDimensionType_cac);
  RegisterChildNode('ShipmentStage', TXMLShipmentStageType_cac);
  RegisterChildNode('TransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('ResponsibleTransportServiceProviderParty', TXMLPartyType_cac);
  RegisterChildNode('EnvironmentalEmission', TXMLEnvironmentalEmissionType_cac);
  RegisterChildNode('EstimatedDurationPeriod', TXMLPeriodType_cac);
  RegisterChildNode('ScheduledServiceFrequency', TXMLServiceFrequencyType_cac);
  FTransportationServiceDescription := CreateCollection(TXMLTransportationServiceDescriptionType_cbcList, IXMLTransportationServiceDescriptionType_cbc, 'TransportationServiceDescription') as IXMLTransportationServiceDescriptionType_cbcList;
  FTransportEquipment := CreateCollection(TXMLTransportEquipmentType_cacList, IXMLTransportEquipmentType_cac, 'TransportEquipment') as IXMLTransportEquipmentType_cacList;
  FSupportedTransportEquipment := CreateCollection(TXMLTransportEquipmentType_cacList, IXMLTransportEquipmentType_cac, 'SupportedTransportEquipment') as IXMLTransportEquipmentType_cacList;
  FUnsupportedTransportEquipment := CreateCollection(TXMLTransportEquipmentType_cacList, IXMLTransportEquipmentType_cac, 'UnsupportedTransportEquipment') as IXMLTransportEquipmentType_cacList;
  FCommodityClassification := CreateCollection(TXMLCommodityClassificationType_cacList, IXMLCommodityClassificationType_cac, 'CommodityClassification') as IXMLCommodityClassificationType_cacList;
  FSupportedCommodityClassification := CreateCollection(TXMLCommodityClassificationType_cacList, IXMLCommodityClassificationType_cac, 'SupportedCommodityClassification') as IXMLCommodityClassificationType_cacList;
  FUnsupportedCommodityClassification := CreateCollection(TXMLCommodityClassificationType_cacList, IXMLCommodityClassificationType_cac, 'UnsupportedCommodityClassification') as IXMLCommodityClassificationType_cacList;
  FShipmentStage := CreateCollection(TXMLShipmentStageType_cacList, IXMLShipmentStageType_cac, 'ShipmentStage') as IXMLShipmentStageType_cacList;
  FTransportEvent := CreateCollection(TXMLTransportEventType_cacList, IXMLTransportEventType_cac, 'TransportEvent') as IXMLTransportEventType_cacList;
  FEnvironmentalEmission := CreateCollection(TXMLEnvironmentalEmissionType_cacList, IXMLEnvironmentalEmissionType_cac, 'EnvironmentalEmission') as IXMLEnvironmentalEmissionType_cacList;
  FScheduledServiceFrequency := CreateCollection(TXMLServiceFrequencyType_cacList, IXMLServiceFrequencyType_cac, 'ScheduledServiceFrequency') as IXMLServiceFrequencyType_cacList;
  inherited;
end;

function TXMLTransportationServiceType_cac.Get_TransportServiceCode: IXMLTransportServiceCodeType_cbc;
begin
  Result := ChildNodes['TransportServiceCode'] as IXMLTransportServiceCodeType_cbc;
end;

function TXMLTransportationServiceType_cac.Get_TariffClassCode: IXMLTariffClassCodeType_cbc;
begin
  Result := ChildNodes['TariffClassCode'] as IXMLTariffClassCodeType_cbc;
end;

function TXMLTransportationServiceType_cac.Get_Priority: IXMLPriorityType_cbc;
begin
  Result := ChildNodes['Priority'] as IXMLPriorityType_cbc;
end;

function TXMLTransportationServiceType_cac.Get_FreightRateClassCode: IXMLFreightRateClassCodeType_cbc;
begin
  Result := ChildNodes['FreightRateClassCode'] as IXMLFreightRateClassCodeType_cbc;
end;

function TXMLTransportationServiceType_cac.Get_TransportationServiceDescription: IXMLTransportationServiceDescriptionType_cbcList;
begin
  Result := FTransportationServiceDescription;
end;

function TXMLTransportationServiceType_cac.Get_TransportationServiceDetailsURI: IXMLTransportationServiceDetailsURIType_cbc;
begin
  Result := ChildNodes['TransportationServiceDetailsURI'] as IXMLTransportationServiceDetailsURIType_cbc;
end;

function TXMLTransportationServiceType_cac.Get_NominationDate: IXMLNominationDateType_cbc;
begin
  Result := ChildNodes['NominationDate'] as IXMLNominationDateType_cbc;
end;

function TXMLTransportationServiceType_cac.Get_NominationTime: IXMLNominationTimeType_cbc;
begin
  Result := ChildNodes['NominationTime'] as IXMLNominationTimeType_cbc;
end;

function TXMLTransportationServiceType_cac.Get_Name: IXMLNameType_cbc;
begin
  Result := ChildNodes['Name'] as IXMLNameType_cbc;
end;

function TXMLTransportationServiceType_cac.Get_SequenceNumeric: IXMLSequenceNumericType_cbc;
begin
  Result := ChildNodes['SequenceNumeric'] as IXMLSequenceNumericType_cbc;
end;

function TXMLTransportationServiceType_cac.Get_TransportEquipment: IXMLTransportEquipmentType_cacList;
begin
  Result := FTransportEquipment;
end;

function TXMLTransportationServiceType_cac.Get_SupportedTransportEquipment: IXMLTransportEquipmentType_cacList;
begin
  Result := FSupportedTransportEquipment;
end;

function TXMLTransportationServiceType_cac.Get_UnsupportedTransportEquipment: IXMLTransportEquipmentType_cacList;
begin
  Result := FUnsupportedTransportEquipment;
end;

function TXMLTransportationServiceType_cac.Get_CommodityClassification: IXMLCommodityClassificationType_cacList;
begin
  Result := FCommodityClassification;
end;

function TXMLTransportationServiceType_cac.Get_SupportedCommodityClassification: IXMLCommodityClassificationType_cacList;
begin
  Result := FSupportedCommodityClassification;
end;

function TXMLTransportationServiceType_cac.Get_UnsupportedCommodityClassification: IXMLCommodityClassificationType_cacList;
begin
  Result := FUnsupportedCommodityClassification;
end;

function TXMLTransportationServiceType_cac.Get_TotalCapacityDimension: IXMLDimensionType_cac;
begin
  Result := ChildNodes['TotalCapacityDimension'] as IXMLDimensionType_cac;
end;

function TXMLTransportationServiceType_cac.Get_ShipmentStage: IXMLShipmentStageType_cacList;
begin
  Result := FShipmentStage;
end;

function TXMLTransportationServiceType_cac.Get_TransportEvent: IXMLTransportEventType_cacList;
begin
  Result := FTransportEvent;
end;

function TXMLTransportationServiceType_cac.Get_ResponsibleTransportServiceProviderParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['ResponsibleTransportServiceProviderParty'] as IXMLPartyType_cac;
end;

function TXMLTransportationServiceType_cac.Get_EnvironmentalEmission: IXMLEnvironmentalEmissionType_cacList;
begin
  Result := FEnvironmentalEmission;
end;

function TXMLTransportationServiceType_cac.Get_EstimatedDurationPeriod: IXMLPeriodType_cac;
begin
  Result := ChildNodes['EstimatedDurationPeriod'] as IXMLPeriodType_cac;
end;

function TXMLTransportationServiceType_cac.Get_ScheduledServiceFrequency: IXMLServiceFrequencyType_cacList;
begin
  Result := FScheduledServiceFrequency;
end;

{ TXMLTransportServiceCodeType_cbc }

{ TXMLTariffClassCodeType_cbc }

{ TXMLPriorityType_cbc }

{ TXMLFreightRateClassCodeType_cbc }

{ TXMLTransportationServiceDescriptionType_cbc }

{ TXMLTransportationServiceDescriptionType_cbcList }

function TXMLTransportationServiceDescriptionType_cbcList.Add: IXMLTransportationServiceDescriptionType_cbc;
begin
  Result := AddItem(-1) as IXMLTransportationServiceDescriptionType_cbc;
end;

function TXMLTransportationServiceDescriptionType_cbcList.Insert(const Index: Integer): IXMLTransportationServiceDescriptionType_cbc;
begin
  Result := AddItem(Index) as IXMLTransportationServiceDescriptionType_cbc;
end;

function TXMLTransportationServiceDescriptionType_cbcList.Get_Item(const Index: Integer): IXMLTransportationServiceDescriptionType_cbc;
begin
  Result := List[Index] as IXMLTransportationServiceDescriptionType_cbc;
end;

{ TXMLTransportationServiceDetailsURIType_cbc }

{ TXMLTransportEquipmentType_cac }

procedure TXMLTransportEquipmentType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('ReferencedConsignmentID', TXMLReferencedConsignmentIDType_cbc);
  RegisterChildNode('TransportEquipmentTypeCode', TXMLTransportEquipmentTypeCodeType_cbc);
  RegisterChildNode('ProviderTypeCode', TXMLProviderTypeCodeType_cbc);
  RegisterChildNode('OwnerTypeCode', TXMLOwnerTypeCodeType_cbc);
  RegisterChildNode('SizeTypeCode', TXMLSizeTypeCodeType_cbc);
  RegisterChildNode('DispositionCode', TXMLDispositionCodeType_cbc);
  RegisterChildNode('FullnessIndicationCode', TXMLFullnessIndicationCodeType_cbc);
  RegisterChildNode('RefrigerationOnIndicator', TXMLRefrigerationOnIndicatorType_cbc);
  RegisterChildNode('Information', TXMLInformationType_cbc);
  RegisterChildNode('ReturnabilityIndicator', TXMLReturnabilityIndicatorType_cbc);
  RegisterChildNode('LegalStatusIndicator', TXMLLegalStatusIndicatorType_cbc);
  RegisterChildNode('AirFlowPercent', TXMLAirFlowPercentType_cbc);
  RegisterChildNode('HumidityPercent', TXMLHumidityPercentType_cbc);
  RegisterChildNode('AnimalFoodApprovedIndicator', TXMLAnimalFoodApprovedIndicatorType_cbc);
  RegisterChildNode('HumanFoodApprovedIndicator', TXMLHumanFoodApprovedIndicatorType_cbc);
  RegisterChildNode('DangerousGoodsApprovedIndicator', TXMLDangerousGoodsApprovedIndicatorType_cbc);
  RegisterChildNode('RefrigeratedIndicator', TXMLRefrigeratedIndicatorType_cbc);
  RegisterChildNode('Characteristics', TXMLCharacteristicsType_cbc);
  RegisterChildNode('DamageRemarks', TXMLDamageRemarksType_cbc);
  RegisterChildNode('Description', TXMLDescriptionType_cbc);
  RegisterChildNode('SpecialTransportRequirements', TXMLSpecialTransportRequirementsType_cbc);
  RegisterChildNode('GrossWeightMeasure', TXMLGrossWeightMeasureType_cbc);
  RegisterChildNode('GrossVolumeMeasure', TXMLGrossVolumeMeasureType_cbc);
  RegisterChildNode('TareWeightMeasure', TXMLTareWeightMeasureType_cbc);
  RegisterChildNode('TrackingDeviceCode', TXMLTrackingDeviceCodeType_cbc);
  RegisterChildNode('PowerIndicator', TXMLPowerIndicatorType_cbc);
  RegisterChildNode('TraceID', TXMLTraceIDType_cbc);
  RegisterChildNode('MeasurementDimension', TXMLDimensionType_cac);
  RegisterChildNode('TransportEquipmentSeal', TXMLTransportEquipmentSealType_cac);
  RegisterChildNode('MinimumTemperature', TXMLTemperatureType_cac);
  RegisterChildNode('MaximumTemperature', TXMLTemperatureType_cac);
  RegisterChildNode('ProviderParty', TXMLPartyType_cac);
  RegisterChildNode('LoadingProofParty', TXMLPartyType_cac);
  RegisterChildNode('SupplierParty', TXMLSupplierPartyType_cac);
  RegisterChildNode('OwnerParty', TXMLPartyType_cac);
  RegisterChildNode('OperatingParty', TXMLPartyType_cac);
  RegisterChildNode('LoadingLocation', TXMLLocationType_cac);
  RegisterChildNode('UnloadingLocation', TXMLLocationType_cac);
  RegisterChildNode('StorageLocation', TXMLLocationType_cac);
  RegisterChildNode('PositioningTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('QuarantineTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('DeliveryTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('PickupTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('HandlingTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('LoadingTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('TransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('ApplicableTransportMeans', TXMLTransportMeansType_cac);
  RegisterChildNode('HaulageTradingTerms', TXMLTradingTermsType_cac);
  RegisterChildNode('HazardousGoodsTransit', TXMLHazardousGoodsTransitType_cac);
  RegisterChildNode('PackagedTransportHandlingUnit', TXMLTransportHandlingUnitType_cac);
  RegisterChildNode('ServiceAllowanceCharge', TXMLAllowanceChargeType_cac);
  RegisterChildNode('FreightAllowanceCharge', TXMLAllowanceChargeType_cac);
  RegisterChildNode('AttachedTransportEquipment', TXMLTransportEquipmentType_cac);
  RegisterChildNode('Delivery', TXMLDeliveryType_cac);
  RegisterChildNode('Pickup', TXMLPickupType_cac);
  RegisterChildNode('Despatch', TXMLDespatchType_cac);
  RegisterChildNode('ShipmentDocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('ContainedInTransportEquipment', TXMLTransportEquipmentType_cac);
  RegisterChildNode('Package', TXMLPackageType_cac);
  RegisterChildNode('GoodsItem', TXMLGoodsItemType_cac);
  FReferencedConsignmentID := CreateCollection(TXMLReferencedConsignmentIDType_cbcList, IXMLReferencedConsignmentIDType_cbc, 'ReferencedConsignmentID') as IXMLReferencedConsignmentIDType_cbcList;
  FInformation := CreateCollection(TXMLInformationType_cbcList, IXMLInformationType_cbc, 'Information') as IXMLInformationType_cbcList;
  FDamageRemarks := CreateCollection(TXMLDamageRemarksType_cbcList, IXMLDamageRemarksType_cbc, 'DamageRemarks') as IXMLDamageRemarksType_cbcList;
  FDescription := CreateCollection(TXMLDescriptionType_cbcList, IXMLDescriptionType_cbc, 'Description') as IXMLDescriptionType_cbcList;
  FSpecialTransportRequirements := CreateCollection(TXMLSpecialTransportRequirementsType_cbcList, IXMLSpecialTransportRequirementsType_cbc, 'SpecialTransportRequirements') as IXMLSpecialTransportRequirementsType_cbcList;
  FMeasurementDimension := CreateCollection(TXMLDimensionType_cacList, IXMLDimensionType_cac, 'MeasurementDimension') as IXMLDimensionType_cacList;
  FTransportEquipmentSeal := CreateCollection(TXMLTransportEquipmentSealType_cacList, IXMLTransportEquipmentSealType_cac, 'TransportEquipmentSeal') as IXMLTransportEquipmentSealType_cacList;
  FPositioningTransportEvent := CreateCollection(TXMLTransportEventType_cacList, IXMLTransportEventType_cac, 'PositioningTransportEvent') as IXMLTransportEventType_cacList;
  FQuarantineTransportEvent := CreateCollection(TXMLTransportEventType_cacList, IXMLTransportEventType_cac, 'QuarantineTransportEvent') as IXMLTransportEventType_cacList;
  FDeliveryTransportEvent := CreateCollection(TXMLTransportEventType_cacList, IXMLTransportEventType_cac, 'DeliveryTransportEvent') as IXMLTransportEventType_cacList;
  FPickupTransportEvent := CreateCollection(TXMLTransportEventType_cacList, IXMLTransportEventType_cac, 'PickupTransportEvent') as IXMLTransportEventType_cacList;
  FHandlingTransportEvent := CreateCollection(TXMLTransportEventType_cacList, IXMLTransportEventType_cac, 'HandlingTransportEvent') as IXMLTransportEventType_cacList;
  FLoadingTransportEvent := CreateCollection(TXMLTransportEventType_cacList, IXMLTransportEventType_cac, 'LoadingTransportEvent') as IXMLTransportEventType_cacList;
  FTransportEvent := CreateCollection(TXMLTransportEventType_cacList, IXMLTransportEventType_cac, 'TransportEvent') as IXMLTransportEventType_cacList;
  FHaulageTradingTerms := CreateCollection(TXMLTradingTermsType_cacList, IXMLTradingTermsType_cac, 'HaulageTradingTerms') as IXMLTradingTermsType_cacList;
  FHazardousGoodsTransit := CreateCollection(TXMLHazardousGoodsTransitType_cacList, IXMLHazardousGoodsTransitType_cac, 'HazardousGoodsTransit') as IXMLHazardousGoodsTransitType_cacList;
  FPackagedTransportHandlingUnit := CreateCollection(TXMLTransportHandlingUnitType_cacList, IXMLTransportHandlingUnitType_cac, 'PackagedTransportHandlingUnit') as IXMLTransportHandlingUnitType_cacList;
  FServiceAllowanceCharge := CreateCollection(TXMLAllowanceChargeType_cacList, IXMLAllowanceChargeType_cac, 'ServiceAllowanceCharge') as IXMLAllowanceChargeType_cacList;
  FFreightAllowanceCharge := CreateCollection(TXMLAllowanceChargeType_cacList, IXMLAllowanceChargeType_cac, 'FreightAllowanceCharge') as IXMLAllowanceChargeType_cacList;
  FAttachedTransportEquipment := CreateCollection(TXMLTransportEquipmentType_cacList, IXMLTransportEquipmentType_cac, 'AttachedTransportEquipment') as IXMLTransportEquipmentType_cacList;
  FShipmentDocumentReference := CreateCollection(TXMLDocumentReferenceType_cacList, IXMLDocumentReferenceType_cac, 'ShipmentDocumentReference') as IXMLDocumentReferenceType_cacList;
  FContainedInTransportEquipment := CreateCollection(TXMLTransportEquipmentType_cacList, IXMLTransportEquipmentType_cac, 'ContainedInTransportEquipment') as IXMLTransportEquipmentType_cacList;
  FPackage := CreateCollection(TXMLPackageType_cacList, IXMLPackageType_cac, 'Package') as IXMLPackageType_cacList;
  FGoodsItem := CreateCollection(TXMLGoodsItemType_cacList, IXMLGoodsItemType_cac, 'GoodsItem') as IXMLGoodsItemType_cacList;
  inherited;
end;

function TXMLTransportEquipmentType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLTransportEquipmentType_cac.Get_ReferencedConsignmentID: IXMLReferencedConsignmentIDType_cbcList;
begin
  Result := FReferencedConsignmentID;
end;

function TXMLTransportEquipmentType_cac.Get_TransportEquipmentTypeCode: IXMLTransportEquipmentTypeCodeType_cbc;
begin
  Result := ChildNodes['TransportEquipmentTypeCode'] as IXMLTransportEquipmentTypeCodeType_cbc;
end;

function TXMLTransportEquipmentType_cac.Get_ProviderTypeCode: IXMLProviderTypeCodeType_cbc;
begin
  Result := ChildNodes['ProviderTypeCode'] as IXMLProviderTypeCodeType_cbc;
end;

function TXMLTransportEquipmentType_cac.Get_OwnerTypeCode: IXMLOwnerTypeCodeType_cbc;
begin
  Result := ChildNodes['OwnerTypeCode'] as IXMLOwnerTypeCodeType_cbc;
end;

function TXMLTransportEquipmentType_cac.Get_SizeTypeCode: IXMLSizeTypeCodeType_cbc;
begin
  Result := ChildNodes['SizeTypeCode'] as IXMLSizeTypeCodeType_cbc;
end;

function TXMLTransportEquipmentType_cac.Get_DispositionCode: IXMLDispositionCodeType_cbc;
begin
  Result := ChildNodes['DispositionCode'] as IXMLDispositionCodeType_cbc;
end;

function TXMLTransportEquipmentType_cac.Get_FullnessIndicationCode: IXMLFullnessIndicationCodeType_cbc;
begin
  Result := ChildNodes['FullnessIndicationCode'] as IXMLFullnessIndicationCodeType_cbc;
end;

function TXMLTransportEquipmentType_cac.Get_RefrigerationOnIndicator: IXMLRefrigerationOnIndicatorType_cbc;
begin
  Result := ChildNodes['RefrigerationOnIndicator'] as IXMLRefrigerationOnIndicatorType_cbc;
end;

function TXMLTransportEquipmentType_cac.Get_Information: IXMLInformationType_cbcList;
begin
  Result := FInformation;
end;

function TXMLTransportEquipmentType_cac.Get_ReturnabilityIndicator: IXMLReturnabilityIndicatorType_cbc;
begin
  Result := ChildNodes['ReturnabilityIndicator'] as IXMLReturnabilityIndicatorType_cbc;
end;

function TXMLTransportEquipmentType_cac.Get_LegalStatusIndicator: IXMLLegalStatusIndicatorType_cbc;
begin
  Result := ChildNodes['LegalStatusIndicator'] as IXMLLegalStatusIndicatorType_cbc;
end;

function TXMLTransportEquipmentType_cac.Get_AirFlowPercent: IXMLAirFlowPercentType_cbc;
begin
  Result := ChildNodes['AirFlowPercent'] as IXMLAirFlowPercentType_cbc;
end;

function TXMLTransportEquipmentType_cac.Get_HumidityPercent: IXMLHumidityPercentType_cbc;
begin
  Result := ChildNodes['HumidityPercent'] as IXMLHumidityPercentType_cbc;
end;

function TXMLTransportEquipmentType_cac.Get_AnimalFoodApprovedIndicator: IXMLAnimalFoodApprovedIndicatorType_cbc;
begin
  Result := ChildNodes['AnimalFoodApprovedIndicator'] as IXMLAnimalFoodApprovedIndicatorType_cbc;
end;

function TXMLTransportEquipmentType_cac.Get_HumanFoodApprovedIndicator: IXMLHumanFoodApprovedIndicatorType_cbc;
begin
  Result := ChildNodes['HumanFoodApprovedIndicator'] as IXMLHumanFoodApprovedIndicatorType_cbc;
end;

function TXMLTransportEquipmentType_cac.Get_DangerousGoodsApprovedIndicator: IXMLDangerousGoodsApprovedIndicatorType_cbc;
begin
  Result := ChildNodes['DangerousGoodsApprovedIndicator'] as IXMLDangerousGoodsApprovedIndicatorType_cbc;
end;

function TXMLTransportEquipmentType_cac.Get_RefrigeratedIndicator: IXMLRefrigeratedIndicatorType_cbc;
begin
  Result := ChildNodes['RefrigeratedIndicator'] as IXMLRefrigeratedIndicatorType_cbc;
end;

function TXMLTransportEquipmentType_cac.Get_Characteristics: IXMLCharacteristicsType_cbc;
begin
  Result := ChildNodes['Characteristics'] as IXMLCharacteristicsType_cbc;
end;

function TXMLTransportEquipmentType_cac.Get_DamageRemarks: IXMLDamageRemarksType_cbcList;
begin
  Result := FDamageRemarks;
end;

function TXMLTransportEquipmentType_cac.Get_Description: IXMLDescriptionType_cbcList;
begin
  Result := FDescription;
end;

function TXMLTransportEquipmentType_cac.Get_SpecialTransportRequirements: IXMLSpecialTransportRequirementsType_cbcList;
begin
  Result := FSpecialTransportRequirements;
end;

function TXMLTransportEquipmentType_cac.Get_GrossWeightMeasure: IXMLGrossWeightMeasureType_cbc;
begin
  Result := ChildNodes['GrossWeightMeasure'] as IXMLGrossWeightMeasureType_cbc;
end;

function TXMLTransportEquipmentType_cac.Get_GrossVolumeMeasure: IXMLGrossVolumeMeasureType_cbc;
begin
  Result := ChildNodes['GrossVolumeMeasure'] as IXMLGrossVolumeMeasureType_cbc;
end;

function TXMLTransportEquipmentType_cac.Get_TareWeightMeasure: IXMLTareWeightMeasureType_cbc;
begin
  Result := ChildNodes['TareWeightMeasure'] as IXMLTareWeightMeasureType_cbc;
end;

function TXMLTransportEquipmentType_cac.Get_TrackingDeviceCode: IXMLTrackingDeviceCodeType_cbc;
begin
  Result := ChildNodes['TrackingDeviceCode'] as IXMLTrackingDeviceCodeType_cbc;
end;

function TXMLTransportEquipmentType_cac.Get_PowerIndicator: IXMLPowerIndicatorType_cbc;
begin
  Result := ChildNodes['PowerIndicator'] as IXMLPowerIndicatorType_cbc;
end;

function TXMLTransportEquipmentType_cac.Get_TraceID: IXMLTraceIDType_cbc;
begin
  Result := ChildNodes['TraceID'] as IXMLTraceIDType_cbc;
end;

function TXMLTransportEquipmentType_cac.Get_MeasurementDimension: IXMLDimensionType_cacList;
begin
  Result := FMeasurementDimension;
end;

function TXMLTransportEquipmentType_cac.Get_TransportEquipmentSeal: IXMLTransportEquipmentSealType_cacList;
begin
  Result := FTransportEquipmentSeal;
end;

function TXMLTransportEquipmentType_cac.Get_MinimumTemperature: IXMLTemperatureType_cac;
begin
  Result := ChildNodes['MinimumTemperature'] as IXMLTemperatureType_cac;
end;

function TXMLTransportEquipmentType_cac.Get_MaximumTemperature: IXMLTemperatureType_cac;
begin
  Result := ChildNodes['MaximumTemperature'] as IXMLTemperatureType_cac;
end;

function TXMLTransportEquipmentType_cac.Get_ProviderParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['ProviderParty'] as IXMLPartyType_cac;
end;

function TXMLTransportEquipmentType_cac.Get_LoadingProofParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['LoadingProofParty'] as IXMLPartyType_cac;
end;

function TXMLTransportEquipmentType_cac.Get_SupplierParty: IXMLSupplierPartyType_cac;
begin
  Result := ChildNodes['SupplierParty'] as IXMLSupplierPartyType_cac;
end;

function TXMLTransportEquipmentType_cac.Get_OwnerParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['OwnerParty'] as IXMLPartyType_cac;
end;

function TXMLTransportEquipmentType_cac.Get_OperatingParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['OperatingParty'] as IXMLPartyType_cac;
end;

function TXMLTransportEquipmentType_cac.Get_LoadingLocation: IXMLLocationType_cac;
begin
  Result := ChildNodes['LoadingLocation'] as IXMLLocationType_cac;
end;

function TXMLTransportEquipmentType_cac.Get_UnloadingLocation: IXMLLocationType_cac;
begin
  Result := ChildNodes['UnloadingLocation'] as IXMLLocationType_cac;
end;

function TXMLTransportEquipmentType_cac.Get_StorageLocation: IXMLLocationType_cac;
begin
  Result := ChildNodes['StorageLocation'] as IXMLLocationType_cac;
end;

function TXMLTransportEquipmentType_cac.Get_PositioningTransportEvent: IXMLTransportEventType_cacList;
begin
  Result := FPositioningTransportEvent;
end;

function TXMLTransportEquipmentType_cac.Get_QuarantineTransportEvent: IXMLTransportEventType_cacList;
begin
  Result := FQuarantineTransportEvent;
end;

function TXMLTransportEquipmentType_cac.Get_DeliveryTransportEvent: IXMLTransportEventType_cacList;
begin
  Result := FDeliveryTransportEvent;
end;

function TXMLTransportEquipmentType_cac.Get_PickupTransportEvent: IXMLTransportEventType_cacList;
begin
  Result := FPickupTransportEvent;
end;

function TXMLTransportEquipmentType_cac.Get_HandlingTransportEvent: IXMLTransportEventType_cacList;
begin
  Result := FHandlingTransportEvent;
end;

function TXMLTransportEquipmentType_cac.Get_LoadingTransportEvent: IXMLTransportEventType_cacList;
begin
  Result := FLoadingTransportEvent;
end;

function TXMLTransportEquipmentType_cac.Get_TransportEvent: IXMLTransportEventType_cacList;
begin
  Result := FTransportEvent;
end;

function TXMLTransportEquipmentType_cac.Get_ApplicableTransportMeans: IXMLTransportMeansType_cac;
begin
  Result := ChildNodes['ApplicableTransportMeans'] as IXMLTransportMeansType_cac;
end;

function TXMLTransportEquipmentType_cac.Get_HaulageTradingTerms: IXMLTradingTermsType_cacList;
begin
  Result := FHaulageTradingTerms;
end;

function TXMLTransportEquipmentType_cac.Get_HazardousGoodsTransit: IXMLHazardousGoodsTransitType_cacList;
begin
  Result := FHazardousGoodsTransit;
end;

function TXMLTransportEquipmentType_cac.Get_PackagedTransportHandlingUnit: IXMLTransportHandlingUnitType_cacList;
begin
  Result := FPackagedTransportHandlingUnit;
end;

function TXMLTransportEquipmentType_cac.Get_ServiceAllowanceCharge: IXMLAllowanceChargeType_cacList;
begin
  Result := FServiceAllowanceCharge;
end;

function TXMLTransportEquipmentType_cac.Get_FreightAllowanceCharge: IXMLAllowanceChargeType_cacList;
begin
  Result := FFreightAllowanceCharge;
end;

function TXMLTransportEquipmentType_cac.Get_AttachedTransportEquipment: IXMLTransportEquipmentType_cacList;
begin
  Result := FAttachedTransportEquipment;
end;

function TXMLTransportEquipmentType_cac.Get_Delivery: IXMLDeliveryType_cac;
begin
  Result := ChildNodes['Delivery'] as IXMLDeliveryType_cac;
end;

function TXMLTransportEquipmentType_cac.Get_Pickup: IXMLPickupType_cac;
begin
  Result := ChildNodes['Pickup'] as IXMLPickupType_cac;
end;

function TXMLTransportEquipmentType_cac.Get_Despatch: IXMLDespatchType_cac;
begin
  Result := ChildNodes['Despatch'] as IXMLDespatchType_cac;
end;

function TXMLTransportEquipmentType_cac.Get_ShipmentDocumentReference: IXMLDocumentReferenceType_cacList;
begin
  Result := FShipmentDocumentReference;
end;

function TXMLTransportEquipmentType_cac.Get_ContainedInTransportEquipment: IXMLTransportEquipmentType_cacList;
begin
  Result := FContainedInTransportEquipment;
end;

function TXMLTransportEquipmentType_cac.Get_Package: IXMLPackageType_cacList;
begin
  Result := FPackage;
end;

function TXMLTransportEquipmentType_cac.Get_GoodsItem: IXMLGoodsItemType_cacList;
begin
  Result := FGoodsItem;
end;

{ TXMLTransportEquipmentType_cacList }

function TXMLTransportEquipmentType_cacList.Add: IXMLTransportEquipmentType_cac;
begin
  Result := AddItem(-1) as IXMLTransportEquipmentType_cac;
end;

function TXMLTransportEquipmentType_cacList.Insert(const Index: Integer): IXMLTransportEquipmentType_cac;
begin
  Result := AddItem(Index) as IXMLTransportEquipmentType_cac;
end;

function TXMLTransportEquipmentType_cacList.Get_Item(const Index: Integer): IXMLTransportEquipmentType_cac;
begin
  Result := List[Index] as IXMLTransportEquipmentType_cac;
end;

{ TXMLReferencedConsignmentIDType_cbc }

{ TXMLReferencedConsignmentIDType_cbcList }

function TXMLReferencedConsignmentIDType_cbcList.Add: IXMLReferencedConsignmentIDType_cbc;
begin
  Result := AddItem(-1) as IXMLReferencedConsignmentIDType_cbc;
end;

function TXMLReferencedConsignmentIDType_cbcList.Insert(const Index: Integer): IXMLReferencedConsignmentIDType_cbc;
begin
  Result := AddItem(Index) as IXMLReferencedConsignmentIDType_cbc;
end;

function TXMLReferencedConsignmentIDType_cbcList.Get_Item(const Index: Integer): IXMLReferencedConsignmentIDType_cbc;
begin
  Result := List[Index] as IXMLReferencedConsignmentIDType_cbc;
end;

{ TXMLTransportEquipmentTypeCodeType_cbc }

{ TXMLProviderTypeCodeType_cbc }

{ TXMLOwnerTypeCodeType_cbc }

{ TXMLSizeTypeCodeType_cbc }

{ TXMLDispositionCodeType_cbc }

{ TXMLFullnessIndicationCodeType_cbc }

{ TXMLRefrigerationOnIndicatorType_cbc }

{ TXMLReturnabilityIndicatorType_cbc }

{ TXMLLegalStatusIndicatorType_cbc }

{ TXMLAirFlowPercentType_cbc }

{ TXMLHumidityPercentType_cbc }

{ TXMLAnimalFoodApprovedIndicatorType_cbc }

{ TXMLHumanFoodApprovedIndicatorType_cbc }

{ TXMLDangerousGoodsApprovedIndicatorType_cbc }

{ TXMLRefrigeratedIndicatorType_cbc }

{ TXMLCharacteristicsType_cbc }

{ TXMLDamageRemarksType_cbc }

{ TXMLDamageRemarksType_cbcList }

function TXMLDamageRemarksType_cbcList.Add: IXMLDamageRemarksType_cbc;
begin
  Result := AddItem(-1) as IXMLDamageRemarksType_cbc;
end;

function TXMLDamageRemarksType_cbcList.Insert(const Index: Integer): IXMLDamageRemarksType_cbc;
begin
  Result := AddItem(Index) as IXMLDamageRemarksType_cbc;
end;

function TXMLDamageRemarksType_cbcList.Get_Item(const Index: Integer): IXMLDamageRemarksType_cbc;
begin
  Result := List[Index] as IXMLDamageRemarksType_cbc;
end;

{ TXMLSpecialTransportRequirementsType_cbc }

{ TXMLSpecialTransportRequirementsType_cbcList }

function TXMLSpecialTransportRequirementsType_cbcList.Add: IXMLSpecialTransportRequirementsType_cbc;
begin
  Result := AddItem(-1) as IXMLSpecialTransportRequirementsType_cbc;
end;

function TXMLSpecialTransportRequirementsType_cbcList.Insert(const Index: Integer): IXMLSpecialTransportRequirementsType_cbc;
begin
  Result := AddItem(Index) as IXMLSpecialTransportRequirementsType_cbc;
end;

function TXMLSpecialTransportRequirementsType_cbcList.Get_Item(const Index: Integer): IXMLSpecialTransportRequirementsType_cbc;
begin
  Result := List[Index] as IXMLSpecialTransportRequirementsType_cbc;
end;

{ TXMLTareWeightMeasureType_cbc }

{ TXMLTrackingDeviceCodeType_cbc }

{ TXMLPowerIndicatorType_cbc }

{ TXMLTraceIDType_cbc }

{ TXMLDimensionType_cac }

procedure TXMLDimensionType_cac.AfterConstruction;
begin
  RegisterChildNode('AttributeID', TXMLAttributeIDType_cbc);
  RegisterChildNode('Measure', TXMLMeasureType_cbc);
  RegisterChildNode('Description', TXMLDescriptionType_cbc);
  RegisterChildNode('MinimumMeasure', TXMLMinimumMeasureType_cbc);
  RegisterChildNode('MaximumMeasure', TXMLMaximumMeasureType_cbc);
  FDescription := CreateCollection(TXMLDescriptionType_cbcList, IXMLDescriptionType_cbc, 'Description') as IXMLDescriptionType_cbcList;
  inherited;
end;

function TXMLDimensionType_cac.Get_AttributeID: IXMLAttributeIDType_cbc;
begin
  Result := ChildNodes['AttributeID'] as IXMLAttributeIDType_cbc;
end;

function TXMLDimensionType_cac.Get_Measure: IXMLMeasureType_cbc;
begin
  Result := ChildNodes['Measure'] as IXMLMeasureType_cbc;
end;

function TXMLDimensionType_cac.Get_Description: IXMLDescriptionType_cbcList;
begin
  Result := FDescription;
end;

function TXMLDimensionType_cac.Get_MinimumMeasure: IXMLMinimumMeasureType_cbc;
begin
  Result := ChildNodes['MinimumMeasure'] as IXMLMinimumMeasureType_cbc;
end;

function TXMLDimensionType_cac.Get_MaximumMeasure: IXMLMaximumMeasureType_cbc;
begin
  Result := ChildNodes['MaximumMeasure'] as IXMLMaximumMeasureType_cbc;
end;

{ TXMLDimensionType_cacList }

function TXMLDimensionType_cacList.Add: IXMLDimensionType_cac;
begin
  Result := AddItem(-1) as IXMLDimensionType_cac;
end;

function TXMLDimensionType_cacList.Insert(const Index: Integer): IXMLDimensionType_cac;
begin
  Result := AddItem(Index) as IXMLDimensionType_cac;
end;

function TXMLDimensionType_cacList.Get_Item(const Index: Integer): IXMLDimensionType_cac;
begin
  Result := List[Index] as IXMLDimensionType_cac;
end;

{ TXMLTransportEquipmentSealType_cac }

procedure TXMLTransportEquipmentSealType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('SealIssuerTypeCode', TXMLSealIssuerTypeCodeType_cbc);
  RegisterChildNode('Condition', TXMLConditionType_cbc);
  RegisterChildNode('SealStatusCode', TXMLSealStatusCodeType_cbc);
  RegisterChildNode('SealingPartyType', TXMLSealingPartyTypeType_cbc);
  inherited;
end;

function TXMLTransportEquipmentSealType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLTransportEquipmentSealType_cac.Get_SealIssuerTypeCode: IXMLSealIssuerTypeCodeType_cbc;
begin
  Result := ChildNodes['SealIssuerTypeCode'] as IXMLSealIssuerTypeCodeType_cbc;
end;

function TXMLTransportEquipmentSealType_cac.Get_Condition: IXMLConditionType_cbc;
begin
  Result := ChildNodes['Condition'] as IXMLConditionType_cbc;
end;

function TXMLTransportEquipmentSealType_cac.Get_SealStatusCode: IXMLSealStatusCodeType_cbc;
begin
  Result := ChildNodes['SealStatusCode'] as IXMLSealStatusCodeType_cbc;
end;

function TXMLTransportEquipmentSealType_cac.Get_SealingPartyType: IXMLSealingPartyTypeType_cbc;
begin
  Result := ChildNodes['SealingPartyType'] as IXMLSealingPartyTypeType_cbc;
end;

{ TXMLTransportEquipmentSealType_cacList }

function TXMLTransportEquipmentSealType_cacList.Add: IXMLTransportEquipmentSealType_cac;
begin
  Result := AddItem(-1) as IXMLTransportEquipmentSealType_cac;
end;

function TXMLTransportEquipmentSealType_cacList.Insert(const Index: Integer): IXMLTransportEquipmentSealType_cac;
begin
  Result := AddItem(Index) as IXMLTransportEquipmentSealType_cac;
end;

function TXMLTransportEquipmentSealType_cacList.Get_Item(const Index: Integer): IXMLTransportEquipmentSealType_cac;
begin
  Result := List[Index] as IXMLTransportEquipmentSealType_cac;
end;

{ TXMLSealIssuerTypeCodeType_cbc }

{ TXMLConditionType_cbc }

{ TXMLSealStatusCodeType_cbc }

{ TXMLSealingPartyTypeType_cbc }

{ TXMLTemperatureType_cac }

procedure TXMLTemperatureType_cac.AfterConstruction;
begin
  RegisterChildNode('AttributeID', TXMLAttributeIDType_cbc);
  RegisterChildNode('Measure', TXMLMeasureType_cbc);
  RegisterChildNode('Description', TXMLDescriptionType_cbc);
  FDescription := CreateCollection(TXMLDescriptionType_cbcList, IXMLDescriptionType_cbc, 'Description') as IXMLDescriptionType_cbcList;
  inherited;
end;

function TXMLTemperatureType_cac.Get_AttributeID: IXMLAttributeIDType_cbc;
begin
  Result := ChildNodes['AttributeID'] as IXMLAttributeIDType_cbc;
end;

function TXMLTemperatureType_cac.Get_Measure: IXMLMeasureType_cbc;
begin
  Result := ChildNodes['Measure'] as IXMLMeasureType_cbc;
end;

function TXMLTemperatureType_cac.Get_Description: IXMLDescriptionType_cbcList;
begin
  Result := FDescription;
end;

{ TXMLTemperatureType_cacList }

function TXMLTemperatureType_cacList.Add: IXMLTemperatureType_cac;
begin
  Result := AddItem(-1) as IXMLTemperatureType_cac;
end;

function TXMLTemperatureType_cacList.Insert(const Index: Integer): IXMLTemperatureType_cac;
begin
  Result := AddItem(Index) as IXMLTemperatureType_cac;
end;

function TXMLTemperatureType_cacList.Get_Item(const Index: Integer): IXMLTemperatureType_cac;
begin
  Result := List[Index] as IXMLTemperatureType_cac;
end;

{ TXMLTransportMeansType_cac }

procedure TXMLTransportMeansType_cac.AfterConstruction;
begin
  RegisterChildNode('JourneyID', TXMLJourneyIDType_cbc);
  RegisterChildNode('RegistrationNationalityID', TXMLRegistrationNationalityIDType_cbc);
  RegisterChildNode('RegistrationNationality', TXMLRegistrationNationalityType_cbc);
  RegisterChildNode('DirectionCode', TXMLDirectionCodeType_cbc);
  RegisterChildNode('TransportMeansTypeCode', TXMLTransportMeansTypeCodeType_cbc);
  RegisterChildNode('TradeServiceCode', TXMLTradeServiceCodeType_cbc);
  RegisterChildNode('Stowage', TXMLStowageType_cac);
  RegisterChildNode('AirTransport', TXMLAirTransportType_cac);
  RegisterChildNode('RoadTransport', TXMLRoadTransportType_cac);
  RegisterChildNode('RailTransport', TXMLRailTransportType_cac);
  RegisterChildNode('MaritimeTransport', TXMLMaritimeTransportType_cac);
  RegisterChildNode('OwnerParty', TXMLPartyType_cac);
  RegisterChildNode('MeasurementDimension', TXMLDimensionType_cac);
  FRegistrationNationality := CreateCollection(TXMLRegistrationNationalityType_cbcList, IXMLRegistrationNationalityType_cbc, 'RegistrationNationality') as IXMLRegistrationNationalityType_cbcList;
  FMeasurementDimension := CreateCollection(TXMLDimensionType_cacList, IXMLDimensionType_cac, 'MeasurementDimension') as IXMLDimensionType_cacList;
  inherited;
end;

function TXMLTransportMeansType_cac.Get_JourneyID: IXMLJourneyIDType_cbc;
begin
  Result := ChildNodes['JourneyID'] as IXMLJourneyIDType_cbc;
end;

function TXMLTransportMeansType_cac.Get_RegistrationNationalityID: IXMLRegistrationNationalityIDType_cbc;
begin
  Result := ChildNodes['RegistrationNationalityID'] as IXMLRegistrationNationalityIDType_cbc;
end;

function TXMLTransportMeansType_cac.Get_RegistrationNationality: IXMLRegistrationNationalityType_cbcList;
begin
  Result := FRegistrationNationality;
end;

function TXMLTransportMeansType_cac.Get_DirectionCode: IXMLDirectionCodeType_cbc;
begin
  Result := ChildNodes['DirectionCode'] as IXMLDirectionCodeType_cbc;
end;

function TXMLTransportMeansType_cac.Get_TransportMeansTypeCode: IXMLTransportMeansTypeCodeType_cbc;
begin
  Result := ChildNodes['TransportMeansTypeCode'] as IXMLTransportMeansTypeCodeType_cbc;
end;

function TXMLTransportMeansType_cac.Get_TradeServiceCode: IXMLTradeServiceCodeType_cbc;
begin
  Result := ChildNodes['TradeServiceCode'] as IXMLTradeServiceCodeType_cbc;
end;

function TXMLTransportMeansType_cac.Get_Stowage: IXMLStowageType_cac;
begin
  Result := ChildNodes['Stowage'] as IXMLStowageType_cac;
end;

function TXMLTransportMeansType_cac.Get_AirTransport: IXMLAirTransportType_cac;
begin
  Result := ChildNodes['AirTransport'] as IXMLAirTransportType_cac;
end;

function TXMLTransportMeansType_cac.Get_RoadTransport: IXMLRoadTransportType_cac;
begin
  Result := ChildNodes['RoadTransport'] as IXMLRoadTransportType_cac;
end;

function TXMLTransportMeansType_cac.Get_RailTransport: IXMLRailTransportType_cac;
begin
  Result := ChildNodes['RailTransport'] as IXMLRailTransportType_cac;
end;

function TXMLTransportMeansType_cac.Get_MaritimeTransport: IXMLMaritimeTransportType_cac;
begin
  Result := ChildNodes['MaritimeTransport'] as IXMLMaritimeTransportType_cac;
end;

function TXMLTransportMeansType_cac.Get_OwnerParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['OwnerParty'] as IXMLPartyType_cac;
end;

function TXMLTransportMeansType_cac.Get_MeasurementDimension: IXMLDimensionType_cacList;
begin
  Result := FMeasurementDimension;
end;

{ TXMLTransportMeansType_cacList }

function TXMLTransportMeansType_cacList.Add: IXMLTransportMeansType_cac;
begin
  Result := AddItem(-1) as IXMLTransportMeansType_cac;
end;

function TXMLTransportMeansType_cacList.Insert(const Index: Integer): IXMLTransportMeansType_cac;
begin
  Result := AddItem(Index) as IXMLTransportMeansType_cac;
end;

function TXMLTransportMeansType_cacList.Get_Item(const Index: Integer): IXMLTransportMeansType_cac;
begin
  Result := List[Index] as IXMLTransportMeansType_cac;
end;

{ TXMLJourneyIDType_cbc }

{ TXMLRegistrationNationalityIDType_cbc }

{ TXMLRegistrationNationalityType_cbc }

{ TXMLRegistrationNationalityType_cbcList }

function TXMLRegistrationNationalityType_cbcList.Add: IXMLRegistrationNationalityType_cbc;
begin
  Result := AddItem(-1) as IXMLRegistrationNationalityType_cbc;
end;

function TXMLRegistrationNationalityType_cbcList.Insert(const Index: Integer): IXMLRegistrationNationalityType_cbc;
begin
  Result := AddItem(Index) as IXMLRegistrationNationalityType_cbc;
end;

function TXMLRegistrationNationalityType_cbcList.Get_Item(const Index: Integer): IXMLRegistrationNationalityType_cbc;
begin
  Result := List[Index] as IXMLRegistrationNationalityType_cbc;
end;

{ TXMLDirectionCodeType_cbc }

{ TXMLTransportMeansTypeCodeType_cbc }

{ TXMLTradeServiceCodeType_cbc }

{ TXMLStowageType_cac }

procedure TXMLStowageType_cac.AfterConstruction;
begin
  RegisterChildNode('LocationID', TXMLLocationIDType_cbc);
  RegisterChildNode('Location', TXMLLocationType_cbc);
  RegisterChildNode('MeasurementDimension', TXMLDimensionType_cac);
  FLocation := CreateCollection(TXMLLocationType_cbcList, IXMLLocationType_cbc, 'Location') as IXMLLocationType_cbcList;
  FMeasurementDimension := CreateCollection(TXMLDimensionType_cacList, IXMLDimensionType_cac, 'MeasurementDimension') as IXMLDimensionType_cacList;
  inherited;
end;

function TXMLStowageType_cac.Get_LocationID: IXMLLocationIDType_cbc;
begin
  Result := ChildNodes['LocationID'] as IXMLLocationIDType_cbc;
end;

function TXMLStowageType_cac.Get_Location: IXMLLocationType_cbcList;
begin
  Result := FLocation;
end;

function TXMLStowageType_cac.Get_MeasurementDimension: IXMLDimensionType_cacList;
begin
  Result := FMeasurementDimension;
end;

{ TXMLLocationIDType_cbc }

{ TXMLLocationType_cbc }

{ TXMLLocationType_cbcList }

function TXMLLocationType_cbcList.Add: IXMLLocationType_cbc;
begin
  Result := AddItem(-1) as IXMLLocationType_cbc;
end;

function TXMLLocationType_cbcList.Insert(const Index: Integer): IXMLLocationType_cbc;
begin
  Result := AddItem(Index) as IXMLLocationType_cbc;
end;

function TXMLLocationType_cbcList.Get_Item(const Index: Integer): IXMLLocationType_cbc;
begin
  Result := List[Index] as IXMLLocationType_cbc;
end;

{ TXMLAirTransportType_cac }

procedure TXMLAirTransportType_cac.AfterConstruction;
begin
  RegisterChildNode('AircraftID', TXMLAircraftIDType_cbc);
  inherited;
end;

function TXMLAirTransportType_cac.Get_AircraftID: IXMLAircraftIDType_cbc;
begin
  Result := ChildNodes['AircraftID'] as IXMLAircraftIDType_cbc;
end;

{ TXMLAircraftIDType_cbc }

{ TXMLRoadTransportType_cac }

procedure TXMLRoadTransportType_cac.AfterConstruction;
begin
  RegisterChildNode('LicensePlateID', TXMLLicensePlateIDType_cbc);
  inherited;
end;

function TXMLRoadTransportType_cac.Get_LicensePlateID: IXMLLicensePlateIDType_cbc;
begin
  Result := ChildNodes['LicensePlateID'] as IXMLLicensePlateIDType_cbc;
end;

{ TXMLLicensePlateIDType_cbc }

{ TXMLRailTransportType_cac }

procedure TXMLRailTransportType_cac.AfterConstruction;
begin
  RegisterChildNode('TrainID', TXMLTrainIDType_cbc);
  RegisterChildNode('RailCarID', TXMLRailCarIDType_cbc);
  inherited;
end;

function TXMLRailTransportType_cac.Get_TrainID: IXMLTrainIDType_cbc;
begin
  Result := ChildNodes['TrainID'] as IXMLTrainIDType_cbc;
end;

function TXMLRailTransportType_cac.Get_RailCarID: IXMLRailCarIDType_cbc;
begin
  Result := ChildNodes['RailCarID'] as IXMLRailCarIDType_cbc;
end;

{ TXMLTrainIDType_cbc }

{ TXMLRailCarIDType_cbc }

{ TXMLMaritimeTransportType_cac }

procedure TXMLMaritimeTransportType_cac.AfterConstruction;
begin
  RegisterChildNode('VesselID', TXMLVesselIDType_cbc);
  RegisterChildNode('VesselName', TXMLVesselNameType_cbc);
  RegisterChildNode('RadioCallSignID', TXMLRadioCallSignIDType_cbc);
  RegisterChildNode('ShipsRequirements', TXMLShipsRequirementsType_cbc);
  RegisterChildNode('GrossTonnageMeasure', TXMLGrossTonnageMeasureType_cbc);
  RegisterChildNode('NetTonnageMeasure', TXMLNetTonnageMeasureType_cbc);
  RegisterChildNode('RegistryCertificateDocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('RegistryPortLocation', TXMLLocationType_cac);
  FShipsRequirements := CreateCollection(TXMLShipsRequirementsType_cbcList, IXMLShipsRequirementsType_cbc, 'ShipsRequirements') as IXMLShipsRequirementsType_cbcList;
  inherited;
end;

function TXMLMaritimeTransportType_cac.Get_VesselID: IXMLVesselIDType_cbc;
begin
  Result := ChildNodes['VesselID'] as IXMLVesselIDType_cbc;
end;

function TXMLMaritimeTransportType_cac.Get_VesselName: IXMLVesselNameType_cbc;
begin
  Result := ChildNodes['VesselName'] as IXMLVesselNameType_cbc;
end;

function TXMLMaritimeTransportType_cac.Get_RadioCallSignID: IXMLRadioCallSignIDType_cbc;
begin
  Result := ChildNodes['RadioCallSignID'] as IXMLRadioCallSignIDType_cbc;
end;

function TXMLMaritimeTransportType_cac.Get_ShipsRequirements: IXMLShipsRequirementsType_cbcList;
begin
  Result := FShipsRequirements;
end;

function TXMLMaritimeTransportType_cac.Get_GrossTonnageMeasure: IXMLGrossTonnageMeasureType_cbc;
begin
  Result := ChildNodes['GrossTonnageMeasure'] as IXMLGrossTonnageMeasureType_cbc;
end;

function TXMLMaritimeTransportType_cac.Get_NetTonnageMeasure: IXMLNetTonnageMeasureType_cbc;
begin
  Result := ChildNodes['NetTonnageMeasure'] as IXMLNetTonnageMeasureType_cbc;
end;

function TXMLMaritimeTransportType_cac.Get_RegistryCertificateDocumentReference: IXMLDocumentReferenceType_cac;
begin
  Result := ChildNodes['RegistryCertificateDocumentReference'] as IXMLDocumentReferenceType_cac;
end;

function TXMLMaritimeTransportType_cac.Get_RegistryPortLocation: IXMLLocationType_cac;
begin
  Result := ChildNodes['RegistryPortLocation'] as IXMLLocationType_cac;
end;

{ TXMLVesselIDType_cbc }

{ TXMLVesselNameType_cbc }

{ TXMLRadioCallSignIDType_cbc }

{ TXMLShipsRequirementsType_cbc }

{ TXMLShipsRequirementsType_cbcList }

function TXMLShipsRequirementsType_cbcList.Add: IXMLShipsRequirementsType_cbc;
begin
  Result := AddItem(-1) as IXMLShipsRequirementsType_cbc;
end;

function TXMLShipsRequirementsType_cbcList.Insert(const Index: Integer): IXMLShipsRequirementsType_cbc;
begin
  Result := AddItem(Index) as IXMLShipsRequirementsType_cbc;
end;

function TXMLShipsRequirementsType_cbcList.Get_Item(const Index: Integer): IXMLShipsRequirementsType_cbc;
begin
  Result := List[Index] as IXMLShipsRequirementsType_cbc;
end;

{ TXMLGrossTonnageMeasureType_cbc }

{ TXMLNetTonnageMeasureType_cbc }

{ TXMLTradingTermsType_cac }

procedure TXMLTradingTermsType_cac.AfterConstruction;
begin
  RegisterChildNode('Information', TXMLInformationType_cbc);
  RegisterChildNode('Reference', TXMLReferenceType_cbc);
  RegisterChildNode('ApplicableAddress', TXMLAddressType_cac);
  FInformation := CreateCollection(TXMLInformationType_cbcList, IXMLInformationType_cbc, 'Information') as IXMLInformationType_cbcList;
  inherited;
end;

function TXMLTradingTermsType_cac.Get_Information: IXMLInformationType_cbcList;
begin
  Result := FInformation;
end;

function TXMLTradingTermsType_cac.Get_Reference: IXMLReferenceType_cbc;
begin
  Result := ChildNodes['Reference'] as IXMLReferenceType_cbc;
end;

function TXMLTradingTermsType_cac.Get_ApplicableAddress: IXMLAddressType_cac;
begin
  Result := ChildNodes['ApplicableAddress'] as IXMLAddressType_cac;
end;

{ TXMLTradingTermsType_cacList }

function TXMLTradingTermsType_cacList.Add: IXMLTradingTermsType_cac;
begin
  Result := AddItem(-1) as IXMLTradingTermsType_cac;
end;

function TXMLTradingTermsType_cacList.Insert(const Index: Integer): IXMLTradingTermsType_cac;
begin
  Result := AddItem(Index) as IXMLTradingTermsType_cac;
end;

function TXMLTradingTermsType_cacList.Get_Item(const Index: Integer): IXMLTradingTermsType_cac;
begin
  Result := List[Index] as IXMLTradingTermsType_cac;
end;

{ TXMLReferenceType_cbc }

{ TXMLHazardousGoodsTransitType_cac }

procedure TXMLHazardousGoodsTransitType_cac.AfterConstruction;
begin
  RegisterChildNode('TransportEmergencyCardCode', TXMLTransportEmergencyCardCodeType_cbc);
  RegisterChildNode('PackingCriteriaCode', TXMLPackingCriteriaCodeType_cbc);
  RegisterChildNode('HazardousRegulationCode', TXMLHazardousRegulationCodeType_cbc);
  RegisterChildNode('InhalationToxicityZoneCode', TXMLInhalationToxicityZoneCodeType_cbc);
  RegisterChildNode('TransportAuthorizationCode', TXMLTransportAuthorizationCodeType_cbc);
  RegisterChildNode('MaximumTemperature', TXMLTemperatureType_cac);
  RegisterChildNode('MinimumTemperature', TXMLTemperatureType_cac);
  inherited;
end;

function TXMLHazardousGoodsTransitType_cac.Get_TransportEmergencyCardCode: IXMLTransportEmergencyCardCodeType_cbc;
begin
  Result := ChildNodes['TransportEmergencyCardCode'] as IXMLTransportEmergencyCardCodeType_cbc;
end;

function TXMLHazardousGoodsTransitType_cac.Get_PackingCriteriaCode: IXMLPackingCriteriaCodeType_cbc;
begin
  Result := ChildNodes['PackingCriteriaCode'] as IXMLPackingCriteriaCodeType_cbc;
end;

function TXMLHazardousGoodsTransitType_cac.Get_HazardousRegulationCode: IXMLHazardousRegulationCodeType_cbc;
begin
  Result := ChildNodes['HazardousRegulationCode'] as IXMLHazardousRegulationCodeType_cbc;
end;

function TXMLHazardousGoodsTransitType_cac.Get_InhalationToxicityZoneCode: IXMLInhalationToxicityZoneCodeType_cbc;
begin
  Result := ChildNodes['InhalationToxicityZoneCode'] as IXMLInhalationToxicityZoneCodeType_cbc;
end;

function TXMLHazardousGoodsTransitType_cac.Get_TransportAuthorizationCode: IXMLTransportAuthorizationCodeType_cbc;
begin
  Result := ChildNodes['TransportAuthorizationCode'] as IXMLTransportAuthorizationCodeType_cbc;
end;

function TXMLHazardousGoodsTransitType_cac.Get_MaximumTemperature: IXMLTemperatureType_cac;
begin
  Result := ChildNodes['MaximumTemperature'] as IXMLTemperatureType_cac;
end;

function TXMLHazardousGoodsTransitType_cac.Get_MinimumTemperature: IXMLTemperatureType_cac;
begin
  Result := ChildNodes['MinimumTemperature'] as IXMLTemperatureType_cac;
end;

{ TXMLHazardousGoodsTransitType_cacList }

function TXMLHazardousGoodsTransitType_cacList.Add: IXMLHazardousGoodsTransitType_cac;
begin
  Result := AddItem(-1) as IXMLHazardousGoodsTransitType_cac;
end;

function TXMLHazardousGoodsTransitType_cacList.Insert(const Index: Integer): IXMLHazardousGoodsTransitType_cac;
begin
  Result := AddItem(Index) as IXMLHazardousGoodsTransitType_cac;
end;

function TXMLHazardousGoodsTransitType_cacList.Get_Item(const Index: Integer): IXMLHazardousGoodsTransitType_cac;
begin
  Result := List[Index] as IXMLHazardousGoodsTransitType_cac;
end;

{ TXMLTransportEmergencyCardCodeType_cbc }

{ TXMLPackingCriteriaCodeType_cbc }

{ TXMLHazardousRegulationCodeType_cbc }

{ TXMLInhalationToxicityZoneCodeType_cbc }

{ TXMLTransportAuthorizationCodeType_cbc }

{ TXMLTransportHandlingUnitType_cac }

procedure TXMLTransportHandlingUnitType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('TransportHandlingUnitTypeCode', TXMLTransportHandlingUnitTypeCodeType_cbc);
  RegisterChildNode('HandlingCode', TXMLHandlingCodeType_cbc);
  RegisterChildNode('HandlingInstructions', TXMLHandlingInstructionsType_cbc);
  RegisterChildNode('HazardousRiskIndicator', TXMLHazardousRiskIndicatorType_cbc);
  RegisterChildNode('TotalGoodsItemQuantity', TXMLTotalGoodsItemQuantityType_cbc);
  RegisterChildNode('TotalPackageQuantity', TXMLTotalPackageQuantityType_cbc);
  RegisterChildNode('DamageRemarks', TXMLDamageRemarksType_cbc);
  RegisterChildNode('ShippingMarks', TXMLShippingMarksType_cbc);
  RegisterChildNode('TraceID', TXMLTraceIDType_cbc);
  RegisterChildNode('HandlingUnitDespatchLine', TXMLDespatchLineType_cac);
  RegisterChildNode('ActualPackage', TXMLPackageType_cac);
  RegisterChildNode('ReceivedHandlingUnitReceiptLine', TXMLReceiptLineType_cac);
  RegisterChildNode('TransportEquipment', TXMLTransportEquipmentType_cac);
  RegisterChildNode('TransportMeans', TXMLTransportMeansType_cac);
  RegisterChildNode('HazardousGoodsTransit', TXMLHazardousGoodsTransitType_cac);
  RegisterChildNode('MeasurementDimension', TXMLDimensionType_cac);
  RegisterChildNode('MinimumTemperature', TXMLTemperatureType_cac);
  RegisterChildNode('MaximumTemperature', TXMLTemperatureType_cac);
  RegisterChildNode('GoodsItem', TXMLGoodsItemType_cac);
  RegisterChildNode('FloorSpaceMeasurementDimension', TXMLDimensionType_cac);
  RegisterChildNode('PalletSpaceMeasurementDimension', TXMLDimensionType_cac);
  RegisterChildNode('ShipmentDocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('Status', TXMLStatusType_cac);
  RegisterChildNode('CustomsDeclaration', TXMLCustomsDeclarationType_cac);
  RegisterChildNode('ReferencedShipment', TXMLShipmentType_cac);
  RegisterChildNode('Package', TXMLPackageType_cac);
  FHandlingInstructions := CreateCollection(TXMLHandlingInstructionsType_cbcList, IXMLHandlingInstructionsType_cbc, 'HandlingInstructions') as IXMLHandlingInstructionsType_cbcList;
  FDamageRemarks := CreateCollection(TXMLDamageRemarksType_cbcList, IXMLDamageRemarksType_cbc, 'DamageRemarks') as IXMLDamageRemarksType_cbcList;
  FShippingMarks := CreateCollection(TXMLShippingMarksType_cbcList, IXMLShippingMarksType_cbc, 'ShippingMarks') as IXMLShippingMarksType_cbcList;
  FHandlingUnitDespatchLine := CreateCollection(TXMLDespatchLineType_cacList, IXMLDespatchLineType_cac, 'HandlingUnitDespatchLine') as IXMLDespatchLineType_cacList;
  FActualPackage := CreateCollection(TXMLPackageType_cacList, IXMLPackageType_cac, 'ActualPackage') as IXMLPackageType_cacList;
  FReceivedHandlingUnitReceiptLine := CreateCollection(TXMLReceiptLineType_cacList, IXMLReceiptLineType_cac, 'ReceivedHandlingUnitReceiptLine') as IXMLReceiptLineType_cacList;
  FTransportEquipment := CreateCollection(TXMLTransportEquipmentType_cacList, IXMLTransportEquipmentType_cac, 'TransportEquipment') as IXMLTransportEquipmentType_cacList;
  FTransportMeans := CreateCollection(TXMLTransportMeansType_cacList, IXMLTransportMeansType_cac, 'TransportMeans') as IXMLTransportMeansType_cacList;
  FHazardousGoodsTransit := CreateCollection(TXMLHazardousGoodsTransitType_cacList, IXMLHazardousGoodsTransitType_cac, 'HazardousGoodsTransit') as IXMLHazardousGoodsTransitType_cacList;
  FMeasurementDimension := CreateCollection(TXMLDimensionType_cacList, IXMLDimensionType_cac, 'MeasurementDimension') as IXMLDimensionType_cacList;
  FGoodsItem := CreateCollection(TXMLGoodsItemType_cacList, IXMLGoodsItemType_cac, 'GoodsItem') as IXMLGoodsItemType_cacList;
  FShipmentDocumentReference := CreateCollection(TXMLDocumentReferenceType_cacList, IXMLDocumentReferenceType_cac, 'ShipmentDocumentReference') as IXMLDocumentReferenceType_cacList;
  FStatus := CreateCollection(TXMLStatusType_cacList, IXMLStatusType_cac, 'Status') as IXMLStatusType_cacList;
  FCustomsDeclaration := CreateCollection(TXMLCustomsDeclarationType_cacList, IXMLCustomsDeclarationType_cac, 'CustomsDeclaration') as IXMLCustomsDeclarationType_cacList;
  FReferencedShipment := CreateCollection(TXMLShipmentType_cacList, IXMLShipmentType_cac, 'ReferencedShipment') as IXMLShipmentType_cacList;
  FPackage := CreateCollection(TXMLPackageType_cacList, IXMLPackageType_cac, 'Package') as IXMLPackageType_cacList;
  inherited;
end;

function TXMLTransportHandlingUnitType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLTransportHandlingUnitType_cac.Get_TransportHandlingUnitTypeCode: IXMLTransportHandlingUnitTypeCodeType_cbc;
begin
  Result := ChildNodes['TransportHandlingUnitTypeCode'] as IXMLTransportHandlingUnitTypeCodeType_cbc;
end;

function TXMLTransportHandlingUnitType_cac.Get_HandlingCode: IXMLHandlingCodeType_cbc;
begin
  Result := ChildNodes['HandlingCode'] as IXMLHandlingCodeType_cbc;
end;

function TXMLTransportHandlingUnitType_cac.Get_HandlingInstructions: IXMLHandlingInstructionsType_cbcList;
begin
  Result := FHandlingInstructions;
end;

function TXMLTransportHandlingUnitType_cac.Get_HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc;
begin
  Result := ChildNodes['HazardousRiskIndicator'] as IXMLHazardousRiskIndicatorType_cbc;
end;

function TXMLTransportHandlingUnitType_cac.Get_TotalGoodsItemQuantity: IXMLTotalGoodsItemQuantityType_cbc;
begin
  Result := ChildNodes['TotalGoodsItemQuantity'] as IXMLTotalGoodsItemQuantityType_cbc;
end;

function TXMLTransportHandlingUnitType_cac.Get_TotalPackageQuantity: IXMLTotalPackageQuantityType_cbc;
begin
  Result := ChildNodes['TotalPackageQuantity'] as IXMLTotalPackageQuantityType_cbc;
end;

function TXMLTransportHandlingUnitType_cac.Get_DamageRemarks: IXMLDamageRemarksType_cbcList;
begin
  Result := FDamageRemarks;
end;

function TXMLTransportHandlingUnitType_cac.Get_ShippingMarks: IXMLShippingMarksType_cbcList;
begin
  Result := FShippingMarks;
end;

function TXMLTransportHandlingUnitType_cac.Get_TraceID: IXMLTraceIDType_cbc;
begin
  Result := ChildNodes['TraceID'] as IXMLTraceIDType_cbc;
end;

function TXMLTransportHandlingUnitType_cac.Get_HandlingUnitDespatchLine: IXMLDespatchLineType_cacList;
begin
  Result := FHandlingUnitDespatchLine;
end;

function TXMLTransportHandlingUnitType_cac.Get_ActualPackage: IXMLPackageType_cacList;
begin
  Result := FActualPackage;
end;

function TXMLTransportHandlingUnitType_cac.Get_ReceivedHandlingUnitReceiptLine: IXMLReceiptLineType_cacList;
begin
  Result := FReceivedHandlingUnitReceiptLine;
end;

function TXMLTransportHandlingUnitType_cac.Get_TransportEquipment: IXMLTransportEquipmentType_cacList;
begin
  Result := FTransportEquipment;
end;

function TXMLTransportHandlingUnitType_cac.Get_TransportMeans: IXMLTransportMeansType_cacList;
begin
  Result := FTransportMeans;
end;

function TXMLTransportHandlingUnitType_cac.Get_HazardousGoodsTransit: IXMLHazardousGoodsTransitType_cacList;
begin
  Result := FHazardousGoodsTransit;
end;

function TXMLTransportHandlingUnitType_cac.Get_MeasurementDimension: IXMLDimensionType_cacList;
begin
  Result := FMeasurementDimension;
end;

function TXMLTransportHandlingUnitType_cac.Get_MinimumTemperature: IXMLTemperatureType_cac;
begin
  Result := ChildNodes['MinimumTemperature'] as IXMLTemperatureType_cac;
end;

function TXMLTransportHandlingUnitType_cac.Get_MaximumTemperature: IXMLTemperatureType_cac;
begin
  Result := ChildNodes['MaximumTemperature'] as IXMLTemperatureType_cac;
end;

function TXMLTransportHandlingUnitType_cac.Get_GoodsItem: IXMLGoodsItemType_cacList;
begin
  Result := FGoodsItem;
end;

function TXMLTransportHandlingUnitType_cac.Get_FloorSpaceMeasurementDimension: IXMLDimensionType_cac;
begin
  Result := ChildNodes['FloorSpaceMeasurementDimension'] as IXMLDimensionType_cac;
end;

function TXMLTransportHandlingUnitType_cac.Get_PalletSpaceMeasurementDimension: IXMLDimensionType_cac;
begin
  Result := ChildNodes['PalletSpaceMeasurementDimension'] as IXMLDimensionType_cac;
end;

function TXMLTransportHandlingUnitType_cac.Get_ShipmentDocumentReference: IXMLDocumentReferenceType_cacList;
begin
  Result := FShipmentDocumentReference;
end;

function TXMLTransportHandlingUnitType_cac.Get_Status: IXMLStatusType_cacList;
begin
  Result := FStatus;
end;

function TXMLTransportHandlingUnitType_cac.Get_CustomsDeclaration: IXMLCustomsDeclarationType_cacList;
begin
  Result := FCustomsDeclaration;
end;

function TXMLTransportHandlingUnitType_cac.Get_ReferencedShipment: IXMLShipmentType_cacList;
begin
  Result := FReferencedShipment;
end;

function TXMLTransportHandlingUnitType_cac.Get_Package: IXMLPackageType_cacList;
begin
  Result := FPackage;
end;

{ TXMLTransportHandlingUnitType_cacList }

function TXMLTransportHandlingUnitType_cacList.Add: IXMLTransportHandlingUnitType_cac;
begin
  Result := AddItem(-1) as IXMLTransportHandlingUnitType_cac;
end;

function TXMLTransportHandlingUnitType_cacList.Insert(const Index: Integer): IXMLTransportHandlingUnitType_cac;
begin
  Result := AddItem(Index) as IXMLTransportHandlingUnitType_cac;
end;

function TXMLTransportHandlingUnitType_cacList.Get_Item(const Index: Integer): IXMLTransportHandlingUnitType_cac;
begin
  Result := List[Index] as IXMLTransportHandlingUnitType_cac;
end;

{ TXMLTransportHandlingUnitTypeCodeType_cbc }

{ TXMLTotalPackageQuantityType_cbc }

{ TXMLShippingMarksType_cbc }

{ TXMLShippingMarksType_cbcList }

function TXMLShippingMarksType_cbcList.Add: IXMLShippingMarksType_cbc;
begin
  Result := AddItem(-1) as IXMLShippingMarksType_cbc;
end;

function TXMLShippingMarksType_cbcList.Insert(const Index: Integer): IXMLShippingMarksType_cbc;
begin
  Result := AddItem(Index) as IXMLShippingMarksType_cbc;
end;

function TXMLShippingMarksType_cbcList.Get_Item(const Index: Integer): IXMLShippingMarksType_cbc;
begin
  Result := List[Index] as IXMLShippingMarksType_cbc;
end;

{ TXMLDespatchLineType_cac }

procedure TXMLDespatchLineType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('UUID', TXMLUUIDType_cbc);
  RegisterChildNode('Note', TXMLNoteType_cbc);
  RegisterChildNode('LineStatusCode', TXMLLineStatusCodeType_cbc);
  RegisterChildNode('DeliveredQuantity', TXMLDeliveredQuantityType_cbc);
  RegisterChildNode('BackorderQuantity', TXMLBackorderQuantityType_cbc);
  RegisterChildNode('BackorderReason', TXMLBackorderReasonType_cbc);
  RegisterChildNode('OutstandingQuantity', TXMLOutstandingQuantityType_cbc);
  RegisterChildNode('OutstandingReason', TXMLOutstandingReasonType_cbc);
  RegisterChildNode('OversupplyQuantity', TXMLOversupplyQuantityType_cbc);
  RegisterChildNode('OrderLineReference', TXMLOrderLineReferenceType_cac);
  RegisterChildNode('DocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('Item', TXMLItemType_cac);
  RegisterChildNode('Shipment', TXMLShipmentType_cac);
  FNote := CreateCollection(TXMLNoteType_cbcList, IXMLNoteType_cbc, 'Note') as IXMLNoteType_cbcList;
  FBackorderReason := CreateCollection(TXMLBackorderReasonType_cbcList, IXMLBackorderReasonType_cbc, 'BackorderReason') as IXMLBackorderReasonType_cbcList;
  FOutstandingReason := CreateCollection(TXMLOutstandingReasonType_cbcList, IXMLOutstandingReasonType_cbc, 'OutstandingReason') as IXMLOutstandingReasonType_cbcList;
  FOrderLineReference := CreateCollection(TXMLOrderLineReferenceType_cacList, IXMLOrderLineReferenceType_cac, 'OrderLineReference') as IXMLOrderLineReferenceType_cacList;
  FDocumentReference := CreateCollection(TXMLDocumentReferenceType_cacList, IXMLDocumentReferenceType_cac, 'DocumentReference') as IXMLDocumentReferenceType_cacList;
  FShipment := CreateCollection(TXMLShipmentType_cacList, IXMLShipmentType_cac, 'Shipment') as IXMLShipmentType_cacList;
  inherited;
end;

function TXMLDespatchLineType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLDespatchLineType_cac.Get_UUID: IXMLUUIDType_cbc;
begin
  Result := ChildNodes['UUID'] as IXMLUUIDType_cbc;
end;

function TXMLDespatchLineType_cac.Get_Note: IXMLNoteType_cbcList;
begin
  Result := FNote;
end;

function TXMLDespatchLineType_cac.Get_LineStatusCode: IXMLLineStatusCodeType_cbc;
begin
  Result := ChildNodes['LineStatusCode'] as IXMLLineStatusCodeType_cbc;
end;

function TXMLDespatchLineType_cac.Get_DeliveredQuantity: IXMLDeliveredQuantityType_cbc;
begin
  Result := ChildNodes['DeliveredQuantity'] as IXMLDeliveredQuantityType_cbc;
end;

function TXMLDespatchLineType_cac.Get_BackorderQuantity: IXMLBackorderQuantityType_cbc;
begin
  Result := ChildNodes['BackorderQuantity'] as IXMLBackorderQuantityType_cbc;
end;

function TXMLDespatchLineType_cac.Get_BackorderReason: IXMLBackorderReasonType_cbcList;
begin
  Result := FBackorderReason;
end;

function TXMLDespatchLineType_cac.Get_OutstandingQuantity: IXMLOutstandingQuantityType_cbc;
begin
  Result := ChildNodes['OutstandingQuantity'] as IXMLOutstandingQuantityType_cbc;
end;

function TXMLDespatchLineType_cac.Get_OutstandingReason: IXMLOutstandingReasonType_cbcList;
begin
  Result := FOutstandingReason;
end;

function TXMLDespatchLineType_cac.Get_OversupplyQuantity: IXMLOversupplyQuantityType_cbc;
begin
  Result := ChildNodes['OversupplyQuantity'] as IXMLOversupplyQuantityType_cbc;
end;

function TXMLDespatchLineType_cac.Get_OrderLineReference: IXMLOrderLineReferenceType_cacList;
begin
  Result := FOrderLineReference;
end;

function TXMLDespatchLineType_cac.Get_DocumentReference: IXMLDocumentReferenceType_cacList;
begin
  Result := FDocumentReference;
end;

function TXMLDespatchLineType_cac.Get_Item: IXMLItemType_cac;
begin
  Result := ChildNodes['Item'] as IXMLItemType_cac;
end;

function TXMLDespatchLineType_cac.Get_Shipment: IXMLShipmentType_cacList;
begin
  Result := FShipment;
end;

{ TXMLDespatchLineType_cacList }

function TXMLDespatchLineType_cacList.Add: IXMLDespatchLineType_cac;
begin
  Result := AddItem(-1) as IXMLDespatchLineType_cac;
end;

function TXMLDespatchLineType_cacList.Insert(const Index: Integer): IXMLDespatchLineType_cac;
begin
  Result := AddItem(Index) as IXMLDespatchLineType_cac;
end;

function TXMLDespatchLineType_cacList.Get_Item(const Index: Integer): IXMLDespatchLineType_cac;
begin
  Result := List[Index] as IXMLDespatchLineType_cac;
end;

{ TXMLLineStatusCodeType_cbc }

{ TXMLDeliveredQuantityType_cbc }

{ TXMLBackorderQuantityType_cbc }

{ TXMLBackorderReasonType_cbc }

{ TXMLBackorderReasonType_cbcList }

function TXMLBackorderReasonType_cbcList.Add: IXMLBackorderReasonType_cbc;
begin
  Result := AddItem(-1) as IXMLBackorderReasonType_cbc;
end;

function TXMLBackorderReasonType_cbcList.Insert(const Index: Integer): IXMLBackorderReasonType_cbc;
begin
  Result := AddItem(Index) as IXMLBackorderReasonType_cbc;
end;

function TXMLBackorderReasonType_cbcList.Get_Item(const Index: Integer): IXMLBackorderReasonType_cbc;
begin
  Result := List[Index] as IXMLBackorderReasonType_cbc;
end;

{ TXMLOutstandingQuantityType_cbc }

{ TXMLOutstandingReasonType_cbc }

{ TXMLOutstandingReasonType_cbcList }

function TXMLOutstandingReasonType_cbcList.Add: IXMLOutstandingReasonType_cbc;
begin
  Result := AddItem(-1) as IXMLOutstandingReasonType_cbc;
end;

function TXMLOutstandingReasonType_cbcList.Insert(const Index: Integer): IXMLOutstandingReasonType_cbc;
begin
  Result := AddItem(Index) as IXMLOutstandingReasonType_cbc;
end;

function TXMLOutstandingReasonType_cbcList.Get_Item(const Index: Integer): IXMLOutstandingReasonType_cbc;
begin
  Result := List[Index] as IXMLOutstandingReasonType_cbc;
end;

{ TXMLOversupplyQuantityType_cbc }

{ TXMLOrderLineReferenceType_cac }

procedure TXMLOrderLineReferenceType_cac.AfterConstruction;
begin
  RegisterChildNode('LineID', TXMLLineIDType_cbc);
  RegisterChildNode('SalesOrderLineID', TXMLSalesOrderLineIDType_cbc);
  RegisterChildNode('UUID', TXMLUUIDType_cbc);
  RegisterChildNode('LineStatusCode', TXMLLineStatusCodeType_cbc);
  RegisterChildNode('OrderReference', TXMLOrderReferenceType_cac);
  inherited;
end;

function TXMLOrderLineReferenceType_cac.Get_LineID: IXMLLineIDType_cbc;
begin
  Result := ChildNodes['LineID'] as IXMLLineIDType_cbc;
end;

function TXMLOrderLineReferenceType_cac.Get_SalesOrderLineID: IXMLSalesOrderLineIDType_cbc;
begin
  Result := ChildNodes['SalesOrderLineID'] as IXMLSalesOrderLineIDType_cbc;
end;

function TXMLOrderLineReferenceType_cac.Get_UUID: IXMLUUIDType_cbc;
begin
  Result := ChildNodes['UUID'] as IXMLUUIDType_cbc;
end;

function TXMLOrderLineReferenceType_cac.Get_LineStatusCode: IXMLLineStatusCodeType_cbc;
begin
  Result := ChildNodes['LineStatusCode'] as IXMLLineStatusCodeType_cbc;
end;

function TXMLOrderLineReferenceType_cac.Get_OrderReference: IXMLOrderReferenceType_cac;
begin
  Result := ChildNodes['OrderReference'] as IXMLOrderReferenceType_cac;
end;

{ TXMLOrderLineReferenceType_cacList }

function TXMLOrderLineReferenceType_cacList.Add: IXMLOrderLineReferenceType_cac;
begin
  Result := AddItem(-1) as IXMLOrderLineReferenceType_cac;
end;

function TXMLOrderLineReferenceType_cacList.Insert(const Index: Integer): IXMLOrderLineReferenceType_cac;
begin
  Result := AddItem(Index) as IXMLOrderLineReferenceType_cac;
end;

function TXMLOrderLineReferenceType_cacList.Get_Item(const Index: Integer): IXMLOrderLineReferenceType_cac;
begin
  Result := List[Index] as IXMLOrderLineReferenceType_cac;
end;

{ TXMLLineIDType_cbc }

{ TXMLSalesOrderLineIDType_cbc }

{ TXMLItemType_cac }

procedure TXMLItemType_cac.AfterConstruction;
begin
  RegisterChildNode('Description', TXMLDescriptionType_cbc);
  RegisterChildNode('PackQuantity', TXMLPackQuantityType_cbc);
  RegisterChildNode('PackSizeNumeric', TXMLPackSizeNumericType_cbc);
  RegisterChildNode('CatalogueIndicator', TXMLCatalogueIndicatorType_cbc);
  RegisterChildNode('Name', TXMLNameType_cbc);
  RegisterChildNode('HazardousRiskIndicator', TXMLHazardousRiskIndicatorType_cbc);
  RegisterChildNode('AdditionalInformation', TXMLAdditionalInformationType_cbc);
  RegisterChildNode('Keyword', TXMLKeywordType_cbc);
  RegisterChildNode('BrandName', TXMLBrandNameType_cbc);
  RegisterChildNode('ModelName', TXMLModelNameType_cbc);
  RegisterChildNode('BuyersItemIdentification', TXMLItemIdentificationType_cac);
  RegisterChildNode('SellersItemIdentification', TXMLItemIdentificationType_cac);
  RegisterChildNode('ManufacturersItemIdentification', TXMLItemIdentificationType_cac);
  RegisterChildNode('StandardItemIdentification', TXMLItemIdentificationType_cac);
  RegisterChildNode('CatalogueItemIdentification', TXMLItemIdentificationType_cac);
  RegisterChildNode('AdditionalItemIdentification', TXMLItemIdentificationType_cac);
  RegisterChildNode('CatalogueDocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('ItemSpecificationDocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('OriginCountry', TXMLCountryType_cac);
  RegisterChildNode('CommodityClassification', TXMLCommodityClassificationType_cac);
  RegisterChildNode('TransactionConditions', TXMLTransactionConditionsType_cac);
  RegisterChildNode('HazardousItem', TXMLHazardousItemType_cac);
  RegisterChildNode('ClassifiedTaxCategory', TXMLTaxCategoryType_cac);
  RegisterChildNode('AdditionalItemProperty', TXMLItemPropertyType_cac);
  RegisterChildNode('ManufacturerParty', TXMLPartyType_cac);
  RegisterChildNode('InformationContentProviderParty', TXMLPartyType_cac);
  RegisterChildNode('OriginAddress', TXMLAddressType_cac);
  RegisterChildNode('ItemInstance', TXMLItemInstanceType_cac);
  RegisterChildNode('Certificate', TXMLCertificateType_cac);
  RegisterChildNode('Dimension', TXMLDimensionType_cac);
  FDescription := CreateCollection(TXMLDescriptionType_cbcList, IXMLDescriptionType_cbc, 'Description') as IXMLDescriptionType_cbcList;
  FAdditionalInformation := CreateCollection(TXMLAdditionalInformationType_cbcList, IXMLAdditionalInformationType_cbc, 'AdditionalInformation') as IXMLAdditionalInformationType_cbcList;
  FKeyword := CreateCollection(TXMLKeywordType_cbcList, IXMLKeywordType_cbc, 'Keyword') as IXMLKeywordType_cbcList;
  FBrandName := CreateCollection(TXMLBrandNameType_cbcList, IXMLBrandNameType_cbc, 'BrandName') as IXMLBrandNameType_cbcList;
  FModelName := CreateCollection(TXMLModelNameType_cbcList, IXMLModelNameType_cbc, 'ModelName') as IXMLModelNameType_cbcList;
  FManufacturersItemIdentification := CreateCollection(TXMLItemIdentificationType_cacList, IXMLItemIdentificationType_cac, 'ManufacturersItemIdentification') as IXMLItemIdentificationType_cacList;
  FAdditionalItemIdentification := CreateCollection(TXMLItemIdentificationType_cacList, IXMLItemIdentificationType_cac, 'AdditionalItemIdentification') as IXMLItemIdentificationType_cacList;
  FItemSpecificationDocumentReference := CreateCollection(TXMLDocumentReferenceType_cacList, IXMLDocumentReferenceType_cac, 'ItemSpecificationDocumentReference') as IXMLDocumentReferenceType_cacList;
  FCommodityClassification := CreateCollection(TXMLCommodityClassificationType_cacList, IXMLCommodityClassificationType_cac, 'CommodityClassification') as IXMLCommodityClassificationType_cacList;
  FTransactionConditions := CreateCollection(TXMLTransactionConditionsType_cacList, IXMLTransactionConditionsType_cac, 'TransactionConditions') as IXMLTransactionConditionsType_cacList;
  FHazardousItem := CreateCollection(TXMLHazardousItemType_cacList, IXMLHazardousItemType_cac, 'HazardousItem') as IXMLHazardousItemType_cacList;
  FClassifiedTaxCategory := CreateCollection(TXMLTaxCategoryType_cacList, IXMLTaxCategoryType_cac, 'ClassifiedTaxCategory') as IXMLTaxCategoryType_cacList;
  FAdditionalItemProperty := CreateCollection(TXMLItemPropertyType_cacList, IXMLItemPropertyType_cac, 'AdditionalItemProperty') as IXMLItemPropertyType_cacList;
  FManufacturerParty := CreateCollection(TXMLPartyType_cacList, IXMLPartyType_cac, 'ManufacturerParty') as IXMLPartyType_cacList;
  FOriginAddress := CreateCollection(TXMLAddressType_cacList, IXMLAddressType_cac, 'OriginAddress') as IXMLAddressType_cacList;
  FItemInstance := CreateCollection(TXMLItemInstanceType_cacList, IXMLItemInstanceType_cac, 'ItemInstance') as IXMLItemInstanceType_cacList;
  FCertificate := CreateCollection(TXMLCertificateType_cacList, IXMLCertificateType_cac, 'Certificate') as IXMLCertificateType_cacList;
  FDimension := CreateCollection(TXMLDimensionType_cacList, IXMLDimensionType_cac, 'Dimension') as IXMLDimensionType_cacList;
  inherited;
end;

function TXMLItemType_cac.Get_Description: IXMLDescriptionType_cbcList;
begin
  Result := FDescription;
end;

function TXMLItemType_cac.Get_PackQuantity: IXMLPackQuantityType_cbc;
begin
  Result := ChildNodes['PackQuantity'] as IXMLPackQuantityType_cbc;
end;

function TXMLItemType_cac.Get_PackSizeNumeric: IXMLPackSizeNumericType_cbc;
begin
  Result := ChildNodes['PackSizeNumeric'] as IXMLPackSizeNumericType_cbc;
end;

function TXMLItemType_cac.Get_CatalogueIndicator: IXMLCatalogueIndicatorType_cbc;
begin
  Result := ChildNodes['CatalogueIndicator'] as IXMLCatalogueIndicatorType_cbc;
end;

function TXMLItemType_cac.Get_Name: IXMLNameType_cbc;
begin
  Result := ChildNodes['Name'] as IXMLNameType_cbc;
end;

function TXMLItemType_cac.Get_HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc;
begin
  Result := ChildNodes['HazardousRiskIndicator'] as IXMLHazardousRiskIndicatorType_cbc;
end;

function TXMLItemType_cac.Get_AdditionalInformation: IXMLAdditionalInformationType_cbcList;
begin
  Result := FAdditionalInformation;
end;

function TXMLItemType_cac.Get_Keyword: IXMLKeywordType_cbcList;
begin
  Result := FKeyword;
end;

function TXMLItemType_cac.Get_BrandName: IXMLBrandNameType_cbcList;
begin
  Result := FBrandName;
end;

function TXMLItemType_cac.Get_ModelName: IXMLModelNameType_cbcList;
begin
  Result := FModelName;
end;

function TXMLItemType_cac.Get_BuyersItemIdentification: IXMLItemIdentificationType_cac;
begin
  Result := ChildNodes['BuyersItemIdentification'] as IXMLItemIdentificationType_cac;
end;

function TXMLItemType_cac.Get_SellersItemIdentification: IXMLItemIdentificationType_cac;
begin
  Result := ChildNodes['SellersItemIdentification'] as IXMLItemIdentificationType_cac;
end;

function TXMLItemType_cac.Get_ManufacturersItemIdentification: IXMLItemIdentificationType_cacList;
begin
  Result := FManufacturersItemIdentification;
end;

function TXMLItemType_cac.Get_StandardItemIdentification: IXMLItemIdentificationType_cac;
begin
  Result := ChildNodes['StandardItemIdentification'] as IXMLItemIdentificationType_cac;
end;

function TXMLItemType_cac.Get_CatalogueItemIdentification: IXMLItemIdentificationType_cac;
begin
  Result := ChildNodes['CatalogueItemIdentification'] as IXMLItemIdentificationType_cac;
end;

function TXMLItemType_cac.Get_AdditionalItemIdentification: IXMLItemIdentificationType_cacList;
begin
  Result := FAdditionalItemIdentification;
end;

function TXMLItemType_cac.Get_CatalogueDocumentReference: IXMLDocumentReferenceType_cac;
begin
  Result := ChildNodes['CatalogueDocumentReference'] as IXMLDocumentReferenceType_cac;
end;

function TXMLItemType_cac.Get_ItemSpecificationDocumentReference: IXMLDocumentReferenceType_cacList;
begin
  Result := FItemSpecificationDocumentReference;
end;

function TXMLItemType_cac.Get_OriginCountry: IXMLCountryType_cac;
begin
  Result := ChildNodes['OriginCountry'] as IXMLCountryType_cac;
end;

function TXMLItemType_cac.Get_CommodityClassification: IXMLCommodityClassificationType_cacList;
begin
  Result := FCommodityClassification;
end;

function TXMLItemType_cac.Get_TransactionConditions: IXMLTransactionConditionsType_cacList;
begin
  Result := FTransactionConditions;
end;

function TXMLItemType_cac.Get_HazardousItem: IXMLHazardousItemType_cacList;
begin
  Result := FHazardousItem;
end;

function TXMLItemType_cac.Get_ClassifiedTaxCategory: IXMLTaxCategoryType_cacList;
begin
  Result := FClassifiedTaxCategory;
end;

function TXMLItemType_cac.Get_AdditionalItemProperty: IXMLItemPropertyType_cacList;
begin
  Result := FAdditionalItemProperty;
end;

function TXMLItemType_cac.Get_ManufacturerParty: IXMLPartyType_cacList;
begin
  Result := FManufacturerParty;
end;

function TXMLItemType_cac.Get_InformationContentProviderParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['InformationContentProviderParty'] as IXMLPartyType_cac;
end;

function TXMLItemType_cac.Get_OriginAddress: IXMLAddressType_cacList;
begin
  Result := FOriginAddress;
end;

function TXMLItemType_cac.Get_ItemInstance: IXMLItemInstanceType_cacList;
begin
  Result := FItemInstance;
end;

function TXMLItemType_cac.Get_Certificate: IXMLCertificateType_cacList;
begin
  Result := FCertificate;
end;

function TXMLItemType_cac.Get_Dimension: IXMLDimensionType_cacList;
begin
  Result := FDimension;
end;

{ TXMLItemType_cacList }

function TXMLItemType_cacList.Add: IXMLItemType_cac;
begin
  Result := AddItem(-1) as IXMLItemType_cac;
end;

function TXMLItemType_cacList.Insert(const Index: Integer): IXMLItemType_cac;
begin
  Result := AddItem(Index) as IXMLItemType_cac;
end;

function TXMLItemType_cacList.Get_Item(const Index: Integer): IXMLItemType_cac;
begin
  Result := List[Index] as IXMLItemType_cac;
end;

{ TXMLPackQuantityType_cbc }

{ TXMLPackSizeNumericType_cbc }

{ TXMLCatalogueIndicatorType_cbc }

{ TXMLAdditionalInformationType_cbc }

{ TXMLAdditionalInformationType_cbcList }

function TXMLAdditionalInformationType_cbcList.Add: IXMLAdditionalInformationType_cbc;
begin
  Result := AddItem(-1) as IXMLAdditionalInformationType_cbc;
end;

function TXMLAdditionalInformationType_cbcList.Insert(const Index: Integer): IXMLAdditionalInformationType_cbc;
begin
  Result := AddItem(Index) as IXMLAdditionalInformationType_cbc;
end;

function TXMLAdditionalInformationType_cbcList.Get_Item(const Index: Integer): IXMLAdditionalInformationType_cbc;
begin
  Result := List[Index] as IXMLAdditionalInformationType_cbc;
end;

{ TXMLKeywordType_cbc }

{ TXMLKeywordType_cbcList }

function TXMLKeywordType_cbcList.Add: IXMLKeywordType_cbc;
begin
  Result := AddItem(-1) as IXMLKeywordType_cbc;
end;

function TXMLKeywordType_cbcList.Insert(const Index: Integer): IXMLKeywordType_cbc;
begin
  Result := AddItem(Index) as IXMLKeywordType_cbc;
end;

function TXMLKeywordType_cbcList.Get_Item(const Index: Integer): IXMLKeywordType_cbc;
begin
  Result := List[Index] as IXMLKeywordType_cbc;
end;

{ TXMLBrandNameType_cbc }

{ TXMLBrandNameType_cbcList }

function TXMLBrandNameType_cbcList.Add: IXMLBrandNameType_cbc;
begin
  Result := AddItem(-1) as IXMLBrandNameType_cbc;
end;

function TXMLBrandNameType_cbcList.Insert(const Index: Integer): IXMLBrandNameType_cbc;
begin
  Result := AddItem(Index) as IXMLBrandNameType_cbc;
end;

function TXMLBrandNameType_cbcList.Get_Item(const Index: Integer): IXMLBrandNameType_cbc;
begin
  Result := List[Index] as IXMLBrandNameType_cbc;
end;

{ TXMLModelNameType_cbc }

{ TXMLModelNameType_cbcList }

function TXMLModelNameType_cbcList.Add: IXMLModelNameType_cbc;
begin
  Result := AddItem(-1) as IXMLModelNameType_cbc;
end;

function TXMLModelNameType_cbcList.Insert(const Index: Integer): IXMLModelNameType_cbc;
begin
  Result := AddItem(Index) as IXMLModelNameType_cbc;
end;

function TXMLModelNameType_cbcList.Get_Item(const Index: Integer): IXMLModelNameType_cbc;
begin
  Result := List[Index] as IXMLModelNameType_cbc;
end;

{ TXMLItemIdentificationType_cac }

procedure TXMLItemIdentificationType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('ExtendedID', TXMLExtendedIDType_cbc);
  RegisterChildNode('BarcodeSymbologyID', TXMLBarcodeSymbologyIDType_cbc);
  RegisterChildNode('PhysicalAttribute', TXMLPhysicalAttributeType_cac);
  RegisterChildNode('MeasurementDimension', TXMLDimensionType_cac);
  RegisterChildNode('IssuerParty', TXMLPartyType_cac);
  FPhysicalAttribute := CreateCollection(TXMLPhysicalAttributeType_cacList, IXMLPhysicalAttributeType_cac, 'PhysicalAttribute') as IXMLPhysicalAttributeType_cacList;
  FMeasurementDimension := CreateCollection(TXMLDimensionType_cacList, IXMLDimensionType_cac, 'MeasurementDimension') as IXMLDimensionType_cacList;
  inherited;
end;

function TXMLItemIdentificationType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLItemIdentificationType_cac.Get_ExtendedID: IXMLExtendedIDType_cbc;
begin
  Result := ChildNodes['ExtendedID'] as IXMLExtendedIDType_cbc;
end;

function TXMLItemIdentificationType_cac.Get_BarcodeSymbologyID: IXMLBarcodeSymbologyIDType_cbc;
begin
  Result := ChildNodes['BarcodeSymbologyID'] as IXMLBarcodeSymbologyIDType_cbc;
end;

function TXMLItemIdentificationType_cac.Get_PhysicalAttribute: IXMLPhysicalAttributeType_cacList;
begin
  Result := FPhysicalAttribute;
end;

function TXMLItemIdentificationType_cac.Get_MeasurementDimension: IXMLDimensionType_cacList;
begin
  Result := FMeasurementDimension;
end;

function TXMLItemIdentificationType_cac.Get_IssuerParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['IssuerParty'] as IXMLPartyType_cac;
end;

{ TXMLItemIdentificationType_cacList }

function TXMLItemIdentificationType_cacList.Add: IXMLItemIdentificationType_cac;
begin
  Result := AddItem(-1) as IXMLItemIdentificationType_cac;
end;

function TXMLItemIdentificationType_cacList.Insert(const Index: Integer): IXMLItemIdentificationType_cac;
begin
  Result := AddItem(Index) as IXMLItemIdentificationType_cac;
end;

function TXMLItemIdentificationType_cacList.Get_Item(const Index: Integer): IXMLItemIdentificationType_cac;
begin
  Result := List[Index] as IXMLItemIdentificationType_cac;
end;

{ TXMLExtendedIDType_cbc }

{ TXMLBarcodeSymbologyIDType_cbc }

{ TXMLPhysicalAttributeType_cac }

procedure TXMLPhysicalAttributeType_cac.AfterConstruction;
begin
  RegisterChildNode('AttributeID', TXMLAttributeIDType_cbc);
  RegisterChildNode('PositionCode', TXMLPositionCodeType_cbc);
  RegisterChildNode('DescriptionCode', TXMLDescriptionCodeType_cbc);
  RegisterChildNode('Description', TXMLDescriptionType_cbc);
  FDescription := CreateCollection(TXMLDescriptionType_cbcList, IXMLDescriptionType_cbc, 'Description') as IXMLDescriptionType_cbcList;
  inherited;
end;

function TXMLPhysicalAttributeType_cac.Get_AttributeID: IXMLAttributeIDType_cbc;
begin
  Result := ChildNodes['AttributeID'] as IXMLAttributeIDType_cbc;
end;

function TXMLPhysicalAttributeType_cac.Get_PositionCode: IXMLPositionCodeType_cbc;
begin
  Result := ChildNodes['PositionCode'] as IXMLPositionCodeType_cbc;
end;

function TXMLPhysicalAttributeType_cac.Get_DescriptionCode: IXMLDescriptionCodeType_cbc;
begin
  Result := ChildNodes['DescriptionCode'] as IXMLDescriptionCodeType_cbc;
end;

function TXMLPhysicalAttributeType_cac.Get_Description: IXMLDescriptionType_cbcList;
begin
  Result := FDescription;
end;

{ TXMLPhysicalAttributeType_cacList }

function TXMLPhysicalAttributeType_cacList.Add: IXMLPhysicalAttributeType_cac;
begin
  Result := AddItem(-1) as IXMLPhysicalAttributeType_cac;
end;

function TXMLPhysicalAttributeType_cacList.Insert(const Index: Integer): IXMLPhysicalAttributeType_cac;
begin
  Result := AddItem(Index) as IXMLPhysicalAttributeType_cac;
end;

function TXMLPhysicalAttributeType_cacList.Get_Item(const Index: Integer): IXMLPhysicalAttributeType_cac;
begin
  Result := List[Index] as IXMLPhysicalAttributeType_cac;
end;

{ TXMLPositionCodeType_cbc }

{ TXMLCommodityClassificationType_cac }

procedure TXMLCommodityClassificationType_cac.AfterConstruction;
begin
  RegisterChildNode('NatureCode', TXMLNatureCodeType_cbc);
  RegisterChildNode('CargoTypeCode', TXMLCargoTypeCodeType_cbc);
  RegisterChildNode('CommodityCode', TXMLCommodityCodeType_cbc);
  RegisterChildNode('ItemClassificationCode', TXMLItemClassificationCodeType_cbc);
  inherited;
end;

function TXMLCommodityClassificationType_cac.Get_NatureCode: IXMLNatureCodeType_cbc;
begin
  Result := ChildNodes['NatureCode'] as IXMLNatureCodeType_cbc;
end;

function TXMLCommodityClassificationType_cac.Get_CargoTypeCode: IXMLCargoTypeCodeType_cbc;
begin
  Result := ChildNodes['CargoTypeCode'] as IXMLCargoTypeCodeType_cbc;
end;

function TXMLCommodityClassificationType_cac.Get_CommodityCode: IXMLCommodityCodeType_cbc;
begin
  Result := ChildNodes['CommodityCode'] as IXMLCommodityCodeType_cbc;
end;

function TXMLCommodityClassificationType_cac.Get_ItemClassificationCode: IXMLItemClassificationCodeType_cbc;
begin
  Result := ChildNodes['ItemClassificationCode'] as IXMLItemClassificationCodeType_cbc;
end;

{ TXMLCommodityClassificationType_cacList }

function TXMLCommodityClassificationType_cacList.Add: IXMLCommodityClassificationType_cac;
begin
  Result := AddItem(-1) as IXMLCommodityClassificationType_cac;
end;

function TXMLCommodityClassificationType_cacList.Insert(const Index: Integer): IXMLCommodityClassificationType_cac;
begin
  Result := AddItem(Index) as IXMLCommodityClassificationType_cac;
end;

function TXMLCommodityClassificationType_cacList.Get_Item(const Index: Integer): IXMLCommodityClassificationType_cac;
begin
  Result := List[Index] as IXMLCommodityClassificationType_cac;
end;

{ TXMLNatureCodeType_cbc }

{ TXMLCargoTypeCodeType_cbc }

{ TXMLCommodityCodeType_cbc }

{ TXMLItemClassificationCodeType_cbc }

{ TXMLTransactionConditionsType_cac }

procedure TXMLTransactionConditionsType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('ActionCode', TXMLActionCodeType_cbc);
  RegisterChildNode('Description', TXMLDescriptionType_cbc);
  RegisterChildNode('DocumentReference', TXMLDocumentReferenceType_cac);
  FDescription := CreateCollection(TXMLDescriptionType_cbcList, IXMLDescriptionType_cbc, 'Description') as IXMLDescriptionType_cbcList;
  FDocumentReference := CreateCollection(TXMLDocumentReferenceType_cacList, IXMLDocumentReferenceType_cac, 'DocumentReference') as IXMLDocumentReferenceType_cacList;
  inherited;
end;

function TXMLTransactionConditionsType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLTransactionConditionsType_cac.Get_ActionCode: IXMLActionCodeType_cbc;
begin
  Result := ChildNodes['ActionCode'] as IXMLActionCodeType_cbc;
end;

function TXMLTransactionConditionsType_cac.Get_Description: IXMLDescriptionType_cbcList;
begin
  Result := FDescription;
end;

function TXMLTransactionConditionsType_cac.Get_DocumentReference: IXMLDocumentReferenceType_cacList;
begin
  Result := FDocumentReference;
end;

{ TXMLTransactionConditionsType_cacList }

function TXMLTransactionConditionsType_cacList.Add: IXMLTransactionConditionsType_cac;
begin
  Result := AddItem(-1) as IXMLTransactionConditionsType_cac;
end;

function TXMLTransactionConditionsType_cacList.Insert(const Index: Integer): IXMLTransactionConditionsType_cac;
begin
  Result := AddItem(Index) as IXMLTransactionConditionsType_cac;
end;

function TXMLTransactionConditionsType_cacList.Get_Item(const Index: Integer): IXMLTransactionConditionsType_cac;
begin
  Result := List[Index] as IXMLTransactionConditionsType_cac;
end;

{ TXMLActionCodeType_cbc }

{ TXMLHazardousItemType_cac }

procedure TXMLHazardousItemType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('PlacardNotation', TXMLPlacardNotationType_cbc);
  RegisterChildNode('PlacardEndorsement', TXMLPlacardEndorsementType_cbc);
  RegisterChildNode('AdditionalInformation', TXMLAdditionalInformationType_cbc);
  RegisterChildNode('UNDGCode', TXMLUNDGCodeType_cbc);
  RegisterChildNode('EmergencyProceduresCode', TXMLEmergencyProceduresCodeType_cbc);
  RegisterChildNode('MedicalFirstAidGuideCode', TXMLMedicalFirstAidGuideCodeType_cbc);
  RegisterChildNode('TechnicalName', TXMLTechnicalNameType_cbc);
  RegisterChildNode('CategoryName', TXMLCategoryNameType_cbc);
  RegisterChildNode('HazardousCategoryCode', TXMLHazardousCategoryCodeType_cbc);
  RegisterChildNode('UpperOrangeHazardPlacardID', TXMLUpperOrangeHazardPlacardIDType_cbc);
  RegisterChildNode('LowerOrangeHazardPlacardID', TXMLLowerOrangeHazardPlacardIDType_cbc);
  RegisterChildNode('MarkingID', TXMLMarkingIDType_cbc);
  RegisterChildNode('HazardClassID', TXMLHazardClassIDType_cbc);
  RegisterChildNode('NetWeightMeasure', TXMLNetWeightMeasureType_cbc);
  RegisterChildNode('NetVolumeMeasure', TXMLNetVolumeMeasureType_cbc);
  RegisterChildNode('Quantity', TXMLQuantityType_cbc);
  RegisterChildNode('ContactParty', TXMLPartyType_cac);
  RegisterChildNode('SecondaryHazard', TXMLSecondaryHazardType_cac);
  RegisterChildNode('HazardousGoodsTransit', TXMLHazardousGoodsTransitType_cac);
  RegisterChildNode('EmergencyTemperature', TXMLTemperatureType_cac);
  RegisterChildNode('FlashpointTemperature', TXMLTemperatureType_cac);
  RegisterChildNode('AdditionalTemperature', TXMLTemperatureType_cac);
  FAdditionalInformation := CreateCollection(TXMLAdditionalInformationType_cbcList, IXMLAdditionalInformationType_cbc, 'AdditionalInformation') as IXMLAdditionalInformationType_cbcList;
  FSecondaryHazard := CreateCollection(TXMLSecondaryHazardType_cacList, IXMLSecondaryHazardType_cac, 'SecondaryHazard') as IXMLSecondaryHazardType_cacList;
  FHazardousGoodsTransit := CreateCollection(TXMLHazardousGoodsTransitType_cacList, IXMLHazardousGoodsTransitType_cac, 'HazardousGoodsTransit') as IXMLHazardousGoodsTransitType_cacList;
  FAdditionalTemperature := CreateCollection(TXMLTemperatureType_cacList, IXMLTemperatureType_cac, 'AdditionalTemperature') as IXMLTemperatureType_cacList;
  inherited;
end;

function TXMLHazardousItemType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLHazardousItemType_cac.Get_PlacardNotation: IXMLPlacardNotationType_cbc;
begin
  Result := ChildNodes['PlacardNotation'] as IXMLPlacardNotationType_cbc;
end;

function TXMLHazardousItemType_cac.Get_PlacardEndorsement: IXMLPlacardEndorsementType_cbc;
begin
  Result := ChildNodes['PlacardEndorsement'] as IXMLPlacardEndorsementType_cbc;
end;

function TXMLHazardousItemType_cac.Get_AdditionalInformation: IXMLAdditionalInformationType_cbcList;
begin
  Result := FAdditionalInformation;
end;

function TXMLHazardousItemType_cac.Get_UNDGCode: IXMLUNDGCodeType_cbc;
begin
  Result := ChildNodes['UNDGCode'] as IXMLUNDGCodeType_cbc;
end;

function TXMLHazardousItemType_cac.Get_EmergencyProceduresCode: IXMLEmergencyProceduresCodeType_cbc;
begin
  Result := ChildNodes['EmergencyProceduresCode'] as IXMLEmergencyProceduresCodeType_cbc;
end;

function TXMLHazardousItemType_cac.Get_MedicalFirstAidGuideCode: IXMLMedicalFirstAidGuideCodeType_cbc;
begin
  Result := ChildNodes['MedicalFirstAidGuideCode'] as IXMLMedicalFirstAidGuideCodeType_cbc;
end;

function TXMLHazardousItemType_cac.Get_TechnicalName: IXMLTechnicalNameType_cbc;
begin
  Result := ChildNodes['TechnicalName'] as IXMLTechnicalNameType_cbc;
end;

function TXMLHazardousItemType_cac.Get_CategoryName: IXMLCategoryNameType_cbc;
begin
  Result := ChildNodes['CategoryName'] as IXMLCategoryNameType_cbc;
end;

function TXMLHazardousItemType_cac.Get_HazardousCategoryCode: IXMLHazardousCategoryCodeType_cbc;
begin
  Result := ChildNodes['HazardousCategoryCode'] as IXMLHazardousCategoryCodeType_cbc;
end;

function TXMLHazardousItemType_cac.Get_UpperOrangeHazardPlacardID: IXMLUpperOrangeHazardPlacardIDType_cbc;
begin
  Result := ChildNodes['UpperOrangeHazardPlacardID'] as IXMLUpperOrangeHazardPlacardIDType_cbc;
end;

function TXMLHazardousItemType_cac.Get_LowerOrangeHazardPlacardID: IXMLLowerOrangeHazardPlacardIDType_cbc;
begin
  Result := ChildNodes['LowerOrangeHazardPlacardID'] as IXMLLowerOrangeHazardPlacardIDType_cbc;
end;

function TXMLHazardousItemType_cac.Get_MarkingID: IXMLMarkingIDType_cbc;
begin
  Result := ChildNodes['MarkingID'] as IXMLMarkingIDType_cbc;
end;

function TXMLHazardousItemType_cac.Get_HazardClassID: IXMLHazardClassIDType_cbc;
begin
  Result := ChildNodes['HazardClassID'] as IXMLHazardClassIDType_cbc;
end;

function TXMLHazardousItemType_cac.Get_NetWeightMeasure: IXMLNetWeightMeasureType_cbc;
begin
  Result := ChildNodes['NetWeightMeasure'] as IXMLNetWeightMeasureType_cbc;
end;

function TXMLHazardousItemType_cac.Get_NetVolumeMeasure: IXMLNetVolumeMeasureType_cbc;
begin
  Result := ChildNodes['NetVolumeMeasure'] as IXMLNetVolumeMeasureType_cbc;
end;

function TXMLHazardousItemType_cac.Get_Quantity: IXMLQuantityType_cbc;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantityType_cbc;
end;

function TXMLHazardousItemType_cac.Get_ContactParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['ContactParty'] as IXMLPartyType_cac;
end;

function TXMLHazardousItemType_cac.Get_SecondaryHazard: IXMLSecondaryHazardType_cacList;
begin
  Result := FSecondaryHazard;
end;

function TXMLHazardousItemType_cac.Get_HazardousGoodsTransit: IXMLHazardousGoodsTransitType_cacList;
begin
  Result := FHazardousGoodsTransit;
end;

function TXMLHazardousItemType_cac.Get_EmergencyTemperature: IXMLTemperatureType_cac;
begin
  Result := ChildNodes['EmergencyTemperature'] as IXMLTemperatureType_cac;
end;

function TXMLHazardousItemType_cac.Get_FlashpointTemperature: IXMLTemperatureType_cac;
begin
  Result := ChildNodes['FlashpointTemperature'] as IXMLTemperatureType_cac;
end;

function TXMLHazardousItemType_cac.Get_AdditionalTemperature: IXMLTemperatureType_cacList;
begin
  Result := FAdditionalTemperature;
end;

{ TXMLHazardousItemType_cacList }

function TXMLHazardousItemType_cacList.Add: IXMLHazardousItemType_cac;
begin
  Result := AddItem(-1) as IXMLHazardousItemType_cac;
end;

function TXMLHazardousItemType_cacList.Insert(const Index: Integer): IXMLHazardousItemType_cac;
begin
  Result := AddItem(Index) as IXMLHazardousItemType_cac;
end;

function TXMLHazardousItemType_cacList.Get_Item(const Index: Integer): IXMLHazardousItemType_cac;
begin
  Result := List[Index] as IXMLHazardousItemType_cac;
end;

{ TXMLPlacardNotationType_cbc }

{ TXMLPlacardEndorsementType_cbc }

{ TXMLUNDGCodeType_cbc }

{ TXMLEmergencyProceduresCodeType_cbc }

{ TXMLMedicalFirstAidGuideCodeType_cbc }

{ TXMLTechnicalNameType_cbc }

{ TXMLCategoryNameType_cbc }

{ TXMLHazardousCategoryCodeType_cbc }

{ TXMLUpperOrangeHazardPlacardIDType_cbc }

{ TXMLLowerOrangeHazardPlacardIDType_cbc }

{ TXMLMarkingIDType_cbc }

{ TXMLHazardClassIDType_cbc }

{ TXMLSecondaryHazardType_cac }

procedure TXMLSecondaryHazardType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('PlacardNotation', TXMLPlacardNotationType_cbc);
  RegisterChildNode('PlacardEndorsement', TXMLPlacardEndorsementType_cbc);
  RegisterChildNode('EmergencyProceduresCode', TXMLEmergencyProceduresCodeType_cbc);
  RegisterChildNode('Extension', TXMLExtensionType_cbc);
  FExtension := CreateCollection(TXMLExtensionType_cbcList, IXMLExtensionType_cbc, 'Extension') as IXMLExtensionType_cbcList;
  inherited;
end;

function TXMLSecondaryHazardType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLSecondaryHazardType_cac.Get_PlacardNotation: IXMLPlacardNotationType_cbc;
begin
  Result := ChildNodes['PlacardNotation'] as IXMLPlacardNotationType_cbc;
end;

function TXMLSecondaryHazardType_cac.Get_PlacardEndorsement: IXMLPlacardEndorsementType_cbc;
begin
  Result := ChildNodes['PlacardEndorsement'] as IXMLPlacardEndorsementType_cbc;
end;

function TXMLSecondaryHazardType_cac.Get_EmergencyProceduresCode: IXMLEmergencyProceduresCodeType_cbc;
begin
  Result := ChildNodes['EmergencyProceduresCode'] as IXMLEmergencyProceduresCodeType_cbc;
end;

function TXMLSecondaryHazardType_cac.Get_Extension: IXMLExtensionType_cbcList;
begin
  Result := FExtension;
end;

{ TXMLSecondaryHazardType_cacList }

function TXMLSecondaryHazardType_cacList.Add: IXMLSecondaryHazardType_cac;
begin
  Result := AddItem(-1) as IXMLSecondaryHazardType_cac;
end;

function TXMLSecondaryHazardType_cacList.Insert(const Index: Integer): IXMLSecondaryHazardType_cac;
begin
  Result := AddItem(Index) as IXMLSecondaryHazardType_cac;
end;

function TXMLSecondaryHazardType_cacList.Get_Item(const Index: Integer): IXMLSecondaryHazardType_cac;
begin
  Result := List[Index] as IXMLSecondaryHazardType_cac;
end;

{ TXMLExtensionType_cbc }

{ TXMLExtensionType_cbcList }

function TXMLExtensionType_cbcList.Add: IXMLExtensionType_cbc;
begin
  Result := AddItem(-1) as IXMLExtensionType_cbc;
end;

function TXMLExtensionType_cbcList.Insert(const Index: Integer): IXMLExtensionType_cbc;
begin
  Result := AddItem(Index) as IXMLExtensionType_cbc;
end;

function TXMLExtensionType_cbcList.Get_Item(const Index: Integer): IXMLExtensionType_cbc;
begin
  Result := List[Index] as IXMLExtensionType_cbc;
end;

{ TXMLItemPropertyType_cac }

procedure TXMLItemPropertyType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('Name', TXMLNameType_cbc);
  RegisterChildNode('NameCode', TXMLNameCodeType_cbc);
  RegisterChildNode('TestMethod', TXMLTestMethodType_cbc);
  RegisterChildNode('Value', TXMLValueType_cbc);
  RegisterChildNode('ValueQuantity', TXMLValueQuantityType_cbc);
  RegisterChildNode('ValueQualifier', TXMLValueQualifierType_cbc);
  RegisterChildNode('ImportanceCode', TXMLImportanceCodeType_cbc);
  RegisterChildNode('ListValue', TXMLListValueType_cbc);
  RegisterChildNode('UsabilityPeriod', TXMLPeriodType_cac);
  RegisterChildNode('ItemPropertyGroup', TXMLItemPropertyGroupType_cac);
  RegisterChildNode('RangeDimension', TXMLDimensionType_cac);
  RegisterChildNode('ItemPropertyRange', TXMLItemPropertyRangeType_cac);
  FValueQualifier := CreateCollection(TXMLValueQualifierType_cbcList, IXMLValueQualifierType_cbc, 'ValueQualifier') as IXMLValueQualifierType_cbcList;
  FListValue := CreateCollection(TXMLListValueType_cbcList, IXMLListValueType_cbc, 'ListValue') as IXMLListValueType_cbcList;
  FItemPropertyGroup := CreateCollection(TXMLItemPropertyGroupType_cacList, IXMLItemPropertyGroupType_cac, 'ItemPropertyGroup') as IXMLItemPropertyGroupType_cacList;
  inherited;
end;

function TXMLItemPropertyType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLItemPropertyType_cac.Get_Name: IXMLNameType_cbc;
begin
  Result := ChildNodes['Name'] as IXMLNameType_cbc;
end;

function TXMLItemPropertyType_cac.Get_NameCode: IXMLNameCodeType_cbc;
begin
  Result := ChildNodes['NameCode'] as IXMLNameCodeType_cbc;
end;

function TXMLItemPropertyType_cac.Get_TestMethod: IXMLTestMethodType_cbc;
begin
  Result := ChildNodes['TestMethod'] as IXMLTestMethodType_cbc;
end;

function TXMLItemPropertyType_cac.Get_Value: IXMLValueType_cbc;
begin
  Result := ChildNodes['Value'] as IXMLValueType_cbc;
end;

function TXMLItemPropertyType_cac.Get_ValueQuantity: IXMLValueQuantityType_cbc;
begin
  Result := ChildNodes['ValueQuantity'] as IXMLValueQuantityType_cbc;
end;

function TXMLItemPropertyType_cac.Get_ValueQualifier: IXMLValueQualifierType_cbcList;
begin
  Result := FValueQualifier;
end;

function TXMLItemPropertyType_cac.Get_ImportanceCode: IXMLImportanceCodeType_cbc;
begin
  Result := ChildNodes['ImportanceCode'] as IXMLImportanceCodeType_cbc;
end;

function TXMLItemPropertyType_cac.Get_ListValue: IXMLListValueType_cbcList;
begin
  Result := FListValue;
end;

function TXMLItemPropertyType_cac.Get_UsabilityPeriod: IXMLPeriodType_cac;
begin
  Result := ChildNodes['UsabilityPeriod'] as IXMLPeriodType_cac;
end;

function TXMLItemPropertyType_cac.Get_ItemPropertyGroup: IXMLItemPropertyGroupType_cacList;
begin
  Result := FItemPropertyGroup;
end;

function TXMLItemPropertyType_cac.Get_RangeDimension: IXMLDimensionType_cac;
begin
  Result := ChildNodes['RangeDimension'] as IXMLDimensionType_cac;
end;

function TXMLItemPropertyType_cac.Get_ItemPropertyRange: IXMLItemPropertyRangeType_cac;
begin
  Result := ChildNodes['ItemPropertyRange'] as IXMLItemPropertyRangeType_cac;
end;

{ TXMLItemPropertyType_cacList }

function TXMLItemPropertyType_cacList.Add: IXMLItemPropertyType_cac;
begin
  Result := AddItem(-1) as IXMLItemPropertyType_cac;
end;

function TXMLItemPropertyType_cacList.Insert(const Index: Integer): IXMLItemPropertyType_cac;
begin
  Result := AddItem(Index) as IXMLItemPropertyType_cac;
end;

function TXMLItemPropertyType_cacList.Get_Item(const Index: Integer): IXMLItemPropertyType_cac;
begin
  Result := List[Index] as IXMLItemPropertyType_cac;
end;

{ TXMLNameCodeType_cbc }

{ TXMLTestMethodType_cbc }

{ TXMLValueQuantityType_cbc }

{ TXMLValueQualifierType_cbc }

{ TXMLValueQualifierType_cbcList }

function TXMLValueQualifierType_cbcList.Add: IXMLValueQualifierType_cbc;
begin
  Result := AddItem(-1) as IXMLValueQualifierType_cbc;
end;

function TXMLValueQualifierType_cbcList.Insert(const Index: Integer): IXMLValueQualifierType_cbc;
begin
  Result := AddItem(Index) as IXMLValueQualifierType_cbc;
end;

function TXMLValueQualifierType_cbcList.Get_Item(const Index: Integer): IXMLValueQualifierType_cbc;
begin
  Result := List[Index] as IXMLValueQualifierType_cbc;
end;

{ TXMLImportanceCodeType_cbc }

{ TXMLListValueType_cbc }

{ TXMLListValueType_cbcList }

function TXMLListValueType_cbcList.Add: IXMLListValueType_cbc;
begin
  Result := AddItem(-1) as IXMLListValueType_cbc;
end;

function TXMLListValueType_cbcList.Insert(const Index: Integer): IXMLListValueType_cbc;
begin
  Result := AddItem(Index) as IXMLListValueType_cbc;
end;

function TXMLListValueType_cbcList.Get_Item(const Index: Integer): IXMLListValueType_cbc;
begin
  Result := List[Index] as IXMLListValueType_cbc;
end;

{ TXMLItemPropertyGroupType_cac }

procedure TXMLItemPropertyGroupType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('Name', TXMLNameType_cbc);
  RegisterChildNode('ImportanceCode', TXMLImportanceCodeType_cbc);
  inherited;
end;

function TXMLItemPropertyGroupType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLItemPropertyGroupType_cac.Get_Name: IXMLNameType_cbc;
begin
  Result := ChildNodes['Name'] as IXMLNameType_cbc;
end;

function TXMLItemPropertyGroupType_cac.Get_ImportanceCode: IXMLImportanceCodeType_cbc;
begin
  Result := ChildNodes['ImportanceCode'] as IXMLImportanceCodeType_cbc;
end;

{ TXMLItemPropertyGroupType_cacList }

function TXMLItemPropertyGroupType_cacList.Add: IXMLItemPropertyGroupType_cac;
begin
  Result := AddItem(-1) as IXMLItemPropertyGroupType_cac;
end;

function TXMLItemPropertyGroupType_cacList.Insert(const Index: Integer): IXMLItemPropertyGroupType_cac;
begin
  Result := AddItem(Index) as IXMLItemPropertyGroupType_cac;
end;

function TXMLItemPropertyGroupType_cacList.Get_Item(const Index: Integer): IXMLItemPropertyGroupType_cac;
begin
  Result := List[Index] as IXMLItemPropertyGroupType_cac;
end;

{ TXMLItemPropertyRangeType_cac }

procedure TXMLItemPropertyRangeType_cac.AfterConstruction;
begin
  RegisterChildNode('MinimumValue', TXMLMinimumValueType_cbc);
  RegisterChildNode('MaximumValue', TXMLMaximumValueType_cbc);
  inherited;
end;

function TXMLItemPropertyRangeType_cac.Get_MinimumValue: IXMLMinimumValueType_cbc;
begin
  Result := ChildNodes['MinimumValue'] as IXMLMinimumValueType_cbc;
end;

function TXMLItemPropertyRangeType_cac.Get_MaximumValue: IXMLMaximumValueType_cbc;
begin
  Result := ChildNodes['MaximumValue'] as IXMLMaximumValueType_cbc;
end;

{ TXMLMinimumValueType_cbc }

{ TXMLMaximumValueType_cbc }

{ TXMLItemInstanceType_cac }

procedure TXMLItemInstanceType_cac.AfterConstruction;
begin
  RegisterChildNode('ProductTraceID', TXMLProductTraceIDType_cbc);
  RegisterChildNode('ManufactureDate', TXMLManufactureDateType_cbc);
  RegisterChildNode('ManufactureTime', TXMLManufactureTimeType_cbc);
  RegisterChildNode('BestBeforeDate', TXMLBestBeforeDateType_cbc);
  RegisterChildNode('RegistrationID', TXMLRegistrationIDType_cbc);
  RegisterChildNode('SerialID', TXMLSerialIDType_cbc);
  RegisterChildNode('AdditionalItemProperty', TXMLItemPropertyType_cac);
  RegisterChildNode('LotIdentification', TXMLLotIdentificationType_cac);
  FAdditionalItemProperty := CreateCollection(TXMLItemPropertyType_cacList, IXMLItemPropertyType_cac, 'AdditionalItemProperty') as IXMLItemPropertyType_cacList;
  inherited;
end;

function TXMLItemInstanceType_cac.Get_ProductTraceID: IXMLProductTraceIDType_cbc;
begin
  Result := ChildNodes['ProductTraceID'] as IXMLProductTraceIDType_cbc;
end;

function TXMLItemInstanceType_cac.Get_ManufactureDate: IXMLManufactureDateType_cbc;
begin
  Result := ChildNodes['ManufactureDate'] as IXMLManufactureDateType_cbc;
end;

function TXMLItemInstanceType_cac.Get_ManufactureTime: IXMLManufactureTimeType_cbc;
begin
  Result := ChildNodes['ManufactureTime'] as IXMLManufactureTimeType_cbc;
end;

function TXMLItemInstanceType_cac.Get_BestBeforeDate: IXMLBestBeforeDateType_cbc;
begin
  Result := ChildNodes['BestBeforeDate'] as IXMLBestBeforeDateType_cbc;
end;

function TXMLItemInstanceType_cac.Get_RegistrationID: IXMLRegistrationIDType_cbc;
begin
  Result := ChildNodes['RegistrationID'] as IXMLRegistrationIDType_cbc;
end;

function TXMLItemInstanceType_cac.Get_SerialID: IXMLSerialIDType_cbc;
begin
  Result := ChildNodes['SerialID'] as IXMLSerialIDType_cbc;
end;

function TXMLItemInstanceType_cac.Get_AdditionalItemProperty: IXMLItemPropertyType_cacList;
begin
  Result := FAdditionalItemProperty;
end;

function TXMLItemInstanceType_cac.Get_LotIdentification: IXMLLotIdentificationType_cac;
begin
  Result := ChildNodes['LotIdentification'] as IXMLLotIdentificationType_cac;
end;

{ TXMLItemInstanceType_cacList }

function TXMLItemInstanceType_cacList.Add: IXMLItemInstanceType_cac;
begin
  Result := AddItem(-1) as IXMLItemInstanceType_cac;
end;

function TXMLItemInstanceType_cacList.Insert(const Index: Integer): IXMLItemInstanceType_cac;
begin
  Result := AddItem(Index) as IXMLItemInstanceType_cac;
end;

function TXMLItemInstanceType_cacList.Get_Item(const Index: Integer): IXMLItemInstanceType_cac;
begin
  Result := List[Index] as IXMLItemInstanceType_cac;
end;

{ TXMLProductTraceIDType_cbc }

{ TXMLManufactureDateType_cbc }

{ TXMLManufactureTimeType_cbc }

{ TXMLBestBeforeDateType_cbc }

{ TXMLRegistrationIDType_cbc }

{ TXMLSerialIDType_cbc }

{ TXMLLotIdentificationType_cac }

procedure TXMLLotIdentificationType_cac.AfterConstruction;
begin
  RegisterChildNode('LotNumberID', TXMLLotNumberIDType_cbc);
  RegisterChildNode('ExpiryDate', TXMLExpiryDateType_cbc);
  RegisterChildNode('AdditionalItemProperty', TXMLItemPropertyType_cac);
  FAdditionalItemProperty := CreateCollection(TXMLItemPropertyType_cacList, IXMLItemPropertyType_cac, 'AdditionalItemProperty') as IXMLItemPropertyType_cacList;
  inherited;
end;

function TXMLLotIdentificationType_cac.Get_LotNumberID: IXMLLotNumberIDType_cbc;
begin
  Result := ChildNodes['LotNumberID'] as IXMLLotNumberIDType_cbc;
end;

function TXMLLotIdentificationType_cac.Get_ExpiryDate: IXMLExpiryDateType_cbc;
begin
  Result := ChildNodes['ExpiryDate'] as IXMLExpiryDateType_cbc;
end;

function TXMLLotIdentificationType_cac.Get_AdditionalItemProperty: IXMLItemPropertyType_cacList;
begin
  Result := FAdditionalItemProperty;
end;

{ TXMLLotNumberIDType_cbc }

{ TXMLCertificateType_cac }

procedure TXMLCertificateType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('CertificateTypeCode', TXMLCertificateTypeCodeType_cbc);
  RegisterChildNode('CertificateType', TXMLCertificateTypeType_cbc);
  RegisterChildNode('Remarks', TXMLRemarksType_cbc);
  RegisterChildNode('IssuerParty', TXMLPartyType_cac);
  RegisterChildNode('DocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('Signature', TXMLSignatureType_cac);
  FRemarks := CreateCollection(TXMLRemarksType_cbcList, IXMLRemarksType_cbc, 'Remarks') as IXMLRemarksType_cbcList;
  FDocumentReference := CreateCollection(TXMLDocumentReferenceType_cacList, IXMLDocumentReferenceType_cac, 'DocumentReference') as IXMLDocumentReferenceType_cacList;
  FSignature := CreateCollection(TXMLSignatureType_cacList, IXMLSignatureType_cac, 'Signature') as IXMLSignatureType_cacList;
  inherited;
end;

function TXMLCertificateType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLCertificateType_cac.Get_CertificateTypeCode: IXMLCertificateTypeCodeType_cbc;
begin
  Result := ChildNodes['CertificateTypeCode'] as IXMLCertificateTypeCodeType_cbc;
end;

function TXMLCertificateType_cac.Get_CertificateType: IXMLCertificateTypeType_cbc;
begin
  Result := ChildNodes['CertificateType'] as IXMLCertificateTypeType_cbc;
end;

function TXMLCertificateType_cac.Get_Remarks: IXMLRemarksType_cbcList;
begin
  Result := FRemarks;
end;

function TXMLCertificateType_cac.Get_IssuerParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['IssuerParty'] as IXMLPartyType_cac;
end;

function TXMLCertificateType_cac.Get_DocumentReference: IXMLDocumentReferenceType_cacList;
begin
  Result := FDocumentReference;
end;

function TXMLCertificateType_cac.Get_Signature: IXMLSignatureType_cacList;
begin
  Result := FSignature;
end;

{ TXMLCertificateType_cacList }

function TXMLCertificateType_cacList.Add: IXMLCertificateType_cac;
begin
  Result := AddItem(-1) as IXMLCertificateType_cac;
end;

function TXMLCertificateType_cacList.Insert(const Index: Integer): IXMLCertificateType_cac;
begin
  Result := AddItem(Index) as IXMLCertificateType_cac;
end;

function TXMLCertificateType_cacList.Get_Item(const Index: Integer): IXMLCertificateType_cac;
begin
  Result := List[Index] as IXMLCertificateType_cac;
end;

{ TXMLCertificateTypeCodeType_cbc }

{ TXMLCertificateTypeType_cbc }

{ TXMLPackageType_cac }

procedure TXMLPackageType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('Quantity', TXMLQuantityType_cbc);
  RegisterChildNode('ReturnableMaterialIndicator', TXMLReturnableMaterialIndicatorType_cbc);
  RegisterChildNode('PackageLevelCode', TXMLPackageLevelCodeType_cbc);
  RegisterChildNode('PackagingTypeCode', TXMLPackagingTypeCodeType_cbc);
  RegisterChildNode('PackingMaterial', TXMLPackingMaterialType_cbc);
  RegisterChildNode('TraceID', TXMLTraceIDType_cbc);
  RegisterChildNode('ContainedPackage', TXMLPackageType_cac);
  RegisterChildNode('ContainingTransportEquipment', TXMLTransportEquipmentType_cac);
  RegisterChildNode('GoodsItem', TXMLGoodsItemType_cac);
  RegisterChildNode('MeasurementDimension', TXMLDimensionType_cac);
  RegisterChildNode('DeliveryUnit', TXMLDeliveryUnitType_cac);
  RegisterChildNode('Delivery', TXMLDeliveryType_cac);
  RegisterChildNode('Pickup', TXMLPickupType_cac);
  RegisterChildNode('Despatch', TXMLDespatchType_cac);
  FPackingMaterial := CreateCollection(TXMLPackingMaterialType_cbcList, IXMLPackingMaterialType_cbc, 'PackingMaterial') as IXMLPackingMaterialType_cbcList;
  FContainedPackage := CreateCollection(TXMLPackageType_cacList, IXMLPackageType_cac, 'ContainedPackage') as IXMLPackageType_cacList;
  FGoodsItem := CreateCollection(TXMLGoodsItemType_cacList, IXMLGoodsItemType_cac, 'GoodsItem') as IXMLGoodsItemType_cacList;
  FMeasurementDimension := CreateCollection(TXMLDimensionType_cacList, IXMLDimensionType_cac, 'MeasurementDimension') as IXMLDimensionType_cacList;
  FDeliveryUnit := CreateCollection(TXMLDeliveryUnitType_cacList, IXMLDeliveryUnitType_cac, 'DeliveryUnit') as IXMLDeliveryUnitType_cacList;
  inherited;
end;

function TXMLPackageType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLPackageType_cac.Get_Quantity: IXMLQuantityType_cbc;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantityType_cbc;
end;

function TXMLPackageType_cac.Get_ReturnableMaterialIndicator: IXMLReturnableMaterialIndicatorType_cbc;
begin
  Result := ChildNodes['ReturnableMaterialIndicator'] as IXMLReturnableMaterialIndicatorType_cbc;
end;

function TXMLPackageType_cac.Get_PackageLevelCode: IXMLPackageLevelCodeType_cbc;
begin
  Result := ChildNodes['PackageLevelCode'] as IXMLPackageLevelCodeType_cbc;
end;

function TXMLPackageType_cac.Get_PackagingTypeCode: IXMLPackagingTypeCodeType_cbc;
begin
  Result := ChildNodes['PackagingTypeCode'] as IXMLPackagingTypeCodeType_cbc;
end;

function TXMLPackageType_cac.Get_PackingMaterial: IXMLPackingMaterialType_cbcList;
begin
  Result := FPackingMaterial;
end;

function TXMLPackageType_cac.Get_TraceID: IXMLTraceIDType_cbc;
begin
  Result := ChildNodes['TraceID'] as IXMLTraceIDType_cbc;
end;

function TXMLPackageType_cac.Get_ContainedPackage: IXMLPackageType_cacList;
begin
  Result := FContainedPackage;
end;

function TXMLPackageType_cac.Get_ContainingTransportEquipment: IXMLTransportEquipmentType_cac;
begin
  Result := ChildNodes['ContainingTransportEquipment'] as IXMLTransportEquipmentType_cac;
end;

function TXMLPackageType_cac.Get_GoodsItem: IXMLGoodsItemType_cacList;
begin
  Result := FGoodsItem;
end;

function TXMLPackageType_cac.Get_MeasurementDimension: IXMLDimensionType_cacList;
begin
  Result := FMeasurementDimension;
end;

function TXMLPackageType_cac.Get_DeliveryUnit: IXMLDeliveryUnitType_cacList;
begin
  Result := FDeliveryUnit;
end;

function TXMLPackageType_cac.Get_Delivery: IXMLDeliveryType_cac;
begin
  Result := ChildNodes['Delivery'] as IXMLDeliveryType_cac;
end;

function TXMLPackageType_cac.Get_Pickup: IXMLPickupType_cac;
begin
  Result := ChildNodes['Pickup'] as IXMLPickupType_cac;
end;

function TXMLPackageType_cac.Get_Despatch: IXMLDespatchType_cac;
begin
  Result := ChildNodes['Despatch'] as IXMLDespatchType_cac;
end;

{ TXMLPackageType_cacList }

function TXMLPackageType_cacList.Add: IXMLPackageType_cac;
begin
  Result := AddItem(-1) as IXMLPackageType_cac;
end;

function TXMLPackageType_cacList.Insert(const Index: Integer): IXMLPackageType_cac;
begin
  Result := AddItem(Index) as IXMLPackageType_cac;
end;

function TXMLPackageType_cacList.Get_Item(const Index: Integer): IXMLPackageType_cac;
begin
  Result := List[Index] as IXMLPackageType_cac;
end;

{ TXMLReturnableMaterialIndicatorType_cbc }

{ TXMLPackageLevelCodeType_cbc }

{ TXMLPackagingTypeCodeType_cbc }

{ TXMLPackingMaterialType_cbc }

{ TXMLPackingMaterialType_cbcList }

function TXMLPackingMaterialType_cbcList.Add: IXMLPackingMaterialType_cbc;
begin
  Result := AddItem(-1) as IXMLPackingMaterialType_cbc;
end;

function TXMLPackingMaterialType_cbcList.Insert(const Index: Integer): IXMLPackingMaterialType_cbc;
begin
  Result := AddItem(Index) as IXMLPackingMaterialType_cbc;
end;

function TXMLPackingMaterialType_cbcList.Get_Item(const Index: Integer): IXMLPackingMaterialType_cbc;
begin
  Result := List[Index] as IXMLPackingMaterialType_cbc;
end;

{ TXMLGoodsItemType_cac }

procedure TXMLGoodsItemType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('SequenceNumberID', TXMLSequenceNumberIDType_cbc);
  RegisterChildNode('Description', TXMLDescriptionType_cbc);
  RegisterChildNode('HazardousRiskIndicator', TXMLHazardousRiskIndicatorType_cbc);
  RegisterChildNode('DeclaredCustomsValueAmount', TXMLDeclaredCustomsValueAmountType_cbc);
  RegisterChildNode('DeclaredForCarriageValueAmount', TXMLDeclaredForCarriageValueAmountType_cbc);
  RegisterChildNode('DeclaredStatisticsValueAmount', TXMLDeclaredStatisticsValueAmountType_cbc);
  RegisterChildNode('FreeOnBoardValueAmount', TXMLFreeOnBoardValueAmountType_cbc);
  RegisterChildNode('InsuranceValueAmount', TXMLInsuranceValueAmountType_cbc);
  RegisterChildNode('ValueAmount', TXMLValueAmountType_cbc);
  RegisterChildNode('GrossWeightMeasure', TXMLGrossWeightMeasureType_cbc);
  RegisterChildNode('NetWeightMeasure', TXMLNetWeightMeasureType_cbc);
  RegisterChildNode('NetNetWeightMeasure', TXMLNetNetWeightMeasureType_cbc);
  RegisterChildNode('ChargeableWeightMeasure', TXMLChargeableWeightMeasureType_cbc);
  RegisterChildNode('GrossVolumeMeasure', TXMLGrossVolumeMeasureType_cbc);
  RegisterChildNode('NetVolumeMeasure', TXMLNetVolumeMeasureType_cbc);
  RegisterChildNode('Quantity', TXMLQuantityType_cbc);
  RegisterChildNode('PreferenceCriterionCode', TXMLPreferenceCriterionCodeType_cbc);
  RegisterChildNode('RequiredCustomsID', TXMLRequiredCustomsIDType_cbc);
  RegisterChildNode('CustomsStatusCode', TXMLCustomsStatusCodeType_cbc);
  RegisterChildNode('CustomsTariffQuantity', TXMLCustomsTariffQuantityType_cbc);
  RegisterChildNode('CustomsImportClassifiedIndicator', TXMLCustomsImportClassifiedIndicatorType_cbc);
  RegisterChildNode('ChargeableQuantity', TXMLChargeableQuantityType_cbc);
  RegisterChildNode('ReturnableQuantity', TXMLReturnableQuantityType_cbc);
  RegisterChildNode('TraceID', TXMLTraceIDType_cbc);
  RegisterChildNode('Item', TXMLItemType_cac);
  RegisterChildNode('GoodsItemContainer', TXMLGoodsItemContainerType_cac);
  RegisterChildNode('FreightAllowanceCharge', TXMLAllowanceChargeType_cac);
  RegisterChildNode('InvoiceLine', TXMLInvoiceLineType_cac);
  RegisterChildNode('Temperature', TXMLTemperatureType_cac);
  RegisterChildNode('ContainedGoodsItem', TXMLGoodsItemType_cac);
  RegisterChildNode('OriginAddress', TXMLAddressType_cac);
  RegisterChildNode('Delivery', TXMLDeliveryType_cac);
  RegisterChildNode('Pickup', TXMLPickupType_cac);
  RegisterChildNode('Despatch', TXMLDespatchType_cac);
  RegisterChildNode('MeasurementDimension', TXMLDimensionType_cac);
  RegisterChildNode('ContainingPackage', TXMLPackageType_cac);
  RegisterChildNode('ShipmentDocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('MinimumTemperature', TXMLTemperatureType_cac);
  RegisterChildNode('MaximumTemperature', TXMLTemperatureType_cac);
  FDescription := CreateCollection(TXMLDescriptionType_cbcList, IXMLDescriptionType_cbc, 'Description') as IXMLDescriptionType_cbcList;
  FItem := CreateCollection(TXMLItemType_cacList, IXMLItemType_cac, 'Item') as IXMLItemType_cacList;
  FGoodsItemContainer := CreateCollection(TXMLGoodsItemContainerType_cacList, IXMLGoodsItemContainerType_cac, 'GoodsItemContainer') as IXMLGoodsItemContainerType_cacList;
  FFreightAllowanceCharge := CreateCollection(TXMLAllowanceChargeType_cacList, IXMLAllowanceChargeType_cac, 'FreightAllowanceCharge') as IXMLAllowanceChargeType_cacList;
  FInvoiceLine := CreateCollection(TXMLInvoiceLineType_cacList, IXMLInvoiceLineType_cac, 'InvoiceLine') as IXMLInvoiceLineType_cacList;
  FTemperature := CreateCollection(TXMLTemperatureType_cacList, IXMLTemperatureType_cac, 'Temperature') as IXMLTemperatureType_cacList;
  FContainedGoodsItem := CreateCollection(TXMLGoodsItemType_cacList, IXMLGoodsItemType_cac, 'ContainedGoodsItem') as IXMLGoodsItemType_cacList;
  FMeasurementDimension := CreateCollection(TXMLDimensionType_cacList, IXMLDimensionType_cac, 'MeasurementDimension') as IXMLDimensionType_cacList;
  FContainingPackage := CreateCollection(TXMLPackageType_cacList, IXMLPackageType_cac, 'ContainingPackage') as IXMLPackageType_cacList;
  inherited;
end;

function TXMLGoodsItemType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLGoodsItemType_cac.Get_SequenceNumberID: IXMLSequenceNumberIDType_cbc;
begin
  Result := ChildNodes['SequenceNumberID'] as IXMLSequenceNumberIDType_cbc;
end;

function TXMLGoodsItemType_cac.Get_Description: IXMLDescriptionType_cbcList;
begin
  Result := FDescription;
end;

function TXMLGoodsItemType_cac.Get_HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc;
begin
  Result := ChildNodes['HazardousRiskIndicator'] as IXMLHazardousRiskIndicatorType_cbc;
end;

function TXMLGoodsItemType_cac.Get_DeclaredCustomsValueAmount: IXMLDeclaredCustomsValueAmountType_cbc;
begin
  Result := ChildNodes['DeclaredCustomsValueAmount'] as IXMLDeclaredCustomsValueAmountType_cbc;
end;

function TXMLGoodsItemType_cac.Get_DeclaredForCarriageValueAmount: IXMLDeclaredForCarriageValueAmountType_cbc;
begin
  Result := ChildNodes['DeclaredForCarriageValueAmount'] as IXMLDeclaredForCarriageValueAmountType_cbc;
end;

function TXMLGoodsItemType_cac.Get_DeclaredStatisticsValueAmount: IXMLDeclaredStatisticsValueAmountType_cbc;
begin
  Result := ChildNodes['DeclaredStatisticsValueAmount'] as IXMLDeclaredStatisticsValueAmountType_cbc;
end;

function TXMLGoodsItemType_cac.Get_FreeOnBoardValueAmount: IXMLFreeOnBoardValueAmountType_cbc;
begin
  Result := ChildNodes['FreeOnBoardValueAmount'] as IXMLFreeOnBoardValueAmountType_cbc;
end;

function TXMLGoodsItemType_cac.Get_InsuranceValueAmount: IXMLInsuranceValueAmountType_cbc;
begin
  Result := ChildNodes['InsuranceValueAmount'] as IXMLInsuranceValueAmountType_cbc;
end;

function TXMLGoodsItemType_cac.Get_ValueAmount: IXMLValueAmountType_cbc;
begin
  Result := ChildNodes['ValueAmount'] as IXMLValueAmountType_cbc;
end;

function TXMLGoodsItemType_cac.Get_GrossWeightMeasure: IXMLGrossWeightMeasureType_cbc;
begin
  Result := ChildNodes['GrossWeightMeasure'] as IXMLGrossWeightMeasureType_cbc;
end;

function TXMLGoodsItemType_cac.Get_NetWeightMeasure: IXMLNetWeightMeasureType_cbc;
begin
  Result := ChildNodes['NetWeightMeasure'] as IXMLNetWeightMeasureType_cbc;
end;

function TXMLGoodsItemType_cac.Get_NetNetWeightMeasure: IXMLNetNetWeightMeasureType_cbc;
begin
  Result := ChildNodes['NetNetWeightMeasure'] as IXMLNetNetWeightMeasureType_cbc;
end;

function TXMLGoodsItemType_cac.Get_ChargeableWeightMeasure: IXMLChargeableWeightMeasureType_cbc;
begin
  Result := ChildNodes['ChargeableWeightMeasure'] as IXMLChargeableWeightMeasureType_cbc;
end;

function TXMLGoodsItemType_cac.Get_GrossVolumeMeasure: IXMLGrossVolumeMeasureType_cbc;
begin
  Result := ChildNodes['GrossVolumeMeasure'] as IXMLGrossVolumeMeasureType_cbc;
end;

function TXMLGoodsItemType_cac.Get_NetVolumeMeasure: IXMLNetVolumeMeasureType_cbc;
begin
  Result := ChildNodes['NetVolumeMeasure'] as IXMLNetVolumeMeasureType_cbc;
end;

function TXMLGoodsItemType_cac.Get_Quantity: IXMLQuantityType_cbc;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantityType_cbc;
end;

function TXMLGoodsItemType_cac.Get_PreferenceCriterionCode: IXMLPreferenceCriterionCodeType_cbc;
begin
  Result := ChildNodes['PreferenceCriterionCode'] as IXMLPreferenceCriterionCodeType_cbc;
end;

function TXMLGoodsItemType_cac.Get_RequiredCustomsID: IXMLRequiredCustomsIDType_cbc;
begin
  Result := ChildNodes['RequiredCustomsID'] as IXMLRequiredCustomsIDType_cbc;
end;

function TXMLGoodsItemType_cac.Get_CustomsStatusCode: IXMLCustomsStatusCodeType_cbc;
begin
  Result := ChildNodes['CustomsStatusCode'] as IXMLCustomsStatusCodeType_cbc;
end;

function TXMLGoodsItemType_cac.Get_CustomsTariffQuantity: IXMLCustomsTariffQuantityType_cbc;
begin
  Result := ChildNodes['CustomsTariffQuantity'] as IXMLCustomsTariffQuantityType_cbc;
end;

function TXMLGoodsItemType_cac.Get_CustomsImportClassifiedIndicator: IXMLCustomsImportClassifiedIndicatorType_cbc;
begin
  Result := ChildNodes['CustomsImportClassifiedIndicator'] as IXMLCustomsImportClassifiedIndicatorType_cbc;
end;

function TXMLGoodsItemType_cac.Get_ChargeableQuantity: IXMLChargeableQuantityType_cbc;
begin
  Result := ChildNodes['ChargeableQuantity'] as IXMLChargeableQuantityType_cbc;
end;

function TXMLGoodsItemType_cac.Get_ReturnableQuantity: IXMLReturnableQuantityType_cbc;
begin
  Result := ChildNodes['ReturnableQuantity'] as IXMLReturnableQuantityType_cbc;
end;

function TXMLGoodsItemType_cac.Get_TraceID: IXMLTraceIDType_cbc;
begin
  Result := ChildNodes['TraceID'] as IXMLTraceIDType_cbc;
end;

function TXMLGoodsItemType_cac.Get_Item: IXMLItemType_cacList;
begin
  Result := FItem;
end;

function TXMLGoodsItemType_cac.Get_GoodsItemContainer: IXMLGoodsItemContainerType_cacList;
begin
  Result := FGoodsItemContainer;
end;

function TXMLGoodsItemType_cac.Get_FreightAllowanceCharge: IXMLAllowanceChargeType_cacList;
begin
  Result := FFreightAllowanceCharge;
end;

function TXMLGoodsItemType_cac.Get_InvoiceLine: IXMLInvoiceLineType_cacList;
begin
  Result := FInvoiceLine;
end;

function TXMLGoodsItemType_cac.Get_Temperature: IXMLTemperatureType_cacList;
begin
  Result := FTemperature;
end;

function TXMLGoodsItemType_cac.Get_ContainedGoodsItem: IXMLGoodsItemType_cacList;
begin
  Result := FContainedGoodsItem;
end;

function TXMLGoodsItemType_cac.Get_OriginAddress: IXMLAddressType_cac;
begin
  Result := ChildNodes['OriginAddress'] as IXMLAddressType_cac;
end;

function TXMLGoodsItemType_cac.Get_Delivery: IXMLDeliveryType_cac;
begin
  Result := ChildNodes['Delivery'] as IXMLDeliveryType_cac;
end;

function TXMLGoodsItemType_cac.Get_Pickup: IXMLPickupType_cac;
begin
  Result := ChildNodes['Pickup'] as IXMLPickupType_cac;
end;

function TXMLGoodsItemType_cac.Get_Despatch: IXMLDespatchType_cac;
begin
  Result := ChildNodes['Despatch'] as IXMLDespatchType_cac;
end;

function TXMLGoodsItemType_cac.Get_MeasurementDimension: IXMLDimensionType_cacList;
begin
  Result := FMeasurementDimension;
end;

function TXMLGoodsItemType_cac.Get_ContainingPackage: IXMLPackageType_cacList;
begin
  Result := FContainingPackage;
end;

function TXMLGoodsItemType_cac.Get_ShipmentDocumentReference: IXMLDocumentReferenceType_cac;
begin
  Result := ChildNodes['ShipmentDocumentReference'] as IXMLDocumentReferenceType_cac;
end;

function TXMLGoodsItemType_cac.Get_MinimumTemperature: IXMLTemperatureType_cac;
begin
  Result := ChildNodes['MinimumTemperature'] as IXMLTemperatureType_cac;
end;

function TXMLGoodsItemType_cac.Get_MaximumTemperature: IXMLTemperatureType_cac;
begin
  Result := ChildNodes['MaximumTemperature'] as IXMLTemperatureType_cac;
end;

{ TXMLGoodsItemType_cacList }

function TXMLGoodsItemType_cacList.Add: IXMLGoodsItemType_cac;
begin
  Result := AddItem(-1) as IXMLGoodsItemType_cac;
end;

function TXMLGoodsItemType_cacList.Insert(const Index: Integer): IXMLGoodsItemType_cac;
begin
  Result := AddItem(Index) as IXMLGoodsItemType_cac;
end;

function TXMLGoodsItemType_cacList.Get_Item(const Index: Integer): IXMLGoodsItemType_cac;
begin
  Result := List[Index] as IXMLGoodsItemType_cac;
end;

{ TXMLSequenceNumberIDType_cbc }

{ TXMLValueAmountType_cbc }

{ TXMLPreferenceCriterionCodeType_cbc }

{ TXMLRequiredCustomsIDType_cbc }

{ TXMLCustomsStatusCodeType_cbc }

{ TXMLCustomsTariffQuantityType_cbc }

{ TXMLCustomsImportClassifiedIndicatorType_cbc }

{ TXMLChargeableQuantityType_cbc }

{ TXMLReturnableQuantityType_cbc }

{ TXMLGoodsItemContainerType_cac }

procedure TXMLGoodsItemContainerType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('Quantity', TXMLQuantityType_cbc);
  RegisterChildNode('TransportEquipment', TXMLTransportEquipmentType_cac);
  FTransportEquipment := CreateCollection(TXMLTransportEquipmentType_cacList, IXMLTransportEquipmentType_cac, 'TransportEquipment') as IXMLTransportEquipmentType_cacList;
  inherited;
end;

function TXMLGoodsItemContainerType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLGoodsItemContainerType_cac.Get_Quantity: IXMLQuantityType_cbc;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantityType_cbc;
end;

function TXMLGoodsItemContainerType_cac.Get_TransportEquipment: IXMLTransportEquipmentType_cacList;
begin
  Result := FTransportEquipment;
end;

{ TXMLGoodsItemContainerType_cacList }

function TXMLGoodsItemContainerType_cacList.Add: IXMLGoodsItemContainerType_cac;
begin
  Result := AddItem(-1) as IXMLGoodsItemContainerType_cac;
end;

function TXMLGoodsItemContainerType_cacList.Insert(const Index: Integer): IXMLGoodsItemContainerType_cac;
begin
  Result := AddItem(Index) as IXMLGoodsItemContainerType_cac;
end;

function TXMLGoodsItemContainerType_cacList.Get_Item(const Index: Integer): IXMLGoodsItemContainerType_cac;
begin
  Result := List[Index] as IXMLGoodsItemContainerType_cac;
end;

{ TXMLInvoiceLineType_cac }

procedure TXMLInvoiceLineType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('UUID', TXMLUUIDType_cbc);
  RegisterChildNode('Note', TXMLNoteType_cbc);
  RegisterChildNode('InvoicedQuantity', TXMLInvoicedQuantityType_cbc);
  RegisterChildNode('LineExtensionAmount', TXMLLineExtensionAmountType_cbc);
  RegisterChildNode('TaxPointDate', TXMLTaxPointDateType_cbc);
  RegisterChildNode('AccountingCostCode', TXMLAccountingCostCodeType_cbc);
  RegisterChildNode('AccountingCost', TXMLAccountingCostType_cbc);
  RegisterChildNode('PaymentPurposeCode', TXMLPaymentPurposeCodeType_cbc);
  RegisterChildNode('FreeOfChargeIndicator', TXMLFreeOfChargeIndicatorType_cbc);
  RegisterChildNode('InvoicePeriod', TXMLPeriodType_cac);
  RegisterChildNode('OrderLineReference', TXMLOrderLineReferenceType_cac);
  RegisterChildNode('DespatchLineReference', TXMLLineReferenceType_cac);
  RegisterChildNode('ReceiptLineReference', TXMLLineReferenceType_cac);
  RegisterChildNode('BillingReference', TXMLBillingReferenceType_cac);
  RegisterChildNode('DocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('PricingReference', TXMLPricingReferenceType_cac);
  RegisterChildNode('OriginatorParty', TXMLPartyType_cac);
  RegisterChildNode('Delivery', TXMLDeliveryType_cac);
  RegisterChildNode('PaymentTerms', TXMLPaymentTermsType_cac);
  RegisterChildNode('AllowanceCharge', TXMLAllowanceChargeType_cac);
  RegisterChildNode('TaxTotal', TXMLTaxTotalType_cac);
  RegisterChildNode('WithholdingTaxTotal', TXMLTaxTotalType_cac);
  RegisterChildNode('Item', TXMLItemType_cac);
  RegisterChildNode('Price', TXMLPriceType_cac);
  RegisterChildNode('DeliveryTerms', TXMLDeliveryTermsType_cac);
  RegisterChildNode('SubInvoiceLine', TXMLInvoiceLineType_cac);
  RegisterChildNode('ItemPriceExtension', TXMLPriceExtensionType_cac);
  FNote := CreateCollection(TXMLNoteType_cbcList, IXMLNoteType_cbc, 'Note') as IXMLNoteType_cbcList;
  FInvoicePeriod := CreateCollection(TXMLPeriodType_cacList, IXMLPeriodType_cac, 'InvoicePeriod') as IXMLPeriodType_cacList;
  FOrderLineReference := CreateCollection(TXMLOrderLineReferenceType_cacList, IXMLOrderLineReferenceType_cac, 'OrderLineReference') as IXMLOrderLineReferenceType_cacList;
  FDespatchLineReference := CreateCollection(TXMLLineReferenceType_cacList, IXMLLineReferenceType_cac, 'DespatchLineReference') as IXMLLineReferenceType_cacList;
  FReceiptLineReference := CreateCollection(TXMLLineReferenceType_cacList, IXMLLineReferenceType_cac, 'ReceiptLineReference') as IXMLLineReferenceType_cacList;
  FBillingReference := CreateCollection(TXMLBillingReferenceType_cacList, IXMLBillingReferenceType_cac, 'BillingReference') as IXMLBillingReferenceType_cacList;
  FDocumentReference := CreateCollection(TXMLDocumentReferenceType_cacList, IXMLDocumentReferenceType_cac, 'DocumentReference') as IXMLDocumentReferenceType_cacList;
  FDelivery := CreateCollection(TXMLDeliveryType_cacList, IXMLDeliveryType_cac, 'Delivery') as IXMLDeliveryType_cacList;
  FPaymentTerms := CreateCollection(TXMLPaymentTermsType_cacList, IXMLPaymentTermsType_cac, 'PaymentTerms') as IXMLPaymentTermsType_cacList;
  FAllowanceCharge := CreateCollection(TXMLAllowanceChargeType_cacList, IXMLAllowanceChargeType_cac, 'AllowanceCharge') as IXMLAllowanceChargeType_cacList;
  FTaxTotal := CreateCollection(TXMLTaxTotalType_cacList, IXMLTaxTotalType_cac, 'TaxTotal') as IXMLTaxTotalType_cacList;
  FWithholdingTaxTotal := CreateCollection(TXMLTaxTotalType_cacList, IXMLTaxTotalType_cac, 'WithholdingTaxTotal') as IXMLTaxTotalType_cacList;
  FSubInvoiceLine := CreateCollection(TXMLInvoiceLineType_cacList, IXMLInvoiceLineType_cac, 'SubInvoiceLine') as IXMLInvoiceLineType_cacList;
  inherited;
end;

function TXMLInvoiceLineType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLInvoiceLineType_cac.Get_UUID: IXMLUUIDType_cbc;
begin
  Result := ChildNodes['UUID'] as IXMLUUIDType_cbc;
end;

function TXMLInvoiceLineType_cac.Get_Note: IXMLNoteType_cbcList;
begin
  Result := FNote;
end;

function TXMLInvoiceLineType_cac.Get_InvoicedQuantity: IXMLInvoicedQuantityType_cbc;
begin
  Result := ChildNodes['InvoicedQuantity'] as IXMLInvoicedQuantityType_cbc;
end;

function TXMLInvoiceLineType_cac.Get_LineExtensionAmount: IXMLLineExtensionAmountType_cbc;
begin
  Result := ChildNodes['LineExtensionAmount'] as IXMLLineExtensionAmountType_cbc;
end;

function TXMLInvoiceLineType_cac.Get_TaxPointDate: IXMLTaxPointDateType_cbc;
begin
  Result := ChildNodes['TaxPointDate'] as IXMLTaxPointDateType_cbc;
end;

function TXMLInvoiceLineType_cac.Get_AccountingCostCode: IXMLAccountingCostCodeType_cbc;
begin
  Result := ChildNodes['AccountingCostCode'] as IXMLAccountingCostCodeType_cbc;
end;

function TXMLInvoiceLineType_cac.Get_AccountingCost: IXMLAccountingCostType_cbc;
begin
  Result := ChildNodes['AccountingCost'] as IXMLAccountingCostType_cbc;
end;

function TXMLInvoiceLineType_cac.Get_PaymentPurposeCode: IXMLPaymentPurposeCodeType_cbc;
begin
  Result := ChildNodes['PaymentPurposeCode'] as IXMLPaymentPurposeCodeType_cbc;
end;

function TXMLInvoiceLineType_cac.Get_FreeOfChargeIndicator: IXMLFreeOfChargeIndicatorType_cbc;
begin
  Result := ChildNodes['FreeOfChargeIndicator'] as IXMLFreeOfChargeIndicatorType_cbc;
end;

function TXMLInvoiceLineType_cac.Get_InvoicePeriod: IXMLPeriodType_cacList;
begin
  Result := FInvoicePeriod;
end;

function TXMLInvoiceLineType_cac.Get_OrderLineReference: IXMLOrderLineReferenceType_cacList;
begin
  Result := FOrderLineReference;
end;

function TXMLInvoiceLineType_cac.Get_DespatchLineReference: IXMLLineReferenceType_cacList;
begin
  Result := FDespatchLineReference;
end;

function TXMLInvoiceLineType_cac.Get_ReceiptLineReference: IXMLLineReferenceType_cacList;
begin
  Result := FReceiptLineReference;
end;

function TXMLInvoiceLineType_cac.Get_BillingReference: IXMLBillingReferenceType_cacList;
begin
  Result := FBillingReference;
end;

function TXMLInvoiceLineType_cac.Get_DocumentReference: IXMLDocumentReferenceType_cacList;
begin
  Result := FDocumentReference;
end;

function TXMLInvoiceLineType_cac.Get_PricingReference: IXMLPricingReferenceType_cac;
begin
  Result := ChildNodes['PricingReference'] as IXMLPricingReferenceType_cac;
end;

function TXMLInvoiceLineType_cac.Get_OriginatorParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['OriginatorParty'] as IXMLPartyType_cac;
end;

function TXMLInvoiceLineType_cac.Get_Delivery: IXMLDeliveryType_cacList;
begin
  Result := FDelivery;
end;

function TXMLInvoiceLineType_cac.Get_PaymentTerms: IXMLPaymentTermsType_cacList;
begin
  Result := FPaymentTerms;
end;

function TXMLInvoiceLineType_cac.Get_AllowanceCharge: IXMLAllowanceChargeType_cacList;
begin
  Result := FAllowanceCharge;
end;

function TXMLInvoiceLineType_cac.Get_TaxTotal: IXMLTaxTotalType_cacList;
begin
  Result := FTaxTotal;
end;

function TXMLInvoiceLineType_cac.Get_WithholdingTaxTotal: IXMLTaxTotalType_cacList;
begin
  Result := FWithholdingTaxTotal;
end;

function TXMLInvoiceLineType_cac.Get_Item: IXMLItemType_cac;
begin
  Result := ChildNodes['Item'] as IXMLItemType_cac;
end;

function TXMLInvoiceLineType_cac.Get_Price: IXMLPriceType_cac;
begin
  Result := ChildNodes['Price'] as IXMLPriceType_cac;
end;

function TXMLInvoiceLineType_cac.Get_DeliveryTerms: IXMLDeliveryTermsType_cac;
begin
  Result := ChildNodes['DeliveryTerms'] as IXMLDeliveryTermsType_cac;
end;

function TXMLInvoiceLineType_cac.Get_SubInvoiceLine: IXMLInvoiceLineType_cacList;
begin
  Result := FSubInvoiceLine;
end;

function TXMLInvoiceLineType_cac.Get_ItemPriceExtension: IXMLPriceExtensionType_cac;
begin
  Result := ChildNodes['ItemPriceExtension'] as IXMLPriceExtensionType_cac;
end;

{ TXMLInvoiceLineType_cacList }

function TXMLInvoiceLineType_cacList.Add: IXMLInvoiceLineType_cac;
begin
  Result := AddItem(-1) as IXMLInvoiceLineType_cac;
end;

function TXMLInvoiceLineType_cacList.Insert(const Index: Integer): IXMLInvoiceLineType_cac;
begin
  Result := AddItem(Index) as IXMLInvoiceLineType_cac;
end;

function TXMLInvoiceLineType_cacList.Get_Item(const Index: Integer): IXMLInvoiceLineType_cac;
begin
  Result := List[Index] as IXMLInvoiceLineType_cac;
end;

{ TXMLInvoicedQuantityType_cbc }

{ TXMLLineExtensionAmountType_cbc }

{ TXMLPaymentPurposeCodeType_cbc }

{ TXMLFreeOfChargeIndicatorType_cbc }

{ TXMLLineReferenceType_cac }

procedure TXMLLineReferenceType_cac.AfterConstruction;
begin
  RegisterChildNode('LineID', TXMLLineIDType_cbc);
  RegisterChildNode('UUID', TXMLUUIDType_cbc);
  RegisterChildNode('LineStatusCode', TXMLLineStatusCodeType_cbc);
  RegisterChildNode('DocumentReference', TXMLDocumentReferenceType_cac);
  inherited;
end;

function TXMLLineReferenceType_cac.Get_LineID: IXMLLineIDType_cbc;
begin
  Result := ChildNodes['LineID'] as IXMLLineIDType_cbc;
end;

function TXMLLineReferenceType_cac.Get_UUID: IXMLUUIDType_cbc;
begin
  Result := ChildNodes['UUID'] as IXMLUUIDType_cbc;
end;

function TXMLLineReferenceType_cac.Get_LineStatusCode: IXMLLineStatusCodeType_cbc;
begin
  Result := ChildNodes['LineStatusCode'] as IXMLLineStatusCodeType_cbc;
end;

function TXMLLineReferenceType_cac.Get_DocumentReference: IXMLDocumentReferenceType_cac;
begin
  Result := ChildNodes['DocumentReference'] as IXMLDocumentReferenceType_cac;
end;

{ TXMLLineReferenceType_cacList }

function TXMLLineReferenceType_cacList.Add: IXMLLineReferenceType_cac;
begin
  Result := AddItem(-1) as IXMLLineReferenceType_cac;
end;

function TXMLLineReferenceType_cacList.Insert(const Index: Integer): IXMLLineReferenceType_cac;
begin
  Result := AddItem(Index) as IXMLLineReferenceType_cac;
end;

function TXMLLineReferenceType_cacList.Get_Item(const Index: Integer): IXMLLineReferenceType_cac;
begin
  Result := List[Index] as IXMLLineReferenceType_cac;
end;

{ TXMLPricingReferenceType_cac }

procedure TXMLPricingReferenceType_cac.AfterConstruction;
begin
  RegisterChildNode('OriginalItemLocationQuantity', TXMLItemLocationQuantityType_cac);
  RegisterChildNode('AlternativeConditionPrice', TXMLPriceType_cac);
  FAlternativeConditionPrice := CreateCollection(TXMLPriceType_cacList, IXMLPriceType_cac, 'AlternativeConditionPrice') as IXMLPriceType_cacList;
  inherited;
end;

function TXMLPricingReferenceType_cac.Get_OriginalItemLocationQuantity: IXMLItemLocationQuantityType_cac;
begin
  Result := ChildNodes['OriginalItemLocationQuantity'] as IXMLItemLocationQuantityType_cac;
end;

function TXMLPricingReferenceType_cac.Get_AlternativeConditionPrice: IXMLPriceType_cacList;
begin
  Result := FAlternativeConditionPrice;
end;

{ TXMLItemLocationQuantityType_cac }

procedure TXMLItemLocationQuantityType_cac.AfterConstruction;
begin
  RegisterChildNode('LeadTimeMeasure', TXMLLeadTimeMeasureType_cbc);
  RegisterChildNode('MinimumQuantity', TXMLMinimumQuantityType_cbc);
  RegisterChildNode('MaximumQuantity', TXMLMaximumQuantityType_cbc);
  RegisterChildNode('HazardousRiskIndicator', TXMLHazardousRiskIndicatorType_cbc);
  RegisterChildNode('TradingRestrictions', TXMLTradingRestrictionsType_cbc);
  RegisterChildNode('ApplicableTerritoryAddress', TXMLAddressType_cac);
  RegisterChildNode('Price', TXMLPriceType_cac);
  RegisterChildNode('DeliveryUnit', TXMLDeliveryUnitType_cac);
  RegisterChildNode('ApplicableTaxCategory', TXMLTaxCategoryType_cac);
  RegisterChildNode('Package', TXMLPackageType_cac);
  RegisterChildNode('AllowanceCharge', TXMLAllowanceChargeType_cac);
  RegisterChildNode('DependentPriceReference', TXMLDependentPriceReferenceType_cac);
  FTradingRestrictions := CreateCollection(TXMLTradingRestrictionsType_cbcList, IXMLTradingRestrictionsType_cbc, 'TradingRestrictions') as IXMLTradingRestrictionsType_cbcList;
  FApplicableTerritoryAddress := CreateCollection(TXMLAddressType_cacList, IXMLAddressType_cac, 'ApplicableTerritoryAddress') as IXMLAddressType_cacList;
  FDeliveryUnit := CreateCollection(TXMLDeliveryUnitType_cacList, IXMLDeliveryUnitType_cac, 'DeliveryUnit') as IXMLDeliveryUnitType_cacList;
  FApplicableTaxCategory := CreateCollection(TXMLTaxCategoryType_cacList, IXMLTaxCategoryType_cac, 'ApplicableTaxCategory') as IXMLTaxCategoryType_cacList;
  FAllowanceCharge := CreateCollection(TXMLAllowanceChargeType_cacList, IXMLAllowanceChargeType_cac, 'AllowanceCharge') as IXMLAllowanceChargeType_cacList;
  inherited;
end;

function TXMLItemLocationQuantityType_cac.Get_LeadTimeMeasure: IXMLLeadTimeMeasureType_cbc;
begin
  Result := ChildNodes['LeadTimeMeasure'] as IXMLLeadTimeMeasureType_cbc;
end;

function TXMLItemLocationQuantityType_cac.Get_MinimumQuantity: IXMLMinimumQuantityType_cbc;
begin
  Result := ChildNodes['MinimumQuantity'] as IXMLMinimumQuantityType_cbc;
end;

function TXMLItemLocationQuantityType_cac.Get_MaximumQuantity: IXMLMaximumQuantityType_cbc;
begin
  Result := ChildNodes['MaximumQuantity'] as IXMLMaximumQuantityType_cbc;
end;

function TXMLItemLocationQuantityType_cac.Get_HazardousRiskIndicator: IXMLHazardousRiskIndicatorType_cbc;
begin
  Result := ChildNodes['HazardousRiskIndicator'] as IXMLHazardousRiskIndicatorType_cbc;
end;

function TXMLItemLocationQuantityType_cac.Get_TradingRestrictions: IXMLTradingRestrictionsType_cbcList;
begin
  Result := FTradingRestrictions;
end;

function TXMLItemLocationQuantityType_cac.Get_ApplicableTerritoryAddress: IXMLAddressType_cacList;
begin
  Result := FApplicableTerritoryAddress;
end;

function TXMLItemLocationQuantityType_cac.Get_Price: IXMLPriceType_cac;
begin
  Result := ChildNodes['Price'] as IXMLPriceType_cac;
end;

function TXMLItemLocationQuantityType_cac.Get_DeliveryUnit: IXMLDeliveryUnitType_cacList;
begin
  Result := FDeliveryUnit;
end;

function TXMLItemLocationQuantityType_cac.Get_ApplicableTaxCategory: IXMLTaxCategoryType_cacList;
begin
  Result := FApplicableTaxCategory;
end;

function TXMLItemLocationQuantityType_cac.Get_Package: IXMLPackageType_cac;
begin
  Result := ChildNodes['Package'] as IXMLPackageType_cac;
end;

function TXMLItemLocationQuantityType_cac.Get_AllowanceCharge: IXMLAllowanceChargeType_cacList;
begin
  Result := FAllowanceCharge;
end;

function TXMLItemLocationQuantityType_cac.Get_DependentPriceReference: IXMLDependentPriceReferenceType_cac;
begin
  Result := ChildNodes['DependentPriceReference'] as IXMLDependentPriceReferenceType_cac;
end;

{ TXMLLeadTimeMeasureType_cbc }

{ TXMLTradingRestrictionsType_cbc }

{ TXMLTradingRestrictionsType_cbcList }

function TXMLTradingRestrictionsType_cbcList.Add: IXMLTradingRestrictionsType_cbc;
begin
  Result := AddItem(-1) as IXMLTradingRestrictionsType_cbc;
end;

function TXMLTradingRestrictionsType_cbcList.Insert(const Index: Integer): IXMLTradingRestrictionsType_cbc;
begin
  Result := AddItem(Index) as IXMLTradingRestrictionsType_cbc;
end;

function TXMLTradingRestrictionsType_cbcList.Get_Item(const Index: Integer): IXMLTradingRestrictionsType_cbc;
begin
  Result := List[Index] as IXMLTradingRestrictionsType_cbc;
end;

{ TXMLPriceType_cac }

procedure TXMLPriceType_cac.AfterConstruction;
begin
  RegisterChildNode('PriceAmount', TXMLPriceAmountType_cbc);
  RegisterChildNode('BaseQuantity', TXMLBaseQuantityType_cbc);
  RegisterChildNode('PriceChangeReason', TXMLPriceChangeReasonType_cbc);
  RegisterChildNode('PriceTypeCode', TXMLPriceTypeCodeType_cbc);
  RegisterChildNode('PriceType', TXMLPriceTypeType_cbc);
  RegisterChildNode('OrderableUnitFactorRate', TXMLOrderableUnitFactorRateType_cbc);
  RegisterChildNode('ValidityPeriod', TXMLPeriodType_cac);
  RegisterChildNode('PriceList', TXMLPriceListType_cac);
  RegisterChildNode('AllowanceCharge', TXMLAllowanceChargeType_cac);
  RegisterChildNode('PricingExchangeRate', TXMLExchangeRateType_cac);
  FPriceChangeReason := CreateCollection(TXMLPriceChangeReasonType_cbcList, IXMLPriceChangeReasonType_cbc, 'PriceChangeReason') as IXMLPriceChangeReasonType_cbcList;
  FValidityPeriod := CreateCollection(TXMLPeriodType_cacList, IXMLPeriodType_cac, 'ValidityPeriod') as IXMLPeriodType_cacList;
  FAllowanceCharge := CreateCollection(TXMLAllowanceChargeType_cacList, IXMLAllowanceChargeType_cac, 'AllowanceCharge') as IXMLAllowanceChargeType_cacList;
  inherited;
end;

function TXMLPriceType_cac.Get_PriceAmount: IXMLPriceAmountType_cbc;
begin
  Result := ChildNodes['PriceAmount'] as IXMLPriceAmountType_cbc;
end;

function TXMLPriceType_cac.Get_BaseQuantity: IXMLBaseQuantityType_cbc;
begin
  Result := ChildNodes['BaseQuantity'] as IXMLBaseQuantityType_cbc;
end;

function TXMLPriceType_cac.Get_PriceChangeReason: IXMLPriceChangeReasonType_cbcList;
begin
  Result := FPriceChangeReason;
end;

function TXMLPriceType_cac.Get_PriceTypeCode: IXMLPriceTypeCodeType_cbc;
begin
  Result := ChildNodes['PriceTypeCode'] as IXMLPriceTypeCodeType_cbc;
end;

function TXMLPriceType_cac.Get_PriceType: IXMLPriceTypeType_cbc;
begin
  Result := ChildNodes['PriceType'] as IXMLPriceTypeType_cbc;
end;

function TXMLPriceType_cac.Get_OrderableUnitFactorRate: IXMLOrderableUnitFactorRateType_cbc;
begin
  Result := ChildNodes['OrderableUnitFactorRate'] as IXMLOrderableUnitFactorRateType_cbc;
end;

function TXMLPriceType_cac.Get_ValidityPeriod: IXMLPeriodType_cacList;
begin
  Result := FValidityPeriod;
end;

function TXMLPriceType_cac.Get_PriceList: IXMLPriceListType_cac;
begin
  Result := ChildNodes['PriceList'] as IXMLPriceListType_cac;
end;

function TXMLPriceType_cac.Get_AllowanceCharge: IXMLAllowanceChargeType_cacList;
begin
  Result := FAllowanceCharge;
end;

function TXMLPriceType_cac.Get_PricingExchangeRate: IXMLExchangeRateType_cac;
begin
  Result := ChildNodes['PricingExchangeRate'] as IXMLExchangeRateType_cac;
end;

{ TXMLPriceType_cacList }

function TXMLPriceType_cacList.Add: IXMLPriceType_cac;
begin
  Result := AddItem(-1) as IXMLPriceType_cac;
end;

function TXMLPriceType_cacList.Insert(const Index: Integer): IXMLPriceType_cac;
begin
  Result := AddItem(Index) as IXMLPriceType_cac;
end;

function TXMLPriceType_cacList.Get_Item(const Index: Integer): IXMLPriceType_cac;
begin
  Result := List[Index] as IXMLPriceType_cac;
end;

{ TXMLPriceAmountType_cbc }

{ TXMLBaseQuantityType_cbc }

{ TXMLPriceChangeReasonType_cbc }

{ TXMLPriceChangeReasonType_cbcList }

function TXMLPriceChangeReasonType_cbcList.Add: IXMLPriceChangeReasonType_cbc;
begin
  Result := AddItem(-1) as IXMLPriceChangeReasonType_cbc;
end;

function TXMLPriceChangeReasonType_cbcList.Insert(const Index: Integer): IXMLPriceChangeReasonType_cbc;
begin
  Result := AddItem(Index) as IXMLPriceChangeReasonType_cbc;
end;

function TXMLPriceChangeReasonType_cbcList.Get_Item(const Index: Integer): IXMLPriceChangeReasonType_cbc;
begin
  Result := List[Index] as IXMLPriceChangeReasonType_cbc;
end;

{ TXMLPriceTypeCodeType_cbc }

{ TXMLPriceTypeType_cbc }

{ TXMLOrderableUnitFactorRateType_cbc }

{ TXMLPriceListType_cac }

procedure TXMLPriceListType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('StatusCode', TXMLStatusCodeType_cbc);
  RegisterChildNode('ValidityPeriod', TXMLPeriodType_cac);
  RegisterChildNode('PreviousPriceList', TXMLPriceListType_cac);
  FValidityPeriod := CreateCollection(TXMLPeriodType_cacList, IXMLPeriodType_cac, 'ValidityPeriod') as IXMLPeriodType_cacList;
  inherited;
end;

function TXMLPriceListType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLPriceListType_cac.Get_StatusCode: IXMLStatusCodeType_cbc;
begin
  Result := ChildNodes['StatusCode'] as IXMLStatusCodeType_cbc;
end;

function TXMLPriceListType_cac.Get_ValidityPeriod: IXMLPeriodType_cacList;
begin
  Result := FValidityPeriod;
end;

function TXMLPriceListType_cac.Get_PreviousPriceList: IXMLPriceListType_cac;
begin
  Result := ChildNodes['PreviousPriceList'] as IXMLPriceListType_cac;
end;

{ TXMLStatusCodeType_cbc }

{ TXMLExchangeRateType_cac }

procedure TXMLExchangeRateType_cac.AfterConstruction;
begin
  RegisterChildNode('SourceCurrencyCode', TXMLSourceCurrencyCodeType_cbc);
  RegisterChildNode('SourceCurrencyBaseRate', TXMLSourceCurrencyBaseRateType_cbc);
  RegisterChildNode('TargetCurrencyCode', TXMLTargetCurrencyCodeType_cbc);
  RegisterChildNode('TargetCurrencyBaseRate', TXMLTargetCurrencyBaseRateType_cbc);
  RegisterChildNode('ExchangeMarketID', TXMLExchangeMarketIDType_cbc);
  RegisterChildNode('CalculationRate', TXMLCalculationRateType_cbc);
  RegisterChildNode('MathematicOperatorCode', TXMLMathematicOperatorCodeType_cbc);
  RegisterChildNode('Date', TXMLDateType_cbc);
  RegisterChildNode('ForeignExchangeContract', TXMLContractType_cac);
  inherited;
end;

function TXMLExchangeRateType_cac.Get_SourceCurrencyCode: IXMLSourceCurrencyCodeType_cbc;
begin
  Result := ChildNodes['SourceCurrencyCode'] as IXMLSourceCurrencyCodeType_cbc;
end;

function TXMLExchangeRateType_cac.Get_SourceCurrencyBaseRate: IXMLSourceCurrencyBaseRateType_cbc;
begin
  Result := ChildNodes['SourceCurrencyBaseRate'] as IXMLSourceCurrencyBaseRateType_cbc;
end;

function TXMLExchangeRateType_cac.Get_TargetCurrencyCode: IXMLTargetCurrencyCodeType_cbc;
begin
  Result := ChildNodes['TargetCurrencyCode'] as IXMLTargetCurrencyCodeType_cbc;
end;

function TXMLExchangeRateType_cac.Get_TargetCurrencyBaseRate: IXMLTargetCurrencyBaseRateType_cbc;
begin
  Result := ChildNodes['TargetCurrencyBaseRate'] as IXMLTargetCurrencyBaseRateType_cbc;
end;

function TXMLExchangeRateType_cac.Get_ExchangeMarketID: IXMLExchangeMarketIDType_cbc;
begin
  Result := ChildNodes['ExchangeMarketID'] as IXMLExchangeMarketIDType_cbc;
end;

function TXMLExchangeRateType_cac.Get_CalculationRate: IXMLCalculationRateType_cbc;
begin
  Result := ChildNodes['CalculationRate'] as IXMLCalculationRateType_cbc;
end;

function TXMLExchangeRateType_cac.Get_MathematicOperatorCode: IXMLMathematicOperatorCodeType_cbc;
begin
  Result := ChildNodes['MathematicOperatorCode'] as IXMLMathematicOperatorCodeType_cbc;
end;

function TXMLExchangeRateType_cac.Get_Date: IXMLDateType_cbc;
begin
  Result := ChildNodes['Date'] as IXMLDateType_cbc;
end;

function TXMLExchangeRateType_cac.Get_ForeignExchangeContract: IXMLContractType_cac;
begin
  Result := ChildNodes['ForeignExchangeContract'] as IXMLContractType_cac;
end;

{ TXMLSourceCurrencyCodeType_cbc }

{ TXMLSourceCurrencyBaseRateType_cbc }

{ TXMLTargetCurrencyCodeType_cbc }

{ TXMLTargetCurrencyBaseRateType_cbc }

{ TXMLExchangeMarketIDType_cbc }

{ TXMLCalculationRateType_cbc }

{ TXMLMathematicOperatorCodeType_cbc }

{ TXMLDateType_cbc }

{ TXMLDependentPriceReferenceType_cac }

procedure TXMLDependentPriceReferenceType_cac.AfterConstruction;
begin
  RegisterChildNode('Percent', TXMLPercentType_cbc);
  RegisterChildNode('LocationAddress', TXMLAddressType_cac);
  RegisterChildNode('DependentLineReference', TXMLLineReferenceType_cac);
  inherited;
end;

function TXMLDependentPriceReferenceType_cac.Get_Percent: IXMLPercentType_cbc;
begin
  Result := ChildNodes['Percent'] as IXMLPercentType_cbc;
end;

function TXMLDependentPriceReferenceType_cac.Get_LocationAddress: IXMLAddressType_cac;
begin
  Result := ChildNodes['LocationAddress'] as IXMLAddressType_cac;
end;

function TXMLDependentPriceReferenceType_cac.Get_DependentLineReference: IXMLLineReferenceType_cac;
begin
  Result := ChildNodes['DependentLineReference'] as IXMLLineReferenceType_cac;
end;

{ TXMLPaymentTermsType_cac }

procedure TXMLPaymentTermsType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('PaymentMeansID', TXMLPaymentMeansIDType_cbc);
  RegisterChildNode('PrepaidPaymentReferenceID', TXMLPrepaidPaymentReferenceIDType_cbc);
  RegisterChildNode('Note', TXMLNoteType_cbc);
  RegisterChildNode('ReferenceEventCode', TXMLReferenceEventCodeType_cbc);
  RegisterChildNode('SettlementDiscountPercent', TXMLSettlementDiscountPercentType_cbc);
  RegisterChildNode('PenaltySurchargePercent', TXMLPenaltySurchargePercentType_cbc);
  RegisterChildNode('PaymentPercent', TXMLPaymentPercentType_cbc);
  RegisterChildNode('Amount', TXMLAmountType_cbc);
  RegisterChildNode('SettlementDiscountAmount', TXMLSettlementDiscountAmountType_cbc);
  RegisterChildNode('PenaltyAmount', TXMLPenaltyAmountType_cbc);
  RegisterChildNode('PaymentTermsDetailsURI', TXMLPaymentTermsDetailsURIType_cbc);
  RegisterChildNode('PaymentDueDate', TXMLPaymentDueDateType_cbc);
  RegisterChildNode('InstallmentDueDate', TXMLInstallmentDueDateType_cbc);
  RegisterChildNode('InvoicingPartyReference', TXMLInvoicingPartyReferenceType_cbc);
  RegisterChildNode('SettlementPeriod', TXMLPeriodType_cac);
  RegisterChildNode('PenaltyPeriod', TXMLPeriodType_cac);
  RegisterChildNode('ExchangeRate', TXMLExchangeRateType_cac);
  RegisterChildNode('ValidityPeriod', TXMLPeriodType_cac);
  FPaymentMeansID := CreateCollection(TXMLPaymentMeansIDType_cbcList, IXMLPaymentMeansIDType_cbc, 'PaymentMeansID') as IXMLPaymentMeansIDType_cbcList;
  FNote := CreateCollection(TXMLNoteType_cbcList, IXMLNoteType_cbc, 'Note') as IXMLNoteType_cbcList;
  inherited;
end;

function TXMLPaymentTermsType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLPaymentTermsType_cac.Get_PaymentMeansID: IXMLPaymentMeansIDType_cbcList;
begin
  Result := FPaymentMeansID;
end;

function TXMLPaymentTermsType_cac.Get_PrepaidPaymentReferenceID: IXMLPrepaidPaymentReferenceIDType_cbc;
begin
  Result := ChildNodes['PrepaidPaymentReferenceID'] as IXMLPrepaidPaymentReferenceIDType_cbc;
end;

function TXMLPaymentTermsType_cac.Get_Note: IXMLNoteType_cbcList;
begin
  Result := FNote;
end;

function TXMLPaymentTermsType_cac.Get_ReferenceEventCode: IXMLReferenceEventCodeType_cbc;
begin
  Result := ChildNodes['ReferenceEventCode'] as IXMLReferenceEventCodeType_cbc;
end;

function TXMLPaymentTermsType_cac.Get_SettlementDiscountPercent: IXMLSettlementDiscountPercentType_cbc;
begin
  Result := ChildNodes['SettlementDiscountPercent'] as IXMLSettlementDiscountPercentType_cbc;
end;

function TXMLPaymentTermsType_cac.Get_PenaltySurchargePercent: IXMLPenaltySurchargePercentType_cbc;
begin
  Result := ChildNodes['PenaltySurchargePercent'] as IXMLPenaltySurchargePercentType_cbc;
end;

function TXMLPaymentTermsType_cac.Get_PaymentPercent: IXMLPaymentPercentType_cbc;
begin
  Result := ChildNodes['PaymentPercent'] as IXMLPaymentPercentType_cbc;
end;

function TXMLPaymentTermsType_cac.Get_Amount: IXMLAmountType_cbc;
begin
  Result := ChildNodes['Amount'] as IXMLAmountType_cbc;
end;

function TXMLPaymentTermsType_cac.Get_SettlementDiscountAmount: IXMLSettlementDiscountAmountType_cbc;
begin
  Result := ChildNodes['SettlementDiscountAmount'] as IXMLSettlementDiscountAmountType_cbc;
end;

function TXMLPaymentTermsType_cac.Get_PenaltyAmount: IXMLPenaltyAmountType_cbc;
begin
  Result := ChildNodes['PenaltyAmount'] as IXMLPenaltyAmountType_cbc;
end;

function TXMLPaymentTermsType_cac.Get_PaymentTermsDetailsURI: IXMLPaymentTermsDetailsURIType_cbc;
begin
  Result := ChildNodes['PaymentTermsDetailsURI'] as IXMLPaymentTermsDetailsURIType_cbc;
end;

function TXMLPaymentTermsType_cac.Get_PaymentDueDate: IXMLPaymentDueDateType_cbc;
begin
  Result := ChildNodes['PaymentDueDate'] as IXMLPaymentDueDateType_cbc;
end;

function TXMLPaymentTermsType_cac.Get_InstallmentDueDate: IXMLInstallmentDueDateType_cbc;
begin
  Result := ChildNodes['InstallmentDueDate'] as IXMLInstallmentDueDateType_cbc;
end;

function TXMLPaymentTermsType_cac.Get_InvoicingPartyReference: IXMLInvoicingPartyReferenceType_cbc;
begin
  Result := ChildNodes['InvoicingPartyReference'] as IXMLInvoicingPartyReferenceType_cbc;
end;

function TXMLPaymentTermsType_cac.Get_SettlementPeriod: IXMLPeriodType_cac;
begin
  Result := ChildNodes['SettlementPeriod'] as IXMLPeriodType_cac;
end;

function TXMLPaymentTermsType_cac.Get_PenaltyPeriod: IXMLPeriodType_cac;
begin
  Result := ChildNodes['PenaltyPeriod'] as IXMLPeriodType_cac;
end;

function TXMLPaymentTermsType_cac.Get_ExchangeRate: IXMLExchangeRateType_cac;
begin
  Result := ChildNodes['ExchangeRate'] as IXMLExchangeRateType_cac;
end;

function TXMLPaymentTermsType_cac.Get_ValidityPeriod: IXMLPeriodType_cac;
begin
  Result := ChildNodes['ValidityPeriod'] as IXMLPeriodType_cac;
end;

{ TXMLPaymentTermsType_cacList }

function TXMLPaymentTermsType_cacList.Add: IXMLPaymentTermsType_cac;
begin
  Result := AddItem(-1) as IXMLPaymentTermsType_cac;
end;

function TXMLPaymentTermsType_cacList.Insert(const Index: Integer): IXMLPaymentTermsType_cac;
begin
  Result := AddItem(Index) as IXMLPaymentTermsType_cac;
end;

function TXMLPaymentTermsType_cacList.Get_Item(const Index: Integer): IXMLPaymentTermsType_cac;
begin
  Result := List[Index] as IXMLPaymentTermsType_cac;
end;

{ TXMLPaymentMeansIDType_cbc }

{ TXMLPaymentMeansIDType_cbcList }

function TXMLPaymentMeansIDType_cbcList.Add: IXMLPaymentMeansIDType_cbc;
begin
  Result := AddItem(-1) as IXMLPaymentMeansIDType_cbc;
end;

function TXMLPaymentMeansIDType_cbcList.Insert(const Index: Integer): IXMLPaymentMeansIDType_cbc;
begin
  Result := AddItem(Index) as IXMLPaymentMeansIDType_cbc;
end;

function TXMLPaymentMeansIDType_cbcList.Get_Item(const Index: Integer): IXMLPaymentMeansIDType_cbc;
begin
  Result := List[Index] as IXMLPaymentMeansIDType_cbc;
end;

{ TXMLPrepaidPaymentReferenceIDType_cbc }

{ TXMLReferenceEventCodeType_cbc }

{ TXMLSettlementDiscountPercentType_cbc }

{ TXMLPenaltySurchargePercentType_cbc }

{ TXMLPaymentPercentType_cbc }

{ TXMLSettlementDiscountAmountType_cbc }

{ TXMLPenaltyAmountType_cbc }

{ TXMLPaymentTermsDetailsURIType_cbc }

{ TXMLInstallmentDueDateType_cbc }

{ TXMLInvoicingPartyReferenceType_cbc }

{ TXMLPriceExtensionType_cac }

procedure TXMLPriceExtensionType_cac.AfterConstruction;
begin
  RegisterChildNode('Amount', TXMLAmountType_cbc);
  RegisterChildNode('TaxTotal', TXMLTaxTotalType_cac);
  FTaxTotal := CreateCollection(TXMLTaxTotalType_cacList, IXMLTaxTotalType_cac, 'TaxTotal') as IXMLTaxTotalType_cacList;
  inherited;
end;

function TXMLPriceExtensionType_cac.Get_Amount: IXMLAmountType_cbc;
begin
  Result := ChildNodes['Amount'] as IXMLAmountType_cbc;
end;

function TXMLPriceExtensionType_cac.Get_TaxTotal: IXMLTaxTotalType_cacList;
begin
  Result := FTaxTotal;
end;

{ TXMLPickupType_cac }

procedure TXMLPickupType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('ActualPickupDate', TXMLActualPickupDateType_cbc);
  RegisterChildNode('ActualPickupTime', TXMLActualPickupTimeType_cbc);
  RegisterChildNode('EarliestPickupDate', TXMLEarliestPickupDateType_cbc);
  RegisterChildNode('EarliestPickupTime', TXMLEarliestPickupTimeType_cbc);
  RegisterChildNode('LatestPickupDate', TXMLLatestPickupDateType_cbc);
  RegisterChildNode('LatestPickupTime', TXMLLatestPickupTimeType_cbc);
  RegisterChildNode('PickupLocation', TXMLLocationType_cac);
  RegisterChildNode('PickupParty', TXMLPartyType_cac);
  inherited;
end;

function TXMLPickupType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLPickupType_cac.Get_ActualPickupDate: IXMLActualPickupDateType_cbc;
begin
  Result := ChildNodes['ActualPickupDate'] as IXMLActualPickupDateType_cbc;
end;

function TXMLPickupType_cac.Get_ActualPickupTime: IXMLActualPickupTimeType_cbc;
begin
  Result := ChildNodes['ActualPickupTime'] as IXMLActualPickupTimeType_cbc;
end;

function TXMLPickupType_cac.Get_EarliestPickupDate: IXMLEarliestPickupDateType_cbc;
begin
  Result := ChildNodes['EarliestPickupDate'] as IXMLEarliestPickupDateType_cbc;
end;

function TXMLPickupType_cac.Get_EarliestPickupTime: IXMLEarliestPickupTimeType_cbc;
begin
  Result := ChildNodes['EarliestPickupTime'] as IXMLEarliestPickupTimeType_cbc;
end;

function TXMLPickupType_cac.Get_LatestPickupDate: IXMLLatestPickupDateType_cbc;
begin
  Result := ChildNodes['LatestPickupDate'] as IXMLLatestPickupDateType_cbc;
end;

function TXMLPickupType_cac.Get_LatestPickupTime: IXMLLatestPickupTimeType_cbc;
begin
  Result := ChildNodes['LatestPickupTime'] as IXMLLatestPickupTimeType_cbc;
end;

function TXMLPickupType_cac.Get_PickupLocation: IXMLLocationType_cac;
begin
  Result := ChildNodes['PickupLocation'] as IXMLLocationType_cac;
end;

function TXMLPickupType_cac.Get_PickupParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['PickupParty'] as IXMLPartyType_cac;
end;

{ TXMLActualPickupDateType_cbc }

{ TXMLActualPickupTimeType_cbc }

{ TXMLEarliestPickupDateType_cbc }

{ TXMLEarliestPickupTimeType_cbc }

{ TXMLLatestPickupDateType_cbc }

{ TXMLLatestPickupTimeType_cbc }

{ TXMLReceiptLineType_cac }

procedure TXMLReceiptLineType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('UUID', TXMLUUIDType_cbc);
  RegisterChildNode('Note', TXMLNoteType_cbc);
  RegisterChildNode('ReceivedQuantity', TXMLReceivedQuantityType_cbc);
  RegisterChildNode('ShortQuantity', TXMLShortQuantityType_cbc);
  RegisterChildNode('ShortageActionCode', TXMLShortageActionCodeType_cbc);
  RegisterChildNode('RejectedQuantity', TXMLRejectedQuantityType_cbc);
  RegisterChildNode('RejectReasonCode', TXMLRejectReasonCodeType_cbc);
  RegisterChildNode('RejectReason', TXMLRejectReasonType_cbc);
  RegisterChildNode('RejectActionCode', TXMLRejectActionCodeType_cbc);
  RegisterChildNode('QuantityDiscrepancyCode', TXMLQuantityDiscrepancyCodeType_cbc);
  RegisterChildNode('OversupplyQuantity', TXMLOversupplyQuantityType_cbc);
  RegisterChildNode('ReceivedDate', TXMLReceivedDateType_cbc);
  RegisterChildNode('TimingComplaintCode', TXMLTimingComplaintCodeType_cbc);
  RegisterChildNode('TimingComplaint', TXMLTimingComplaintType_cbc);
  RegisterChildNode('OrderLineReference', TXMLOrderLineReferenceType_cac);
  RegisterChildNode('DespatchLineReference', TXMLLineReferenceType_cac);
  RegisterChildNode('DocumentReference', TXMLDocumentReferenceType_cac);
  RegisterChildNode('Item', TXMLItemType_cac);
  RegisterChildNode('Shipment', TXMLShipmentType_cac);
  FNote := CreateCollection(TXMLNoteType_cbcList, IXMLNoteType_cbc, 'Note') as IXMLNoteType_cbcList;
  FRejectReason := CreateCollection(TXMLRejectReasonType_cbcList, IXMLRejectReasonType_cbc, 'RejectReason') as IXMLRejectReasonType_cbcList;
  FDespatchLineReference := CreateCollection(TXMLLineReferenceType_cacList, IXMLLineReferenceType_cac, 'DespatchLineReference') as IXMLLineReferenceType_cacList;
  FDocumentReference := CreateCollection(TXMLDocumentReferenceType_cacList, IXMLDocumentReferenceType_cac, 'DocumentReference') as IXMLDocumentReferenceType_cacList;
  FItem := CreateCollection(TXMLItemType_cacList, IXMLItemType_cac, 'Item') as IXMLItemType_cacList;
  FShipment := CreateCollection(TXMLShipmentType_cacList, IXMLShipmentType_cac, 'Shipment') as IXMLShipmentType_cacList;
  inherited;
end;

function TXMLReceiptLineType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLReceiptLineType_cac.Get_UUID: IXMLUUIDType_cbc;
begin
  Result := ChildNodes['UUID'] as IXMLUUIDType_cbc;
end;

function TXMLReceiptLineType_cac.Get_Note: IXMLNoteType_cbcList;
begin
  Result := FNote;
end;

function TXMLReceiptLineType_cac.Get_ReceivedQuantity: IXMLReceivedQuantityType_cbc;
begin
  Result := ChildNodes['ReceivedQuantity'] as IXMLReceivedQuantityType_cbc;
end;

function TXMLReceiptLineType_cac.Get_ShortQuantity: IXMLShortQuantityType_cbc;
begin
  Result := ChildNodes['ShortQuantity'] as IXMLShortQuantityType_cbc;
end;

function TXMLReceiptLineType_cac.Get_ShortageActionCode: IXMLShortageActionCodeType_cbc;
begin
  Result := ChildNodes['ShortageActionCode'] as IXMLShortageActionCodeType_cbc;
end;

function TXMLReceiptLineType_cac.Get_RejectedQuantity: IXMLRejectedQuantityType_cbc;
begin
  Result := ChildNodes['RejectedQuantity'] as IXMLRejectedQuantityType_cbc;
end;

function TXMLReceiptLineType_cac.Get_RejectReasonCode: IXMLRejectReasonCodeType_cbc;
begin
  Result := ChildNodes['RejectReasonCode'] as IXMLRejectReasonCodeType_cbc;
end;

function TXMLReceiptLineType_cac.Get_RejectReason: IXMLRejectReasonType_cbcList;
begin
  Result := FRejectReason;
end;

function TXMLReceiptLineType_cac.Get_RejectActionCode: IXMLRejectActionCodeType_cbc;
begin
  Result := ChildNodes['RejectActionCode'] as IXMLRejectActionCodeType_cbc;
end;

function TXMLReceiptLineType_cac.Get_QuantityDiscrepancyCode: IXMLQuantityDiscrepancyCodeType_cbc;
begin
  Result := ChildNodes['QuantityDiscrepancyCode'] as IXMLQuantityDiscrepancyCodeType_cbc;
end;

function TXMLReceiptLineType_cac.Get_OversupplyQuantity: IXMLOversupplyQuantityType_cbc;
begin
  Result := ChildNodes['OversupplyQuantity'] as IXMLOversupplyQuantityType_cbc;
end;

function TXMLReceiptLineType_cac.Get_ReceivedDate: IXMLReceivedDateType_cbc;
begin
  Result := ChildNodes['ReceivedDate'] as IXMLReceivedDateType_cbc;
end;

function TXMLReceiptLineType_cac.Get_TimingComplaintCode: IXMLTimingComplaintCodeType_cbc;
begin
  Result := ChildNodes['TimingComplaintCode'] as IXMLTimingComplaintCodeType_cbc;
end;

function TXMLReceiptLineType_cac.Get_TimingComplaint: IXMLTimingComplaintType_cbc;
begin
  Result := ChildNodes['TimingComplaint'] as IXMLTimingComplaintType_cbc;
end;

function TXMLReceiptLineType_cac.Get_OrderLineReference: IXMLOrderLineReferenceType_cac;
begin
  Result := ChildNodes['OrderLineReference'] as IXMLOrderLineReferenceType_cac;
end;

function TXMLReceiptLineType_cac.Get_DespatchLineReference: IXMLLineReferenceType_cacList;
begin
  Result := FDespatchLineReference;
end;

function TXMLReceiptLineType_cac.Get_DocumentReference: IXMLDocumentReferenceType_cacList;
begin
  Result := FDocumentReference;
end;

function TXMLReceiptLineType_cac.Get_Item: IXMLItemType_cacList;
begin
  Result := FItem;
end;

function TXMLReceiptLineType_cac.Get_Shipment: IXMLShipmentType_cacList;
begin
  Result := FShipment;
end;

{ TXMLReceiptLineType_cacList }

function TXMLReceiptLineType_cacList.Add: IXMLReceiptLineType_cac;
begin
  Result := AddItem(-1) as IXMLReceiptLineType_cac;
end;

function TXMLReceiptLineType_cacList.Insert(const Index: Integer): IXMLReceiptLineType_cac;
begin
  Result := AddItem(Index) as IXMLReceiptLineType_cac;
end;

function TXMLReceiptLineType_cacList.Get_Item(const Index: Integer): IXMLReceiptLineType_cac;
begin
  Result := List[Index] as IXMLReceiptLineType_cac;
end;

{ TXMLReceivedQuantityType_cbc }

{ TXMLShortQuantityType_cbc }

{ TXMLShortageActionCodeType_cbc }

{ TXMLRejectedQuantityType_cbc }

{ TXMLRejectReasonCodeType_cbc }

{ TXMLRejectReasonType_cbc }

{ TXMLRejectReasonType_cbcList }

function TXMLRejectReasonType_cbcList.Add: IXMLRejectReasonType_cbc;
begin
  Result := AddItem(-1) as IXMLRejectReasonType_cbc;
end;

function TXMLRejectReasonType_cbcList.Insert(const Index: Integer): IXMLRejectReasonType_cbc;
begin
  Result := AddItem(Index) as IXMLRejectReasonType_cbc;
end;

function TXMLRejectReasonType_cbcList.Get_Item(const Index: Integer): IXMLRejectReasonType_cbc;
begin
  Result := List[Index] as IXMLRejectReasonType_cbc;
end;

{ TXMLRejectActionCodeType_cbc }

{ TXMLQuantityDiscrepancyCodeType_cbc }

{ TXMLReceivedDateType_cbc }

{ TXMLTimingComplaintCodeType_cbc }

{ TXMLTimingComplaintType_cbc }

{ TXMLShipmentStageType_cac }

procedure TXMLShipmentStageType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('TransportModeCode', TXMLTransportModeCodeType_cbc);
  RegisterChildNode('TransportMeansTypeCode', TXMLTransportMeansTypeCodeType_cbc);
  RegisterChildNode('TransitDirectionCode', TXMLTransitDirectionCodeType_cbc);
  RegisterChildNode('PreCarriageIndicator', TXMLPreCarriageIndicatorType_cbc);
  RegisterChildNode('OnCarriageIndicator', TXMLOnCarriageIndicatorType_cbc);
  RegisterChildNode('EstimatedDeliveryDate', TXMLEstimatedDeliveryDateType_cbc);
  RegisterChildNode('EstimatedDeliveryTime', TXMLEstimatedDeliveryTimeType_cbc);
  RegisterChildNode('RequiredDeliveryDate', TXMLRequiredDeliveryDateType_cbc);
  RegisterChildNode('RequiredDeliveryTime', TXMLRequiredDeliveryTimeType_cbc);
  RegisterChildNode('LoadingSequenceID', TXMLLoadingSequenceIDType_cbc);
  RegisterChildNode('SuccessiveSequenceID', TXMLSuccessiveSequenceIDType_cbc);
  RegisterChildNode('Instructions', TXMLInstructionsType_cbc);
  RegisterChildNode('DemurrageInstructions', TXMLDemurrageInstructionsType_cbc);
  RegisterChildNode('CrewQuantity', TXMLCrewQuantityType_cbc);
  RegisterChildNode('PassengerQuantity', TXMLPassengerQuantityType_cbc);
  RegisterChildNode('TransitPeriod', TXMLPeriodType_cac);
  RegisterChildNode('CarrierParty', TXMLPartyType_cac);
  RegisterChildNode('TransportMeans', TXMLTransportMeansType_cac);
  RegisterChildNode('LoadingPortLocation', TXMLLocationType_cac);
  RegisterChildNode('UnloadingPortLocation', TXMLLocationType_cac);
  RegisterChildNode('TransshipPortLocation', TXMLLocationType_cac);
  RegisterChildNode('LoadingTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('ExaminationTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('AvailabilityTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('ExportationTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('DischargeTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('WarehousingTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('TakeoverTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('OptionalTakeoverTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('DropoffTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('ActualPickupTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('DeliveryTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('ReceiptTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('StorageTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('AcceptanceTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('TerminalOperatorParty', TXMLPartyType_cac);
  RegisterChildNode('CustomsAgentParty', TXMLPartyType_cac);
  RegisterChildNode('EstimatedTransitPeriod', TXMLPeriodType_cac);
  RegisterChildNode('FreightAllowanceCharge', TXMLAllowanceChargeType_cac);
  RegisterChildNode('FreightChargeLocation', TXMLLocationType_cac);
  RegisterChildNode('DetentionTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('RequestedDepartureTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('RequestedArrivalTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('RequestedWaypointTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('PlannedDepartureTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('PlannedArrivalTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('PlannedWaypointTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('ActualDepartureTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('ActualWaypointTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('ActualArrivalTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('TransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('EstimatedDepartureTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('EstimatedArrivalTransportEvent', TXMLTransportEventType_cac);
  RegisterChildNode('PassengerPerson', TXMLPersonType_cac);
  RegisterChildNode('DriverPerson', TXMLPersonType_cac);
  RegisterChildNode('ReportingPerson', TXMLPersonType_cac);
  RegisterChildNode('CrewMemberPerson', TXMLPersonType_cac);
  RegisterChildNode('SecurityOfficerPerson', TXMLPersonType_cac);
  RegisterChildNode('MasterPerson', TXMLPersonType_cac);
  RegisterChildNode('ShipsSurgeonPerson', TXMLPersonType_cac);
  FInstructions := CreateCollection(TXMLInstructionsType_cbcList, IXMLInstructionsType_cbc, 'Instructions') as IXMLInstructionsType_cbcList;
  FDemurrageInstructions := CreateCollection(TXMLDemurrageInstructionsType_cbcList, IXMLDemurrageInstructionsType_cbc, 'DemurrageInstructions') as IXMLDemurrageInstructionsType_cbcList;
  FCarrierParty := CreateCollection(TXMLPartyType_cacList, IXMLPartyType_cac, 'CarrierParty') as IXMLPartyType_cacList;
  FFreightAllowanceCharge := CreateCollection(TXMLAllowanceChargeType_cacList, IXMLAllowanceChargeType_cac, 'FreightAllowanceCharge') as IXMLAllowanceChargeType_cacList;
  FDetentionTransportEvent := CreateCollection(TXMLTransportEventType_cacList, IXMLTransportEventType_cac, 'DetentionTransportEvent') as IXMLTransportEventType_cacList;
  FRequestedWaypointTransportEvent := CreateCollection(TXMLTransportEventType_cacList, IXMLTransportEventType_cac, 'RequestedWaypointTransportEvent') as IXMLTransportEventType_cacList;
  FPlannedWaypointTransportEvent := CreateCollection(TXMLTransportEventType_cacList, IXMLTransportEventType_cac, 'PlannedWaypointTransportEvent') as IXMLTransportEventType_cacList;
  FTransportEvent := CreateCollection(TXMLTransportEventType_cacList, IXMLTransportEventType_cac, 'TransportEvent') as IXMLTransportEventType_cacList;
  FPassengerPerson := CreateCollection(TXMLPersonType_cacList, IXMLPersonType_cac, 'PassengerPerson') as IXMLPersonType_cacList;
  FDriverPerson := CreateCollection(TXMLPersonType_cacList, IXMLPersonType_cac, 'DriverPerson') as IXMLPersonType_cacList;
  FCrewMemberPerson := CreateCollection(TXMLPersonType_cacList, IXMLPersonType_cac, 'CrewMemberPerson') as IXMLPersonType_cacList;
  inherited;
end;

function TXMLShipmentStageType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLShipmentStageType_cac.Get_TransportModeCode: IXMLTransportModeCodeType_cbc;
begin
  Result := ChildNodes['TransportModeCode'] as IXMLTransportModeCodeType_cbc;
end;

function TXMLShipmentStageType_cac.Get_TransportMeansTypeCode: IXMLTransportMeansTypeCodeType_cbc;
begin
  Result := ChildNodes['TransportMeansTypeCode'] as IXMLTransportMeansTypeCodeType_cbc;
end;

function TXMLShipmentStageType_cac.Get_TransitDirectionCode: IXMLTransitDirectionCodeType_cbc;
begin
  Result := ChildNodes['TransitDirectionCode'] as IXMLTransitDirectionCodeType_cbc;
end;

function TXMLShipmentStageType_cac.Get_PreCarriageIndicator: IXMLPreCarriageIndicatorType_cbc;
begin
  Result := ChildNodes['PreCarriageIndicator'] as IXMLPreCarriageIndicatorType_cbc;
end;

function TXMLShipmentStageType_cac.Get_OnCarriageIndicator: IXMLOnCarriageIndicatorType_cbc;
begin
  Result := ChildNodes['OnCarriageIndicator'] as IXMLOnCarriageIndicatorType_cbc;
end;

function TXMLShipmentStageType_cac.Get_EstimatedDeliveryDate: IXMLEstimatedDeliveryDateType_cbc;
begin
  Result := ChildNodes['EstimatedDeliveryDate'] as IXMLEstimatedDeliveryDateType_cbc;
end;

function TXMLShipmentStageType_cac.Get_EstimatedDeliveryTime: IXMLEstimatedDeliveryTimeType_cbc;
begin
  Result := ChildNodes['EstimatedDeliveryTime'] as IXMLEstimatedDeliveryTimeType_cbc;
end;

function TXMLShipmentStageType_cac.Get_RequiredDeliveryDate: IXMLRequiredDeliveryDateType_cbc;
begin
  Result := ChildNodes['RequiredDeliveryDate'] as IXMLRequiredDeliveryDateType_cbc;
end;

function TXMLShipmentStageType_cac.Get_RequiredDeliveryTime: IXMLRequiredDeliveryTimeType_cbc;
begin
  Result := ChildNodes['RequiredDeliveryTime'] as IXMLRequiredDeliveryTimeType_cbc;
end;

function TXMLShipmentStageType_cac.Get_LoadingSequenceID: IXMLLoadingSequenceIDType_cbc;
begin
  Result := ChildNodes['LoadingSequenceID'] as IXMLLoadingSequenceIDType_cbc;
end;

function TXMLShipmentStageType_cac.Get_SuccessiveSequenceID: IXMLSuccessiveSequenceIDType_cbc;
begin
  Result := ChildNodes['SuccessiveSequenceID'] as IXMLSuccessiveSequenceIDType_cbc;
end;

function TXMLShipmentStageType_cac.Get_Instructions: IXMLInstructionsType_cbcList;
begin
  Result := FInstructions;
end;

function TXMLShipmentStageType_cac.Get_DemurrageInstructions: IXMLDemurrageInstructionsType_cbcList;
begin
  Result := FDemurrageInstructions;
end;

function TXMLShipmentStageType_cac.Get_CrewQuantity: IXMLCrewQuantityType_cbc;
begin
  Result := ChildNodes['CrewQuantity'] as IXMLCrewQuantityType_cbc;
end;

function TXMLShipmentStageType_cac.Get_PassengerQuantity: IXMLPassengerQuantityType_cbc;
begin
  Result := ChildNodes['PassengerQuantity'] as IXMLPassengerQuantityType_cbc;
end;

function TXMLShipmentStageType_cac.Get_TransitPeriod: IXMLPeriodType_cac;
begin
  Result := ChildNodes['TransitPeriod'] as IXMLPeriodType_cac;
end;

function TXMLShipmentStageType_cac.Get_CarrierParty: IXMLPartyType_cacList;
begin
  Result := FCarrierParty;
end;

function TXMLShipmentStageType_cac.Get_TransportMeans: IXMLTransportMeansType_cac;
begin
  Result := ChildNodes['TransportMeans'] as IXMLTransportMeansType_cac;
end;

function TXMLShipmentStageType_cac.Get_LoadingPortLocation: IXMLLocationType_cac;
begin
  Result := ChildNodes['LoadingPortLocation'] as IXMLLocationType_cac;
end;

function TXMLShipmentStageType_cac.Get_UnloadingPortLocation: IXMLLocationType_cac;
begin
  Result := ChildNodes['UnloadingPortLocation'] as IXMLLocationType_cac;
end;

function TXMLShipmentStageType_cac.Get_TransshipPortLocation: IXMLLocationType_cac;
begin
  Result := ChildNodes['TransshipPortLocation'] as IXMLLocationType_cac;
end;

function TXMLShipmentStageType_cac.Get_LoadingTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['LoadingTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLShipmentStageType_cac.Get_ExaminationTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['ExaminationTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLShipmentStageType_cac.Get_AvailabilityTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['AvailabilityTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLShipmentStageType_cac.Get_ExportationTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['ExportationTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLShipmentStageType_cac.Get_DischargeTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['DischargeTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLShipmentStageType_cac.Get_WarehousingTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['WarehousingTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLShipmentStageType_cac.Get_TakeoverTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['TakeoverTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLShipmentStageType_cac.Get_OptionalTakeoverTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['OptionalTakeoverTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLShipmentStageType_cac.Get_DropoffTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['DropoffTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLShipmentStageType_cac.Get_ActualPickupTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['ActualPickupTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLShipmentStageType_cac.Get_DeliveryTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['DeliveryTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLShipmentStageType_cac.Get_ReceiptTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['ReceiptTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLShipmentStageType_cac.Get_StorageTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['StorageTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLShipmentStageType_cac.Get_AcceptanceTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['AcceptanceTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLShipmentStageType_cac.Get_TerminalOperatorParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['TerminalOperatorParty'] as IXMLPartyType_cac;
end;

function TXMLShipmentStageType_cac.Get_CustomsAgentParty: IXMLPartyType_cac;
begin
  Result := ChildNodes['CustomsAgentParty'] as IXMLPartyType_cac;
end;

function TXMLShipmentStageType_cac.Get_EstimatedTransitPeriod: IXMLPeriodType_cac;
begin
  Result := ChildNodes['EstimatedTransitPeriod'] as IXMLPeriodType_cac;
end;

function TXMLShipmentStageType_cac.Get_FreightAllowanceCharge: IXMLAllowanceChargeType_cacList;
begin
  Result := FFreightAllowanceCharge;
end;

function TXMLShipmentStageType_cac.Get_FreightChargeLocation: IXMLLocationType_cac;
begin
  Result := ChildNodes['FreightChargeLocation'] as IXMLLocationType_cac;
end;

function TXMLShipmentStageType_cac.Get_DetentionTransportEvent: IXMLTransportEventType_cacList;
begin
  Result := FDetentionTransportEvent;
end;

function TXMLShipmentStageType_cac.Get_RequestedDepartureTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['RequestedDepartureTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLShipmentStageType_cac.Get_RequestedArrivalTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['RequestedArrivalTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLShipmentStageType_cac.Get_RequestedWaypointTransportEvent: IXMLTransportEventType_cacList;
begin
  Result := FRequestedWaypointTransportEvent;
end;

function TXMLShipmentStageType_cac.Get_PlannedDepartureTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['PlannedDepartureTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLShipmentStageType_cac.Get_PlannedArrivalTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['PlannedArrivalTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLShipmentStageType_cac.Get_PlannedWaypointTransportEvent: IXMLTransportEventType_cacList;
begin
  Result := FPlannedWaypointTransportEvent;
end;

function TXMLShipmentStageType_cac.Get_ActualDepartureTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['ActualDepartureTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLShipmentStageType_cac.Get_ActualWaypointTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['ActualWaypointTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLShipmentStageType_cac.Get_ActualArrivalTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['ActualArrivalTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLShipmentStageType_cac.Get_TransportEvent: IXMLTransportEventType_cacList;
begin
  Result := FTransportEvent;
end;

function TXMLShipmentStageType_cac.Get_EstimatedDepartureTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['EstimatedDepartureTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLShipmentStageType_cac.Get_EstimatedArrivalTransportEvent: IXMLTransportEventType_cac;
begin
  Result := ChildNodes['EstimatedArrivalTransportEvent'] as IXMLTransportEventType_cac;
end;

function TXMLShipmentStageType_cac.Get_PassengerPerson: IXMLPersonType_cacList;
begin
  Result := FPassengerPerson;
end;

function TXMLShipmentStageType_cac.Get_DriverPerson: IXMLPersonType_cacList;
begin
  Result := FDriverPerson;
end;

function TXMLShipmentStageType_cac.Get_ReportingPerson: IXMLPersonType_cac;
begin
  Result := ChildNodes['ReportingPerson'] as IXMLPersonType_cac;
end;

function TXMLShipmentStageType_cac.Get_CrewMemberPerson: IXMLPersonType_cacList;
begin
  Result := FCrewMemberPerson;
end;

function TXMLShipmentStageType_cac.Get_SecurityOfficerPerson: IXMLPersonType_cac;
begin
  Result := ChildNodes['SecurityOfficerPerson'] as IXMLPersonType_cac;
end;

function TXMLShipmentStageType_cac.Get_MasterPerson: IXMLPersonType_cac;
begin
  Result := ChildNodes['MasterPerson'] as IXMLPersonType_cac;
end;

function TXMLShipmentStageType_cac.Get_ShipsSurgeonPerson: IXMLPersonType_cac;
begin
  Result := ChildNodes['ShipsSurgeonPerson'] as IXMLPersonType_cac;
end;

{ TXMLShipmentStageType_cacList }

function TXMLShipmentStageType_cacList.Add: IXMLShipmentStageType_cac;
begin
  Result := AddItem(-1) as IXMLShipmentStageType_cac;
end;

function TXMLShipmentStageType_cacList.Insert(const Index: Integer): IXMLShipmentStageType_cac;
begin
  Result := AddItem(Index) as IXMLShipmentStageType_cac;
end;

function TXMLShipmentStageType_cacList.Get_Item(const Index: Integer): IXMLShipmentStageType_cac;
begin
  Result := List[Index] as IXMLShipmentStageType_cac;
end;

{ TXMLTransportModeCodeType_cbc }

{ TXMLTransitDirectionCodeType_cbc }

{ TXMLPreCarriageIndicatorType_cbc }

{ TXMLOnCarriageIndicatorType_cbc }

{ TXMLEstimatedDeliveryDateType_cbc }

{ TXMLEstimatedDeliveryTimeType_cbc }

{ TXMLRequiredDeliveryDateType_cbc }

{ TXMLRequiredDeliveryTimeType_cbc }

{ TXMLSuccessiveSequenceIDType_cbc }

{ TXMLDemurrageInstructionsType_cbc }

{ TXMLDemurrageInstructionsType_cbcList }

function TXMLDemurrageInstructionsType_cbcList.Add: IXMLDemurrageInstructionsType_cbc;
begin
  Result := AddItem(-1) as IXMLDemurrageInstructionsType_cbc;
end;

function TXMLDemurrageInstructionsType_cbcList.Insert(const Index: Integer): IXMLDemurrageInstructionsType_cbc;
begin
  Result := AddItem(Index) as IXMLDemurrageInstructionsType_cbc;
end;

function TXMLDemurrageInstructionsType_cbcList.Get_Item(const Index: Integer): IXMLDemurrageInstructionsType_cbc;
begin
  Result := List[Index] as IXMLDemurrageInstructionsType_cbc;
end;

{ TXMLCrewQuantityType_cbc }

{ TXMLPassengerQuantityType_cbc }

{ TXMLEnvironmentalEmissionType_cac }

procedure TXMLEnvironmentalEmissionType_cac.AfterConstruction;
begin
  RegisterChildNode('EnvironmentalEmissionTypeCode', TXMLEnvironmentalEmissionTypeCodeType_cbc);
  RegisterChildNode('ValueMeasure', TXMLValueMeasureType_cbc);
  RegisterChildNode('Description', TXMLDescriptionType_cbc);
  RegisterChildNode('EmissionCalculationMethod', TXMLEmissionCalculationMethodType_cac);
  FDescription := CreateCollection(TXMLDescriptionType_cbcList, IXMLDescriptionType_cbc, 'Description') as IXMLDescriptionType_cbcList;
  FEmissionCalculationMethod := CreateCollection(TXMLEmissionCalculationMethodType_cacList, IXMLEmissionCalculationMethodType_cac, 'EmissionCalculationMethod') as IXMLEmissionCalculationMethodType_cacList;
  inherited;
end;

function TXMLEnvironmentalEmissionType_cac.Get_EnvironmentalEmissionTypeCode: IXMLEnvironmentalEmissionTypeCodeType_cbc;
begin
  Result := ChildNodes['EnvironmentalEmissionTypeCode'] as IXMLEnvironmentalEmissionTypeCodeType_cbc;
end;

function TXMLEnvironmentalEmissionType_cac.Get_ValueMeasure: IXMLValueMeasureType_cbc;
begin
  Result := ChildNodes['ValueMeasure'] as IXMLValueMeasureType_cbc;
end;

function TXMLEnvironmentalEmissionType_cac.Get_Description: IXMLDescriptionType_cbcList;
begin
  Result := FDescription;
end;

function TXMLEnvironmentalEmissionType_cac.Get_EmissionCalculationMethod: IXMLEmissionCalculationMethodType_cacList;
begin
  Result := FEmissionCalculationMethod;
end;

{ TXMLEnvironmentalEmissionType_cacList }

function TXMLEnvironmentalEmissionType_cacList.Add: IXMLEnvironmentalEmissionType_cac;
begin
  Result := AddItem(-1) as IXMLEnvironmentalEmissionType_cac;
end;

function TXMLEnvironmentalEmissionType_cacList.Insert(const Index: Integer): IXMLEnvironmentalEmissionType_cac;
begin
  Result := AddItem(Index) as IXMLEnvironmentalEmissionType_cac;
end;

function TXMLEnvironmentalEmissionType_cacList.Get_Item(const Index: Integer): IXMLEnvironmentalEmissionType_cac;
begin
  Result := List[Index] as IXMLEnvironmentalEmissionType_cac;
end;

{ TXMLEnvironmentalEmissionTypeCodeType_cbc }

{ TXMLValueMeasureType_cbc }

{ TXMLEmissionCalculationMethodType_cac }

procedure TXMLEmissionCalculationMethodType_cac.AfterConstruction;
begin
  RegisterChildNode('CalculationMethodCode', TXMLCalculationMethodCodeType_cbc);
  RegisterChildNode('FullnessIndicationCode', TXMLFullnessIndicationCodeType_cbc);
  RegisterChildNode('MeasurementFromLocation', TXMLLocationType_cac);
  RegisterChildNode('MeasurementToLocation', TXMLLocationType_cac);
  inherited;
end;

function TXMLEmissionCalculationMethodType_cac.Get_CalculationMethodCode: IXMLCalculationMethodCodeType_cbc;
begin
  Result := ChildNodes['CalculationMethodCode'] as IXMLCalculationMethodCodeType_cbc;
end;

function TXMLEmissionCalculationMethodType_cac.Get_FullnessIndicationCode: IXMLFullnessIndicationCodeType_cbc;
begin
  Result := ChildNodes['FullnessIndicationCode'] as IXMLFullnessIndicationCodeType_cbc;
end;

function TXMLEmissionCalculationMethodType_cac.Get_MeasurementFromLocation: IXMLLocationType_cac;
begin
  Result := ChildNodes['MeasurementFromLocation'] as IXMLLocationType_cac;
end;

function TXMLEmissionCalculationMethodType_cac.Get_MeasurementToLocation: IXMLLocationType_cac;
begin
  Result := ChildNodes['MeasurementToLocation'] as IXMLLocationType_cac;
end;

{ TXMLEmissionCalculationMethodType_cacList }

function TXMLEmissionCalculationMethodType_cacList.Add: IXMLEmissionCalculationMethodType_cac;
begin
  Result := AddItem(-1) as IXMLEmissionCalculationMethodType_cac;
end;

function TXMLEmissionCalculationMethodType_cacList.Insert(const Index: Integer): IXMLEmissionCalculationMethodType_cac;
begin
  Result := AddItem(Index) as IXMLEmissionCalculationMethodType_cac;
end;

function TXMLEmissionCalculationMethodType_cacList.Get_Item(const Index: Integer): IXMLEmissionCalculationMethodType_cac;
begin
  Result := List[Index] as IXMLEmissionCalculationMethodType_cac;
end;

{ TXMLCalculationMethodCodeType_cbc }

{ TXMLServiceFrequencyType_cac }

procedure TXMLServiceFrequencyType_cac.AfterConstruction;
begin
  RegisterChildNode('WeekDayCode', TXMLWeekDayCodeType_cbc);
  inherited;
end;

function TXMLServiceFrequencyType_cac.Get_WeekDayCode: IXMLWeekDayCodeType_cbc;
begin
  Result := ChildNodes['WeekDayCode'] as IXMLWeekDayCodeType_cbc;
end;

{ TXMLServiceFrequencyType_cacList }

function TXMLServiceFrequencyType_cacList.Add: IXMLServiceFrequencyType_cac;
begin
  Result := AddItem(-1) as IXMLServiceFrequencyType_cac;
end;

function TXMLServiceFrequencyType_cacList.Insert(const Index: Integer): IXMLServiceFrequencyType_cac;
begin
  Result := AddItem(Index) as IXMLServiceFrequencyType_cac;
end;

function TXMLServiceFrequencyType_cacList.Get_Item(const Index: Integer): IXMLServiceFrequencyType_cac;
begin
  Result := List[Index] as IXMLServiceFrequencyType_cac;
end;

{ TXMLWeekDayCodeType_cbc }

{ TXMLPaymentType_cac }

procedure TXMLPaymentType_cac.AfterConstruction;
begin
  RegisterChildNode('ID', TXMLIDType_cbc);
  RegisterChildNode('PaidAmount', TXMLPaidAmountType_cbc);
  RegisterChildNode('ReceivedDate', TXMLReceivedDateType_cbc);
  RegisterChildNode('PaidDate', TXMLPaidDateType_cbc);
  RegisterChildNode('PaidTime', TXMLPaidTimeType_cbc);
  RegisterChildNode('InstructionID', TXMLInstructionIDType_cbc);
  inherited;
end;

function TXMLPaymentType_cac.Get_ID: IXMLIDType_cbc;
begin
  Result := ChildNodes['ID'] as IXMLIDType_cbc;
end;

function TXMLPaymentType_cac.Get_PaidAmount: IXMLPaidAmountType_cbc;
begin
  Result := ChildNodes['PaidAmount'] as IXMLPaidAmountType_cbc;
end;

function TXMLPaymentType_cac.Get_ReceivedDate: IXMLReceivedDateType_cbc;
begin
  Result := ChildNodes['ReceivedDate'] as IXMLReceivedDateType_cbc;
end;

function TXMLPaymentType_cac.Get_PaidDate: IXMLPaidDateType_cbc;
begin
  Result := ChildNodes['PaidDate'] as IXMLPaidDateType_cbc;
end;

function TXMLPaymentType_cac.Get_PaidTime: IXMLPaidTimeType_cbc;
begin
  Result := ChildNodes['PaidTime'] as IXMLPaidTimeType_cbc;
end;

function TXMLPaymentType_cac.Get_InstructionID: IXMLInstructionIDType_cbc;
begin
  Result := ChildNodes['InstructionID'] as IXMLInstructionIDType_cbc;
end;

{ TXMLPaymentType_cacList }

function TXMLPaymentType_cacList.Add: IXMLPaymentType_cac;
begin
  Result := AddItem(-1) as IXMLPaymentType_cac;
end;

function TXMLPaymentType_cacList.Insert(const Index: Integer): IXMLPaymentType_cac;
begin
  Result := AddItem(Index) as IXMLPaymentType_cac;
end;

function TXMLPaymentType_cacList.Get_Item(const Index: Integer): IXMLPaymentType_cac;
begin
  Result := List[Index] as IXMLPaymentType_cac;
end;

{ TXMLPaidAmountType_cbc }

{ TXMLPaidDateType_cbc }

{ TXMLPaidTimeType_cbc }

{ TXMLMonetaryTotalType_cac }

procedure TXMLMonetaryTotalType_cac.AfterConstruction;
begin
  RegisterChildNode('LineExtensionAmount', TXMLLineExtensionAmountType_cbc);
  RegisterChildNode('TaxExclusiveAmount', TXMLTaxExclusiveAmountType_cbc);
  RegisterChildNode('TaxInclusiveAmount', TXMLTaxInclusiveAmountType_cbc);
  RegisterChildNode('AllowanceTotalAmount', TXMLAllowanceTotalAmountType_cbc);
  RegisterChildNode('ChargeTotalAmount', TXMLChargeTotalAmountType_cbc);
  RegisterChildNode('PrepaidAmount', TXMLPrepaidAmountType_cbc);
  RegisterChildNode('PayableRoundingAmount', TXMLPayableRoundingAmountType_cbc);
  RegisterChildNode('PayableAmount', TXMLPayableAmountType_cbc);
  RegisterChildNode('PayableAlternativeAmount', TXMLPayableAlternativeAmountType_cbc);
  inherited;
end;

function TXMLMonetaryTotalType_cac.Get_LineExtensionAmount: IXMLLineExtensionAmountType_cbc;
begin
  Result := ChildNodes['LineExtensionAmount'] as IXMLLineExtensionAmountType_cbc;
end;

function TXMLMonetaryTotalType_cac.Get_TaxExclusiveAmount: IXMLTaxExclusiveAmountType_cbc;
begin
  Result := ChildNodes['TaxExclusiveAmount'] as IXMLTaxExclusiveAmountType_cbc;
end;

function TXMLMonetaryTotalType_cac.Get_TaxInclusiveAmount: IXMLTaxInclusiveAmountType_cbc;
begin
  Result := ChildNodes['TaxInclusiveAmount'] as IXMLTaxInclusiveAmountType_cbc;
end;

function TXMLMonetaryTotalType_cac.Get_AllowanceTotalAmount: IXMLAllowanceTotalAmountType_cbc;
begin
  Result := ChildNodes['AllowanceTotalAmount'] as IXMLAllowanceTotalAmountType_cbc;
end;

function TXMLMonetaryTotalType_cac.Get_ChargeTotalAmount: IXMLChargeTotalAmountType_cbc;
begin
  Result := ChildNodes['ChargeTotalAmount'] as IXMLChargeTotalAmountType_cbc;
end;

function TXMLMonetaryTotalType_cac.Get_PrepaidAmount: IXMLPrepaidAmountType_cbc;
begin
  Result := ChildNodes['PrepaidAmount'] as IXMLPrepaidAmountType_cbc;
end;

function TXMLMonetaryTotalType_cac.Get_PayableRoundingAmount: IXMLPayableRoundingAmountType_cbc;
begin
  Result := ChildNodes['PayableRoundingAmount'] as IXMLPayableRoundingAmountType_cbc;
end;

function TXMLMonetaryTotalType_cac.Get_PayableAmount: IXMLPayableAmountType_cbc;
begin
  Result := ChildNodes['PayableAmount'] as IXMLPayableAmountType_cbc;
end;

function TXMLMonetaryTotalType_cac.Get_PayableAlternativeAmount: IXMLPayableAlternativeAmountType_cbc;
begin
  Result := ChildNodes['PayableAlternativeAmount'] as IXMLPayableAlternativeAmountType_cbc;
end;

{ TXMLTaxExclusiveAmountType_cbc }

{ TXMLTaxInclusiveAmountType_cbc }

{ TXMLAllowanceTotalAmountType_cbc }

{ TXMLChargeTotalAmountType_cbc }

{ TXMLPrepaidAmountType_cbc }

{ TXMLPayableRoundingAmountType_cbc }

{ TXMLPayableAmountType_cbc }

{ TXMLPayableAlternativeAmountType_cbc }

end.